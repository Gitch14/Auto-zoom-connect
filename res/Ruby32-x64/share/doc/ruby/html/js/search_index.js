var search_data = {"index":{"searchIndex":["acl","aclentry","acllist","argf","abbrev","addrinfo","argumenterror","array","base64","basicobject","basicsocket","benchmark","tms","bigdecimal","bigmath","binding","bundler","cgi","cookie","escape","html3","html4","html4fr","html4tr","html5","htmlextension","invalidencoding","queryextension","session","filestore","memorystore","nullstore","pstore","util","csv","deletesuffix","fieldsconverter","inputrecordseparator","malformedcsverror","matchp","parser","inputsscanner","invalidencoding","scanner","unexpectederror","row","table","writer","class","closedqueueerror","comparable","complex","continuation","coreextensions","tcpsocketext","initializer","coverage","drb","drbarray","drbbadscheme","drbbaduri","drbconn","drbconnerror","drberror","drbidconv","drbidconv","drbmessage","drbobject","drbobject","drbobservable","drbprotocol","drbremoteerror","drbsslsocket","sslconfig","drbserver","invokemethod18mixin","drbservernotfound","drbtcpsocket","drbunixsocket","drbundumped","drbundumped","drbunknown","drbunknownerror","extserv","extservmanager","gw","gwidconv","threadobject","timeridconv","timerholder2","invalidindexerror","weakidconv","weakset","data","date","error","datetime","delegator","didyoumean","classnamechecker","classname","correctable","formatter","jaro","jarowinkler","keyerrorchecker","methodnamechecker","nameerrorcheckers","nullchecker","patternkeynamechecker","plainformatter","requirepathchecker","spellchecker","treespellchecker","variablenamechecker","verboseformatter","digest","base","class","instance","md5","rmd160","sha1","sha2","dir","env","eoferror","erb","defmethod","escape","util","encoding","compatibilityerror","converter","converternotfounderror","invalidbytesequenceerror","undefinedconversionerror","encodingerror","english","enumerable","enumerator","arithmeticsequence","chain","generator","lazy","producer","product","yielder","errno","errorhighlight","coreext","defaultformatter","spotter","nonascii","etc","group","passwd","exception","falseclass","fcntl","fiber","pool","scheduler","fibererror","fiddle","basictypes","cparser","cstruct","cstructbuilder","cstructentity","cunion","cunionentity","clearedreferenceerror","closure","blockcaller","compositehandler","dlerror","error","function","handle","importer","pinned","pointer","structarray","types","win32types","file","constants","stat","filetest","fileutils","dryrun","nowrite","streamutils_","verbose","find","float","floatdomainerror","forwardable","frozenerror","gc","profiler","gem","availableset","basicspecification","bundlerversionfinder","command","commandlineerror","commandmanager","commands","buildcommand","certcommand","checkcommand","cleanupcommand","contentscommand","dependencycommand","environmentcommand","execcommand","fetchcommand","generateindexcommand","helpcommand","infocommand","installcommand","listcommand","lockcommand","mirrorcommand","opencommand","outdatedcommand","ownercommand","pristinecommand","pushcommand","querycommand","rdoccommand","searchcommand","servercommand","setupcommand","makedirs","signincommand","signoutcommand","sourcescommand","specificationcommand","stalecommand","uninstallcommand","unpackcommand","updatecommand","whichcommand","yankcommand","configfile","conflicterror","consoleui","defaultuserinteraction","dependency","dependencyerror","dependencyinstaller","dependencylist","dependencyremovalexception","dependencyresolutionerror","deprecate","doctor","documenterror","endofyamlexception","errorreason","exception","ext","builderror","builder","cargobuilder","dylibnotfounderror","linkflagconverter","cmakebuilder","configurebuilder","extconfbuilder","rakebuilder","filepermissionerror","formatexception","gemnotfoundexception","gemnotinhomeexception","gemrunner","gemcutterutilities","impossibledependencieserror","indexer","installerror","installupdateoptions","installer","fakepackage","installeruninstallerutils","invalidspecificationexception","licenses","list","loaderror","localremoteoptions","missingspecerror","missingspecversionerror","mockgemui","inputeoferror","systemexitexception","tty","termerror","nametuple","noaliasyamltree","operationnotsupportederror","package","digestio","error","formaterror","nonseekableio","old","patherror","symlinkerror","tarheader","tarinvaliderror","tarreader","entry","unexpectedeof","tarwriter","boundedstream","fileoverflow","restrictedstream","toolongfilename","packagetask","pathsupport","platform","platformmismatch","queryutils","remoteerror","remotefetcher","fetcherror","unknownhosterror","remoteinstallationcancelled","remoteinstallationskipped","remotesourceexception","request","requestset","gemdependencyapi","lockfile","parseerror","parser","tokenizer","requirement","badrequirementerror","resolver","apiset","gemparser","apispecification","activationrequest","bestset","composedset","conflict","currentset","dependencyrequest","gitset","gitspecification","indexset","indexspecification","installedspecification","installerset","localspecification","lockset","lockspecification","molinillo","circulardependencyerror","delegates","resolutionstate","specificationprovider","dependencygraph","action","addedgenocircular","deleteedge","detachvertexnamed","log","tag","vertex","dependencystate","nosuchdependencyerror","possibilitystate","resolutionstate","resolver","resolution","conflict","possibilityset","unwinddetails","resolvererror","specificationprovider","ui","versionconflict","requirementlist","set","sourceset","specspecification","specification","stats","vendorset","vendorspecification","rubyversionmismatch","runtimerequirementnotmeterror","s3urisigner","configurationerror","instanceprofileerror","safeyaml","security","exception","policy","signer","trustdir","securityoption","silentui","nullio","source","git","installed","local","lock","specificfile","vendor","sourcefetchproblem","sourcelist","specfetcher","specificgemnotfoundexception","specification","specificationpolicy","streamui","silentdownloadreporter","silentprogressreporter","simpleprogressreporter","threadeddownloadreporter","verboseprogressreporter","stubspecification","systemexitexception","text","uninstallerror","uninstaller","unknowncommanderror","unknowncommandspellchecker","unsatisfiabledependencyerror","updatesuggestion","uri","uriformatter","userinteraction","util","validator","verificationerror","version","versionoption","getoptlong","ambiguousoption","error","invalidoption","missingargument","needlessargument","hash","io","buffer","accesserror","allocationerror","invalidatederror","lockederror","maskerror","eagainwaitreadable","eagainwaitwritable","einprogresswaitreadable","einprogresswaitwritable","ewouldblockwaitreadable","ewouldblockwaitwritable","timeouterror","waitreadable","waitwritable","generic_readable","generic_writable","ioerror","ipaddr","addressfamilyerror","error","invalidaddresserror","invalidprefixerror","ipsocket","irb","abort","cantchangebinding","cantreturntonormalmode","canvas","color","symbolstate","colorprinter","context","contextextender","extendcommand","backtrace","break","catch","changeworkspace","commandargumenterror","continue","currentworkingworkspace","debug","debugger__","skippathhelperforirb","debugcommand","delete","edit","finish","foreground","fork","help","info","irbcommand","irbinfo","jobs","kill","load","loadercommand","ls","output","measure","multiirbcommand","next","nop","popworkspace","pushworkspace","require","showcmds","showsource","source","step","whereami","workspaces","extendcommandbundle","fileinputmethod","frame","frameoverflow","frameunderflow","history","illegalparameter","illegalrcgenerator","inputmethod","inspector","irb","irbalreadydead","irbloader","irbswitchedtocurrentthread","jobmanager","loadabort","locale","magicfile","methodextender","nosuchjob","notimplementederror","notifier","abstractnotifier","compositenotifier","errundefinednotifier","errunrecognizedlevel","levelednotifier","nomsgnotifier","outputmethod","notimplementederror","readlineinputmethod","reidlineinputmethod","relineinputmethod","rubymodel","stdioinputmethod","stdiooutputmethod","undefinedpromptmode","unrecognizedswitch","vec","workspace","indexerror","integer","interrupt","json","circulardatastructure","ext","generator","state","parser","generatorerror","genericobject","jsonerror","missingunicodesupport","nestingerror","parsererror","jacobian","kconv","kernel","keyerror","lusolve","loaderror","localjumperror","logger","formatter","logdevice","period","severity","makemakefile","logging","rbconfig","marshal","matchdata","math","domainerror","method","module","monitor","monitormixin","conditionvariable","mutex_m","nkf","nameerror","net","http","copy","delete","get","head","lock","mkcol","move","options","patch","post","propfind","proppatch","put","trace","unlock","httpaccepted","httpalreadyreported","httpbadgateway","httpbadrequest","httpbadresponse","httpclienterror","httpclientexception","httpconflict","httpcontinue","httpcreated","httpearlyhints","httperror","httpexceptions","httpexpectationfailed","httpfaileddependency","httpfatalerror","httpforbidden","httpfound","httpgatewaytimeout","httpgatewaytimeout","httpgenericrequest","httpgone","httpheader","httpheadersyntaxerror","httpimused","httpinformation","httpinsufficientstorage","httpinternalservererror","httplengthrequired","httplocked","httploopdetected","httpmethodnotallowed","httpmisdirectedrequest","httpmovedpermanently","httpmovedtemporarily","httpmultistatus","httpmultiplechoice","httpmultiplechoices","httpnetworkauthenticationrequired","httpnocontent","httpnonauthoritativeinformation","httpnotacceptable","httpnotextended","httpnotfound","httpnotimplemented","httpnotmodified","httpok","httppartialcontent","httppayloadtoolarge","httppaymentrequired","httppermanentredirect","httppreconditionfailed","httppreconditionrequired","httpprocessing","httpproxyauthenticationrequired","httprangenotsatisfiable","httpredirection","httprequest","httprequestentitytoolarge","httprequestheaderfieldstoolarge","httprequesttimeout","httprequesttimeout","httprequesturitoolarge","httprequesturitoolong","httprequestedrangenotsatisfiable","httpresetcontent","httpresponse","httpretriableerror","httpseeother","httpservererror","httpserviceunavailable","httpsuccess","httpswitchprotocol","httptemporaryredirect","httptoomanyrequests","httpuritoolong","httpunauthorized","httpunavailableforlegalreasons","httpunknownresponse","httpunprocessableentity","httpunsupportedmediatype","httpupgraderequired","httpuseproxy","httpvariantalsonegotiates","httpversionnotsupported","opentimeout","protoautherror","protocommanderror","protofatalerror","protoretriableerror","protoservererror","protosyntaxerror","protounknownerror","protocretryerror","protocolerror","readtimeout","writeadapter","writetimeout","newton","nilclass","nomatchingpatternerror","nomatchingpatternkeyerror","nomemoryerror","nomethoderror","notimplementederror","numeric","oleproperty","object","objectspace","internalobjectwrapper","weakmap","observable","open3","openssl","asn1","asn1data","asn1error","constructive","objectid","primitive","bn","bnerror","buffering","buffer","cipher","cipher","ciphererror","config","configerror","digest","digesterror","engine","engineerror","hmac","hmacerror","kdf","kdferror","marshal","classmethods","netscape","spki","spkierror","ocsp","basicresponse","certificateid","ocsperror","request","response","singleresponse","opensslerror","pkcs12","pkcs12error","pkcs5","pkcs7","pkcs7error","recipientinfo","signerinfo","pkey","dh","dherror","dsa","dsaerror","ec","group","error","point","error","ecerror","pkey","pkeyerror","rsa","rsaerror","random","randomerror","ssl","sslcontext","sslerror","sslerrorwaitreadable","sslerrorwaitwritable","sslserver","sslsocket","session","sessionerror","socketforwarder","timestamp","factory","request","response","timestamperror","tokeninfo","x509","attribute","attributeerror","crl","crlerror","certificate","certificateerror","extension","authorityinfoaccess","authoritykeyidentifier","crldistributionpoints","helpers","subjectkeyidentifier","extensionerror","extensionfactory","name","rfc2253dn","nameerror","request","requesterror","revoked","revokederror","store","storecontext","storeerror","openstruct","openuri","httperror","httpredirect","meta","openread","optionparser","ac","acceptables","ambiguousargument","ambiguousoption","arguable","completinghash","completion","invalidargument","invalidoption","list","missingargument","needlessargument","optionmap","parseerror","switch","noargument","optionalargument","placedargument","requiredargument","pp","ppmethods","pstore","error","pty","childexited","pathname","prettyprint","singleline","proc","process","gid","status","sys","tms","uid","psych","aliasesnotenabled","anchornotdefined","badalias","classloader","restricted","coder","config","disallowedclass","emitter","exception","handler","dumperoptions","handlers","recorder","json","stream","treebuilder","nodes","alias","document","mapping","node","scalar","sequence","stream","omap","parser","mark","scalarscanner","set","stream","streaming","classmethods","syntaxerror","treebuilder","visitors","depthfirst","emitter","jsontree","noaliasruby","restrictedyamltree","toruby","visitor","yamltree","rdoc","rdoc","alias","anonclass","anymethod","attr","classmodule","codeobject","comment","constant","context","crossreference","erbio","erbpartial","encoding","error","extend","generator","ghostmethod","i18n","include","markdown","memoentry","parseerror","ruleinfo","markup","markupreference","dummyclass","dummymodule","metamethod","methodattr","mixin","normalclass","normalmodule","options","parser","c","changelog","git","markdown","rd","ripperstatelex","innerstatelex","ruby","rubytools","simple","text","rd","rdoc","ri","error","require","rdoc","servlet","singleclass","stats","store","error","missingfileerror","task","text","tokenstream","tomdoc","toplevel","racc","accept","actiontable","compileerror","cparseparams","debugflags","error","goto","grammar","definitionenv","precedencedefinitionenv","grammarfileparser","result","grammarfilescanner","iset","item","locationpointer","logfilegenerator","ormark","parseerror","parser","parserclassgenerator","parserfilegenerator","params","prec","rrconflict","reduce","rule","srconflict","shift","sourcetext","state","statetransitiontable","statetransitiontablegenerator","states","sym","symboltable","useraction","ractor","closederror","error","isolationerror","movederror","movedobject","remoteerror","unsafeerror","rake","random","formatter","range","rangeerror","rational","readline","refinement","regexp","timeouterror","regexperror","reline","ansi","config","invalidinputrc","configencodingconversionerror","core","generalio","history","keyactor","base","emacs","vicommand","viinsert","keystroke","killring","ringbuffer","state","lineeditor","completionstate","dialog","dialogprocscope","terminfo","stringwithtiparm","terminfoerror","unicode","eastasianwidth","windows","keyeventrecord","win32api","resolv","resolv","dns","config","nxdomain","otherresolverror","decodeerror","encodeerror","name","query","requester","requesterror","resource","any","cname","domainname","generic","hinfo","in","a","aaaa","srv","wks","loc","minfo","mx","ns","ptr","soa","txt","hosts","ipv4","ipv6","loc","alt","coord","size","mdns","resolverror","resolvtimeout","sz","rinda","drbobjecttemplate","invalidhashtuplekey","notifytemplateentry","requestcancelederror","requestexpirederror","rindaerror","ringfinger","ringprovider","ringserver","simplerenewer","template","templateentry","tuple","tuplebag","tuplebin","tupleentry","tuplespace","tuplespaceproxy","waittemplateentry","ripper","filter","lexer","elem","state","rubylex","terminatelineinput","rubyvm","abstractsyntaxtree","node","instructionsequence","mjit","cpointer","bitfield","bool","immediate","pointer","struct","union","ctype","bitfield","bool","immediate","pointer","struct","union","shape","yjit","runtimeerror","sockssocket","scripterror","securerandom","securityerror","set","shellwords","signal","signalexception","simpledelegator","singleforwardable","singleton","socket","ancillarydata","constants","ifaddr","option","udpsource","socketerror","standarderror","stopiteration","string","stringio","stringscanner","error","struct","symbol","syntaxerror","syntaxsuggest","aroundblockscan","blockexpand","capturecodecontext","cleandocument","cli","codeblock","codefrontier","codeline","codesearch","displaycodewithlinenumbers","displayinvalidblocks","error","explainsyntax","leftrightlexcount","lexall","lexvalue","ministringio","parseblocksfromindentline","pathnamefrommessage","priorityengulfqueue","priorityqueue","rippererrors","unvisitedlines","syslog","constants","facility","level","logger","formatter","macros","option","systemcallerror","systemexit","systemstackerror","tcpserver","tcpsocket","tsort","cyclic","tempfile","thread","backtrace","location","conditionvariable","mutex","queue","sizedqueue","threaderror","threadgroup","time","timeout","error","request","tracepoint","trueclass","typeerror","udpsocket","unixserver","unixsocket","uri","badurierror","error","ftp","file","generic","http","https","invalidcomponenterror","invalidurierror","ldap","ldaps","mailto","parser","regexp","rfc2396_parser","rfc2396_regexp","pattern","schemes","ws","wss","unboundmethod","uncaughtthrowerror","unicodenormalize","win32ole","event","method","param","record","type","typelib","variant","variable","variant","win32olequeryinterfaceerror","win32oleruntimeerror","warning","weakref","referror","win32","registry","api","constants","error","kernel32","predefinedkey","sspi","api","identity","negotiateauth","sspiresult","securitybuffer","securityhandle","timestamp","xmp","stringinputmethod","yaml","dbm","store","zerodivisionerror","zlib","buferror","dataerror","deflate","error","gzipfile","crcerror","error","lengtherror","nofooter","gzipreader","gzipwriter","inprogresserror","inflate","memerror","needdict","streamend","streamerror","versionerror","zstream","fatal","!()","!()","!()","!=()","!=()","!=()","!~~()","=~()","=~()","=~()","=~()","=~()","=~()",">()",">()",">()",">()",">()",">()",">()",">=()",">=()",">=()",">=()",">=()",">=()",">=()",">>()",">>()",">>()",">>()",">>()",">>()",">>()","array()","bigdecimal()","csv()","closekey()","complex()","createkey()","currentcontext()","d()","delegateclass()","deletekey()","deletevalue()","digest()","digest()","digest()","e()","enumkey()","enumvalue()","float()","flushkey()","hash()","integer()","json()","jobmanager()","log_mask()","log_upto()","openkey()","pi()","pathname()","queryinfokey()","queryvalue()","rational()","setvalue()","string()","string()","uri()","uricallee__()","__dir__()","__drbref()","__drbref()","__drburi()","__drburi()","__evaluate__()","__exit__()","__getobj__()","__getobj__()","__id__()","__id__()","__method__()","__raise__()","__send__()","__send__()","__setobj__()","__setobj__()","_ac_arg_enable()","_add()","_added?()","_call_seq()","_check_ac_args()","_compute_expand()","_decode_uri_component()","_defmetasyntax()","_delayed_add()","_dump()","_dump()","_dump()","_dump()","_dump()","_dump()","_dump()","_encode_uri_component()","_enumerable_collect()","_enumerable_collect_concat()","_enumerable_drop()","_enumerable_drop_while()","_enumerable_filter()","_enumerable_filter_map()","_enumerable_find_all()","_enumerable_flat_map()","_enumerable_grep()","_enumerable_grep_v()","_enumerable_map()","_enumerable_reject()","_enumerable_select()","_enumerable_take()","_enumerable_take_while()","_enumerable_uniq()","_enumerable_with_index()","_enumerable_zip()","_execute()","_fork()","_getproperty()","_gets_noecho()","_httpdate()","_intern()","_invoke()","_ipv4_compat?()","_iso8601()","_jisx0301()","_load()","_load()","_load()","_load()","_load()","_load()","_native_parse()","_no_crlf_check()","_parse()","_path_to?()","_racc_do_parse_c()","_racc_do_parse_rb()","_racc_do_reduce()","_racc_evalact()","_racc_init_sysvars()","_racc_setup()","_racc_yyparse_c()","_racc_yyparse_rb()","_recursive_predecessors()","_recursive_successors()","_register()","_reverse()","_rfc2822()","_rfc3339()","_rfc822()","_segments()","_set_last_value()","_setproperty()","_sorted_requirements()","_split_segments()","_strptime()","_strptime()","_tilde_requirements()","_to_string()","_version()","_wrap()","_xmlschema()","`()","a()","abbrev()","abbrev()","abbrev()","abbreviate()","abort()","abort()","abort()","abort()","abort_on_exception()","abort_on_exception()","abort_on_exception=()","abort_on_exception=()","abs()","abs()","abs()","abs()","abs()","abs()","abs()","abs2()","abs2()","absolute()","absolute?()","absolute?()","absolute?()","absolute_path()","absolute_path()","absolute_path()","absolute_path?()","absolute_path?()","ac_arg_disable()","ac_arg_enable()","ac_arg_with()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept?()","accept_charset()","accept_charset=()","accept_loop()","accept_nonblock()","accept_nonblock()","accept_nonblock()","accept_nonblock()","accept_uri_http()","acos()","acosh()","act2actid()","action()","action_name()","action_name()","action_name()","action_name()","action_name()","action_out()","actions()","activate()","activate!()","activate_dependencies()","activate_new_spec()","activated()","activated?()","activated_gem_paths()","active?()","active_count()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add!()","add?()","add_git()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_always_install()","add_attribute()","add_attribute()","add_attribute()","add_bindir()","add_bulk_threshold_option()","add_c_enclosure()","add_c_variables()","add_cert()","add_certid()","add_certificate()","add_certificate()","add_checksums()","add_child_vertex()","add_class()","add_class()","add_class_or_module()","add_clear_sources_option()","add_comment()","add_common_option()","add_constant()","add_constant()","add_constant()","add_converter()","add_crl()","add_crl()","add_data()","add_default_key_binding()","add_default_key_binding_by_keymap()","add_dependency()","add_dependency_with_type()","add_development_dependency()","add_dialog_proc()","add_dialog_proc()","add_dictionary()","add_edge()","add_edge_no_circular()","add_edge_no_circular()","add_entry()","add_extend()","add_extension()","add_extension()","add_extension()","add_extra_args()","add_field()","add_file()","add_file()","add_file()","add_file()","add_file_digest()","add_file_signed()","add_file_simple()","add_generator()","add_html()","add_include()","add_include()","add_install_update_options()","add_key_option()","add_local()","add_local_remote_options()","add_log_header()","add_method()","add_method()","add_method()","add_module()","add_module()","add_module_alias()","add_module_by_normal_module()","add_nonce()","add_nonce()","add_observer()","add_oneshot_key_binding()","add_option()","add_otp_option()","add_owners()","add_parser_run_info()","add_path()","add_path()","add_platform()","add_platform_option()","add_prerelease_option()","add_protocol()","add_protocol()","add_proxy_option()","add_query_options()","add_recipient()","add_regexp_handling()","add_require()","add_revoked()","add_row()","add_rule()","add_rule_block()","add_runtime_dependency()","add_section()","add_security_option()","add_self_to_load_path()","add_signer()","add_source_gem()","add_source_option()","add_spec()","add_specific_extra_args()","add_start_rule()","add_status()","add_stress_to_class()","add_symlink()","add_to()","add_to_classes_or_modules()","add_to_load_path()","add_token()","add_token_listener()","add_tokens()","add_trace_func()","add_unconverted_fields()","add_update_sources_option()","add_user_code()","add_version_option()","add_vertex()","add_vertex()","add_word_pair()","added?()","addent()","additional_message()","addr()","addr()","addr()","addr()","addr_mask()","addr_port()","addrel()","address_resolve()","addsym()","adjust_headers()","adjust_last_keep()","adler()","adler32()","adler32_combine()","advise()","afamily()","after_index()","after_lines()","after_resolution()","ajd()","alert()","alert()","alert_error()","alert_error()","alert_warning()","alert_warning()","algorithm()","algorithm()","algorithm=()","alias()","alias()","alias()","alias?()","alias?()","alias_extension()","alias_method()","aliases()","alien()","alignment()","alive?()","alive?()","alive?()","alive?()","alive?()","alive?()","all()","all=()","all?()","all?()","all_classes()","all_classes_and_modules()","all_commands_info()","all_files()","all_modules()","all_names()","all_requirements()","all_specs()","all_symbols()","all_tokens()","allbits?()","allbits?()","allocate()","allocation_class_path()","allocation_generation()","allocation_method_id()","allocation_sourcefile()","allocation_sourceline()","allow_addr?()","allow_missing?()","allow_missing?()","allow_missing?()","allow_nan?()","allow_reentry()","allow_socket?()","alphanumeric()","alpn_protocol()","already_loaded?()","alt_name_or_x509_entry()","ambiguous_width()","amjd()","amount_constrained()","ancestor?()","ancestors()","ancestors()","ancestors()","ancestors()","ancestors()","and!()","angle()","angle()","angle()","announce_deletion_of()","any?()","any?()","any?()","any?()","any_content()","any_to_s()","anybits?()","anybits?()","api_key()","api_key_forbidden?()","api_keys()","app_cache()","app_config_path()","app_script_text()","append()","append()","append()","append_cflags()","append_features()","append_features()","append_field_value()","approximate_recommendation()","aref()","aref()","aref()","aref_prefix()","aref_prefix()","aref_prefix()","arg()","arg()","arg()","arglists()","args()","args()","args_directive()","argumentable?()","arguments()","argv()","argv0()","arity()","arity()","arity()","array()","array_attributes()","array_nl()","array_nl=()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","ascend()","ascii_compatible?()","ascii_only?()","ascii_only?()","asciicompat_encoding()","asctime()","asctime()","asin()","asinh()","ask()","ask()","ask()","ask_for_password()","ask_for_password()","ask_otp()","ask_yes_no()","ask_yes_no()","asn1_flag()","asn1_flag=()","asset()","assign_names()","assignment_expression?()","assoc()","assoc()","assoc()","at()","at()","at()","at_exit()","atan()","atan()","atan2()","atanh()","atime()","atime()","atime()","atime()","atom_symbol()","attach_correctable()","attached_object()","attempt_to_activate()","attempt_to_filter_existing_spec()","attr()","attr_accessor()","attr_reader()","attr_writer()","attribute_names()","attributes()","attributes()","attributes()","attributes=()","attributes=()","auth_data=()","auth_tag()","auth_tag=()","auth_tag_len=()","authenticated?()","author()","author=()","authority()","authority_key_identifier()","authors()","authors=()","auto_compact()","auto_compact=()","auto_indent()","auto_indent_proc=()","autoclose=()","autoclose?()","autoload()","autoload()","autoload?()","autoload?()","avail_in()","avail_out()","avail_out=()","available_specs()","b()","backtrace()","backtrace()","backtrace()","backtrace()","backtrace()","backtrace_locations()","backtrace_locations()","backtrace_locations()","backtracking!()","backward_char()","backward_delete_char()","backward_word()","banner()","base()","base()","base64()","base64_uri_escape()","base64digest()","base64digest()","base64digest()","base64digest()","base64digest!()","base_dir()","base_dir()","base_label()","base_label()","base_name()","basename()","basename()","bash_prolog_script()","basic()","basic_auth()","basic_encode()","basic_quote_characters()","basic_quote_characters=()","basic_quote_characters=()","basic_word_break_characters()","basic_word_break_characters=()","basic_word_break_characters=()","beep()","before()","before_index()","before_lines()","before_resolution()","before_running_rdoc()","begin()","begin()","begin()","begin_adding()","begin_transport()","beginning_of_line()","beginning_of_line?()","begins?()","benchmark()","benchmark()","between?()","bin_dir()","bin_file()","bin_file_names()","bin_for_find()","bin_key()","bin_path()","bin_path()","binary?()","binary?()","binary_mode()","bind()","bind()","bind()","bind()","bind()","bind_call()","bind_function()","bind_key()","bind_variable()","binding()","binding()","binding()","binding_requirement_in_set?()","binding_requirements_for_conflict()","bindir()","binmode()","binmode()","binmode()","binmode?()","binmode?()","binmode?()","binread()","binread()","binwrite()","binwrite()","birthtime()","birthtime()","birthtime()","birthtime()","bit_length()","bit_set?()","blksize()","block()","block_given?()","block_length()","block_length()","block_length()","block_length()","block_params=()","block_size()","blockdev?()","blockdev?()","blockdev?()","blockdev?()","blocking()","blocking?()","blocking?()","blockquote()","blocks()","bm()","bm()","bmbm()","bmbm()","body()","body=()","body=()","body_encoding=()","body_exist?()","body_permitted?()","body_stream=()","bool()","bool()","bool_attr()","both?()","bottom()","bottom()","break_on_newline()","break_outmost_groups()","breakable()","breakable()","broadaddr()","broadcast()","broadcast()","bsearch()","bsearch()","bsearch_index()","bubble_down()","bubble_up()","bubblebabble()","bubblebabble()","bubblebabble()","buffersize()","buffertype()","buffer_initial_length()","buffer_initial_length=()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build2()","build_args()","build_args()","build_args()","build_args=()","build_details_for_unwind()","build_env()","build_exception()","build_extensions()","build_extensions()","build_fields_converter()","build_gem()","build_header_fields_converter()","build_heading()","build_indices()","build_info_dir()","build_info_file()","build_marshal_gemspecs()","build_message()","build_message()","build_modern_index()","build_modern_indices()","build_package()","build_paragraph()","build_parser_fields_converter()","build_path_query()","build_scanner()","build_verbatim()","build_writer_fields_converter()","builtin_converters()","builtin_curves()","bump()","bundle_path()","bundle_update_bundler_version()","bundler_version()","by_col()","by_col!()","by_col_or_row()","by_col_or_row!()","by_id()","by_row()","by_row!()","byte()","byte()","byte_pointer=()","byteindex()","byteinsert()","byteoffset()","byterindex()","bytes()","bytes()","bytes()","bytes()","bytes_read()","bytesize()","byteslice()","byteslice!()","bytesplice()","ca_issuer_uris()","cache_dir()","cache_dir()","cache_file()","cache_home()","cache_path()","cache_update_path()","calculate()","calculate_checksum()","calculate_height_by_lines()","calculate_height_by_width()","calculate_nearest_cursor()","calculate_scroll_partial_screen()","calculate_width()","calculate_width()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call_completion_proc()","call_completion_proc_with_checking_args()","call_completion_proc_with_checking_args()","call_free()","call_seq()","call_seq=()","call_seq_directive()","callcc()","callee_id()","caller()","caller_locations()","can_parse()","can_parse_by_name()","can_skip_check?()","cancel()","cancel()","canceled?()","candidate()","candidate()","candidate()","canonical()","canonical=()","canonical_each()","canonical_label()","canonical_segments()","canonname()","capitalize()","capitalize()","capitalize()","capitalize!()","capitalize_word()","caption()","capture2()","capture2()","capture2e()","capture2e()","capture3()","capture3()","capture_before_after_kws()","capture_falling_indent()","capture_first_kw_end_same_indent()","capture_frames()","capture_last_end_same_indent()","capture_neighbor_context()","captures()","captures()","cargo()","cargo_command()","cargo_crate_name()","cargo_dylib_path()","cargo_rustc_args()","casecmp()","casecmp()","casecmp?()","casecmp?()","casefold?()","catch()","catch()","cause()","cbrt()","cc_command()","ccm_data_len=()","cd()","cd()","ceil()","ceil()","ceil()","ceil()","ceil()","ceil()","ceildiv()","center()","cert()","cert_files()","cert_path()","cert_requested=()","cert_requested?()","cert_status()","certid()","certid()","certificates()","certificates=()","certificates_matching()","chain()","chain()","challenge()","challenge=()","change_encoding()","change_privilege()","change_privilege()","change_workspace()","changed()","changed?()","char()","chardev?()","chardev?()","chardev?()","chardev?()","charpos()","chars()","charset()","chdir()","chdir()","chdir()","check()","check()","check()","check()","check_cert()","check_chain()","check_circular?()","check_closed()","check_credentials_permissions()","check_data()","check_deprecated_options()","check_executable()","check_files()","check_gems()","check_generator()","check_headers()","check_host()","check_index()","check_input_event()","check_insecure_method()","check_inspect_key()","check_installed_gems()","check_installed_gems?()","check_key()","check_key()","check_la()","check_mode_string()","check_modeline()","check_multiline_prompt()","check_names()","check_nonce()","check_opaque()","check_openssl()","check_password()","check_password()","check_path()","check_port()","check_private_key()","check_root()","check_ruby_version()","check_rules_nullable()","check_rules_useless()","check_scheme()","check_shift_log()","check_signedness()","check_sizeof()","check_symbols_nullable()","check_symbols_useless()","check_terminals()","check_termination()","check_to()","check_trust()","check_typecode()","check_typo_squatting()","check_until()","check_useless()","check_user()","check_user()","check_userinfo()","check_userinfo()","check_validity()","check_winsize_changed()","checkbox()","checkbox_group()","child_name()","children()","children()","children()","children()","chmod()","chmod()","chmod()","chmod()","chmod()","chmod_r()","chmod_r()","chomp()","chomp()","chomp!()","choose()","choose_from_list()","choose_from_list()","chop()","chop()","chop!()","chown()","chown()","chown()","chown()","chown()","chown_r()","chown_r()","chr()","chr()","chroot()","chunk()","chunk()","chunk_while()","chunk_while()","chunked?()","ci?()","cipher()","cipher()","cipher=()","ciphers()","ciphers()","ciphers=()","ciphersuites=()","civil()","civil()","clamp()","class()","class()","class_attributes()","class_eval()","class_exec()","class_file()","class_method_list()","class_methods()","class_name()","class_names()","class_path()","class_variable_defined?()","class_variable_get()","class_variable_set()","class_variables()","classes()","classes_and_modules()","classes_hash()","classes_hash()","classify()","clean()","clean_env()","clean_exec()","clean_gems()","clean_sweep()","clean_system()","clean_text()","clean_up()","cleanpath()","cleanup()","cleanup()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear_bit!()","clear_comment()","clear_default_specs()","clear_dialog()","clear_dialog_with_content()","clear_each_dialog()","clear_gemspec_cache()","clear_paths()","clear_screen()","clear_screen()","clear_screen()","clear_screen()","clear_screen()","clear_screen_buffer()","cleared?()","client_ca()","client_cert_cb()","clobber_task_description()","clobber_task_name()","clock_getres()","clock_gettime()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close!()","close_all()","close_enabled?()","close_incoming()","close_on_exec=()","close_on_exec?()","close_outgoing()","close_read()","close_read()","close_read()","close_write()","close_write()","close_write()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed_read?()","closed_write?()","cmds()","cmp()","cmp()","cmp()","cmp()","cmp()","cmp_issuer()","cmsg_is?()","code_around_binding()","code_block()","code_gc()","code_with_context()","codepage()","codepage=()","codepoints()","coerce()","coerce()","coerce()","coerce()","coerce()","coerce()","coerce_other()","cofactor()","col_sep()","collect()","collect()","collect()","collect!()","collect!()","collect_concat()","collect_concat()","collect_first_comment()","collect_method()","collect_tokens()","colorable?()","colorize()","colorize_code()","column()","column()","column_separator()","combination()","combination()","comma_breakable()","command()","command=()","command_names()","commands()","comment()","comment=()","comment=()","commercial()","commercial()","commit()","common_options()","compact()","compact()","compact()","compact()","compact()","compact()","compact!()","compact!()","compact_specs()","compare?()","compare_by_identity()","compare_by_identity()","compare_by_identity?()","compare_by_identity?()","compare_file()","compare_file()","compare_stream()","compare_stream()","compatible?()","compile()","compile()","compile_error()","compile_error()","compile_file()","compile_option()","compile_option=()","complain()","complete()","complete()","complete()","complete()","complete()","complete_authentication()","complete_internal_proc()","completer_quote_characters()","completer_quote_characters=()","completer_quote_characters=()","completer_word_break_characters()","completer_word_break_characters=()","completer_word_break_characters=()","completion_append_character()","completion_append_character=()","completion_append_character=()","completion_case_fold()","completion_case_fold()","completion_case_fold=()","completion_case_fold=()","completion_journey_data()","completion_proc()","completion_proc=()","completion_proc=()","completion_quote_character()","completion_quote_character()","component()","component()","component_ary()","compose_sets()","compress()","compress_indices()","compress_meta_key()","compute_dfa()","compute_expand()","compute_hash()","compute_heads()","compute_key()","compute_locate()","compute_nfa()","compute_nullable()","compute_nullable_0()","compute_useless()","concat()","concat()","concat()","concat()","concat()","concat()","conf()","config()","config()","config()","config_file()","config_file_name()","config_home()","configuration()","configuration=()","configure()","configure()","configure_connection_for_https()","configure_gem_home()","configure_gem_home_and_path()","configure_gem_path()","configure_options()","configured_bundle_path()","confirm_multiline_termination()","conflict?()","conflict_fixing_possibilities?()","conflicting_dependencies()","conflicting_dependencies()","conflicts()","conflicts()","confstr()","conftest_source()","conj()","conj()","conjugate()","conjugate()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect_address()","connect_from()","connect_internal()","connect_nonblock()","connect_nonblock()","connect_to()","connection_close?()","connection_for()","connection_keep_alive?()","consider_local?()","consider_remote?()","console()","console_mode()","console_mode=()","console_size()","const_added()","const_defined?()","const_get()","const_load()","const_missing()","const_set()","const_source_location()","constants()","constants()","consume_rbuff()","contains_requirable_file?()","content_encoding()","content_length()","content_length=()","content_range()","content_type()","content_type()","content_type=()","contents()","contents()","contents=()","context()","continue_entry_body()","continue_timeout=()","convert()","convert()","convert()","convert()","convert()","convert()","convert_fields()","convert_invalid_byte_sequence()","convert_to_uri()","convert_to_uri()","converters()","convertible_int()","convpath()","cooked()","cooked!()","copy()","copy()","copy()","copy()","copy()","copy_entry()","copy_entry()","copy_file()","copy_file()","copy_for_vi()","copy_nonce()","copy_stream()","copy_stream()","copy_stream()","copy_to()","copy_to()","core()","core_to_state()","coredump?()","correct()","correct()","correct?()","correct_element()","correct_error()","correct_for_windows_path()","corrections()","corrections()","corrections()","corrections()","corrections()","corrections()","corrections()","corrections()","corrections()","cos()","cos()","cosh()","count()","count()","count()","count()","count()","count()","count()","count_end()","count_for_char()","count_imemo_objects()","count_kw()","count_lex()","count_nodes()","count_objects()","count_objects_size()","count_observers()","count_symbols()","count_tdata_objects()","cover?()","coverage_level=()","cp()","cp()","cp_lr()","cp_lr()","cp_r()","cp_r()","crc()","crc32()","crc32_combine()","crc_table()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create_blocks_from_untracked_lines()","create_bundle_path()","create_cert()","create_cert_email()","create_cert_self_signed()","create_conflict()","create_digest()","create_document()","create_entries()","create_entries()","create_entry()","create_ext()","create_ext_from_array()","create_ext_from_hash()","create_ext_from_string()","create_extension()","create_fast_state()","create_guid()","create_header()","create_id()","create_id=()","create_items()","create_key()","create_logfile()","create_makefile()","create_new_id()","create_option_parser()","create_pretty_state()","create_request_pool()","create_timestamp()","create_tmap()","create_value()","created?()","credentials_path()","cref_pop()","cref_push()","critical=()","critical?()","crl=()","crl_uris()","crls()","crls=()","cross()","crypt()","css()","ctime()","ctime()","ctime()","ctime()","ctime()","ctime()","ctrl_cmd()","current()","current()","current()","current()","current=()","current_cert()","current_crl()","current_group()","current_indent()","current_scheduler()","current_section()","current_server()","current_server()","curry()","curry()","curses_dl()","curses_dl_files()","cursor()","cursor=()","cursor_down()","cursor_left()","cursor_pos()","cursor_pos()","cursor_pos()","cursor_pos()","cursor_right()","cursor_up()","curve_name()","cwday()","cweek()","cwyear()","cycle()","cycle()","daemon()","darwin_target?()","data()","data()","data()","data=()","data_home()","data_type()","datadir()","datadir()","date()","date=()","datetime_format()","datetime_format=()","day()","day()","day_fraction()","debug()","debug()","debug()","debug()","debug()","debug()","debug!()","debug=()","debug?()","debug?()","debug?()","debug_break()","debug_output()","debug_output=()","declare_precedence()","decode()","decode64()","decode_all()","decode_uri_component()","decode_www_form()","decode_www_form_component()","decoded_password()","decoded_user()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","decref()","decrypt()","decrypt()","decrypt()","dedent_string()","dedent_string()","dedup()","deduplicate()","deduplicate_call_seq()","def_class()","def_delegator()","def_delegator()","def_delegators()","def_delegators()","def_erb_method()","def_erb_method()","def_extend_command()","def_extend_command()","def_head_option()","def_inspector()","def_instance_delegator()","def_instance_delegators()","def_method()","def_module()","def_notifier()","def_notifier()","def_notifier()","def_option()","def_post_proc()","def_pre_proc()","def_single_delegator()","def_single_delegators()","def_tail_option()","default()","default()","default()","default=()","default_acl()","default_argc_limit()","default_bindir()","default_bundle_dir()","default_cert_path()","default_console_size()","default_dir()","default_dir()","default_event_sources()","default_exec_format()","default_ext_dir_for()","default_external()","default_external=()","default_gem?()","default_gem_load_paths()","default_gemfile()","default_host?()","default_id_conv()","default_inputrc_path()","default_internal()","default_internal=()","default_key_bindings()","default_key_path()","default_load_limit()","default_lockfile()","default_ole_types()","default_path()","default_path()","default_port()","default_port()","default_port()","default_prerelease()","default_proc()","default_proc=()","default_rubygems_dirs()","default_sources()","default_spec_cache_dir()","default_spec_file()","default_spec_matches?()","default_specifications_dir()","default_specifications_dir()","default_specs_that_match()","default_src_encoding()","default_stubs()","default_title=()","default_value()","defaults()","defaults_str()","defaults_str()","define()","define()","define()","define()","define()","define_actions()","define_by_keywords()","define_finalizer()","define_head()","define_method()","define_singleton_method()","define_tail()","defined_class()","defined_in?()","definition()","definition()","definition()","definition()","definition()","definition_lists()","deflate()","deflate()","deflate()","deflate()","degree()","delegate()","delegate()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete!()","delete?()","delete_at()","delete_at()","delete_char()","delete_char_or_list()","delete_edge()","delete_edge()","delete_field()","delete_first()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_key()","delete_legacy_args()","delete_legacy_args()","delete_observer()","delete_observers()","delete_prefix()","delete_prefix!()","delete_suffix()","delete_suffix()","delete_suffix!()","delete_text()","delete_text()","delete_unless_alive()","delete_value()","deleted?()","denominator()","denominator()","denominator()","denominator()","denominator()","depend_rules()","dependencies()","dependencies()","dependencies()","dependencies_equal?()","dependencies_equal?()","dependencies_for()","dependencies_for()","dependencies_for()","dependency()","dependency_order()","dependent_gems()","dependent_specs()","deprecate()","deprecate_constant()","deprecate_option()","deprecated?()","deprecation_warning()","deprep()","deprep()","deprep()","depth()","depth()","depth=()","deq()","deq()","derive()","descend()","descendent?()","description()","description()","description=()","deserialize()","destination_encoding()","destination_encoding()","destination_encoding()","destination_encoding_name()","destination_encoding_name()","detab()","detach()","detach_vertex_named()","detach_vertex_named()","detached()","detached=()","detached?()","detailed_message()","detailed_message()","detailed_message()","detailed_message()","detect()","detect()","detect_encoding()","detect_encoding()","detect_invalid_blocks()","detect_row_separator()","determine_encoding()","determine_terminals()","dev()","dev_major()","dev_minor()","development?()","development?()","development_dependencies()","dfa()","dfa()","dfdxi()","dh_compute_key()","dialog()","dialog_proc()","dictionary_without_leaves()","difference()","difference()","dig()","dig()","dig()","dig()","dig()","dig()","dig_perfect_match_proc=()","digest()","digest()","digest()","digest()","digest()","digest()","digest!()","digest_length()","digest_length()","digest_length()","digest_length()","digits()","digraph()","dimensions()","dir()","dir()","dir_config()","direct_ancestors()","direct_ancestors()","directory?()","directory?()","directory?()","directory?()","directory?()","dirname()","dirname()","dirs()","dirs=()","disable()","disable()","disable()","disable_close()","disasm()","disasm()","disasm()","disassemble()","disassemble()","disjoint?()","dispatch()","dispatch_cache()","dispatch_seq()","dispid()","display()","display()","display?()","display?()","display_block()","display_header()","distance()","distance()","div()","div()","div()","divide()","divmod()","divmod()","divmod()","divmod()","dlload()","dlopen()","dlopen()","dlunwrap()","dlwrap()","dn()","dn=()","do_get()","do_aliases()","do_attrs()","do_boot_defclass()","do_classes_and_modules()","do_configuration()","do_constants()","do_finish()","do_includes()","do_methods()","do_missing()","do_not_reverse_lookup()","do_not_reverse_lookup()","do_not_reverse_lookup=()","do_not_reverse_lookup=()","do_not_reverse_lookup=()","do_reply()","do_resolve_sr()","do_start()","do_write()","do_write()","doc_dir()","doc_stats()","doctor()","doctor()","document()","document()","document()","document?()","document?()","document_children=()","document_ok?()","document_self=()","document_self_or_methods()","documentation_page()","documentation_search()","documentation_source()","documented?()","documented?()","documented?()","documented?()","domain=()","done()","done()","done()","done()","done()","done_adding()","done_documenting=()","done_installing()","dot()","dot_pat()","dot_pat_str()","double_fig()","down()","down()","down()","down()","down()","downcase()","downcase()","downcase!()","downcase_word()","download()","download()","download()","download()","download()","download_reporter()","download_to_cache()","downto()","downto()","draw()","drop()","drop()","drop()","drop_while()","drop_while()","drop_while()","dsa_sign_asn1()","dsa_verify_asn1()","dst?()","dstaddr()","dummy?()","dummy?()","dummy_instance_alias()","dummy_instance_method()","dummy_makefile()","dummy_singleton_method()","dump()","dump()","dump()","dump()","dump()","dump()","dump_all()","dump_coder()","dump_exception()","dump_exit_locations()","dump_ivars()","dump_list()","dump_shapes()","dump_stream()","dup()","dup()","dup()","dup()","dup()","dup()","dynamic_prompt()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each_address()","each_address()","each_address()","each_address()","each_address()","each_ancestor()","each_attribute()","each_builtin()","each_byte()","each_byte()","each_byte()","each_byte()","each_byte()","each_byte()","each_byte()","each_caller_location()","each_capitalized()","each_capitalized_name()","each_certificate()","each_char()","each_char()","each_char()","each_char()","each_char()","each_child()","each_child()","each_child()","each_child()","each_classmodule()","each_codepoint()","each_codepoint()","each_codepoint()","each_codepoint()","each_cons()","each_const()","each_constant()","each_entry()","each_entry()","each_entry()","each_entry()","each_extend()","each_filename()","each_grapheme_cluster()","each_header()","each_include()","each_index()","each_index()","each_index()","each_key()","each_key()","each_key()","each_key()","each_key()","each_la()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_localized_path()","each_method()","each_name()","each_name()","each_name()","each_name()","each_name()","each_neighbor_block()","each_nonterminal()","each_object()","each_option()","each_option()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_parent()","each_reduce()","each_resource()","each_response_header()","each_rule()","each_rule()","each_section()","each_shift()","each_slice()","each_source()","each_spec()","each_state()","each_strongly_connected_component()","each_strongly_connected_component()","each_strongly_connected_component_from()","each_strongly_connected_component_from()","each_sublocale()","each_t()","each_terminal()","each_useless_nonterminal()","each_useless_rule()","each_value()","each_value()","each_value()","each_value()","each_value()","each_value()","each_with_index()","each_with_index()","each_with_index()","each_with_object()","each_with_object()","eager()","easter_egg()","ec2_metadata_credentials_json()","ec2_metadata_request()","ecdh_curves=()","echo=()","echo?()","ed_argument_digit()","ed_clear_screen()","ed_delete_next_char()","ed_delete_prev_char()","ed_delete_prev_word()","ed_digit()","ed_insert()","ed_kill_line()","ed_move_to_beg()","ed_move_to_end()","ed_newline()","ed_next_char()","ed_next_history()","ed_prev_char()","ed_prev_history()","ed_prev_word()","ed_quoted_insert()","ed_search_next_history()","ed_search_prev_history()","ed_transpose_chars()","ed_transpose_words()","ed_transpose_words()","ed_unassigned()","edit_path()","editing_mode()","editing_mode()","editing_mode=()","editing_mode_is?()","egd()","egd_bytes()","egid()","egid=()","eglible_for_update?()","eid()","eid()","em_backward_word()","em_big_backward_word()","em_capitol_case()","em_delete()","em_delete_next_word()","em_delete_or_list()","em_delete_prev_char()","em_exchange_mark()","em_forward_word()","em_forward_word_with_capitalization()","em_kill_line()","em_kill_region()","em_lower_case()","em_next_word()","em_set_mark()","em_upper_case()","em_yank()","em_yank_pop()","emacs_editing_mode()","emacs_editing_mode()","emacs_editing_mode?()","emacs_editing_mode?()","email_to_name()","embed_library()","embedded_action()","emit_coder()","emit_row()","emphasis()","empty()","empty()","empty()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty_buffer?()","empty_buffer?()","empty_marshal_checksum()","empty_marshal_data()","enable()","enable()","enable()","enable_close()","enable_config()","enable_fallback_scsv()","enabled?()","enabled?()","enabled?()","enabled?()","enabled?()","enc_key()","enclose()","enclosed?()","encode()","encode!()","encode!()","encode64()","encode_fallback()","encode_multipart_form_data()","encode_token()","encode_uri_component()","encode_with_invalid_byte_sequence()","encode_www_form()","encode_www_form_component()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding_system_needs()","encrypt()","encrypt()","encrypt()","end()","end()","end()","end()","end?()","end_document()","end_document()","end_document()","end_mapping()","end_mapping()","end_of_line()","end_precedence_declaration()","end_resolution()","end_seen?()","end_sequence()","end_sequence()","end_stream()","end_stream()","end_stream()","end_transport()","end_with?()","end_with?()","ended?()","endgrent()","endpwent()","enforce_trailing_slash()","engines()","england()","enhanced?()","enq()","enq()","ensure_default_gem_subdirectories()","ensure_dependency()","ensure_gem_subdirectories()","ensure_loadable_spec()","enter()","entity()","entity_class()","entity_class()","entries()","entries()","entries()","entries()","entry_details()","entry_versions()","enum_for()","enum_for()","env_requirement()","env_table()","environment()","environment()","eof()","eof()","eof()","eof()","eof()","eof()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eos?()","eos?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","equal?()","equal?()","equal?()","erase_after_cursor()","erase_after_cursor()","erase_after_cursor()","erase_line()","erase_screen()","erf()","erfc()","errno()","error()","error()","error()","error()","error()","error()","error()","error!()","error=()","error?()","error?()","error_bytes()","error_char()","error_depth()","error_message()","error_message()","error_print()","error_string()","errors()","errors()","errors()","errors()","escape()","escape()","escape()","escape()","escape()","escape()","escape()","escapeelement()","escapehtml()","escapehtml()","escapeuricomponent()","escapeuricomponent()","escape_element()","escape_for_print()","escape_html()","escape_slash()","escape_slash=()","escape_slash?()","escape_userpass()","euid()","euid=()","eval()","eval()","eval()","eval_gemspec()","eval_history=()","eval_input()","eval_script()","eval_yaml_gemspec()","evaluate()","even?()","event()","event?()","event_interface()","event_location()","event_location()","exact?()","exact_matches()","exact_matches()","except()","except()","exception()","exception()","exception()","exception()","exchange()","exchange_point_and_mark()","exclude()","exclude_end?()","exclude_end?()","exec()","exec()","exec_format()","exec_if()","executable()","executable=()","executable?()","executable?()","executable?()","executable?()","executable_real?()","executable_real?()","executable_real?()","executable_real?()","executables()","executables=()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","exist?()","exist?()","exist?()","exist?()","exist?()","exit()","exit()","exit()","exit()","exit()","exit()","exit!()","exit!()","exit_locations()","exit_value()","exited?()","exitstatus()","exp()","exp()","expand()","expand()","expand?()","expand_environ()","expand_existing()","expand_hexstring()","expand_indent()","expand_neighbors()","expand_pair()","expand_path()","expand_path()","expand_tabs()","expand_value()","expect()","expired?()","explain()","explanation()","explicit?()","explicit_version_requirement()","exponent()","export()","export()","export()","export()","export_keying_material()","expr_beg?()","expr_label?()","extend()","extend_object()","extend_object()","extend_object()","extend_object()","extended()","extension()","extension()","extension?()","extension_dir()","extension_nesting()","extensions()","extensions()","extensions()","extensions()","extensions()","extensions()","extensions=()","extensions=()","extensions=()","extensions=()","extensions=()","extensions_dir()","extern()","external?()","external_encoding()","external_encoding()","external_encoding()","external_encoding()","extname()","extname()","extra_args()","extra_args=()","extra_rdoc_files()","extra_rdoc_files=()","extract()","extract()","extract()","extract_bin()","extract_call_seq()","extract_files()","extract_files()","extract_files()","extract_files()","facility()","fail()","failure_info()","fall_back_to_normal_spell_check()","family()","family()","family_addrinfo()","fast_generate()","fatal()","fatal()","fatal!()","fatal?()","fcntl()","fcntl()","fcntl()","fdatasync()","fdiv()","fdiv()","fdiv()","fdiv()","fdiv()","feature_flag()","feed()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch_file()","fetch_http()","fetch_https()","fetch_line()","fetch_path()","fetch_resource()","fetch_s3()","fetch_s3_config()","fetch_server()","fetch_server()","fetch_spec()","fetch_spec()","fetch_values()","fetcher()","fetcher()","fiber()","field()","field?()","field_row?()","field_size_limit()","field_size_limit()","fields()","file()","file()","file()","file?()","file?()","file?()","file?()","file?()","file_field()","file_input?()","file_name()","file_name()","file_name()","filename()","filename()","filename()","filename_quote_characters()","filename_quote_characters=()","filename_quote_characters=()","fileno()","fileno()","fileno()","fileno()","fileno()","files()","files=()","files_hash()","files_in()","files_in()","files_in_default_gem()","files_in_gem()","fill()","fill_breakable()","fill_rbuff()","filter()","filter()","filter()","filter()","filter()","filter()","filter()","filter()","filter!()","filter!()","filter!()","filter!()","filter=()","filter_backtrace()","filter_backtrace()","filter_map()","filter_map()","filter_possibilities_after_unwind()","filter_possibilities_for_parent_unwind()","filter_possibilities_for_primary_unwind()","filtered_possibility_set()","final()","finalize()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find_active_stub_by_path()","find_alias_command()","find_alias_comment()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all_by_full_name()","find_all_by_name()","find_all_satisfiers()","find_all_template()","find_ancestor_local_symbol()","find_attr_comment()","find_attribute()","find_attribute_named()","find_body()","find_by_full_name()","find_by_name()","find_by_path()","find_c_enclosure()","find_class()","find_class_comment()","find_class_method_named()","find_class_named()","find_class_named()","find_class_named_from()","find_class_or_module()","find_class_or_module()","find_command()","find_command_possibilities()","find_config_file()","find_const_comment()","find_constant_named()","find_enclosing_module_named()","find_executable()","find_extension()","find_external_alias()","find_external_alias_named()","find_file_named()","find_file_named()","find_files()","find_files_for_gem()","find_gem()","find_gemspec()","find_header()","find_home()","find_ideas()","find_in_cache()","find_in_unresolved()","find_in_unresolved_tree()","find_inactive_by_path()","find_index()","find_index()","find_instance_method_named()","find_latest_files()","find_leaves()","find_library()","find_local_symbol()","find_local_symbol()","find_method()","find_method_named()","find_modifiers()","find_module_named()","find_module_named()","find_module_named()","find_name()","find_override_comment()","find_paths()","find_proxy()","find_response()","find_spec_for_exe()","find_state_for()","find_suggestions()","find_symbol()","find_symbol_module()","find_text_page()","find_type()","find_unique()","find_unresolved_default_spec()","finger()","fingerprint()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish_page_dir()","finish_pasting()","finish_resolve()","finished?()","finished?()","finished_message()","finite?()","finite?()","finite?()","finite?()","fips_mode()","fips_mode=()","first()","first()","first()","first()","first()","first?()","first_column()","first_lineno()","first_lineno()","fix()","fix()","fix_basic_object_inheritance()","fix_ident()","fix_ident()","fixed_anchor?()","fixed_encoding?()","fixed_length_secure_compare()","flags()","flags=()","flags=()","flat_map()","flat_map()","flatten()","flatten()","flatten()","flatten!()","flatten!()","flock()","flock()","floor()","floor()","floor()","floor()","floor()","floor()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush_buffer()","flush_delayed()","flush_deleted()","flush_left()","flush_next_in()","flush_next_out()","flush_sessions()","fname?()","fnmatch()","fnmatch()","fnmatch?()","fnmatch?()","footer()","for()","for()","for()","for_cache()","for_current_gems()","for_fd()","for_fd()","for_spec()","for_spec?()","force()","force_documentation=()","force_encoding()","force_quotes?()","foreach()","foreach()","foreach()","foreach()","fork()","fork()","fork()","form()","form_data=()","format()","format()","format()","format()","format()","format=()","format_datetime()","format_line()","format_message()","format_severity()","format_text()","format_time()","format_time()","formatted_program_filename()","formatter()","formatter()","formatter=()","formatter=()","forward_char()","forward_search_history()","forward_word()","frac()","fragment=()","free()","free()","free()","free()","free=()","freed?()","freed?()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","frexp()","friday?()","friday?()","friendly_path()","from()","from()","from_file()","from_hash()","from_list()","from_module()","from_name()","from_name()","from_source()","from_specs()","from_state()","from_yaml()","front()","front()","front()","frozen?()","frozen_bundle?()","fsync()","fsync()","ftype()","ftype()","ftype()","fu_blksize()","fu_clean_components()","fu_default_blksize()","fu_split_path()","fu_starting_path?()","fu_stream_blksize()","fu_windows?()","full_gem_path()","full_message()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name=()","full_old_name()","full_require_paths()","full_spec()","fully_documented?()","fully_documented?()","gamma()","garbage_collect()","garbage_collect()","garbage_collect()","gather_files()","gcd()","gcd()","gcdlcm()","gem()","gem()","gem()","gem()","gem_contents()","gem_dir()","gem_dir()","gem_file_list()","gem_install_dir()","gem_name()","gem_name?()","gem_repository?()","gemdeps_load()","gems_dir()","gems_dir()","gemspec()","gemspec_stubs_in()","gen_action_tables()","gen_body_table()","gen_const_table()","gen_goto_tables()","gen_random()","gen_random()","gen_random_openssl()","gen_random_urandom()","gen_time()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate_bin_script()","generate_bin_symlink()","generate_canonical_query_params()","generate_canonical_request()","generate_default_dirs()","generate_default_man_dir()","generate_index()","generate_key()","generate_key()","generate_key!()","generate_key!()","generate_line()","generate_lines()","generate_parameters()","generate_parser()","generate_parser_file()","generate_prime()","generate_searcher()","generate_signature()","generate_snippet()","generate_states()","generate_string_to_sign()","generate_windows_script()","generation_hook()","generation_hook()","generator()","generator_descriptions()","generator_for()","get()","get()","get()","get2()","get_all_gem_names()","get_all_gem_names_and_versions()","get_bool()","get_byte()","get_candidate_gems()","get_candidates()","get_cert_files()","get_class_or_module()","get_class_specification()","get_console_screen_buffer_info()","get_constant()","get_credentials()","get_dns_server_list()","get_embdoc_tk()","get_env_editor()","get_fields()","get_flags()","get_gems_to_cleanup()","get_heredoc_tk()","get_hosts_dir()","get_hosts_for()","get_hosts_path()","get_included_module_with_optional_parens()","get_info()","get_initial_token()","get_key_name()","get_mbchar_byte_size_by_first_char()","get_mbchar_width()","get_method()","get_mfa_params()","get_next_mbchar_size()","get_one_gem_name()","get_one_optional_argument()","get_op_tk()","get_option()","get_owner_scope()","get_path()","get_platform_from_requirements()","get_prev_mbchar_size()","get_primary_gems()","get_print()","get_proxy_from_env()","get_public_key()","get_push_scope()","get_quoted_re()","get_regexp_tk()","get_relative_path()","get_renewer()","get_resolv_info()","get_response()","get_scope_params()","get_screen_size()","get_screen_size()","get_screen_size()","get_screen_size()","get_screen_size()","get_set()","get_squashed_tk()","get_string()","get_string_tk()","get_symbol_or_name()","get_symbol_tk()","get_tk()","get_tk_until()","get_tkread()","get_user_profile()","get_value()","get_value()","get_values()","get_version_from_requirements()","get_words_tk()","get_yank_scope()","getaddress()","getaddress()","getaddress()","getaddress()","getaddress()","getaddress_orig()","getaddresses()","getaddresses()","getaddresses()","getaddresses()","getaddrinfo()","getaddrinfo()","getbyte()","getbyte()","getbyte()","getbyte()","getbyte()","getbyte()","getbyte()","getc()","getc()","getc()","getc()","getc()","getc()","getc()","getc()","getc()","getc_with_bracketed_paste()","getch()","getch()","getch()","getconsolemode()","getegid()","geteuid()","getgid()","getgm()","getgrent()","getgrgid()","getgrnam()","gethostbyaddr()","gethostbyname()","gethostbyname()","gethostname()","getifaddrs()","getlocal()","getlogin()","getname()","getname()","getname()","getname()","getnameinfo()","getnameinfo()","getnames()","getnames()","getnames()","getnames()","getopts()","getopts()","getopts()","getpass()","getpass()","getpeereid()","getpeername()","getpgid()","getpgrp()","getpriority()","getpty()","getpwent()","getpwnam()","getpwuid()","getresource()","getresources()","getrlimit()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","getservbyname()","getservbyport()","getsid()","getsockname()","getsockopt()","getsockopt()","getuid()","getutc()","getwd()","getwd()","getwd()","getwd()","gid()","gid()","gid=()","git()","git_path()","git_present?()","git_source()","github()","glob()","glob()","glob()","glob_files_in_dir()","global_variables()","gm()","gmt?()","gmt_offset()","gmtime()","gmtoff()","goto()","goto_column()","goto_id()","grammar()","grant_privilege()","grant_privilege()","grapheme_clusters()","great_job()","gregorian()","gregorian?()","gregorian_leap?()","grep()","grep()","grep_v()","grep_v()","group()","group()","group()","group()","group()","group()","group=()","group_by()","group_entries()","group_possibilities()","group_sub()","groups()","groups=()","grpowned?()","grpowned?()","grpowned?()","grpowned?()","gsub()","gsub()","gsub!()","guard_inspect_key()","guess()","guess()","guess()","guess()","guid()","guid()","gunzip()","gunzip()","gzip()","gzip()","gzip()","gzip_to()","h()","handle_arguments()","handle_attr()","handle_class_module()","handle_constants()","handle_directive()","handle_error()","handle_exception()","handle_ifdefs_in()","handle_interrupt()","handle_method()","handle_missing_or_push_dependency_state()","handle_options()","handle_options()","handle_pipe()","handle_singleton()","handle_tab_width()","handler()","handler()","handler=()","handlers()","handles?()","has_conflicts?()","has_expires?()","has_key?()","has_key?()","has_key?()","has_key?()","has_value?()","has_value?()","has_value?()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash=()","hash?()","hash_algorithm()","hash_old()","have_const()","have_devel?()","have_extensions?()","have_file?()","have_framework()","have_func()","have_header()","have_library()","have_macro()","have_option?()","have_struct_member()","have_type()","have_var()","head()","head2()","head?()","header()","header()","header()","header?()","header_convert()","header_converters()","header_fields_converter()","header_row?()","header_row?()","header_row?()","headers()","headers()","headers()","headers()","headers=()","help()","helpcontext()","helpcontext()","helpfile()","helpfile()","helpstring()","helpstring()","here?()","here?()","here?()","heredoc_end?()","hex()","hex()","hexdigest()","hexdigest()","hexdigest()","hexdigest()","hexdigest!()","hexdump()","hexencode()","hidden()","hidden?()","hidden?()","hide_cursor()","hide_cursor()","hide_cursor()","hierarchical?()","hierarchical?()","higher()","history_file()","history_file=()","history_search_backward()","history_search_forward()","hkdf()","holds_all_syntax_errors?()","home()","home()","home()","home_workspace()","host()","host()","host=()","host=()","hostname()","hostname=()","hostname=()","hour()","hour()","html()","html()","html_escape()","html_escape()","html_name()","html_name()","hton()","http_default_port()","http_header()","http_url()","http_url()","httpdate()","httpdate()","httpdate()","httpdate()","httpdate()","httponly=()","https?()","https_default_port()","hypot()","i()","i_i_sym_list()","iconv()","id()","id()","id2name()","ideas_to_paths()","ident()","identical?()","identical?()","identical?()","identical?()","identity()","if_modified_since()","ifindex()","iflush()","ignore()","ignore_broken_line()","ignore_deadlock()","ignore_deadlock=()","ignore_newline?()","ignore_newline_not_beg?()","ignored?()","imag()","imag()","image_button()","imaginary()","imaginary()","img()","implemented_ole_types()","implicit?()","import()","import_function()","import_methods()","import_symbol()","import_value()","in6_addr()","in_addr()","in_pasting?()","in_pasting?()","in_pasting?()","in_transaction()","in_transaction_wr()","inc()","inc()","include()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","included()","included()","included()","included()","included()","included_modules()","inclusive?()","incompatible_argument_styles()","incompatible_argument_styles()","incomplete_input?()","incref()","increment()","incremental_search_history()","indent()","indent()","indent=()","indent_index()","indent_re()","indentation()","indentation=()","index()","index()","index()","index()","indicate_progress()","indicate_progress()","infinite?()","infinite?()","infinite?()","infinite?()","infinite?()","infinity?()","inflate()","inflate()","inflate()","inflate()","info()","info()","info()","info!()","info?()","inherited()","inherited()","init()","init()","init()","init()","init_line_conversion_system()","init_ruby_model()","init_with()","init_with_ary()","init_with_hash()","initgroups()","initialize()","initialize_clone()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_dup()","initialize_methods_etc()","initialize_pattern()","initialize_pattern()","initialize_query()","initialize_readline()","initialize_regexp()","initialize_regexp()","initialize_tracer()","inject()","inject_into_list()","inner()","inner_getc()","inner_readline()","ino()","inplace_mode()","inplace_mode=()","input()","input=()","input=()","input=()","input=()","input?()","input_key()","inputrc_path()","insecure_method?()","insert()","insert()","insert()","insert_new_line()","insert_output()","insert_text()","insert_text()","insert_text()","insns_compiled()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect?()","inspect_colorable?()","inspect_mode=()","inspect_sockaddr()","inspect_value()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install_acl()","install_acl()","install_alias_method()","install_default_bundler_gem()","install_executables()","install_extend_commands()","install_extend_commands()","install_file()","install_file_list()","install_from_gemdeps()","install_hooks()","install_id_conv()","install_id_conv()","install_if_needed()","install_indices()","install_into()","install_lib()","install_list()","install_path()","install_rdoc()","install_siginfo_handler()","install_update_defaults_str()","install_update_options()","installable?()","installable_platform?()","installable_platform?()","installable_platform?()","installation_satisfies_dependency?()","installed?()","installed?()","installed_docs()","installed_specs()","installed_stubs()","instance()","instance()","instance()","instance()","instance()","instance_attributes()","instance_delegate()","instance_eval()","instance_eval()","instance_exec()","instance_exec()","instance_method()","instance_method_list()","instance_methods()","instance_methods()","instance_methods()","instance_of?()","instance_variable_defined?()","instance_variable_get()","instance_variable_set()","instance_variables()","instruction_sequence()","int()","int()","int()","int()","integer?()","integer?()","integer_list()","intern()","intern()","intern()","intern()","internal?()","internal_class_of()","internal_encoding()","internal_encoding()","internal_encoding()","internal_object_id()","internal_super_of()","interpret_loosely()","intersect?()","intersect?()","intersection()","intersection()","invalid?()","invalid?()","invalidate_memoized_attributes()","invert()","invert()","invert()","invert!()","invkind()","invoke()","invoke()","invoke_command()","invoke_kind()","invoke_service()","invoke_service_command()","invoke_thread()","invoke_with_build_args()","io_pread()","io_pwrite()","io_read()","io_select()","io_wait()","io_write()","ioctl()","ioctl()","ioflush()","ip()","ip6_arpa()","ip6_int()","ip?()","ip_address()","ip_address_list()","ip_pktinfo()","ip_pktinfo()","ip_port()","ip_unpack()","ipaddr()","ipaddr=()","ipv4?()","ipv4?()","ipv4_compat()","ipv4_compat?()","ipv4_loopback?()","ipv4_mapped()","ipv4_mapped?()","ipv4_multicast?()","ipv4_multicast_loop()","ipv4_multicast_loop()","ipv4_multicast_ttl()","ipv4_multicast_ttl()","ipv4_private?()","ipv6?()","ipv6?()","ipv6_linklocal?()","ipv6_loopback?()","ipv6_mc_global?()","ipv6_mc_linklocal?()","ipv6_mc_nodelocal?()","ipv6_mc_orglocal?()","ipv6_mc_sitelocal?()","ipv6_multicast?()","ipv6_pktinfo()","ipv6_pktinfo()","ipv6_pktinfo_addr()","ipv6_pktinfo_ifindex()","ipv6_sitelocal?()","ipv6_to_ipv4()","ipv6_unique_local?()","ipv6_unspecified?()","ipv6_v4compat?()","ipv6_v4mapped?()","ipv6only!()","irb()","irb()","irb()","irb_abort()","irb_at_exit()","irb_context()","irb_exit()","irb_exit()","irb_level()","irb_load()","irb_load()","irb_require()","isequal()","is_a?()","is_alias_for()","is_end?()","is_end?()","is_end?()","is_kw?()","is_kw?()","is_reachable_from?()","is_version_1_2?()","isatty()","isatty()","isdst()","iseuc()","iseuc()","iseuc()","isjis()","isjis()","isjis()","iso8601()","iso8601()","iso8601()","iso8601()","iso8601()","iso8601()","issetugid()","issjis()","issjis()","issjis()","issuer()","issuer()","issuer()","issuer()","issuer=()","issuer=()","issuer_certificate=()","issuer_key_hash()","issuer_name_hash()","issuer_of()","isutf8()","isutf8()","isutf8()","italy()","iteration!()","iterator?()","itself()","iv=()","iv_len()","iv_len=()","j()","jacobian()","java_platform?()","jd()","jd()","jd()","jisx0301()","jisx0301()","jisx0301()","jisx0301()","jj()","join()","join()","join()","join()","join()","join()","join()","join()","join()","join_consecutive!()","join_groups()","join_heredoc!()","join_trailing_slash!()","json_creatable?()","json_creatable?()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","julian()","julian?()","julian_leap?()","just_cursor_moving()","just_move_cursor()","kconv()","kconv()","kconv()","keep_alive?()","keep_back()","keep_back()","keep_clean()","keep_drop()","keep_drop()","keep_end()","keep_end()","keep_if()","keep_if()","keep_if()","keep_if()","keep_only_files_and_directories()","keep_script_lines()","keep_script_lines=()","keep_start()","keep_start()","kernel_sleep()","key()","key()","key()","key()","key()","key()","key=()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key_bindings()","key_delete()","key_len()","key_len=()","key_mapping()","key_newline()","key_notation_to_code()","keymap()","keys()","keys()","keys()","keys()","keys()","keys()","keys()","keys_with_inspector()","keyword_init?()","kill()","kill()","kill()","kill()","kill()","kill_line()","kill_whole_line()","kind_of?()","la=()","label()","label()","lambda()","lambda?()","last()","last()","last()","last()","last_column()","last_error()","last_error()","last_error=()","last_index()","last_line()","last_lineno()","last_match()","last_modified()","last_modified()","last_status()","last_update()","last_update=()","last_update_check()","last_update_check=()","latest_compact_info()","latest_gc_info()","latest_rubygems_version()","latest_spec_for()","latest_spec_for()","latest_specs()","latest_version()","latest_version?()","latest_version_for()","lazy()","lazy()","lchmod()","lchmod()","lchown()","lchown()","lcm()","ld()","ldexp()","ldflag_to_link_modifier()","leap?()","leap?()","left()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","level()","level()","level()","level=()","level=()","level_notifier=()","levenshtein_distance()","lex()","lex_state_name()","lgamma()","lib_dirs_glob()","lib_files()","liberal_parsing?()","liberal_parsing?()","library_name()","libruby_args()","libyaml_version()","license()","license=()","licenses()","licenses=()","limit()","limit()","line()","line()","line()","line()","line()","line()","line()","line0()","line_buffer()","line_editor()","line_stub()","line_width()","line_width=()","linear_time?()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno=()","lineno=()","lineno=()","lineno=()","lines()","lines()","lines()","lines()","linger()","linger()","link()","link()","link()","link_command()","link_entry()","link_entry()","link_local?()","link_to()","linker_args()","list()","list()","list()","list()","list_files_in_directory()","list_item_from()","listen()","listen()","listen()","listen()","listen()","literal_head?()","ljust()","ln()","ln()","ln()","ln_s()","ln_s()","ln_sf()","ln_sf()","ln_sr()","ln_sr()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load!()","load_all()","load_and_instantiate()","load_api_keys()","load_cache()","load_certificate()","load_class()","load_class_data()","load_command()","load_data()","load_default_cert()","load_default_key()","load_defaults()","load_env_plugins()","load_file()","load_file()","load_file()","load_file()","load_file()","load_file!()","load_from_binary()","load_from_binary_extra_data()","load_gemdeps()","load_gemspec()","load_gemspec_uncached()","load_marshal()","load_method()","load_options()","load_page()","load_path_insert_index()","load_plugins()","load_private_key()","load_public_key()","load_random_file()","load_rdoc()","load_rdoc()","load_relative_enabled?()","load_specs()","load_stream()","load_variable_map()","load_yaml()","load_yaml()","local()","local()","local?()","local_address()","local_platform()","local_variable_defined?()","local_variable_get()","local_variable_get()","local_variable_set()","local_variable_set()","local_variables()","local_variables()","local_variables()","locale()","locale=()","locale_charmap()","localtime()","location()","location()","location=()","location_of_caller()","lock()","lock()","lock_shift_log()","locked()","locked?()","locked?()","locked_gems()","locked_puts()","locked_requirement_named()","locked_requirement_possibility_set()","lockfile_contents()","lockfile_version()","log()","log()","log()","log()","log10()","log2()","long_name()","look_for_directives_in()","look_for_directives_in()","lookahead()","lookup_ring()","lookup_ring_any()","loop()","loopback?()","lower()","lower()","lshift!()","lstat()","lstat()","lstat()","lstrip()","lstrip!()","ludecomp()","lusolve()","lutime()","lutime()","magnitude()","magnitude()","magnitude()","magnitude()","magnitude()","main()","main()","main()","main()","main=()","main_irb()","main_loop()","main_thread()","main_type()","major_version()","major_version()","make()","make_affine!()","make_closure()","make_compiler()","make_delimiter()","make_destination_dirs()","make_edge()","make_edge()","make_entry()","make_expires()","make_link()","make_message()","make_methods()","make_parser()","make_pool()","make_regexp()","make_regexp()","make_separator()","make_shareable()","make_socket()","make_switch()","make_symlink()","make_temp_directories()","make_tuple()","make_variable_map()","make_wstr()","makedirs()","makedirs()","makefile_config()","malloc()","malloc()","malloc()","malloc_allocated_size()","malloc_allocations()","manage_owners()","many()","many1()","map()","map()","map()","map()","map()","map!()","map!()","map=()","map_gems_to_specs()","mapped?()","mapping?()","mapping?()","mark()","mark_invisible()","mark_invisible()","mark_version()","markup()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_load()","marshal_load()","marshal_load()","marshal_load()","marshal_load()","marshal_version()","mask()","mask()","mask!()","mask=()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match?()","match?()","match?()","match?()","match?()","match?()","match?()","match?()","match_gem?()","match_length()","match_platform!()","match_platform?()","match_platforms?()","match_spec?()","match_status()","matched()","matched?()","matched_size()","matchee()","matches?()","matches_for_glob()","matches_spec?()","matches_spec?()","matching_specs()","max()","max()","max()","max()","max=()","max_by()","max_field_size()","max_field_size()","max_nesting()","max_nesting=()","max_retries=()","max_version=()","maxgroups()","maxgroups=()","may_quoted?()","may_req_ambiguous_char_width()","maybe_resolve_ldflag_variable()","mday()","mday()","measure()","measure()","measure_total_time()","measure_total_time=()","mem_check_start()","member?()","member?()","member?()","member?()","member?()","member?()","member?()","members()","members()","members()","members()","memberwise()","memsize_of()","memsize_of_all()","menu()","merge()","merge()","merge()","merge()","merge()","merge()","merge!()","merge!()","merge!()","merge_key()","merge_options()","merge_path()","message()","message()","message()","message()","message()","message()","message_for()","message_for()","message_for()","message_for()","message_for()","message_for()","message_for()","message_imprint()","message_imprint()","message_imprint=()","message_loop()","message_with_trees()","metadata_satisfied?()","method()","method()","method_added()","method_defined?()","method_file()","method_id()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_names()","method_removed()","method_undefined()","methods()","methods()","methods()","methods_by_type()","methods_matching()","mfa_unauthorized?()","min()","min()","min()","min()","min()","min_by()","min_version=()","mingw_target?()","minimum_indent()","minmax()","minmax()","minmax()","minmax_by()","minor_version()","minor_version()","minute()","missing()","missing()","missing_extensions?()","missing_keyword_end()","missing_pairs()","missing_pipe()","mjd()","mkcol()","mkdir()","mkdir()","mkdir()","mkdir()","mkdir()","mkdir_p()","mkdir_p()","mkdir_p()","mkdir_p()","mkfifo()","mkmapexp()","mkmf_libpath()","mkpath()","mkpath()","mkpath()","mktime()","mktmpdir()","mod_add()","mod_exp()","mod_inverse()","mod_mul()","mod_sqr()","mod_sqrt()","mod_sub()","mode()","mode()","modify_lines()","module()","module?()","module?()","module_eval()","module_exec()","module_for_detailed_message()","module_function()","module_names()","modules()","modules_hash()","modules_hash()","modulo()","modulo()","modulo()","modulo()","mon()","mon()","mon_check_owner()","mon_check_owner()","mon_enter()","mon_enter()","mon_exit()","mon_exit()","mon_initialize()","mon_locked?()","mon_locked?()","mon_owned?()","mon_owned?()","mon_synchronize()","mon_synchronize()","mon_try_enter()","mon_try_enter()","monday?()","monday?()","month()","month()","most_specific_locked_platform?()","mountpoint?()","move()","move()","move()","move()","move_completed_list()","move_cursor_column()","move_cursor_column()","move_cursor_column()","move_cursor_down()","move_cursor_down()","move_cursor_down()","move_cursor_down()","move_cursor_up()","move_cursor_up()","move_cursor_up()","move_cursor_up()","msg2str()","msvc_target?()","mswin_link_args()","msys_tty?()","mtbl()","mtbl2()","mtime()","mtime()","mtime()","mtime()","mtime()","mtime=()","mu_lock()","mu_locked?()","mu_synchronize()","mu_try_lock()","mu_unlock()","mul()","mult()","multiline_off()","multiline_on()","multipart?()","multipart_form()","must_c_version()","mv()","mv()","n_indent()","n_jobs()","n_rrconflicts()","n_rrconflicts()","n_significant_digits()","n_srconflicts()","n_srconflicts()","n_useless_nonterminals()","n_useless_rules()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name=()","name=()","name=()","name_for()","name_for()","name_for()","name_for_explicit_dependency_source()","name_for_explicit_dependency_source()","name_for_locking_dependency_source()","name_for_locking_dependency_source()","name_for_path()","name_for_path()","name_list()","name_path()","name_pattern()","name_prefix()","name_prefix()","name_tuple()","name_tuple()","named_captures()","named_captures()","named_captures()","names()","names()","names()","names_to_exclude()","nan?()","nan?()","nary()","native()","native_thread_id()","need_convert?()","need_gvl?()","need_keeper?()","need_static_convert?()","needs()","negative?()","negative?()","negative?()","negative?()","nest()","nesting()","netmask()","netmask()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_alias_name()","new_comment()","new_comment()","new_cond()","new_cond()","new_ntoh()","new_offset()","new_seed()","new_start()","new_toplevel()","new_vertex_set()","new_with()","new_with()","new_with_uri()","new_with_uri()","newobj()","next()","next()","next()","next()","next()","next()","next!()","next5()","next_day()","next_down()","next_float()","next_history()","next_indent_line()","next_line()","next_month()","next_rotate_time()","next_token()","next_token()","next_token()","next_up()","next_update()","next_update()","next_update=()","next_values()","next_year()","nfa()","nfa()","nil?()","nil?()","nil_versions_are_discouraged!()","nkf()","nlink()","nlsolve()","nobits?()","nobits?()","node_id()","node_id_for_backtrace_location()","noecho()","noecho()","non_aliases()","non_nil_attributes()","nonassoc()","nonblock()","nonblock=()","nonblock?()","nonce()","nonce()","nonce=()","none?()","none?()","none?()","nonterminal?()","nonterminal_base()","nonterminals()","nonzero?()","nonzero?()","normal_char()","normalize()","normalize()","normalize()","normalize()","normalize()","normalize()","normalize!()","normalize_comment()","normalize_converters()","normalize_path()","normalize_path()","normalize_yaml_input()","normalized_file_list()","normalized_linux_version()","not!()","not_after()","not_after=()","not_before()","not_before=()","not_empty?()","not_found()","note()","note_for()","notes()","notice()","notify()","notify()","notify()","notify?()","notify?()","notify?()","notify_event()","notify_observers()","notify_observers()","now()","now()","npn_protocol()","nprocessors()","nread()","nsec()","nt_max()","ntop()","null()","null()","null=()","null=()","null?()","null?()","nullable?()","nullable?()","num_bits()","num_bytes()","num_waiting()","num_waiting()","numerator()","numerator()","numerator()","numerator()","numerator()","oauth_basic?()","object_address_group()","object_class()","object_group()","object_id()","object_nl()","object_nl=()","ocsp_uris()","oct()","oct()","oct_or_256based()","odd?()","odd?()","of()","of()","off_event()","offset()","offset()","offset_vtbl()","oflush()","oid()","oid()","oid()","oid()","oid=()","oid=()","ok?()","ok?()","ok_to_remove?()","oldest_supported_version()","ole_activex_initialize()","ole_classes()","ole_classes()","ole_free()","ole_free()","ole_func_methods()","ole_get_methods()","ole_instance_variable_get()","ole_instance_variable_set()","ole_method()","ole_method_help()","ole_methods()","ole_methods()","ole_methods_safely()","ole_obj_help()","ole_put_methods()","ole_query_interface()","ole_reference_count()","ole_respond_to?()","ole_show_help()","ole_type()","ole_type()","ole_type()","ole_type()","ole_type_detail()","ole_type_detail()","ole_typelib()","ole_typelib()","ole_types()","on()","on_char()","on_alias_error()","on_assign_error()","on_backref()","on_class_name_error()","on_comma()","on_comment()","on_connect()","on_const()","on_curve?()","on_cvar()","on_default()","on_default()","on_error()","on_error()","on_event()","on_event_with_outargs()","on_falling_indent()","on_float()","on_gvar()","on_head()","on_heredoc_beg()","on_heredoc_end()","on_ident()","on_ignored_nl()","on_ignored_sp()","on_imaginary()","on_int()","on_ivar()","on_kw()","on_lbrace()","on_lbracket()","on_lparen()","on_nl()","on_op()","on_param_error()","on_parse_error()","on_period()","on_rational()","on_rbrace()","on_rbracket()","on_rparen()","on_sp()","on_symbeg()","on_tail()","on_tstring_beg()","on_tstring_end()","on_variables()","on_windows?()","once_writer()","one?()","one?()","one?()","ongoing_visibility=()","opaque=()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open!()","open?()","open_and_lock_file()","open_cert()","open_editor()","open_file()","open_gem()","open_logfile()","open_private_key()","open_server()","open_server()","open_server()","opendir()","opened?()","operating_system_defaults()","option()","option_is_deprecated?()","option_list()","optional?()","options()","options()","options()","options()","options()","options()","options()","options=()","options=()","options_of()","optname()","or!()","ord()","ord()","order()","order()","order!()","order!()","ordering()","ordering=()","ordinal()","ordinal()","orig_initialize()","orig_name()","orig_name=()","origin()","original_env()","original_exec()","original_message()","original_name()","original_name()","original_system()","os_code()","otp()","out()","outact()","outdated()","outdated_and_latest_version()","output()","output()","output()","output()","output=()","output=()","output=()","output?()","output_conflict()","output_flag_file()","output_modifier_proc=()","output_name()","output_query_results()","output_rule()","output_state()","output_token()","output_useless()","output_versions()","outrrconf()","outsrconf()","owned?()","owned?()","owned?()","owned?()","owned?()","owner()","owner()","p()","pack()","pack()","pack_sockaddr_in()","pack_sockaddr_un()","packdw()","packhandle()","packqw()","padding=()","padding_space_with_escape_sequences()","page()","page_file()","page_name()","pair()","pair()","paragraph()","param_list()","param_seq()","parameters()","parameters()","parameters()","parameters()","params()","params()","params()","params()","params()","params=()","params_ok?()","paranoid()","parent()","parent()","parent()","parent_file_name()","parent_name()","parent_name()","parent_of()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse!()","parse!()","parse!()","parse!()","parse!()","parse_aia_asn1()","parse_alias()","parse_attr()","parse_attr_accessor()","parse_bind_options()","parse_call_parameters()","parse_class()","parse_column_end()","parse_column_value()","parse_comment()","parse_comment_tomdoc()","parse_config()","parse_constant()","parse_constant_visibility()","parse_ctype()","parse_date()","parse_dependency()","parse_dn()","parse_dot_doc_file()","parse_entries()","parse_entries()","parse_file()","parse_file()","parse_file()","parse_file()","parse_files()","parse_files_matching()","parse_gem()","parse_headers()","parse_info()","parse_int()","parse_keyseq()","parse_line()","parse_meta_attr()","parse_meta_method()","parse_method()","parse_method_dummy()","parse_method_or_yield_parameters()","parse_method_parameters()","parse_method_params_and_body()","parse_module()","parse_no_quote()","parse_openssl()","parse_option_string()","parse_printf_format()","parse_query()","parse_quotable_loose()","parse_quotable_robust()","parse_quoted_column_value()","parse_require()","parse_rescue()","parse_rfc2253()","parse_row_end()","parse_signature()","parse_statements()","parse_stream()","parse_struct_signature()","parse_symbol_arg()","parse_symbol_in_arg()","parse_time()","parse_top_level_statements()","parse_unquoted_column_value()","parse_user_code()","parse_visibility()","parse_yield()","parser()","parser()","parser()","parser()","parser()","parser=()","parser_class()","parser_class()","parser_class()","parser_enumerator()","parser_fields_converter()","parser_file()","parser_options()","partition()","partition()","pass()","passwd()","password()","password=()","password?()","password_field()","patch()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path2class()","path=()","path=()","path_ok?()","path_separator()","path_to?()","pathconf()","paths()","paths=()","pattern()","pattern()","pause()","pbkdf2_hmac()","pbkdf2_hmac()","pbkdf2_hmac_sha1()","peek()","peek()","peek()","peek()","peek()","peek()","peek_read()","peek_result()","peek_tk()","peek_values()","peep()","peer_cert()","peer_cert()","peer_cert_chain()","peer_finished_message()","peeraddr()","peeraddr()","peeraddr()","peg_parse()","pending()","pending_interrupt?()","pending_interrupt?()","percent_doc()","permutation()","permute()","permute!()","permute!()","pfamily()","phase()","phase()","phase()","pick_best!()","pid()","pid()","pid()","pid()","pin_gem_source()","pipe()","pipe?()","pipe?()","pipe?()","pipe?()","pipeline()","pipeline()","pipeline_r()","pipeline_r()","pipeline_rw()","pipeline_rw()","pipeline_start()","pipeline_start()","pipeline_w()","pipeline_w()","pkcs5_keyivgen()","pkg_config()","platform()","platform()","platform()","platform()","platform()","platform=()","platform_defaults()","platform_specific_rustc_args()","platforms()","platforms()","platforms=()","plausible_dimensions()","plugin_suffix_pattern()","plugin_suffix_regexp()","plugindir()","plugins()","point()","point=()","point_conversion_form()","point_conversion_form=()","pointer()","pointer=()","pointer_out()","polar()","polar()","polar()","policy_id()","policy_id()","policy_id=()","pools_for()","pop()","pop()","pop()","pop()","pop()","pop()","pop()","pop()","pop()","pop!()","pop_inspect_key()","pop_possibility_state()","pop_token()","pop_workspace()","popen()","popen()","popen2()","popen2()","popen2e()","popen2e()","popen3()","popen3()","popup_menu()","port=()","pos()","pos()","pos()","pos()","pos()","pos()","pos()","pos()","pos=()","pos=()","pos=()","pos=()","pos=()","pos=()","positive?()","positive?()","positive?()","possibilities()","possibilities_for_requirement()","possibility()","possibility()","possibility_satisfies_requirements?()","possible_paths()","post()","post()","post2()","post_build()","post_connection_check()","post_form()","post_install()","post_match()","post_match()","post_reset()","post_uninstall()","pow()","power()","pp()","pp()","pp()","pp()","pp()","pp()","pp()","pp()","pp_hash()","pp_object()","ppid()","ppx()","ppx()","pre_input_hook()","pre_input_hook=()","pre_input_hook=()","pre_install()","pre_install_checks()","pre_match()","pre_match()","pre_reset()","pre_uninstall()","pread()","pread()","prec()","precedence()","precedence=()","precedence_table()","precision()","precision_scale()","precs()","pred()","predecessors()","preferred_gemfile_name()","prefetch()","prefetch()","prefetch()","prefetch()","prefetch()","prefetch()","prefix()","prefix()","prefix=()","prep()","prep()","prep()","prepare()","prepare()","prepare_backslash()","prepare_force_quotes_fields()","prepare_format()","prepare_header()","prepare_header()","prepare_line()","prepare_output()","prepare_parser()","prepare_quote_character()","prepare_quoted()","prepare_separators()","prepare_skip_lines()","prepare_strip()","prepare_unquoted()","prepare_variable()","preparing_gem_layout_for()","prepend()","prepend()","prepend()","prepend()","prepend()","prepend()","prepend_destdir_if_present()","prepend_features()","prepended()","prepended()","prerelease()","prerelease=()","prerelease=()","prerelease?()","prerelease?()","prerelease?()","prerelease?()","pressed?()","pretty()","pretty_generate()","pretty_host()","pretty_inspect()","pretty_name()","pretty_name()","pretty_new_name()","pretty_old_name()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print_children()","prev_day()","prev_float()","prev_month()","prev_year()","previous_history()","previous_period_end()","primary()","prime?()","prime_fasttest?()","primitive_convert()","primitive_errinfo()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print_atab()","print_command()","print_mem_leaks()","print_tab()","print_tab_i()","print_usage()","printb()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printn()","printn()","prioritize!()","prioritizes_bundler?()","priority()","priority=()","private()","private?()","private?()","private?()","private?()","private?()","private_call?()","private_class_method()","private_constant()","private_decrypt()","private_encrypt()","private_instance_methods()","private_key()","private_key=()","private_key?()","private_method_defined?()","private_methods()","private_to_der()","private_to_pem()","proc()","proc()","proc?()","process()","process_args()","process_auto_indent()","process_insert()","process_key()","process_key_event()","process_topmost_state()","process_wait()","produce()","product()","product()","progid()","progids()","program_name()","progress_rate()","progress_reporter()","prompt_mode=()","prompt_proc=()","prompting?()","proper_subset?()","proper_superset?()","propfind()","proppatch()","protected()","protected_instance_methods()","protected_method_defined?()","protected_methods()","protected_methods()","protocol()","provide()","proxy?()","proxy_address()","proxy_auth_get()","proxy_basic_auth()","proxy_class?()","proxy_for()","proxy_from_env?()","proxy_pass()","proxy_port()","proxy_uri()","proxy_user()","proxyaddr()","proxyport()","prune()","prune()","prune_engulf()","ptr()","ptr_bug!()","public()","public?()","public?()","public?()","public?()","public_class_method()","public_constant()","public_decrypt()","public_encrypt()","public_instance_method()","public_instance_methods()","public_key()","public_key()","public_key()","public_key()","public_key()","public_key()","public_key()","public_key=()","public_key=()","public_key=()","public_key=()","public_key?()","public_method()","public_method_defined?()","public_methods()","public_methods()","public_send()","public_to_der()","public_to_pem()","purpose=()","purpose=()","push()","push()","push()","push()","push()","push()","push()","push()","push()","push()","push()","push_action()","push_initial_state()","push_inspect_key()","push_state_for_requirements()","push_workspace()","put()","put_state_transition_table()","putback()","putc()","putc()","putc()","putc()","putc()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","pwd()","pwd()","pwd()","pwd()","pwrite()","pwrite()","query=()","quiet()","quiet=()","quo()","quo()","quo()","quo()","quo()","quote()","quote()","quote_char()","quote_character()","quote_field()","quote_string()","quoted_insert()","quoting_detection_proc()","quoting_detection_proc=()","racc_accept()","racc_e_pop()","racc_next_state()","racc_print_stacks()","racc_print_states()","racc_read_token()","racc_reduce()","racc_shift()","racc_token2str()","radio_button()","radio_group()","raise()","raise()","raise()","raise()","raise_error_unless_state()","raised_exception()","rand()","rand()","rand()","rand()","rand()","rand_range()","random_add()","random_bytes()","random_bytes()","random_iv()","random_key()","random_number()","range()","range=()","range_length()","rassoc()","rassoc()","rassoc()","rationalize()","rationalize()","rationalize()","rationalize()","rationalize()","raw()","raw!()","raw_cookie()","raw_cookie2()","raw_data()","raw_encoding()","raw_spec()","rb_config()","rb_config_env()","rb_scan_args()","rdev()","rdev_major()","rdev_minor()","rdoc_installed?()","rdoc_installed?()","rdoc_options()","rdoc_options=()","rdoc_target()","rdoc_task_description()","rdoc_task_name()","re_exchange()","re_exchange()","re_exchangeable?()","re_exchangeable?()","re_sign()","re_sign_cert()","re_sign_cert()","reachable_objects_from()","reachable_objects_from_root()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read_2nd_character_of_key_sequence()","read_all()","read_all()","read_bin()","read_binary()","read_body()","read_checksums()","read_chunk()","read_directive()","read_documentation_modifiers()","read_escaped_key()","read_file()","read_file()","read_from_cmdline()","read_i()","read_io()","read_lines()","read_multipart()","read_nonblock()","read_nonblock()","read_nonblock()","read_nonblock()","read_s()","read_s()","read_s_expand()","read_smime()","read_status_line()","read_timeout=()","readable?()","readable?()","readable?()","readable?()","readable_after_eof?()","readable_after_eof?()","readable_after_eof?()","readable_after_eof?()","readable_real?()","readable_real?()","readable_real?()","readable_real?()","readagain_bytes()","readbyte()","readbyte()","readbyte()","readbyte()","readchar()","readchar()","readchar()","readchar()","readchar()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlink()","readlink()","readmultiline()","readonly?()","readpartial()","readpartial()","readpartial()","readpartial()","readpartial()","readpartial()","reads()","ready?()","real()","real()","real?()","real?()","real_load()","realdirpath()","realdirpath()","realloc()","really_verbose()","realpath()","realpath()","realtime()","realtime()","reason()","reason()","receive()","receive()","receive_if()","receive_if()","receiver()","receiver()","receiver()","receiver()","receiver()","recipients()","record()","record_depth()","record_dir()","record_location()","record_location()","record_path()","record_requirements()","recover()","rect()","rect()","rect()","rectangular()","rectangular()","rectangular()","recursive_predecessors()","recursive_successors()","recv()","recv()","recv()","recv_io()","recv_nonblock()","recvfrom()","recvfrom()","recvfrom()","recvfrom_nonblock()","recvfrom_nonblock()","recvmsg()","recvmsg_nonblock()","redact()","redact_credentials_from()","redacted()","redisplay()","reduce()","reduce()","reduce_n()","reduce_table()","ref()","ref()","reference()","refine()","refined_class()","refinements()","refresh()","refresh_line()","regenerate_binstubs()","regenerate_plugins()","regenerate_plugins()","regenerate_plugins_for()","regexp()","regexp()","regexp()","regist()","regist_server()","regist_server()","register()","register()","register()","register()","register()","register()","register_command()","register_default_spec()","register_empty()","register_engulf_block()","register_indent_block()","register_scheme()","registry=()","rehash()","rehash()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject!()","reject!()","reject!()","reject!()","relative?()","relative?()","relative_path_from()","release()","release()","reload()","remainder()","remainder()","remainder()","remote=()","remote?()","remote_address()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove_all()","remove_blank_lines()","remove_by_name()","remove_class_variable()","remove_coding_comment()","remove_commented_out_lines()","remove_const()","remove_dir()","remove_dir()","remove_entry()","remove_entry()","remove_entry_secure()","remove_entry_secure()","remove_executables()","remove_file()","remove_file()","remove_file_list()","remove_from_documentation?()","remove_frozen_string_literal()","remove_installed!()","remove_instance_variable()","remove_invisible()","remove_magic_comment()","remove_method()","remove_modeline()","remove_nodoc()","remove_nodoc_children()","remove_old_bin_files()","remove_old_lib_files()","remove_old_man_files()","remove_option()","remove_owners()","remove_plugins_for()","remove_private()","remove_private_comment()","remove_server()","remove_server()","remove_siginfo_handler()","remove_spec()","remove_specs_unsatisfied_by()","remove_stress_to_class()","remove_token_listener()","remove_unparseable()","removed_method_calls()","rename()","rename()","render_dialog()","render_each_dialog()","render_frame()","render_partial()","render_whole_lines()","renew()","renew()","reopen()","reopen()","reopen()","reopen()","reopen()","repeated_combination()","repeated_permutation()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace!()","replace_location()","replacement()","replacement=()","replicate()","reply()","reply_service()","report()","report()","report_attributes()","report_class_module()","report_constants()","report_methods()","report_on_exception()","report_on_exception()","report_on_exception=()","report_on_exception=()","represent_map()","represent_object()","represent_scalar()","represent_seq()","request()","request()","request_body_permitted?()","request_context()","request_get()","request_head()","request_path()","request_post()","request_uri()","request_uri()","request_with_otp()","requester()","requests()","require()","require()","require()","require()","require_io_console()","require_nested_dependencies_for()","require_path()","require_path=()","require_paths()","require_paths=()","require_relative()","requireables()","required_attribute?()","required_attributes()","required_ruby_version()","required_ruby_version()","required_ruby_version=()","required_rubygems_version()","required_rubygems_version()","required_rubygems_version=()","requirement()","requirement()","requirement()","requirement!()","requirement_for_existing_name()","requirement_satisfied_by?()","requirement_satisfied_by?()","requirement_satisfied_by?()","requirement_tree_for()","requirement_trees()","requirements()","requirements()","requirements()","requirements=()","requirements_list()","rerdoc_task_description()","rerdoc_task_name()","rerender()","rerender_added_newline()","rerender_all()","rerender_all_lines()","rerender_changed_current_line()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset!()","reset_default_key_bindings()","reset_default_key_bindings()","reset_dialog()","reset_line()","reset_nil_attributes_to_default()","reset_oneshot_key_bindings()","reset_paths!()","reset_rubygems!()","reset_settings_and_root!()","reset_stats!()","reset_variables()","resize()","resize()","resolve()","resolve()","resolve()","resolve()","resolve()","resolve()","resolve_activated_specs()","resolve_aliases()","resolve_class()","resolve_current()","resolve_gem_name()","resolve_method()","resolve_row_separator()","resolve_rr()","resolve_sr()","respond_to?()","respond_to?()","respond_to?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","response_body_encoding=()","response_body_permitted?()","response_class()","responses()","rest()","rest()","rest?()","rest_size()","restore()","restore()","restore()","restore()","restore()","restore()","restore()","restsize()","result()","result()","result()","result()","result_with_hash()","resume()","resume()","resume()","retrieve_comment_body()","retrieve_completion_block()","retrieve_completion_block()","retrieve_heredoc_info()","retrieve_keybuffer()","retrieve_string()","return_headers?()","return_headers?()","return_type()","return_type_detail()","return_value()","return_vtype()","retval?()","reverse()","reverse()","reverse()","reverse!()","reverse!()","reverse_each()","reverse_each()","reverse_each()","reverse_search_history()","reversed_requirement_tree_index()","revive()","revive_hash()","revocation_reason()","revocation_time()","revoked()","revoked=()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind_to()","rewind_to()","rfc1123_date()","rfc2822()","rfc2822()","rfc2822()","rfc2822()","rfc2822()","rfc3339()","rfc3339()","rfc3339()","rfc3339()","rfc822()","rfc822()","rfc822()","rfc822()","rfc822()","ri_dir()","ri_installed?()","ri_installed?()","ri_paths()","rid()","rid()","right()","rindex()","rindex()","rjust()","rm()","rm()","rm_f()","rm_f()","rm_r()","rm_r()","rm_rf()","rm_rf()","rm_rf()","rmdir()","rmdir()","rmdir()","rmdir()","rmtree()","rmtree()","rmtree()","root()","root()","root()","root?()","root?()","root_search()","root_vertex_named()","roots()","rotate()","rotate!()","round()","round()","round()","round()","round()","round()","route_from()","route_to()","row_sep()","row_separator()","rpartition()","rr_conflict()","rrconflict_exist?()","rruleid()","rshift!()","rstrip()","rstrip!()","ruby()","ruby()","ruby()","ruby2_keywords()","ruby2_keywords()","ruby2_keywords_hash()","ruby2_keywords_hash?()","ruby_api_version()","ruby_code()","ruby_engine()","ruby_install_name()","ruby_scope()","ruby_static?()","ruby_version()","rubygems_api_key()","rubygems_api_key=()","rubygems_api_request()","rubygems_deprecate()","rubygems_deprecate()","rubygems_deprecate_command()","rubygems_deprecate_command()","rubygems_target_version()","rubygems_version()","rule()","rule()","ruleid()","run()","run()","run()","run()","run()","run()","run()","run_for_operators()","running?()","runtime?()","runtime_dependencies()","runtime_source()","runtime_stats()","rustc_dynamic_linker_flags()","rustc_lib_flags()","s3_uri_signer()","safe_delete()","safe_dump()","safe_load()","safe_load()","safe_load_file()","safe_load_marshal()","safe_unlink()","safe_unlink()","same_attributes?()","sample()","sanitize()","sanitize_path()","sanitize_string()","satisfied_by?()","satisfies_requirement?()","saturday?()","saturday?()","save()","save_cache()","save_class()","save_data()","save_data_with_atomic_file_rename_strategy()","save_data_with_fast_strategy()","save_exception_mode()","save_history()","save_history=()","save_limit()","save_method()","save_page()","save_rounding_mode()","say()","say()","scalar()","scalar()","scalar()","scalar()","scalar=()","scalar?()","scalar?()","scale()","scan()","scan()","scan()","scan()","scan()","scan()","scan()","scan()","scan()","scan()","scan()","scan_action()","scan_adjacent_indent()","scan_all()","scan_error!()","scan_full()","scan_neighbors()","scan_quoted()","scan_token()","scan_until()","scan_while()","schedule()","scheduler()","scheme=()","scheme_list()","scope()","scope=()","scopes()","screen_width()","screen_width()","script_lines()","script_lines()","scroll_backward()","scroll_down()","scroll_down()","scroll_down()","scroll_down()","scroll_forward()","scrolling_list()","scrub()","scrub!()","scrypt()","search()","search()","search_const()","search_convpath()","search_file()","search_for()","search_for()","search_for()","search_for_dependency()","search_full()","search_next_char()","search_prev_char()","search_record()","search_record()","search_record()","sec()","sec()","sec_fraction()","second()","second_fraction()","section()","section_contents()","sections()","sections()","secure=()","secure_compare()","security_level()","security_level=()","see()","seed()","seed()","seed()","seed()","seed=()","seek()","seek()","seek()","seek()","seek()","seek()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select!()","select!()","select!()","select!()","self()","self_insert()","self_manager()","self_null?()","send()","send()","send()","send()","send_entity()","send_gem()","send_io()","send_owner_request()","send_push_request()","send_request()","send_request_with_body()","send_request_with_body_data()","send_request_with_body_stream()","sender()","sendmsg()","sendmsg_nonblock()","separated_by()","separated_by1()","separator()","seplist()","seq()","seq=()","sequence?()","sequence?()","serial()","serial()","serial()","serial()","serial()","serial=()","serial=()","serial_number()","serialize()","service()","session()","session=()","session_add()","session_cache_mode()","session_cache_mode=()","session_cache_size()","session_cache_size=()","session_cache_stats()","session_get_cb()","session_new_cb()","session_remove()","session_reused?()","set()","set_accept()","set_api_key()","set_api_key()","set_attributes()","set_backtrace()","set_backtrace()","set_bit!()","set_config_file_name()","set_constant_visibility_for()","set_content_type()","set_crt_params()","set_ctypes()","set_ctypes()","set_current_section()","set_cursor_pos()","set_cursor_pos()","set_debug_output()","set_default()","set_default_key_bindings()","set_default_key_bindings()","set_default_key_bindings()","set_default_key_bindings_comprehensive_list()","set_default_key_bindings_terminfo()","set_default_paths()","set_dev()","set_dialog()","set_dictionary()","set_dictionary()","set_dn()","set_encoding()","set_encoding()","set_encoding()","set_encoding_by_bom()","set_encoding_by_bom()","set_end_location()","set_eoutvar()","set_eoutvar()","set_eoutvar()","set_error()","set_extensions()","set_factors()","set_field()","set_filter()","set_flags()","set_form()","set_form_data()","set_gem_exec_install_paths()","set_generator()","set_headers()","set_host()","set_host()","set_key()","set_key()","set_key()","set_key()","set_kw_end()","set_kw_end()","set_last_value()","set_location()","set_mark()","set_minmax_proto_version()","set_opaque()","set_option()","set_options()","set_ostruct_member_value!()","set_params()","set_password()","set_password()","set_pasting_state()","set_path()","set_path()","set_payload()","set_payload()","set_port()","set_port()","set_pqg()","set_pqg()","set_range()","set_scheduler()","set_scheme()","set_scope()","set_screen_size()","set_screen_size()","set_screen_size()","set_screen_size()","set_signal_handlers()","set_start_location()","set_string()","set_table()","set_to()","set_to_infinity!()","set_trace_func()","set_trace_func()","set_typecode()","set_user()","set_user()","set_userinfo()","set_userinfo()","set_value()","set_values()","set_visibility_for()","set_winch_handler()","set_winch_handler()","set_winch_handler()","setbyte()","setconsolemode()","setegid()","seteuid()","setgid()","setgid?()","setgid?()","setgid?()","setgid?()","setgrent()","setpgid()","setpgrp()","setpriority()","setproctitle()","setproperty()","setpwent()","setregid()","setresgid()","setresuid()","setreuid()","setrgid()","setrlimit()","setruid()","setsid()","setsockopt()","setsockopt()","settings()","setuid()","setuid?()","setuid?()","setuid?()","setuid?()","setup()","setup()","setup()","setup()","setup()","setup_certificate()","setup_generator()","setup_output_dir()","setup_signer()","setup_ssl_context()","setupterm()","sev_threshold=()","seven_bit_encoding?()","sexp()","sexp_raw()","shallow_eql?()","shareable?()","shared?()","sharing_detection()","sharing_detection=()","shebang()","shebang()","shebang()","shellescape()","shellescape()","shellescape()","shelljoin()","shelljoin()","shelljoin()","shellsplit()","shellsplit()","shellsplit()","shellwords()","shellwords()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift_log_age()","shift_log_period()","shift_n()","short_name()","should_report_srconflict?()","should_terminal()","should_terminal?()","show_cursor()","show_cursor()","show_cursor()","show_documentation()","show_files()","show_gems()","show_help()","show_local_gems()","show_lookup_failure()","show_menu()","show_owners()","show_prereleases?()","show_release_notes()","show_remote_gems()","show_version()","shuffle()","shuffle!()","shutdown()","shutdown()","shutdown()","shutdown()","sid_available?()","sid_available?()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign_in()","sign_pss()","sign_raw()","signal()","signal()","signal()","signal_handle()","signal_status()","signaled?()","signame()","signature()","signature_algorithm()","signature_algorithm()","signature_algorithm()","signed?()","signed_time()","signers()","signo()","silent_system()","simplified_rendering?()","sin()","sin()","single_delegate()","singleline_format()","singleline_pp()","singleton_class()","singleton_class?()","singleton_method()","singleton_method_added()","singleton_method_removed()","singleton_method_undefined()","singleton_methods()","sinh()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size=()","size?()","size?()","size?()","size?()","size_of()","size_opt_params()","size_params()","sizeof()","skip()","skip()","skip()","skip()","skip_blanks?()","skip_blanks?()","skip_comment()","skip_during()","skip_during()","skip_for_variable()","skip_line?()","skip_lines()","skip_lines()","skip_method()","skip_missing_file_name?()","skip_needless_lines()","skip_optional_do_after_expression()","skip_parentheses()","skip_tkspace()","skip_tkspace_comment()","skip_tkspace_without_nl()","skip_until()","sleep()","sleep()","sleep()","slice()","slice()","slice()","slice()","slice()","slice()","slice()","slice!()","slice!()","slice_after()","slice_after()","slice_before()","slice_before()","slice_when()","slice_when()","sn()","snippet()","so_ext()","sockaddr_in()","sockaddr_un()","socket?()","socket?()","socket?()","socket?()","socketpair()","socketpair()","socktype()","solaris_platform?()","sort()","sort()","sort!()","sort_by()","sort_by!()","sort_dependencies()","sort_dependencies()","sort_dependencies()","sort_obj()","sort_priority()","sort_sections()","sorted()","sorted()","sorted_requests()","source()","source()","source()","source()","source()","source()","source?()","source_date_epoch()","source_date_epoch_string()","source_encoding()","source_encoding()","source_encoding()","source_encoding_name()","source_encoding_name()","source_file()","source_for()","source_location()","source_location()","source_location()","source_location()","source_ole_types()","source_paths()","source_text()","sources()","sources=()","space()","space=()","space_before()","space_before=()","spawn()","spawn()","spawn()","spec()","spec()","spec()","spec()","spec_authors()","spec_cache_dir()","spec_dir()","spec_file()","spec_file()","spec_for()","spec_for()","spec_for_dependency()","spec_groups()","spec_homepage()","spec_license()","spec_loaded_from()","spec_name()","spec_name()","spec_path()","spec_platforms()","spec_predecessors()","spec_summary()","special_prefixes()","special_prefixes=()","special_prefixes=()","specific?()","specific?()","specific_extra_args()","specific_extra_args_hash()","specs()","specs()","specs_in()","specs_path()","specs_type()","spell_checker()","spell_checker()","spell_checkers()","split()","split()","split()","split()","split()","split()","split()","split()","split_arguments()","split_by_width()","split_by_width()","split_flags()","split_gem_path()","split_path()","split_userinfo()","spot()","spot()","spot_attrasgn_for_args()","spot_attrasgn_for_name()","spot_call_for_args()","spot_call_for_name()","spot_colon2()","spot_fcall_for_args()","spot_fcall_for_name()","spot_op_asgn1_for_args()","spot_op_asgn1_for_name()","spot_op_asgn2_for_args()","spot_op_asgn2_for_name()","spot_op_cdecl()","spot_opcall_for_args()","spot_opcall_for_name()","spot_vcall()","sprintf()","sqr()","sqrt()","sqrt()","sqrt()","sqrt()","squeeze()","squeeze!()","sr_conflict()","srand()","srand()","src_type()","srconflict_exist?()","ssl_version()","ssl_version=()","sspi_auth()","sspi_auth?()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start_at_next_line()","start_collecting_tokens()","start_doc()","start_document()","start_document()","start_document()","start_keeper()","start_mapping()","start_mapping()","start_pasting()","start_resolution()","start_row()","start_sequence()","start_sequence()","start_service()","start_service()","start_stream()","start_stream()","start_stream()","start_symbol=()","start_with?()","start_with?()","start_with?()","started?()","stat()","stat()","stat()","stat()","stat()","stat()","stat()","stat_heap()","state()","state()","state()","state()","state()","state_file()","state_file_name()","state_file_writable?()","state_home()","state_transition_table()","state_transition_table()","state_transition_table()","states()","stats_enabled?()","status()","status()","status()","status()","status()","status()","status?()","status_string()","status_text()","stdinput()","stdoutput()","step()","step()","step()","step()","sticky?()","sticky?()","sticky?()","sticky?()","stop()","stop()","stop?()","stop?()","stop_after_kw()","stop_doc()","stop_pool()","stop_service()","stop_service()","stop_service()","stop_service()","stopped?()","stopsig()","storage()","storage=()","store()","store()","store()","store=()","store=()","store=()","store=()","store=()","store=()","store=()","store_for()","stream?()","stream?()","stream_end?()","streaming?()","stress()","stress=()","strftime()","strftime()","strftime()","strict_decode64()","strict_encode64()","strict_oct()","strike()","string()","string()","string()","string=()","string=()","string_list()","string_symbol?()","strip()","strip!()","strip_hashes()","strip_newlines()","strip_stars()","strip_value()","strong()","strongly_connected_components()","strongly_connected_components()","strptime()","strptime()","strptime()","struct()","stubbed?()","stubbed?()","stubs()","stubs_for()","sub()","sub()","sub()","sub()","sub()","sub!()","sub_dependencies_to_avoid()","sub_ext()","sub_type()","subclasses()","subdomain_of?()","subject()","subject()","subject=()","subject=()","subject_certificate=()","subject_key_identifier()","subject_request=()","submit()","subsec()","subset?()","subtract()","succ()","succ()","succ()","succ()","succ()","succ!()","success?()","success?()","successors()","suffix_pattern()","suffix_regexp()","suffixes()","suggest_gems_from_name()","suggestions()","sum()","sum()","sum()","summarize()","summarize()","summarize()","summary()","summary=()","sunday?()","sunday?()","super_method()","super_method()","superclass()","superclass()","superclass()","superclass=()","superclass_method()","superset?()","supply_default_content_type()","supported?()","suppress()","suppress_always_install()","suppressed?()","suspend()","suspend_context()","suspend_input_method()","suspend_name()","suspend_workspace()","swapcase()","swapcase()","swapcase!()","switch()","switch()","switch()","switch_name()","sym()","sym()","sym()","sym_defined?()","sym_defined?()","sym_int_hash()","symbol_alias?()","symbol_locations()","symbolize()","symbols()","symlink()","symlink()","symlink()","symlink?()","symlink?()","symlink?()","symlink?()","symlink?()","sync()","sync()","sync()","sync()","sync=()","sync=()","sync=()","sync_point?()","synchronize()","synchronize()","synchronize()","syntax_suggest_original_load()","syntax_suggest_original_require()","syntax_suggest_original_require_relative()","sysaccept()","sysaccept()","sysaccept()","syscall()","sysclose()","sysconf()","sysconfdir()","syslog()","syslog=()","sysopen()","sysopen()","sysread()","sysread()","sysread()","sysread_nonblock()","sysseek()","syssign()","system()","system_bindir()","systmpdir()","sysverify()","syswrite()","syswrite()","syswrite_nonblock()","table()","tag()","tag()","tag()","taint()","take()","take()","take()","take()","take()","take()","take_range()","take_while()","take_while()","take_while()","take_while_including()","tally()","tan()","tanh()","tap()","target_bin_path()","target_respond_to?()","tcp()","tcp()","tcp_server_loop()","tcp_server_sockets()","tell()","tell()","tell()","tell()","tell()","tell()","template_dir_for()","term=()","terminal()","terminal?()","terminals()","terminate()","terminate()","terminate()","terminate()","terminate()","terminate_interaction()","terminate_interaction()","terminate_interaction()","terminated?()","terminated?()","termsig()","test()","text()","text()","text()","text=()","text?()","text_field()","textarea()","then()","this()","this_update()","thread()","thread()","thread()","thread_variable?()","thread_variable_get()","thread_variable_set()","thread_variables()","throw()","thursday?()","thursday?()","tigetflag()","tigetnum()","tigetstr()","time()","time()","time()","time2wtime()","time=()","time=()","time=()","time=()","timeout()","timeout()","timeout()","timeout()","timeout()","timeout()","timeout=()","timeout=()","timeout=()","timeout_after()","timeouts=()","times()","times()","timestamp()","tiparm()","tiparm()","title()","title=()","tk_nl?()","tmp()","tmp_dh=()","tmp_dh_callback()","tmp_home_path()","tmp_key()","tmpdir()","to=()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_ary()","to_basic()","to_binary()","to_bn()","to_bn()","to_bn()","to_c()","to_c()","to_c()","to_c()","to_csv()","to_csv()","to_d()","to_d()","to_d()","to_d()","to_d()","to_d()","to_d()","to_date()","to_date()","to_date()","to_datetime()","to_datetime()","to_datetime()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_digits()","to_dot()","to_enum()","to_enum()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_fullpath()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_html()","to_html()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_id()","to_id()","to_id()","to_id()","to_id()","to_int()","to_int()","to_int()","to_int()","to_int()","to_int()","to_io()","to_io()","to_io()","to_io()","to_io()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_mailtext()","to_name()","to_name()","to_obj()","to_obj()","to_obj()","to_obj()","to_obj()","to_octet_string()","to_p()","to_p()","to_p()","to_p()","to_path()","to_path()","to_path()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_proc()","to_proc()","to_proc()","to_proc()","to_proc()","to_proc()","to_ptr()","to_ptr()","to_ptr()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_range()","to_request_set()","to_rfc822text()","to_ruby()","to_ruby()","to_ruby_for_cache()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_set()","to_set()","to_sockaddr()","to_spec()","to_spec()","to_spec()","to_specs()","to_str()","to_str()","to_string()","to_sym()","to_sym()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_time()","to_time()","to_time()","to_tty?()","to_utf8()","to_value()","to_write_io()","to_yaml()","to_yaml()","today()","toeuc()","toeuc()","toeuc()","tojis()","tojis()","tojis()","token()","token()","token()","token?()","token_info()","token_listener()","token_stream()","token_table()","token_to_str()","token_value_table()","tokenize()","tokenize()","tokenize()","tokenize()","tokens()","tokens_to_s()","tolocale()","tolocale()","tolocale()","tomdoc?()","top()","top()","top()","top()","top_level()","top_level()","toplevel?()","toplevel_load()","tosjis()","tosjis()","tosjis()","total_in()","total_out()","total_time()","total_time()","touch()","touch()","toutf16()","toutf16()","toutf16()","toutf32()","toutf32()","toutf32()","toutf8()","toutf8()","toutf8()","tr()","tr!()","tr_s()","tr_s!()","trace()","trace()","trace()","trace_exit_locations_enabled?()","trace_func()","trace_object_allocations()","trace_object_allocations_clear()","trace_object_allocations_debug_start()","trace_object_allocations_start()","trace_object_allocations_stop()","trace_points()","trace_var()","trailing_slash?()","transaction()","transfer()","transfer()","transform()","transform_args?()","transform_keys()","transform_keys!()","transform_values()","transform_values!()","translate_padding_mode()","transport_request()","transpose()","transpose()","transpose_chars()","transpose_words()","trap()","trap()","traverse()","traverse()","traverse()","traverse_parents()","tree()","tree_depth()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate_text()","trust=()","trust=()","trust_cert()","trust_dir()","trusted_certificates()","try_activate()","try_const()","try_convert()","try_convert()","try_convert()","try_convert()","try_convert()","try_convert()","try_enter()","try_lock()","try_mon_enter()","try_mon_enter()","try_type()","tsa_certificate()","tsort()","tsort()","tsort()","tsort_each()","tsort_each()","tsort_each_child()","tsort_each_child()","tsort_each_child()","tsort_each_node()","tsort_each_node()","tsort_each_node()","tty?()","tty?()","tty?()","tty?()","tty?()","tuesday?()","tuesday?()","tv_nsec()","tv_sec()","tv_usec()","type()","type()","type()","type()","type()","type()","type()","type()","type2name()","type=()","type_params()","typealias()","typecode=()","typekind()","typelibs()","typelibs()","typename()","typo_squatting?()","u()","u()","ucmp()","udp()","udp_server_loop()","udp_server_loop_on()","udp_server_recv()","udp_server_sockets()","ui()","ui()","ui()","ui()","ui=()","ui=()","ui=()","uid()","uid()","uid=()","umask()","unadvise()","uname()","unbind()","unblock()","unbundled_env()","unbundled_exec()","unbundled_system()","unconverted_fields?()","unconverted_fields?()","undef_method()","undefine_finalizer()","undefined_instance_methods()","undoc_params()","undump()","unescape()","unescape()","unescape()","unescape()","unescape()","unescape()","unescapeelement()","unescapehtml()","unescapehtml()","unescapeuricomponent()","unescapeuricomponent()","unescape_element()","unescape_html()","unget_tk()","ungetbyte()","ungetbyte()","ungetbyte()","ungetc()","ungetc()","ungetc()","ungetc()","ungetc()","ungetc()","ungetc()","ungetc()","unicode_normalize()","unicode_normalize!()","unicode_normalized?()","unindent_auto()","uninstall()","uninstall()","uninstall_all()","uninstall_dep()","uninstall_gem()","uninstall_gem()","uninstall_old_gemcutter()","uninstall_specific()","union()","union()","union()","union()","uniq()","uniq()","uniq()","uniq!()","unique_classes()","unique_classes_and_modules()","unique_modules()","unique_separator()","unix()","unix()","unix?()","unix_line_discard()","unix_path()","unix_rights()","unix_rights()","unix_server_loop()","unix_server_socket()","unix_socket_abstract_name?()","unix_word_rubout()","unknown()","unknown()","unlink()","unlink()","unlink()","unlink()","unlock()","unlock()","unpack()","unpack()","unpack()","unpack()","unpack1()","unpack_sockaddr_in()","unpack_sockaddr_un()","unpackdw()","unpackhandle()","unpackqw()","unregist()","unregister()","unregister_command()","unresolved_deps()","unresolved_specs()","unsafe_load()","unsafe_load_file()","unscan()","unset_api_key!()","unshift()","unshift()","unstruct()","untaint()","untrace_var()","unused()","unused_unwind_options()","unwind_for_conflict()","unwind_options_for_requirements()","unwinding_to_primary_requirement?()","up()","up()","up()","up()","up()","upcase()","upcase()","upcase!()","upcase_word()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update_a()","update_aliases()","update_cache?()","update_checksum()","update_extends()","update_gem()","update_gems()","update_includes()","update_index()","update_output_dir()","update_parser_of_file()","update_rubygems()","update_scope()","update_specs_index()","update_suggestion()","updated()","updated()","updated()","upgrade_to_class()","upper()","upto()","upto()","upto()","uptodate?()","uptodate?()","urandom()","uri()","uri()","uri_option()","uri_option()","url_encode()","url_encode()","urlsafe_base64()","urlsafe_decode64()","urlsafe_encode64()","usage()","use_gemdeps()","use_headers?()","use_loader()","use_loader=()","use_loader?()","use_markup()","use_paths()","use_ssl=()","use_ssl?()","use_system_gems?()","use_tracer=()","use_ui()","use_ui()","usec()","used_modules()","used_refinements()","useless=()","useless=()","useless?()","useless?()","useless_nonterminal_exist?()","useless_rule_exist?()","user()","user=()","user_agent()","user_bundle_path()","user_cache()","user_dir()","user_home()","user_home()","userinfo()","userinfo=()","using()","using_anon_cipher?()","using_rvargc?()","utc()","utc()","utc?()","utc_offset()","utime()","utime()","uuid()","valid?()","valid?()","valid?()","valid_civil?()","valid_commercial?()","valid_date?()","valid_email?()","valid_encoding?()","valid_jd?()","valid_ordinal?()","valid_uri?()","valid_v6?()","valid_without?()","validate()","validate()","validate_array_attribute()","validate_array_attributes()","validate_attribute_present()","validate_authors_field()","validate_dependencies()","validate_field_size()","validate_lazy_metadata()","validate_licenses()","validate_licenses_length()","validate_metadata()","validate_metadata()","validate_name()","validate_nil_attributes()","validate_non_files()","validate_optional()","validate_permissions()","validate_permissions()","validate_platform()","validate_require_paths()","validate_required!()","validate_required_attributes()","validate_rubygems_version()","validate_self_inclusion_in_files_list()","validate_shebang_line_in()","validate_specification_version()","validate_strip_and_col_sep_options()","validate_values()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value=()","value=()","value=()","value=()","value?()","value?()","value_der()","values()","values()","values()","values()","values()","values()","values()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","variable_kind()","variables()","varkind()","vartype()","ver()","verbose()","verbose()","verbose()","verbose=()","verbose=()","verbose?()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify_api_key()","verify_callback=()","verify_certificate()","verify_certificate_identity()","verify_certificate_identity()","verify_certificate_message()","verify_compaction_references()","verify_entry()","verify_files()","verify_internal_consistency()","verify_pss()","verify_raw()","verify_recover()","verify_result()","verify_signatures()","verify_spec()","verify_transient_heap_internal_consistency()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version=()","version=()","version=()","version=()","version=()","version_1_2()","version_1_2?()","vertex_named()","vhid()","vi_add()","vi_add_at_eol()","vi_backward_word()","vi_big_backward_word()","vi_big_forward_end_word()","vi_big_forward_word()","vi_change_meta()","vi_command_mode()","vi_delete_meta()","vi_delete_prev_char()","vi_editing_mode()","vi_editing_mode()","vi_editing_mode?()","vi_editing_mode?()","vi_end_big_word()","vi_end_of_transmission()","vi_end_word()","vi_eof_maybe()","vi_first_print()","vi_first_print()","vi_forward_end_word()","vi_forward_word()","vi_histedit()","vi_insert()","vi_insert_at_bol()","vi_join_lines()","vi_kill_line_prev()","vi_list_or_eof()","vi_movement_mode()","vi_next_big_word()","vi_next_char()","vi_next_word()","vi_paste_next()","vi_paste_prev()","vi_prev_big_word()","vi_prev_char()","vi_prev_word()","vi_replace_char()","vi_search_next()","vi_search_prev()","vi_to_column()","vi_to_history_line()","vi_to_next_char()","vi_to_prev_char()","vi_yank()","vi_zero()","visibility=()","visible?()","visible?()","visible?()","visible?()","visible?()","visible_lines()","visit()","visit_array()","visit_basicobject()","visit_bigdecimal()","visit_class()","visit_complex()","visit_date()","visit_datetime()","visit_delegator()","visit_encoding()","visit_enumerator()","visit_exception()","visit_falseclass()","visit_float()","visit_hash()","visit_integer()","visit_module()","visit_nameerror()","visit_nilclass()","visit_object()","visit_psych_nodes_alias()","visit_psych_nodes_alias()","visit_psych_nodes_alias()","visit_psych_nodes_alias()","visit_psych_nodes_document()","visit_psych_nodes_document()","visit_psych_nodes_document()","visit_psych_nodes_mapping()","visit_psych_nodes_mapping()","visit_psych_nodes_mapping()","visit_psych_nodes_scalar()","visit_psych_nodes_scalar()","visit_psych_nodes_scalar()","visit_psych_nodes_sequence()","visit_psych_nodes_sequence()","visit_psych_nodes_sequence()","visit_psych_nodes_stream()","visit_psych_nodes_stream()","visit_psych_nodes_stream()","visit_psych_omap()","visit_psych_set()","visit_range()","visit_rational()","visit_regexp()","visit_string()","visit_string()","visit_struct()","visit_symbol()","visit_symbol()","visit_time()","visit_trueclass()","visit_array_subclass()","visit_block()","visit_hash_subclass()","wait()","wait()","wait()","wait()","wait()","wait()","wait2()","wait_for_cond()","wait_for_continue()","wait_priority()","wait_readable()","wait_until()","wait_while()","wait_writable()","waitall()","waitpid()","waitpid2()","wakeup()","warn()","warn()","warn()","warn()","warn()","warn()","warn()","warn()","warn!()","warn?()","warn_cannot_uninstall_default_gems()","warning()","warning_without_suggested_alternatives()","wday()","wday()","weakref_alive?()","wednesday?()","wednesday?()","when_invoked()","which()","which_to_update()","whole_buffer()","whole_lines()","why()","why_not_ok?()","width=()","width_for()","win32_last_error()","win32_last_error=()","win32_last_socket_error()","win32_last_socket_error=()","win64?()","win?()","win?()","win?()","win_legacy_console?()","win_platform?()","win_target?()","windows_stub_script()","winsize()","winsize()","winsize=()","with()","with()","with_clean_env()","with_config()","with_env()","with_index()","with_index()","with_no_such_dependency_error_handling()","with_object()","with_original_env()","with_redacted_password()","with_redacted_user()","with_response()","with_unbundled_env()","without_circular_ref()","wordy()","wordy()","workspaces()","world_readable?()","world_readable?()","world_readable?()","world_readable?()","world_writable?()","world_writable?()","world_writable?()","world_writable?()","wrap()","wrap()","wrap()","wrap()","wrap()","wrap_method_call()","writable?()","writable?()","writable?()","writable?()","writable_real?()","writable_real?()","writable_real?()","writable_real?()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write_bin()","write_binary()","write_build_info_file()","write_cache_file()","write_default_spec()","write_deffile()","write_header()","write_headers?()","write_i()","write_log()","write_nonblock()","write_nonblock()","write_nonblock()","write_options()","write_random_file()","write_s()","write_services()","write_smime()","write_spec()","write_timeout=()","writer()","writer_fields_converter()","writer_options()","wtime2time()","xmlschema()","xmlschema()","xmlschema()","xmlschema()","xmlschema()","xmlschema()","xmp()","xor!()","y()","yaml()","yaml_tag()","yank()","yank()","yank_api_request()","yank_gem()","yank_pop()","yank_pop()","yday()","yday()","year()","year()","yield()","yield()","yield()","yield_self()","yields_directive()","yyaccept()","yydebug()","yydebug=()","yyerrok()","yyerror()","yylex()","yylex0()","zcat()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zip()","zip()","zip()","zip?()","zlib_version()","zone()","zone()","zone_id()","zone_id=()","zone_offset()","|()","|()","|()","|()","|()","|()","|()","|()","|()","|()","|()","|()","~()","~()","~()","~()","copying","copying.ja","legal","news","news-1.8.7","news-1.9.1","news-1.9.2","news-1.9.3","news-2.0.0","news-2.1.0","news-2.2.0","news-2.3.0","news-2.4.0","news-2.5.0","news-2.6.0","news-2.7.0","news-3.0.0","news-3.1.0","readme.ja","readme","bsearch","bug_triaging","case_mapping","character_selectors","command_injection","contributing","building_ruby","documentation_guide","making_changes_to_ruby","making_changes_to_stdlibs","reporting_issues","testing_ruby","dig_methods","dtrace_probes","encodings","extension.ja","extension","fiber","format_specifications","globals","implicit_conversion","keywords","maintainers","marshal","memory_view","argument_converters","creates_option","option_params","tutorial","packed_data","ractor","regexp","security","signals","standard_library","strftime_formatting","syntax","assignment","calling_methods","comments","control_expressions","exceptions","literals","methods","miscellaneous","modules_and_classes","pattern_matching","precedence","refinements","timezones","readme.win32"],"longSearchIndex":["acl","acl::aclentry","acl::acllist","argf","abbrev","addrinfo","argumenterror","array","base64","basicobject","basicsocket","benchmark","benchmark::tms","bigdecimal","bigmath","binding","bundler","cgi","cgi::cookie","cgi::escape","cgi::html3","cgi::html4","cgi::html4fr","cgi::html4tr","cgi::html5","cgi::htmlextension","cgi::invalidencoding","cgi::queryextension","cgi::session","cgi::session::filestore","cgi::session::memorystore","cgi::session::nullstore","cgi::session::pstore","cgi::util","csv","csv::deletesuffix","csv::fieldsconverter","csv::inputrecordseparator","csv::malformedcsverror","csv::matchp","csv::parser","csv::parser::inputsscanner","csv::parser::invalidencoding","csv::parser::scanner","csv::parser::unexpectederror","csv::row","csv::table","csv::writer","class","closedqueueerror","comparable","complex","continuation","coreextensions","coreextensions::tcpsocketext","coreextensions::tcpsocketext::initializer","coverage","drb","drb::drbarray","drb::drbbadscheme","drb::drbbaduri","drb::drbconn","drb::drbconnerror","drb::drberror","drb::drbidconv","drb::drbidconv","drb::drbmessage","drb::drbobject","drb::drbobject","drb::drbobservable","drb::drbprotocol","drb::drbremoteerror","drb::drbsslsocket","drb::drbsslsocket::sslconfig","drb::drbserver","drb::drbserver::invokemethod18mixin","drb::drbservernotfound","drb::drbtcpsocket","drb::drbunixsocket","drb::drbundumped","drb::drbundumped","drb::drbunknown","drb::drbunknownerror","drb::extserv","drb::extservmanager","drb::gw","drb::gwidconv","drb::threadobject","drb::timeridconv","drb::timeridconv::timerholder2","drb::timeridconv::timerholder2::invalidindexerror","drb::weakidconv","drb::weakidconv::weakset","data","date","date::error","datetime","delegator","didyoumean","didyoumean::classnamechecker","didyoumean::classnamechecker::classname","didyoumean::correctable","didyoumean::formatter","didyoumean::jaro","didyoumean::jarowinkler","didyoumean::keyerrorchecker","didyoumean::methodnamechecker","didyoumean::nameerrorcheckers","didyoumean::nullchecker","didyoumean::patternkeynamechecker","didyoumean::plainformatter","didyoumean::requirepathchecker","didyoumean::spellchecker","didyoumean::treespellchecker","didyoumean::variablenamechecker","didyoumean::verboseformatter","digest","digest::base","digest::class","digest::instance","digest::md5","digest::rmd160","digest::sha1","digest::sha2","dir","env","eoferror","erb","erb::defmethod","erb::escape","erb::util","encoding","encoding::compatibilityerror","encoding::converter","encoding::converternotfounderror","encoding::invalidbytesequenceerror","encoding::undefinedconversionerror","encodingerror","english","enumerable","enumerator","enumerator::arithmeticsequence","enumerator::chain","enumerator::generator","enumerator::lazy","enumerator::producer","enumerator::product","enumerator::yielder","errno","errorhighlight","errorhighlight::coreext","errorhighlight::defaultformatter","errorhighlight::spotter","errorhighlight::spotter::nonascii","etc","etc::group","etc::passwd","exception","falseclass","fcntl","fiber","fiber::pool","fiber::scheduler","fibererror","fiddle","fiddle::basictypes","fiddle::cparser","fiddle::cstruct","fiddle::cstructbuilder","fiddle::cstructentity","fiddle::cunion","fiddle::cunionentity","fiddle::clearedreferenceerror","fiddle::closure","fiddle::closure::blockcaller","fiddle::compositehandler","fiddle::dlerror","fiddle::error","fiddle::function","fiddle::handle","fiddle::importer","fiddle::pinned","fiddle::pointer","fiddle::structarray","fiddle::types","fiddle::win32types","file","file::constants","file::stat","filetest","fileutils","fileutils::dryrun","fileutils::nowrite","fileutils::streamutils_","fileutils::verbose","find","float","floatdomainerror","forwardable","frozenerror","gc","gc::profiler","gem","gem::availableset","gem::basicspecification","gem::bundlerversionfinder","gem::command","gem::commandlineerror","gem::commandmanager","gem::commands","gem::commands::buildcommand","gem::commands::certcommand","gem::commands::checkcommand","gem::commands::cleanupcommand","gem::commands::contentscommand","gem::commands::dependencycommand","gem::commands::environmentcommand","gem::commands::execcommand","gem::commands::fetchcommand","gem::commands::generateindexcommand","gem::commands::helpcommand","gem::commands::infocommand","gem::commands::installcommand","gem::commands::listcommand","gem::commands::lockcommand","gem::commands::mirrorcommand","gem::commands::opencommand","gem::commands::outdatedcommand","gem::commands::ownercommand","gem::commands::pristinecommand","gem::commands::pushcommand","gem::commands::querycommand","gem::commands::rdoccommand","gem::commands::searchcommand","gem::commands::servercommand","gem::commands::setupcommand","gem::commands::setupcommand::makedirs","gem::commands::signincommand","gem::commands::signoutcommand","gem::commands::sourcescommand","gem::commands::specificationcommand","gem::commands::stalecommand","gem::commands::uninstallcommand","gem::commands::unpackcommand","gem::commands::updatecommand","gem::commands::whichcommand","gem::commands::yankcommand","gem::configfile","gem::conflicterror","gem::consoleui","gem::defaultuserinteraction","gem::dependency","gem::dependencyerror","gem::dependencyinstaller","gem::dependencylist","gem::dependencyremovalexception","gem::dependencyresolutionerror","gem::deprecate","gem::doctor","gem::documenterror","gem::endofyamlexception","gem::errorreason","gem::exception","gem::ext","gem::ext::builderror","gem::ext::builder","gem::ext::cargobuilder","gem::ext::cargobuilder::dylibnotfounderror","gem::ext::cargobuilder::linkflagconverter","gem::ext::cmakebuilder","gem::ext::configurebuilder","gem::ext::extconfbuilder","gem::ext::rakebuilder","gem::filepermissionerror","gem::formatexception","gem::gemnotfoundexception","gem::gemnotinhomeexception","gem::gemrunner","gem::gemcutterutilities","gem::impossibledependencieserror","gem::indexer","gem::installerror","gem::installupdateoptions","gem::installer","gem::installer::fakepackage","gem::installeruninstallerutils","gem::invalidspecificationexception","gem::licenses","gem::list","gem::loaderror","gem::localremoteoptions","gem::missingspecerror","gem::missingspecversionerror","gem::mockgemui","gem::mockgemui::inputeoferror","gem::mockgemui::systemexitexception","gem::mockgemui::tty","gem::mockgemui::termerror","gem::nametuple","gem::noaliasyamltree","gem::operationnotsupportederror","gem::package","gem::package::digestio","gem::package::error","gem::package::formaterror","gem::package::nonseekableio","gem::package::old","gem::package::patherror","gem::package::symlinkerror","gem::package::tarheader","gem::package::tarinvaliderror","gem::package::tarreader","gem::package::tarreader::entry","gem::package::tarreader::unexpectedeof","gem::package::tarwriter","gem::package::tarwriter::boundedstream","gem::package::tarwriter::fileoverflow","gem::package::tarwriter::restrictedstream","gem::package::toolongfilename","gem::packagetask","gem::pathsupport","gem::platform","gem::platformmismatch","gem::queryutils","gem::remoteerror","gem::remotefetcher","gem::remotefetcher::fetcherror","gem::remotefetcher::unknownhosterror","gem::remoteinstallationcancelled","gem::remoteinstallationskipped","gem::remotesourceexception","gem::request","gem::requestset","gem::requestset::gemdependencyapi","gem::requestset::lockfile","gem::requestset::lockfile::parseerror","gem::requestset::lockfile::parser","gem::requestset::lockfile::tokenizer","gem::requirement","gem::requirement::badrequirementerror","gem::resolver","gem::resolver::apiset","gem::resolver::apiset::gemparser","gem::resolver::apispecification","gem::resolver::activationrequest","gem::resolver::bestset","gem::resolver::composedset","gem::resolver::conflict","gem::resolver::currentset","gem::resolver::dependencyrequest","gem::resolver::gitset","gem::resolver::gitspecification","gem::resolver::indexset","gem::resolver::indexspecification","gem::resolver::installedspecification","gem::resolver::installerset","gem::resolver::localspecification","gem::resolver::lockset","gem::resolver::lockspecification","gem::resolver::molinillo","gem::resolver::molinillo::circulardependencyerror","gem::resolver::molinillo::delegates","gem::resolver::molinillo::delegates::resolutionstate","gem::resolver::molinillo::delegates::specificationprovider","gem::resolver::molinillo::dependencygraph","gem::resolver::molinillo::dependencygraph::action","gem::resolver::molinillo::dependencygraph::addedgenocircular","gem::resolver::molinillo::dependencygraph::deleteedge","gem::resolver::molinillo::dependencygraph::detachvertexnamed","gem::resolver::molinillo::dependencygraph::log","gem::resolver::molinillo::dependencygraph::tag","gem::resolver::molinillo::dependencygraph::vertex","gem::resolver::molinillo::dependencystate","gem::resolver::molinillo::nosuchdependencyerror","gem::resolver::molinillo::possibilitystate","gem::resolver::molinillo::resolutionstate","gem::resolver::molinillo::resolver","gem::resolver::molinillo::resolver::resolution","gem::resolver::molinillo::resolver::resolution::conflict","gem::resolver::molinillo::resolver::resolution::possibilityset","gem::resolver::molinillo::resolver::resolution::unwinddetails","gem::resolver::molinillo::resolvererror","gem::resolver::molinillo::specificationprovider","gem::resolver::molinillo::ui","gem::resolver::molinillo::versionconflict","gem::resolver::requirementlist","gem::resolver::set","gem::resolver::sourceset","gem::resolver::specspecification","gem::resolver::specification","gem::resolver::stats","gem::resolver::vendorset","gem::resolver::vendorspecification","gem::rubyversionmismatch","gem::runtimerequirementnotmeterror","gem::s3urisigner","gem::s3urisigner::configurationerror","gem::s3urisigner::instanceprofileerror","gem::safeyaml","gem::security","gem::security::exception","gem::security::policy","gem::security::signer","gem::security::trustdir","gem::securityoption","gem::silentui","gem::silentui::nullio","gem::source","gem::source::git","gem::source::installed","gem::source::local","gem::source::lock","gem::source::specificfile","gem::source::vendor","gem::sourcefetchproblem","gem::sourcelist","gem::specfetcher","gem::specificgemnotfoundexception","gem::specification","gem::specificationpolicy","gem::streamui","gem::streamui::silentdownloadreporter","gem::streamui::silentprogressreporter","gem::streamui::simpleprogressreporter","gem::streamui::threadeddownloadreporter","gem::streamui::verboseprogressreporter","gem::stubspecification","gem::systemexitexception","gem::text","gem::uninstallerror","gem::uninstaller","gem::unknowncommanderror","gem::unknowncommandspellchecker","gem::unsatisfiabledependencyerror","gem::updatesuggestion","gem::uri","gem::uriformatter","gem::userinteraction","gem::util","gem::validator","gem::verificationerror","gem::version","gem::versionoption","getoptlong","getoptlong::ambiguousoption","getoptlong::error","getoptlong::invalidoption","getoptlong::missingargument","getoptlong::needlessargument","hash","io","io::buffer","io::buffer::accesserror","io::buffer::allocationerror","io::buffer::invalidatederror","io::buffer::lockederror","io::buffer::maskerror","io::eagainwaitreadable","io::eagainwaitwritable","io::einprogresswaitreadable","io::einprogresswaitwritable","io::ewouldblockwaitreadable","io::ewouldblockwaitwritable","io::timeouterror","io::waitreadable","io::waitwritable","io::generic_readable","io::generic_writable","ioerror","ipaddr","ipaddr::addressfamilyerror","ipaddr::error","ipaddr::invalidaddresserror","ipaddr::invalidprefixerror","ipsocket","irb","irb::abort","irb::cantchangebinding","irb::cantreturntonormalmode","irb::canvas","irb::color","irb::color::symbolstate","irb::colorprinter","irb::context","irb::contextextender","irb::extendcommand","irb::extendcommand::backtrace","irb::extendcommand::break","irb::extendcommand::catch","irb::extendcommand::changeworkspace","irb::extendcommand::commandargumenterror","irb::extendcommand::continue","irb::extendcommand::currentworkingworkspace","irb::extendcommand::debug","irb::extendcommand::debug::debugger__","irb::extendcommand::debug::skippathhelperforirb","irb::extendcommand::debugcommand","irb::extendcommand::delete","irb::extendcommand::edit","irb::extendcommand::finish","irb::extendcommand::foreground","irb::extendcommand::fork","irb::extendcommand::help","irb::extendcommand::info","irb::extendcommand::irbcommand","irb::extendcommand::irbinfo","irb::extendcommand::jobs","irb::extendcommand::kill","irb::extendcommand::load","irb::extendcommand::loadercommand","irb::extendcommand::ls","irb::extendcommand::ls::output","irb::extendcommand::measure","irb::extendcommand::multiirbcommand","irb::extendcommand::next","irb::extendcommand::nop","irb::extendcommand::popworkspace","irb::extendcommand::pushworkspace","irb::extendcommand::require","irb::extendcommand::showcmds","irb::extendcommand::showsource","irb::extendcommand::source","irb::extendcommand::step","irb::extendcommand::whereami","irb::extendcommand::workspaces","irb::extendcommandbundle","irb::fileinputmethod","irb::frame","irb::frame::frameoverflow","irb::frame::frameunderflow","irb::history","irb::illegalparameter","irb::illegalrcgenerator","irb::inputmethod","irb::inspector","irb::irb","irb::irbalreadydead","irb::irbloader","irb::irbswitchedtocurrentthread","irb::jobmanager","irb::loadabort","irb::locale","irb::magicfile","irb::methodextender","irb::nosuchjob","irb::notimplementederror","irb::notifier","irb::notifier::abstractnotifier","irb::notifier::compositenotifier","irb::notifier::errundefinednotifier","irb::notifier::errunrecognizedlevel","irb::notifier::levelednotifier","irb::notifier::nomsgnotifier","irb::outputmethod","irb::outputmethod::notimplementederror","irb::readlineinputmethod","irb::reidlineinputmethod","irb::relineinputmethod","irb::rubymodel","irb::stdioinputmethod","irb::stdiooutputmethod","irb::undefinedpromptmode","irb::unrecognizedswitch","irb::vec","irb::workspace","indexerror","integer","interrupt","json","json::circulardatastructure","json::ext","json::ext::generator","json::ext::generator::state","json::ext::parser","json::generatorerror","json::genericobject","json::jsonerror","json::missingunicodesupport","json::nestingerror","json::parsererror","jacobian","kconv","kernel","keyerror","lusolve","loaderror","localjumperror","logger","logger::formatter","logger::logdevice","logger::period","logger::severity","makemakefile","makemakefile::logging","makemakefile::rbconfig","marshal","matchdata","math","math::domainerror","method","module","monitor","monitormixin","monitormixin::conditionvariable","mutex_m","nkf","nameerror","net","net::http","net::http::copy","net::http::delete","net::http::get","net::http::head","net::http::lock","net::http::mkcol","net::http::move","net::http::options","net::http::patch","net::http::post","net::http::propfind","net::http::proppatch","net::http::put","net::http::trace","net::http::unlock","net::httpaccepted","net::httpalreadyreported","net::httpbadgateway","net::httpbadrequest","net::httpbadresponse","net::httpclienterror","net::httpclientexception","net::httpconflict","net::httpcontinue","net::httpcreated","net::httpearlyhints","net::httperror","net::httpexceptions","net::httpexpectationfailed","net::httpfaileddependency","net::httpfatalerror","net::httpforbidden","net::httpfound","net::httpgatewaytimeout","net::httpgatewaytimeout","net::httpgenericrequest","net::httpgone","net::httpheader","net::httpheadersyntaxerror","net::httpimused","net::httpinformation","net::httpinsufficientstorage","net::httpinternalservererror","net::httplengthrequired","net::httplocked","net::httploopdetected","net::httpmethodnotallowed","net::httpmisdirectedrequest","net::httpmovedpermanently","net::httpmovedtemporarily","net::httpmultistatus","net::httpmultiplechoice","net::httpmultiplechoices","net::httpnetworkauthenticationrequired","net::httpnocontent","net::httpnonauthoritativeinformation","net::httpnotacceptable","net::httpnotextended","net::httpnotfound","net::httpnotimplemented","net::httpnotmodified","net::httpok","net::httppartialcontent","net::httppayloadtoolarge","net::httppaymentrequired","net::httppermanentredirect","net::httppreconditionfailed","net::httppreconditionrequired","net::httpprocessing","net::httpproxyauthenticationrequired","net::httprangenotsatisfiable","net::httpredirection","net::httprequest","net::httprequestentitytoolarge","net::httprequestheaderfieldstoolarge","net::httprequesttimeout","net::httprequesttimeout","net::httprequesturitoolarge","net::httprequesturitoolong","net::httprequestedrangenotsatisfiable","net::httpresetcontent","net::httpresponse","net::httpretriableerror","net::httpseeother","net::httpservererror","net::httpserviceunavailable","net::httpsuccess","net::httpswitchprotocol","net::httptemporaryredirect","net::httptoomanyrequests","net::httpuritoolong","net::httpunauthorized","net::httpunavailableforlegalreasons","net::httpunknownresponse","net::httpunprocessableentity","net::httpunsupportedmediatype","net::httpupgraderequired","net::httpuseproxy","net::httpvariantalsonegotiates","net::httpversionnotsupported","net::opentimeout","net::protoautherror","net::protocommanderror","net::protofatalerror","net::protoretriableerror","net::protoservererror","net::protosyntaxerror","net::protounknownerror","net::protocretryerror","net::protocolerror","net::readtimeout","net::writeadapter","net::writetimeout","newton","nilclass","nomatchingpatternerror","nomatchingpatternkeyerror","nomemoryerror","nomethoderror","notimplementederror","numeric","oleproperty","object","objectspace","objectspace::internalobjectwrapper","objectspace::weakmap","observable","open3","openssl","openssl::asn1","openssl::asn1::asn1data","openssl::asn1::asn1error","openssl::asn1::constructive","openssl::asn1::objectid","openssl::asn1::primitive","openssl::bn","openssl::bnerror","openssl::buffering","openssl::buffering::buffer","openssl::cipher","openssl::cipher::cipher","openssl::cipher::ciphererror","openssl::config","openssl::configerror","openssl::digest","openssl::digest::digesterror","openssl::engine","openssl::engine::engineerror","openssl::hmac","openssl::hmacerror","openssl::kdf","openssl::kdf::kdferror","openssl::marshal","openssl::marshal::classmethods","openssl::netscape","openssl::netscape::spki","openssl::netscape::spkierror","openssl::ocsp","openssl::ocsp::basicresponse","openssl::ocsp::certificateid","openssl::ocsp::ocsperror","openssl::ocsp::request","openssl::ocsp::response","openssl::ocsp::singleresponse","openssl::opensslerror","openssl::pkcs12","openssl::pkcs12::pkcs12error","openssl::pkcs5","openssl::pkcs7","openssl::pkcs7::pkcs7error","openssl::pkcs7::recipientinfo","openssl::pkcs7::signerinfo","openssl::pkey","openssl::pkey::dh","openssl::pkey::dherror","openssl::pkey::dsa","openssl::pkey::dsaerror","openssl::pkey::ec","openssl::pkey::ec::group","openssl::pkey::ec::group::error","openssl::pkey::ec::point","openssl::pkey::ec::point::error","openssl::pkey::ecerror","openssl::pkey::pkey","openssl::pkey::pkeyerror","openssl::pkey::rsa","openssl::pkey::rsaerror","openssl::random","openssl::random::randomerror","openssl::ssl","openssl::ssl::sslcontext","openssl::ssl::sslerror","openssl::ssl::sslerrorwaitreadable","openssl::ssl::sslerrorwaitwritable","openssl::ssl::sslserver","openssl::ssl::sslsocket","openssl::ssl::session","openssl::ssl::session::sessionerror","openssl::ssl::socketforwarder","openssl::timestamp","openssl::timestamp::factory","openssl::timestamp::request","openssl::timestamp::response","openssl::timestamp::timestamperror","openssl::timestamp::tokeninfo","openssl::x509","openssl::x509::attribute","openssl::x509::attributeerror","openssl::x509::crl","openssl::x509::crlerror","openssl::x509::certificate","openssl::x509::certificateerror","openssl::x509::extension","openssl::x509::extension::authorityinfoaccess","openssl::x509::extension::authoritykeyidentifier","openssl::x509::extension::crldistributionpoints","openssl::x509::extension::helpers","openssl::x509::extension::subjectkeyidentifier","openssl::x509::extensionerror","openssl::x509::extensionfactory","openssl::x509::name","openssl::x509::name::rfc2253dn","openssl::x509::nameerror","openssl::x509::request","openssl::x509::requesterror","openssl::x509::revoked","openssl::x509::revokederror","openssl::x509::store","openssl::x509::storecontext","openssl::x509::storeerror","openstruct","openuri","openuri::httperror","openuri::httpredirect","openuri::meta","openuri::openread","optionparser","optionparser::ac","optionparser::acceptables","optionparser::ambiguousargument","optionparser::ambiguousoption","optionparser::arguable","optionparser::completinghash","optionparser::completion","optionparser::invalidargument","optionparser::invalidoption","optionparser::list","optionparser::missingargument","optionparser::needlessargument","optionparser::optionmap","optionparser::parseerror","optionparser::switch","optionparser::switch::noargument","optionparser::switch::optionalargument","optionparser::switch::placedargument","optionparser::switch::requiredargument","pp","pp::ppmethods","pstore","pstore::error","pty","pty::childexited","pathname","prettyprint","prettyprint::singleline","proc","process","process::gid","process::status","process::sys","process::tms","process::uid","psych","psych::aliasesnotenabled","psych::anchornotdefined","psych::badalias","psych::classloader","psych::classloader::restricted","psych::coder","psych::config","psych::disallowedclass","psych::emitter","psych::exception","psych::handler","psych::handler::dumperoptions","psych::handlers","psych::handlers::recorder","psych::json","psych::json::stream","psych::json::treebuilder","psych::nodes","psych::nodes::alias","psych::nodes::document","psych::nodes::mapping","psych::nodes::node","psych::nodes::scalar","psych::nodes::sequence","psych::nodes::stream","psych::omap","psych::parser","psych::parser::mark","psych::scalarscanner","psych::set","psych::stream","psych::streaming","psych::streaming::classmethods","psych::syntaxerror","psych::treebuilder","psych::visitors","psych::visitors::depthfirst","psych::visitors::emitter","psych::visitors::jsontree","psych::visitors::noaliasruby","psych::visitors::restrictedyamltree","psych::visitors::toruby","psych::visitors::visitor","psych::visitors::yamltree","rdoc","rdoc","rdoc::alias","rdoc::anonclass","rdoc::anymethod","rdoc::attr","rdoc::classmodule","rdoc::codeobject","rdoc::comment","rdoc::constant","rdoc::context","rdoc::crossreference","rdoc::erbio","rdoc::erbpartial","rdoc::encoding","rdoc::error","rdoc::extend","rdoc::generator","rdoc::ghostmethod","rdoc::i18n","rdoc::include","rdoc::markdown","rdoc::markdown::memoentry","rdoc::markdown::parseerror","rdoc::markdown::ruleinfo","rdoc::markup","rdoc::markupreference","rdoc::markupreference::dummyclass","rdoc::markupreference::dummymodule","rdoc::metamethod","rdoc::methodattr","rdoc::mixin","rdoc::normalclass","rdoc::normalmodule","rdoc::options","rdoc::parser","rdoc::parser::c","rdoc::parser::changelog","rdoc::parser::changelog::git","rdoc::parser::markdown","rdoc::parser::rd","rdoc::parser::ripperstatelex","rdoc::parser::ripperstatelex::innerstatelex","rdoc::parser::ruby","rdoc::parser::rubytools","rdoc::parser::simple","rdoc::parser::text","rdoc::rd","rdoc::rdoc","rdoc::ri","rdoc::ri::error","rdoc::require","rdoc::rubygemshook","rdoc::servlet","rdoc::singleclass","rdoc::stats","rdoc::store","rdoc::store::error","rdoc::store::missingfileerror","rdoc::task","rdoc::text","rdoc::tokenstream","rdoc::tomdoc","rdoc::toplevel","racc","racc::accept","racc::actiontable","racc::compileerror","racc::cparseparams","racc::debugflags","racc::error","racc::goto","racc::grammar","racc::grammar::definitionenv","racc::grammar::precedencedefinitionenv","racc::grammarfileparser","racc::grammarfileparser::result","racc::grammarfilescanner","racc::iset","racc::item","racc::locationpointer","racc::logfilegenerator","racc::ormark","racc::parseerror","racc::parser","racc::parserclassgenerator","racc::parserfilegenerator","racc::parserfilegenerator::params","racc::prec","racc::rrconflict","racc::reduce","racc::rule","racc::srconflict","racc::shift","racc::sourcetext","racc::state","racc::statetransitiontable","racc::statetransitiontablegenerator","racc::states","racc::sym","racc::symboltable","racc::useraction","ractor","ractor::closederror","ractor::error","ractor::isolationerror","ractor::movederror","ractor::movedobject","ractor::remoteerror","ractor::unsafeerror","rake","random","random::formatter","range","rangeerror","rational","readline","refinement","regexp","regexp::timeouterror","regexperror","reline","reline::ansi","reline::config","reline::config::invalidinputrc","reline::configencodingconversionerror","reline::core","reline::generalio","reline::history","reline::keyactor","reline::keyactor::base","reline::keyactor::emacs","reline::keyactor::vicommand","reline::keyactor::viinsert","reline::keystroke","reline::killring","reline::killring::ringbuffer","reline::killring::state","reline::lineeditor","reline::lineeditor::completionstate","reline::lineeditor::dialog","reline::lineeditor::dialogprocscope","reline::terminfo","reline::terminfo::stringwithtiparm","reline::terminfo::terminfoerror","reline::unicode","reline::unicode::eastasianwidth","reline::windows","reline::windows::keyeventrecord","reline::windows::win32api","resolv","resolv","resolv::dns","resolv::dns::config","resolv::dns::config::nxdomain","resolv::dns::config::otherresolverror","resolv::dns::decodeerror","resolv::dns::encodeerror","resolv::dns::name","resolv::dns::query","resolv::dns::requester","resolv::dns::requester::requesterror","resolv::dns::resource","resolv::dns::resource::any","resolv::dns::resource::cname","resolv::dns::resource::domainname","resolv::dns::resource::generic","resolv::dns::resource::hinfo","resolv::dns::resource::in","resolv::dns::resource::in::a","resolv::dns::resource::in::aaaa","resolv::dns::resource::in::srv","resolv::dns::resource::in::wks","resolv::dns::resource::loc","resolv::dns::resource::minfo","resolv::dns::resource::mx","resolv::dns::resource::ns","resolv::dns::resource::ptr","resolv::dns::resource::soa","resolv::dns::resource::txt","resolv::hosts","resolv::ipv4","resolv::ipv6","resolv::loc","resolv::loc::alt","resolv::loc::coord","resolv::loc::size","resolv::mdns","resolv::resolverror","resolv::resolvtimeout","resolv::sz","rinda","rinda::drbobjecttemplate","rinda::invalidhashtuplekey","rinda::notifytemplateentry","rinda::requestcancelederror","rinda::requestexpirederror","rinda::rindaerror","rinda::ringfinger","rinda::ringprovider","rinda::ringserver","rinda::simplerenewer","rinda::template","rinda::templateentry","rinda::tuple","rinda::tuplebag","rinda::tuplebag::tuplebin","rinda::tupleentry","rinda::tuplespace","rinda::tuplespaceproxy","rinda::waittemplateentry","ripper","ripper::filter","ripper::lexer","ripper::lexer::elem","ripper::lexer::state","rubylex","rubylex::terminatelineinput","rubyvm","rubyvm::abstractsyntaxtree","rubyvm::abstractsyntaxtree::node","rubyvm::instructionsequence","rubyvm::mjit","rubyvm::mjit::cpointer","rubyvm::mjit::cpointer::bitfield","rubyvm::mjit::cpointer::bool","rubyvm::mjit::cpointer::immediate","rubyvm::mjit::cpointer::pointer","rubyvm::mjit::cpointer::struct","rubyvm::mjit::cpointer::union","rubyvm::mjit::ctype","rubyvm::mjit::ctype::bitfield","rubyvm::mjit::ctype::bool","rubyvm::mjit::ctype::immediate","rubyvm::mjit::ctype::pointer","rubyvm::mjit::ctype::struct","rubyvm::mjit::ctype::union","rubyvm::shape","rubyvm::yjit","runtimeerror","sockssocket","scripterror","securerandom","securityerror","set","shellwords","signal","signalexception","simpledelegator","singleforwardable","singleton","socket","socket::ancillarydata","socket::constants","socket::ifaddr","socket::option","socket::udpsource","socketerror","standarderror","stopiteration","string","stringio","stringscanner","stringscanner::error","struct","symbol","syntaxerror","syntaxsuggest","syntaxsuggest::aroundblockscan","syntaxsuggest::blockexpand","syntaxsuggest::capturecodecontext","syntaxsuggest::cleandocument","syntaxsuggest::cli","syntaxsuggest::codeblock","syntaxsuggest::codefrontier","syntaxsuggest::codeline","syntaxsuggest::codesearch","syntaxsuggest::displaycodewithlinenumbers","syntaxsuggest::displayinvalidblocks","syntaxsuggest::error","syntaxsuggest::explainsyntax","syntaxsuggest::leftrightlexcount","syntaxsuggest::lexall","syntaxsuggest::lexvalue","syntaxsuggest::ministringio","syntaxsuggest::parseblocksfromindentline","syntaxsuggest::pathnamefrommessage","syntaxsuggest::priorityengulfqueue","syntaxsuggest::priorityqueue","syntaxsuggest::rippererrors","syntaxsuggest::unvisitedlines","syslog","syslog::constants","syslog::facility","syslog::level","syslog::logger","syslog::logger::formatter","syslog::macros","syslog::option","systemcallerror","systemexit","systemstackerror","tcpserver","tcpsocket","tsort","tsort::cyclic","tempfile","thread","thread::backtrace","thread::backtrace::location","thread::conditionvariable","thread::mutex","thread::queue","thread::sizedqueue","threaderror","threadgroup","time","timeout","timeout::error","timeout::request","tracepoint","trueclass","typeerror","udpsocket","unixserver","unixsocket","uri","uri::badurierror","uri::error","uri::ftp","uri::file","uri::generic","uri::http","uri::https","uri::invalidcomponenterror","uri::invalidurierror","uri::ldap","uri::ldaps","uri::mailto","uri::parser","uri::regexp","uri::rfc2396_parser","uri::rfc2396_regexp","uri::rfc2396_regexp::pattern","uri::schemes","uri::ws","uri::wss","unboundmethod","uncaughtthrowerror","unicodenormalize","win32ole","win32ole::event","win32ole::method","win32ole::param","win32ole::record","win32ole::type","win32ole::typelib","win32ole::variant","win32ole::variable","win32ole::variant","win32olequeryinterfaceerror","win32oleruntimeerror","warning","weakref","weakref::referror","win32","win32::registry","win32::registry::api","win32::registry::constants","win32::registry::error","win32::registry::error::kernel32","win32::registry::predefinedkey","win32::sspi","win32::sspi::api","win32::sspi::identity","win32::sspi::negotiateauth","win32::sspi::sspiresult","win32::sspi::securitybuffer","win32::sspi::securityhandle","win32::sspi::timestamp","xmp","xmp::stringinputmethod","yaml","yaml::dbm","yaml::store","zerodivisionerror","zlib","zlib::buferror","zlib::dataerror","zlib::deflate","zlib::error","zlib::gzipfile","zlib::gzipfile::crcerror","zlib::gzipfile::error","zlib::gzipfile::lengtherror","zlib::gzipfile::nofooter","zlib::gzipreader","zlib::gzipwriter","zlib::inprogresserror","zlib::inflate","zlib::memerror","zlib::needdict","zlib::streamend","zlib::streamerror","zlib::versionerror","zlib::zstream","fatal","basicobject#!()","delegator#!()","ractor::movedobject#!()","basicobject#!=()","delegator#!=()","ractor::movedobject#!=()","object#!~()","bigdecimal#%()","float#%()","integer#%()","numeric#%()","openssl::bn#%()","range#%()","string#%()","array#&()","falseclass#&()","io::buffer#&()","ipaddr#&()","integer#&()","nilclass#&()","process::status#&()","ripper::lexer::state#&()","set#&()","trueclass#&()","array#*()","benchmark::tms#*()","bigdecimal#*()","complex#*()","float#*()","integer#*()","openssl::bn#*()","rational#*()","string#*()","bigdecimal#**()","complex#**()","float#**()","integer#**()","openssl::bn#**()","rational#**()","array#+()","benchmark::tms#+()","bigdecimal#+()","complex#+()","date#+()","enumerator#+()","fiddle::pointer#+()","float#+()","integer#+()","openssl::bn#+()","pathname#+()","rational#+()","set#+()","string#+()","time#+()","uri::generic#+()","bigdecimal#+@()","fiddle::pointer#+@()","numeric#+@()","openssl::bn#+@()","string#+@()","array#-()","benchmark::tms#-()","bigdecimal#-()","complex#-()","date#-()","fiddle::pointer#-()","float#-()","integer#-()","openssl::bn#-()","rational#-()","set#-()","time#-()","uri::generic#-()","bigdecimal#-@()","complex#-@()","fiddle::pointer#-@()","float#-@()","integer#-@()","numeric#-@()","openssl::bn#-@()","rational#-@()","string#-@()","benchmark::tms#/()","bigdecimal#/()","complex#/()","float#/()","integer#/()","openssl::bn#/()","pathname#/()","rational#/()","bigdecimal#<()","comparable#<()","float#<()","hash#<()","integer#<()","module#<()","set#<()","array#<<()","csv#<<()","csv::row#<<()","csv::table#<<()","csv::writer#<<()","date#<<()","digest::base#<<()","digest::instance#<<()","digest::sha2#<<()","gem::availableset#<<()","gem::sourcelist#<<()","io#<<()","io::generic_writable#<<()","ipaddr#<<()","integer#<<()","logger#<<()","method#<<()","net::writeadapter#<<()","openssl::bn#<<()","openssl::buffering#<<()","openssl::buffering::buffer#<<()","openssl::digest#<<()","openssl::hmac#<<()","proc#<<()","psych::visitors::yamltree#<<()","ractor#<<()","reline::history#<<()","reline::killring::ringbuffer#<<()","set#<<()","string#<<()","stringscanner#<<()","syntaxsuggest::codefrontier#<<()","syntaxsuggest::priorityqueue#<<()","thread::queue#<<()","thread::sizedqueue#<<()","zlib::deflate#<<()","zlib::gzipwriter#<<()","zlib::inflate#<<()","bigdecimal#<=()","comparable#<=()","float#<=()","hash#<=()","integer#<=()","module#<=()","set#<=()","array#<=>()","bigdecimal#<=>()","complex#<=>()","date#<=>()","fiddle::pointer#<=>()","file::stat#<=>()","float#<=>()","gem::dependency#<=>()","gem::nametuple#<=>()","gem::resolver::molinillo::resolver::resolution::unwinddetails#<=>()","gem::source#<=>()","gem::source::git#<=>()","gem::source::installed#<=>()","gem::source::local#<=>()","gem::source::specificfile#<=>()","gem::source::vendor#<=>()","gem::version#<=>()","io::buffer#<=>()","ipaddr#<=>()","irb::notifier::levelednotifier#<=>()","integer#<=>()","module#<=>()","numeric#<=>()","object#<=>()","openssl::bn#<=>()","openssl::x509::name#<=>()","pathname#<=>()","rdoc::alias#<=>()","rdoc::constant#<=>()","rdoc::context#<=>()","rdoc::methodattr#<=>()","rdoc::mixin#<=>()","rational#<=>()","set#<=>()","string#<=>()","symbol#<=>()","syntaxsuggest::codeblock#<=>()","syntaxsuggest::codeline#<=>()","time#<=>()","array#==()","basicobject#==()","bigdecimal#==()","csv::row#==()","csv::table#==()","comparable#==()","complex#==()","data#==()","delegator#==()","digest::instance#==()","encoding::converter#==()","enumerator::arithmeticsequence#==()","exception#==()","fiddle::pointer#==()","float#==()","gem::nametuple#==()","gem::platform#==()","gem::resolver::indexspecification#==()","gem::resolver::molinillo::dependencygraph#==()","gem::resolver::molinillo::dependencygraph::vertex#==()","hash#==()","ipaddr#==()","integer#==()","matchdata#==()","method#==()","module#==()","openssl::asn1::objectid#==()","openssl::bn#==()","openssl::hmac#==()","openssl::pkey::ec::group#==()","openssl::pkey::ec::point#==()","openssl::ssl::session#==()","openssl::x509::attribute#==()","openssl::x509::crl#==()","openssl::x509::certificate#==()","openssl::x509::extension#==()","openssl::x509::request#==()","openssl::x509::revoked#==()","openstruct#==()","pathname#==()","proc#==()","process::status#==()","rdoc::attr#==()","rdoc::constant#==()","rdoc::toplevel#==()","racc::locationpointer#==()","racc::rule#==()","racc::state#==()","ractor::movedobject#==()","random#==()","range#==()","rational#==()","regexp#==()","ripper::lexer::state#==()","set#==()","string#==()","struct#==()","symbol#==()","uri::generic#==()","unboundmethod#==()","win32::sspi::sspiresult#==()","bigdecimal#===()","date#===()","enumerator::arithmeticsequence#===()","falseclass#===()","float#===()","gem::dependency#===()","gem::platform#===()","gem::requirement#===()","ipaddr#===()","integer#===()","method#===()","module#===()","nilclass#===()","object#===()","openssl::bn#===()","pathname#===()","proc#===()","range#===()","regexp#===()","rinda::drbobjecttemplate#===()","rinda::template#===()","rinda::templateentry#===()","set#===()","string#===()","symbol#===()","systemcallerror::===()","trueclass#===()","gem::dependency#=~()","gem::platform#=~()","gem::requirement#=~()","nilclass#=~()","regexp#=~()","string#=~()","symbol#=~()","bigdecimal#>()","comparable#>()","float#>()","hash#>()","integer#>()","module#>()","set#>()","bigdecimal#>=()","comparable#>=()","float#>=()","hash#>=()","integer#>=()","module#>=()","set#>=()","date#>>()","ipaddr#>>()","integer#>>()","method#>>()","openssl::bn#>>()","proc#>>()","process::status#>>()","kernel#array()","kernel#bigdecimal()","object#csv()","win32::registry::api#closekey()","kernel#complex()","win32::registry::api#createkey()","irb::currentcontext()","net::http#d()","object#delegateclass()","win32::registry::api#deletekey()","win32::registry::api#deletevalue()","object#digest()","openssl#digest()","openssl::digest()","bigmath#e()","win32::registry::api#enumkey()","win32::registry::api#enumvalue()","kernel#float()","win32::registry::api#flushkey()","kernel#hash()","kernel#integer()","kernel#json()","irb::jobmanager()","syslog::macros#log_mask()","syslog::macros#log_upto()","win32::registry::api#openkey()","bigmath#pi()","kernel#pathname()","win32::registry::api#queryinfokey()","win32::registry::api#queryvalue()","kernel#rational()","win32::registry::api#setvalue()","irb::locale#string()","kernel#string()","kernel#uri()","kernel::uri()","array#[]()","array::[]()","cgi::queryextension#[]()","cgi::session#[]()","csv::row#[]()","csv::table#[]()","continuation#[]()","drb::drbsslsocket::sslconfig#[]()","drb::gw#[]()","dir::[]()","env::[]()","fiber::[]()","fiddle::cstructentity#[]()","fiddle::compositehandler#[]()","fiddle::handle#[]()","fiddle::handle::[]()","fiddle::importer#[]()","fiddle::pointer::[]()","fiddle::pointer#[]()","gem::commandmanager#[]()","gem::configfile#[]()","hash::[]()","hash#[]()","irb::history#[]()","integer#[]()","json::[]()","json::ext::generator::state#[]()","json::genericobject#[]()","makemakefile::[]()","matchdata#[]()","method#[]()","net::httpheader#[]()","oleproperty#[]()","objectspace::weakmap#[]()","openssl::config#[]()","openstruct#[]()","pstore#[]()","proc#[]()","psych::coder#[]()","racc::grammar#[]()","racc::iset#[]()","racc::rule#[]()","racc::states#[]()","racc::symboltable#[]()","ractor#[]()","reline::history#[]()","rinda::tuple#[]()","rinda::tupleentry#[]()","ripper::lexer::elem#[]()","ripper::lexer::state#[]()","set::[]()","string#[]()","stringscanner#[]()","struct#[]()","symbol#[]()","syntaxsuggest::lexall#[]()","thread#[]()","win32ole#[]()","win32ole::variant#[]()","warning::[]()","win32::registry#[]()","yaml::dbm#[]()","array#[]=()","cgi::session#[]=()","csv::row#[]=()","csv::table#[]=()","drb::gw#[]=()","env::[]=()","fiber::[]=()","fiddle::cstructentity#[]=()","fiddle::pointer#[]=()","fiddle::structarray#[]=()","gem::configfile#[]=()","hash#[]=()","json::ext::generator::state#[]=()","json::genericobject#[]=()","makemakefile::[]=()","net::httpheader#[]=()","oleproperty#[]=()","objectspace::weakmap#[]=()","openstruct#[]=()","pstore#[]=()","psych::coder#[]=()","racc::iset#[]=()","ractor#[]=()","reline::history#[]=()","string#[]=()","struct#[]=()","thread#[]=()","win32ole#[]=()","win32ole::variant#[]=()","warning::[]=()","win32::registry#[]=()","yaml::dbm#[]=()","falseclass#^()","io::buffer#^()","integer#^()","nilclass#^()","set#^()","trueclass#^()","racc::grammar::definitionenv#_()","kernel#__callee__()","kernel#__dir__()","drb::drbobject#__drbref()","drb::drbobject#__drbref()","drb::drbobject#__drburi()","drb::drbobject#__drburi()","irb::workspace#__evaluate__()","irb::context#__exit__()","delegator#__getobj__()","simpledelegator#__getobj__()","basicobject#__id__()","ractor::movedobject#__id__()","kernel#__method__()","delegator#__raise__()","basicobject#__send__()","ractor::movedobject#__send__()","delegator#__setobj__()","simpledelegator#__setobj__()","optionparser::ac#_ac_arg_enable()","racc::grammar::definitionenv#_add()","racc::grammar::definitionenv#_added?()","rdoc::anymethod#_call_seq()","optionparser::ac#_check_ac_args()","racc::grammar#_compute_expand()","uri::_decode_uri_component()","racc::grammar::definitionenv#_defmetasyntax()","racc::grammar::definitionenv#_delayed_add()","bigdecimal#_dump()","drb::drbobject#_dump()","drb::drbobject#_dump()","gem::specification#_dump()","openssl::marshal#_dump()","singleton#_dump()","win32::registry#_dump()","uri::_encode_uri_component()","enumerator::lazy#_enumerable_collect()","enumerator::lazy#_enumerable_collect_concat()","enumerator::lazy#_enumerable_drop()","enumerator::lazy#_enumerable_drop_while()","enumerator::lazy#_enumerable_filter()","enumerator::lazy#_enumerable_filter_map()","enumerator::lazy#_enumerable_find_all()","enumerator::lazy#_enumerable_flat_map()","enumerator::lazy#_enumerable_grep()","enumerator::lazy#_enumerable_grep_v()","enumerator::lazy#_enumerable_map()","enumerator::lazy#_enumerable_reject()","enumerator::lazy#_enumerable_select()","enumerator::lazy#_enumerable_take()","enumerator::lazy#_enumerable_take_while()","enumerator::lazy#_enumerable_uniq()","enumerator::lazy#_enumerable_with_index()","enumerator::lazy#_enumerable_zip()","drb::threadobject#_execute()","process::_fork()","win32ole#_getproperty()","gem::streamui#_gets_noecho()","date::_httpdate()","racc::grammar::definitionenv#_intern()","win32ole#_invoke()","ipaddr#_ipv4_compat?()","date::_iso8601()","date::_jisx0301()","bigdecimal::_load()","drb::drbobject::_load()","drb::drbobject::_load()","gem::specification::_load()","openssl::marshal::classmethods#_load()","singleton::_load()","psych::parser#_native_parse()","cgi#_no_crlf_check()","date::_parse()","gem::resolver::molinillo::dependencygraph::vertex#_path_to?()","racc::parser#_racc_do_parse_c()","racc::parser#_racc_do_parse_rb()","racc::parser#_racc_do_reduce()","racc::parser#_racc_evalact()","racc::parser#_racc_init_sysvars()","racc::parser#_racc_setup()","racc::parser#_racc_yyparse_c()","racc::parser#_racc_yyparse_rb()","gem::resolver::molinillo::dependencygraph::vertex#_recursive_predecessors()","gem::resolver::molinillo::dependencygraph::vertex#_recursive_successors()","racc::grammar::definitionenv#_register()","ipaddr#_reverse()","date::_rfc2822()","date::_rfc3339()","date::_rfc822()","gem::version#_segments()","irb::context#_set_last_value()","win32ole#_setproperty()","gem::requirement#_sorted_requirements()","gem::version#_split_segments()","date::_strptime()","datetime::_strptime()","gem::requirement#_tilde_requirements()","ipaddr#_to_string()","gem::version#_version()","racc::grammar::definitionenv#_wrap()","date::_xmlschema()","kernel#`()","cgi::htmlextension#a()","abbrev::abbrev()","abbrev#abbrev()","array#abbrev()","gem::specification#abbreviate()","kernel#abort()","optionparser#abort()","pstore#abort()","process::abort()","thread::abort_on_exception()","thread#abort_on_exception()","thread::abort_on_exception=()","thread#abort_on_exception=()","bigdecimal#abs()","complex#abs()","float#abs()","integer#abs()","numeric#abs()","openssl::bn#abs()","rational#abs()","complex#abs2()","numeric#abs2()","uri::generic#absolute()","pathname#absolute?()","resolv::dns::name#absolute?()","uri::generic#absolute?()","file::absolute_path()","rubyvm::instructionsequence#absolute_path()","thread::backtrace::location#absolute_path()","file::absolute_path?()","irb::irbloader#absolute_path?()","optionparser::ac#ac_arg_disable()","optionparser::ac#ac_arg_enable()","optionparser::ac#ac_arg_with()","drb::drbsslsocket::sslconfig#accept()","openssl::ssl::sslserver#accept()","openssl::ssl::sslsocket#accept()","optionparser#accept()","optionparser::accept()","optionparser::list#accept()","psych::visitors::jsontree#accept()","psych::visitors::restrictedyamltree#accept()","psych::visitors::toruby#accept()","psych::visitors::visitor#accept()","psych::visitors::yamltree#accept()","socket#accept()","tcpserver#accept()","unixserver#accept()","racc::rule#accept?()","cgi::accept_charset()","cgi::accept_charset=()","socket::accept_loop()","openssl::ssl::sslsocket#accept_nonblock()","socket#accept_nonblock()","tcpserver#accept_nonblock()","unixserver#accept_nonblock()","gem::localremoteoptions#accept_uri_http()","math::acos()","math::acosh()","racc::statetransitiontablegenerator#act2actid()","racc::grammar::definitionenv#action()","gem::resolver::molinillo::dependencygraph::action::action_name()","gem::resolver::molinillo::dependencygraph::addedgenocircular::action_name()","gem::resolver::molinillo::dependencygraph::deleteedge::action_name()","gem::resolver::molinillo::dependencygraph::detachvertexnamed::action_name()","gem::resolver::molinillo::dependencygraph::tag::action_name()","racc::logfilegenerator#action_out()","racc::parserfilegenerator#actions()","gem::specification#activate()","gem::commands::execcommand#activate!()","gem::specification#activate_dependencies()","gem::resolver::molinillo::resolver::resolution#activate_new_spec()","gem::resolver::molinillo::delegates::resolutionstate#activated()","gem::basicspecification#activated?()","gem::activated_gem_paths()","net::http#active?()","gem::dependencylist#active_count()","acl::acllist#add()","benchmark::tms#add()","bigdecimal#add()","drb::weakidconv::weakset#add()","gem::availableset#add()","gem::dependencylist#add()","gem::resolver::requirementlist#add()","logger#add()","openssl::pkey::ec::point#add()","psych::coder#add()","rdoc::context#add()","racc::grammar#add()","racc::iset#add()","rinda::tuplebag::tuplebin#add()","set#add()","syslog::logger#add()","threadgroup#add()","benchmark::tms#add!()","set#add?()","gem::requestset::lockfile#add_git()","rdoc::anymethod#add_alias()","rdoc::attr#add_alias()","rdoc::context#add_alias()","rdoc::methodattr#add_alias()","rdoc::parser::c#add_alias()","rdoc::stats#add_alias()","rdoc::toplevel#add_alias()","gem::resolver::installerset#add_always_install()","openssl::x509::request#add_attribute()","rdoc::context#add_attribute()","rdoc::stats#add_attribute()","gem::specification#add_bindir()","gem::localremoteoptions#add_bulk_threshold_option()","rdoc::store#add_c_enclosure()","rdoc::store#add_c_variables()","openssl::x509::store#add_cert()","openssl::ocsp::request#add_certid()","openssl::pkcs7#add_certificate()","openssl::ssl::sslcontext#add_certificate()","gem::package#add_checksums()","gem::resolver::molinillo::dependencygraph#add_child_vertex()","rdoc::context#add_class()","rdoc::stats#add_class()","rdoc::context#add_class_or_module()","gem::localremoteoptions#add_clear_sources_option()","rdoc::classmodule#add_comment()","gem::command::add_common_option()","rdoc::context#add_constant()","rdoc::stats#add_constant()","rdoc::toplevel#add_constant()","csv::fieldsconverter#add_converter()","openssl::pkcs7#add_crl()","openssl::x509::store#add_crl()","openssl::pkcs7#add_data()","reline::config#add_default_key_binding()","reline::config#add_default_key_binding_by_keymap()","gem::specification#add_dependency()","gem::specification#add_dependency_with_type()","gem::specification#add_development_dependency()","reline::core#add_dialog_proc()","reline::lineeditor#add_dialog_proc()","zlib::inflate#add_dictionary()","gem::resolver::molinillo::dependencygraph#add_edge()","gem::resolver::molinillo::dependencygraph#add_edge_no_circular()","gem::resolver::molinillo::dependencygraph::log#add_edge_no_circular()","openssl::x509::name#add_entry()","rdoc::context#add_extend()","openssl::x509::crl#add_extension()","openssl::x509::certificate#add_extension()","openssl::x509::revoked#add_extension()","gem::command#add_extra_args()","net::httpheader#add_field()","gem::package::tarwriter#add_file()","openssl::x509::store#add_file()","rdoc::stats#add_file()","rdoc::store#add_file()","gem::package::tarwriter#add_file_digest()","gem::package::tarwriter#add_file_signed()","gem::package::tarwriter#add_file_simple()","rdoc::rdoc::add_generator()","rdoc::markup#add_html()","rdoc::context#add_include()","rdoc::toplevel#add_include()","gem::installupdateoptions#add_install_update_options()","gem::gemcutterutilities#add_key_option()","gem::resolver::installerset#add_local()","gem::localremoteoptions#add_local_remote_options()","logger::logdevice#add_log_header()","rdoc::context#add_method()","rdoc::stats#add_method()","rdoc::toplevel#add_method()","rdoc::context#add_module()","rdoc::stats#add_module()","rdoc::context#add_module_alias()","rdoc::context#add_module_by_normal_module()","openssl::ocsp::basicresponse#add_nonce()","openssl::ocsp::request#add_nonce()","observable#add_observer()","reline::config#add_oneshot_key_binding()","gem::command#add_option()","gem::gemcutterutilities#add_otp_option()","gem::commands::ownercommand#add_owners()","gem::command#add_parser_run_info()","gem::commands::environmentcommand#add_path()","openssl::x509::store#add_path()","gem::platformmismatch#add_platform()","gem::versionoption#add_platform_option()","gem::versionoption#add_prerelease_option()","drb::drbprotocol#add_protocol()","drb::drbprotocol::add_protocol()","gem::localremoteoptions#add_proxy_option()","gem::queryutils#add_query_options()","openssl::pkcs7#add_recipient()","rdoc::markup#add_regexp_handling()","rdoc::context#add_require()","openssl::x509::crl#add_revoked()","csv#add_row()","racc::grammarfileparser#add_rule()","racc::grammarfileparser#add_rule_block()","gem::specification#add_runtime_dependency()","rdoc::context#add_section()","gem::securityoption#add_security_option()","gem::specification#add_self_to_load_path()","openssl::pkcs7#add_signer()","gem::resolver::sourceset#add_source_gem()","gem::localremoteoptions#add_source_option()","gem::specification::add_spec()","gem::command::add_specific_extra_args()","racc::grammar#add_start_rule()","openssl::ocsp::basicresponse#add_status()","gc::add_stress_to_class()","gem::package::tarwriter#add_symlink()","rdoc::context#add_to()","rdoc::toplevel#add_to_classes_or_modules()","gem::add_to_load_path()","rdoc::tokenstream#add_token()","rdoc::parser::rubytools#add_token_listener()","rdoc::tokenstream#add_tokens()","thread#add_trace_func()","csv::parser#add_unconverted_fields()","gem::localremoteoptions#add_update_sources_option()","racc::grammarfileparser#add_user_code()","gem::versionoption#add_version_option()","gem::resolver::molinillo::dependencygraph#add_vertex()","gem::resolver::molinillo::dependencygraph::log#add_vertex()","rdoc::markup#add_word_pair()","racc::grammar#added?()","racc::statetransitiontablegenerator#addent()","optionparser#additional_message()","ipsocket#addr()","openssl::ssl::socketforwarder#addr()","socket::ifaddr#addr()","unixsocket#addr()","ipaddr#addr_mask()","net::http#addr_port()","racc::states#addrel()","fiber::scheduler#address_resolve()","racc::states#addsym()","csv::parser#adjust_headers()","csv::parser::inputsscanner#adjust_last_keep()","zlib::zstream#adler()","zlib::adler32()","zlib::adler32_combine()","io#advise()","addrinfo#afamily()","syntaxsuggest::aroundblockscan#after_index()","syntaxsuggest::aroundblockscan#after_lines()","gem::resolver::molinillo::ui#after_resolution()","date#ajd()","gem::streamui#alert()","gem::userinteraction#alert()","gem::streamui#alert_error()","gem::userinteraction#alert_error()","gem::streamui#alert_warning()","gem::userinteraction#alert_warning()","openssl::timestamp::request#algorithm()","openssl::timestamp::tokeninfo#algorithm()","openssl::timestamp::request#algorithm=()","psych::emitter#alias()","psych::handler#alias()","psych::treebuilder#alias()","psych::nodes::alias#alias?()","psych::nodes::node#alias?()","rdoc::parser::alias_extension()","module#alias_method()","encoding::aliases()","gem::validator#alien()","fiddle::cstructentity::alignment()","drb::drbserver#alive?()","drb::extserv#alive?()","drb::threadobject#alive?()","fiber#alive?()","rinda::tupleentry#alive?()","thread#alive?()","gem::specification::all()","gem::specification::all=()","array#all?()","enumerable#all?()","rdoc::store#all_classes()","rdoc::store#all_classes_and_modules()","irb::extendcommandbundle::all_commands_info()","rdoc::store#all_files()","rdoc::store#all_modules()","gem::specification::all_names()","gem::resolver::molinillo::resolver::resolution::unwinddetails#all_requirements()","gem::availableset#all_specs()","symbol::all_symbols()","rubyvm::abstractsyntaxtree::node#all_tokens()","integer#allbits?()","ripper::lexer::state#allbits?()","class#allocate()","objectspace::allocation_class_path()","objectspace::allocation_generation()","objectspace::allocation_method_id()","objectspace::allocation_sourcefile()","objectspace::allocation_sourceline()","acl#allow_addr?()","gem::resolver#allow_missing?()","gem::resolver::molinillo::delegates::specificationprovider#allow_missing?()","gem::resolver::molinillo::specificationprovider#allow_missing?()","json::ext::generator::state#allow_nan?()","tracepoint::allow_reentry()","acl#allow_socket?()","random::formatter#alphanumeric()","openssl::ssl::sslsocket#alpn_protocol()","gem::already_loaded?()","gem::security::alt_name_or_x509_entry()","reline::core#ambiguous_width()","date#amjd()","gem::resolver#amount_constrained()","gem::resolver::molinillo::dependencygraph::vertex#ancestor?()","module#ancestors()","rdoc::classmodule#ancestors()","rdoc::normalclass#ancestors()","rdoc::singleclass#ancestors()","rdoc::store#ancestors()","io::buffer#and!()","complex#angle()","float#angle()","numeric#angle()","gem::uninstaller#announce_deletion_of()","array#any?()","enumerable#any?()","hash#any?()","racc::debugflags#any?()","rdoc::context#any_content()","drb::drbserver#any_to_s()","integer#anybits?()","ripper::lexer::state#anybits?()","gem::gemcutterutilities#api_key()","gem::gemcutterutilities#api_key_forbidden?()","gem::configfile#api_keys()","bundler::app_cache()","bundler::app_config_path()","gem::installer#app_script_text()","array#append()","optionparser::list#append()","reline::killring#append()","makemakefile#append_cflags()","module#append_features()","singleton::append_features()","net::httpheader#append_field_value()","gem::version#approximate_recommendation()","rdoc::alias#aref()","rdoc::classmodule#aref()","rdoc::methodattr#aref()","rdoc::anymethod#aref_prefix()","rdoc::attr#aref_prefix()","rdoc::methodattr#aref_prefix()","complex#arg()","float#arg()","numeric#arg()","rdoc::anymethod#arglists()","gem::queryutils#args()","nomethoderror#args()","rdoc::markupreference#args_directive()","reline::lineeditor#argumentable?()","gem::command#arguments()","argf#argv()","process::argv0()","method#arity()","proc#arity()","unboundmethod#arity()","win32ole::variant::array()","gem::specification::array_attributes()","json::ext::generator::state#array_nl()","json::ext::generator::state#array_nl=()","bigdecimal#as_json()","complex#as_json()","date#as_json()","datetime#as_json()","exception#as_json()","json::genericobject#as_json()","openstruct#as_json()","range#as_json()","rational#as_json()","regexp#as_json()","set#as_json()","struct#as_json()","symbol#as_json()","time#as_json()","pathname#ascend()","encoding#ascii_compatible?()","json::ext::generator::state#ascii_only?()","string#ascii_only?()","encoding::converter::asciicompat_encoding()","date#asctime()","time#asctime()","math::asin()","math::asinh()","gem::mockgemui#ask()","gem::streamui#ask()","gem::userinteraction#ask()","gem::streamui#ask_for_password()","gem::userinteraction#ask_for_password()","gem::gemcutterutilities#ask_otp()","gem::streamui#ask_yes_no()","gem::userinteraction#ask_yes_no()","openssl::pkey::ec::group#asn1_flag()","openssl::pkey::ec::group#asn1_flag=()","rdoc::servlet#asset()","fiddle::cstructentity#assign_names()","irb::irb#assignment_expression?()","array#assoc()","env::assoc()","hash#assoc()","array#at()","gem::installer::at()","time::at()","kernel#at_exit()","bigmath#atan()","math::atan()","math::atan2()","math::atanh()","file::atime()","file#atime()","file::stat#atime()","pathname#atime()","racc::grammarfilescanner#atom_symbol()","gem::unknowncommanderror::attach_correctable()","class#attached_object()","gem::resolver::molinillo::resolver::resolution#attempt_to_activate()","gem::resolver::molinillo::resolver::resolution#attempt_to_filter_existing_spec()","module#attr()","module#attr_accessor()","module#attr_reader()","module#attr_writer()","gem::specification::attribute_names()","openssl::x509::request#attributes()","rdoc::store#attributes()","uri::ldap#attributes()","openssl::x509::request#attributes=()","uri::ldap#attributes=()","openssl::cipher#auth_data=()","openssl::cipher#auth_tag()","openssl::cipher#auth_tag=()","openssl::cipher#auth_tag_len=()","openssl::cipher#authenticated?()","gem::specification#author()","gem::specification#author=()","uri::http#authority()","openssl::x509::extension::authoritykeyidentifier#authority_key_identifier()","gem::specification#authors()","gem::specification#authors=()","gc::auto_compact()","gc::auto_compact=()","irb::relineinputmethod#auto_indent()","reline::core#auto_indent_proc=()","io#autoclose=()","io#autoclose?()","kernel#autoload()","module#autoload()","kernel#autoload?()","module#autoload?()","zlib::zstream#avail_in()","zlib::zstream#avail_out()","zlib::zstream#avail_out=()","gem::specfetcher#available_specs()","string#b()","exception#backtrace()","fiber#backtrace()","gem::configfile#backtrace()","gem::streamui#backtrace()","thread#backtrace()","exception#backtrace_locations()","fiber#backtrace_locations()","thread#backtrace_locations()","gem::resolver::stats#backtracking!()","reline::lineeditor#backward_char()","reline::lineeditor#backward_delete_char()","reline::lineeditor#backward_word()","optionparser#banner()","cgi::htmlextension#base()","optionparser#base()","random::formatter#base64()","gem::s3urisigner#base64_uri_escape()","digest::class::base64digest()","digest::instance#base64digest()","openssl::hmac::base64digest()","openssl::hmac#base64digest()","digest::instance#base64digest!()","gem::basicspecification#base_dir()","gem::specification#base_dir()","rubyvm::instructionsequence#base_label()","thread::backtrace::location#base_label()","rdoc::toplevel#base_name()","file::basename()","pathname#basename()","gem::installer#bash_prolog_script()","openssl::ocsp::response#basic()","net::httpheader#basic_auth()","net::httpheader#basic_encode()","readline::basic_quote_characters()","readline::basic_quote_characters=()","reline::core#basic_quote_characters=()","readline::basic_word_break_characters()","readline::basic_word_break_characters=()","reline::core#basic_word_break_characters=()","io#beep()","racc::locationpointer#before()","syntaxsuggest::aroundblockscan#before_index()","syntaxsuggest::aroundblockscan#before_lines()","gem::resolver::molinillo::ui#before_resolution()","rdoc::task#before_running_rdoc()","enumerator::arithmeticsequence#begin()","matchdata#begin()","range#begin()","rdoc::stats#begin_adding()","net::http#begin_transport()","reline::lineeditor#beginning_of_line()","stringscanner#beginning_of_line?()","gem::command#begins?()","benchmark#benchmark()","benchmark::benchmark()","comparable#between?()","gem::specification#bin_dir()","gem::specification#bin_file()","gem::commands::setupcommand#bin_file_names()","rinda::tuplebag#bin_for_find()","rinda::tuplebag#bin_key()","bundler::bin_path()","gem::bin_path()","psych::visitors::yamltree#binary?()","rdoc::parser::binary?()","gem::binary_mode()","addrinfo#bind()","fiddle::importer#bind()","socket#bind()","udpsocket#bind()","unboundmethod#bind()","unboundmethod#bind_call()","fiddle::importer#bind_function()","reline::config#bind_key()","reline::config#bind_variable()","kernel#binding()","proc#binding()","tracepoint#binding()","gem::resolver::molinillo::resolver::resolution#binding_requirement_in_set?()","gem::resolver::molinillo::resolver::resolution#binding_requirements_for_conflict()","gem::bindir()","argf#binmode()","io#binmode()","stringio#binmode()","argf#binmode?()","csv#binmode?()","io#binmode?()","io::binread()","pathname#binread()","io::binwrite()","pathname#binwrite()","file#birthtime()","file::birthtime()","file::stat#birthtime()","pathname#birthtime()","integer#bit_length()","openssl::bn#bit_set?()","file::stat#blksize()","fiber::scheduler#block()","kernel#block_given?()","digest::base#block_length()","digest::instance#block_length()","digest::sha2#block_length()","openssl::digest#block_length()","rdoc::methodattr#block_params=()","openssl::cipher#block_size()","file::blockdev?()","file::stat#blockdev?()","filetest#blockdev?()","pathname#blockdev?()","fiber::blocking()","fiber::blocking?()","fiber#blocking?()","cgi::htmlextension#blockquote()","file::stat#blocks()","benchmark#bm()","benchmark::bm()","benchmark#bmbm()","benchmark::bmbm()","net::httpresponse#body()","net::httpgenericrequest#body=()","net::httpresponse#body=()","net::httpresponse#body_encoding=()","net::httpgenericrequest#body_exist?()","net::httpresponse::body_permitted?()","net::httpgenericrequest#body_stream=()","socket::option::bool()","socket::option#bool()","racc::parserfilegenerator::params::bool_attr()","gem::localremoteoptions#both?()","irb::frame::bottom()","irb::frame#bottom()","rdoc::markdown#break_on_newline()","prettyprint#break_outmost_groups()","prettyprint#breakable()","prettyprint::singleline#breakable()","socket::ifaddr#broadaddr()","monitormixin::conditionvariable#broadcast()","thread::conditionvariable#broadcast()","array#bsearch()","range#bsearch()","array#bsearch_index()","syntaxsuggest::priorityqueue#bubble_down()","syntaxsuggest::priorityqueue#bubble_up()","digest::bubblebabble()","digest::class::bubblebabble()","digest::instance#bubblebabble()","win32::sspi::securitybuffer#buffersize()","win32::sspi::securitybuffer#buffertype()","json::ext::generator::state#buffer_initial_length()","json::ext::generator::state#buffer_initial_length=()","gem::commands::certcommand#build()","gem::ext::cargobuilder#build()","gem::ext::cmakebuilder::build()","gem::ext::configurebuilder::build()","gem::ext::extconfbuilder::build()","gem::ext::rakebuilder::build()","gem::package::build()","gem::package#build()","gem::requestset::lockfile::build()","uri::ftp::build()","uri::file::build()","uri::generic::build()","uri::http::build()","uri::ldap::build()","uri::mailto::build()","uri::ws::build()","uri::generic::build2()","gem::command::build_args()","gem::installer#build_args()","gem::specification#build_args()","gem::command::build_args=()","gem::resolver::molinillo::resolver::resolution#build_details_for_unwind()","gem::ext::cargobuilder#build_env()","psych::visitors::toruby#build_exception()","gem::ext::builder#build_extensions()","gem::installer#build_extensions()","csv#build_fields_converter()","gem::commands::buildcommand#build_gem()","csv#build_header_fields_converter()","rdoc::tomdoc#build_heading()","gem::indexer#build_indices()","gem::specification#build_info_dir()","gem::specification#build_info_file()","gem::indexer#build_marshal_gemspecs()","gem::missingspecerror#build_message()","gem::missingspecversionerror#build_message()","gem::indexer#build_modern_index()","gem::indexer#build_modern_indices()","gem::commands::buildcommand#build_package()","rdoc::tomdoc#build_paragraph()","csv#build_parser_fields_converter()","uri::ldap#build_path_query()","csv::parser#build_scanner()","rdoc::tomdoc#build_verbatim()","csv#build_writer_fields_converter()","csv::fieldsconverter#builtin_converters()","openssl::pkey::ec::builtin_curves()","gem::version#bump()","bundler::bundle_path()","gem::bundlerversionfinder::bundle_update_bundler_version()","gem::bundlerversionfinder::bundler_version()","csv::table#by_col()","csv::table#by_col!()","csv::table#by_col_or_row()","csv::table#by_col_or_row!()","openssl::engine::by_id()","csv::table#by_row()","csv::table#by_row!()","socket::option#byte()","socket::option::byte()","reline::lineeditor#byte_pointer=()","string#byteindex()","reline::lineeditor#byteinsert()","matchdata#byteoffset()","string#byterindex()","random#bytes()","random::bytes()","securerandom::bytes()","string#bytes()","gem::package::tarreader::entry#bytes_read()","string#bytesize()","string#byteslice()","reline::lineeditor#byteslice!()","string#bytesplice()","openssl::x509::extension::authorityinfoaccess#ca_issuer_uris()","gem::source#cache_dir()","gem::specification#cache_dir()","gem::specification#cache_file()","gem::cache_home()","rdoc::store#cache_path()","gem::remotefetcher#cache_update_path()","rdoc::stats#calculate()","gem::package::tarheader#calculate_checksum()","reline::lineeditor#calculate_height_by_lines()","reline::lineeditor#calculate_height_by_width()","reline::lineeditor#calculate_nearest_cursor()","reline::lineeditor#calculate_scroll_partial_screen()","reline::lineeditor#calculate_width()","reline::unicode::calculate_width()","continuation#call()","fiddle::closure::blockcaller#call()","fiddle::function#call()","logger::formatter#call()","method#call()","proc#call()","reline::lineeditor::dialog#call()","reline::lineeditor::dialogprocscope#call()","reline::windows::win32api#call()","syntaxsuggest::call()","syntaxsuggest::blockexpand#call()","syntaxsuggest::capturecodecontext#call()","syntaxsuggest::cleandocument#call()","syntaxsuggest::cli#call()","syntaxsuggest::codesearch#call()","syntaxsuggest::displaycodewithlinenumbers#call()","syntaxsuggest::displayinvalidblocks#call()","syntaxsuggest::explainsyntax#call()","syntaxsuggest::pathnamefrommessage#call()","syntaxsuggest::rippererrors#call()","syslog::logger::formatter#call()","reline::lineeditor#call_completion_proc()","reline::lineeditor#call_completion_proc_with_checking_args()","reline::lineeditor::dialogprocscope#call_completion_proc_with_checking_args()","fiddle::pointer#call_free()","rdoc::anymethod#call_seq()","rdoc::anymethod#call_seq=()","rdoc::markupreference#call_seq_directive()","kernel#callcc()","tracepoint#callee_id()","kernel#caller()","kernel#caller_locations()","rdoc::parser::can_parse()","rdoc::parser::can_parse_by_name()","syntaxsuggest::codefrontier#can_skip_check?()","rinda::tupleentry#cancel()","rinda::waittemplateentry#cancel()","rinda::tupleentry#canceled?()","optionparser#candidate()","optionparser::completion::candidate()","optionparser::completion#candidate()","psych::emitter#canonical()","psych::emitter#canonical=()","net::httpheader#canonical_each()","racc::grammarfileparser#canonical_label()","gem::version#canonical_segments()","addrinfo#canonname()","net::httpheader#capitalize()","string#capitalize()","symbol#capitalize()","string#capitalize!()","reline::lineeditor#capitalize_word()","cgi::htmlextension#caption()","open3::capture2()","open3#capture2()","open3::capture2e()","open3#capture2e()","open3#capture3()","open3::capture3()","syntaxsuggest::capturecodecontext#capture_before_after_kws()","syntaxsuggest::capturecodecontext#capture_falling_indent()","syntaxsuggest::capturecodecontext#capture_first_kw_end_same_indent()","irb::extendcommand::debug::debugger__::capture_frames()","syntaxsuggest::capturecodecontext#capture_last_end_same_indent()","syntaxsuggest::aroundblockscan#capture_neighbor_context()","matchdata#captures()","stringscanner#captures()","gem::ext::cargobuilder#cargo()","gem::ext::cargobuilder#cargo_command()","gem::ext::cargobuilder#cargo_crate_name()","gem::ext::cargobuilder#cargo_dylib_path()","gem::ext::cargobuilder#cargo_rustc_args()","string#casecmp()","symbol#casecmp()","string#casecmp?()","symbol#casecmp?()","regexp#casefold?()","kernel#catch()","timeout::error::catch()","exception#cause()","math::cbrt()","makemakefile#cc_command()","openssl::cipher#ccm_data_len=()","fileutils::cd()","fileutils#cd()","bigdecimal#ceil()","float#ceil()","integer#ceil()","numeric#ceil()","rational#ceil()","time#ceil()","integer#ceildiv()","string#center()","openssl::ssl::sslsocket#cert()","gem::request#cert_files()","gem::security::trustdir#cert_path()","openssl::timestamp::request#cert_requested=()","openssl::timestamp::request#cert_requested?()","openssl::ocsp::singleresponse#cert_status()","openssl::ocsp::request#certid()","openssl::ocsp::singleresponse#certid()","openssl::pkcs7#certificates()","openssl::pkcs7#certificates=()","gem::commands::certcommand#certificates_matching()","enumerable#chain()","openssl::x509::storecontext#chain()","openssl::netscape::spki#challenge()","openssl::netscape::spki#challenge=()","rdoc::encoding::change_encoding()","process::gid::change_privilege()","process::uid::change_privilege()","irb::context#change_workspace()","observable#changed()","observable#changed?()","reline::windows::keyeventrecord#char()","file::chardev?()","file::stat#chardev?()","filetest#chardev?()","pathname#chardev?()","stringscanner#charpos()","string#chars()","openuri::meta#charset()","dir::chdir()","fileutils#chdir()","fileutils::chdir()","csv::parser::inputsscanner#check()","pty::check()","stringscanner#check()","win32::registry::api#check()","gem::security::policy#check_cert()","gem::security::policy#check_chain()","json::ext::generator::state#check_circular?()","gem::package::tarwriter#check_closed()","gem::configfile#check_credentials_permissions()","gem::security::policy#check_data()","gem::command#check_deprecated_options()","gem::commands::execcommand#check_executable()","rdoc::options#check_files()","gem::commands::checkcommand#check_gems()","rdoc::options#check_generator()","uri::mailto#check_headers()","uri::generic#check_host()","reline::history#check_index()","reline::windows::check_input_event()","drb::drbserver#check_insecure_method()","pp::ppmethods#check_inspect_key()","gem::queryutils#check_installed_gems()","gem::queryutils#check_installed_gems?()","gem::security::policy#check_key()","openssl::pkey::ec#check_key()","racc::state#check_la()","reline::lineeditor#check_mode_string()","rdoc::parser::check_modeline()","reline::lineeditor#check_multiline_prompt()","rdoc::task#check_names()","openssl::ocsp::request#check_nonce()","uri::generic#check_opaque()","gem::commands::certcommand#check_openssl()","uri::file#check_password()","uri::generic#check_password()","uri::generic#check_path()","uri::generic#check_port()","openssl::x509::certificate#check_private_key()","gem::security::policy#check_root()","gem::commands::setupcommand#check_ruby_version()","racc::grammar#check_rules_nullable()","racc::grammar#check_rules_useless()","uri::generic#check_scheme()","logger::logdevice#check_shift_log()","makemakefile#check_signedness()","makemakefile#check_sizeof()","racc::grammar#check_symbols_nullable()","racc::grammar#check_symbols_useless()","racc::symboltable#check_terminals()","irb::relineinputmethod#check_termination()","uri::mailto#check_to()","gem::security::policy#check_trust()","uri::ftp#check_typecode()","gem::commands::sourcescommand#check_typo_squatting()","stringscanner#check_until()","racc::states#check_useless()","uri::file#check_user()","uri::generic#check_user()","uri::file#check_userinfo()","uri::generic#check_userinfo()","openssl::ocsp::singleresponse#check_validity()","io#check_winsize_changed()","cgi::htmlextension#checkbox()","cgi::htmlextension#checkbox_group()","rdoc::context#child_name()","dir::children()","dir#children()","pathname#children()","rubyvm::abstractsyntaxtree::node#children()","file#chmod()","file::chmod()","fileutils::chmod()","fileutils#chmod()","pathname#chmod()","fileutils#chmod_r()","fileutils::chmod_r()","kernel#chomp()","string#chomp()","string#chomp!()","random::formatter#choose()","gem::streamui#choose_from_list()","gem::userinteraction#choose_from_list()","kernel#chop()","string#chop()","string#chop!()","file#chown()","file::chown()","fileutils::chown()","fileutils#chown()","pathname#chown()","fileutils::chown_r()","fileutils#chown_r()","integer#chr()","string#chr()","dir::chroot()","enumerable#chunk()","enumerator::lazy#chunk()","enumerable#chunk_while()","enumerator::lazy#chunk_while()","net::httpheader#chunked?()","gem::updatesuggestion#ci?()","openssl::engine#cipher()","openssl::ssl::sslsocket#cipher()","openssl::pkcs7#cipher=()","openssl::cipher::ciphers()","openssl::ssl::sslcontext#ciphers()","openssl::ssl::sslcontext#ciphers=()","openssl::ssl::sslcontext#ciphersuites=()","date::civil()","datetime::civil()","comparable#clamp()","kernel#class()","win32::registry::predefinedkey#class()","rdoc::context#class_attributes()","module#class_eval()","module#class_exec()","rdoc::store#class_file()","rdoc::context#class_method_list()","rdoc::store#class_methods()","gem::ext::builder::class_name()","didyoumean::classnamechecker#class_names()","rdoc::store#class_path()","module#class_variable_defined?()","module#class_variable_get()","module#class_variable_set()","module#class_variables()","rdoc::context#classes()","rdoc::context#classes_and_modules()","rdoc::context#classes_hash()","rdoc::store#classes_hash()","set#classify()","syslog::logger::formatter#clean()","bundler::clean_env()","bundler::clean_exec()","gem::commands::cleanupcommand#clean_gems()","syntaxsuggest::cleandocument#clean_sweep()","bundler::clean_system()","gem::text#clean_text()","win32::sspi::negotiateauth#clean_up()","pathname#cleanpath()","openssl::engine::cleanup()","openssl::x509::storecontext#cleanup()","array#clear()","env::clear()","fiddle::pinned#clear()","gc::profiler::clear()","gem::dependencylist#clear()","gem::sourcelist#clear()","hash#clear()","io::buffer#clear()","irb::color::clear()","racc::iset#clear()","set#clear()","string#clear()","stringscanner#clear()","thread::queue#clear()","thread::sizedqueue#clear()","openssl::bn#clear_bit!()","rdoc::classmodule#clear_comment()","gem::clear_default_specs()","reline::lineeditor#clear_dialog()","reline::lineeditor#clear_dialog_with_content()","reline::lineeditor#clear_each_dialog()","bundler::clear_gemspec_cache()","gem::clear_paths()","io#clear_screen()","reline::ansi::clear_screen()","reline::generalio::clear_screen()","reline::lineeditor#clear_screen()","reline::windows::clear_screen()","reline::lineeditor#clear_screen_buffer()","fiddle::pinned#cleared?()","openssl::ssl::sslsocket#client_ca()","openssl::ssl::sslsocket#client_cert_cb()","rdoc::task#clobber_task_description()","rdoc::task#clobber_task_name()","process::clock_getres()","process::clock_gettime()","bigdecimal#clone()","env::clone()","kernel#clone()","method#clone()","numeric#clone()","singleton#clone()","unboundmethod#clone()","argf#close()","cgi::session#close()","cgi::session::filestore#close()","cgi::session::memorystore#close()","cgi::session::nullstore#close()","cgi::session::pstore#close()","dir#close()","fiber::scheduler#close()","fiddle::handle#close()","gem::package::tarreader#close()","gem::package::tarreader::entry#close()","gem::package::tarwriter#close()","gem::silentui#close()","gem::streamui#close()","io#close()","irb::fileinputmethod#close()","logger#close()","logger::logdevice#close()","openssl::buffering#close()","openssl::ssl::sslserver#close()","resolv::dns#close()","sockssocket#close()","stringio#close()","syslog::close()","tempfile#close()","thread::queue#close()","thread::sizedqueue#close()","win32::registry#close()","win32::registry::predefinedkey#close()","zlib::gzipfile#close()","zlib::zstream#close()","tempfile#close!()","gem::remotefetcher#close_all()","fiddle::handle#close_enabled?()","ractor#close_incoming()","io#close_on_exec=()","io#close_on_exec?()","ractor#close_outgoing()","basicsocket#close_read()","io#close_read()","stringio#close_read()","basicsocket#close_write()","io#close_write()","stringio#close_write()","argf#closed?()","gem::package::tarreader::entry#closed?()","gem::package::tarwriter#closed?()","io#closed?()","openssl::ssl::socketforwarder#closed?()","stringio#closed?()","thread::queue#closed?()","zlib::gzipfile#closed?()","zlib::zstream#closed?()","stringio#closed_read?()","stringio#closed_write?()","openssl::engine#cmds()","fileutils#cmp()","fileutils::cmp()","openssl::bn#cmp()","openssl::ocsp::certificateid#cmp()","openssl::x509::name#cmp()","openssl::ocsp::certificateid#cmp_issuer()","socket::ancillarydata#cmsg_is?()","irb::workspace#code_around_binding()","syntaxsuggest::aroundblockscan#code_block()","rubyvm::yjit::code_gc()","syntaxsuggest::displayinvalidblocks#code_with_context()","win32ole::codepage()","win32ole::codepage=()","string#codepoints()","bigdecimal#coerce()","float#coerce()","integer#coerce()","numeric#coerce()","openssl::bn#coerce()","uri::generic#coerce()","ipaddr#coerce_other()","openssl::pkey::ec::group#cofactor()","csv#col_sep()","array#collect()","enumerable#collect()","enumerator::lazy#collect()","array#collect!()","set#collect!()","enumerable#collect_concat()","enumerator::lazy#collect_concat()","rdoc::parser::ruby#collect_first_comment()","fileutils::collect_method()","rdoc::tokenstream#collect_tokens()","irb::color::colorable?()","irb::color::colorize()","irb::color::colorize_code()","ripper#column()","ripper::filter#column()","csv::parser#column_separator()","array#combination()","syntaxsuggest::codefrontier::combination()","pp::ppmethods#comma_breakable()","drb::extservmanager::command()","drb::extservmanager::command=()","gem::commandmanager#command_names()","fileutils::commands()","zlib::gzipfile#comment()","rdoc::codeobject#comment=()","zlib::gzipwriter#comment=()","date::commercial()","datetime::commercial()","pstore#commit()","gem::command::common_options()","array#compact()","enumerable#compact()","enumerator::lazy#compact()","fiddle::cparser#compact()","gc::compact()","hash#compact()","array#compact!()","hash#compact!()","gem::indexer#compact_specs()","openssl::pkey::pkey#compare?()","hash#compare_by_identity()","set#compare_by_identity()","hash#compare_by_identity?()","set#compare_by_identity?()","fileutils::compare_file()","fileutils#compare_file()","fileutils#compare_stream()","fileutils::compare_stream()","encoding::compatible?()","regexp::compile()","rubyvm::instructionsequence::compile()","ripper#compile_error()","syntaxsuggest::rippererrors#compile_error()","rubyvm::instructionsequence::compile_file()","rubyvm::instructionsequence::compile_option()","rubyvm::instructionsequence::compile_option=()","gem::commands::lockcommand#complain()","optionparser::completion#complete()","optionparser::list#complete()","rdoc::classmodule#complete()","rdoc::store#complete()","reline::lineeditor#complete()","win32::sspi::negotiateauth#complete_authentication()","reline::lineeditor#complete_internal_proc()","readline::completer_quote_characters()","readline::completer_quote_characters=()","reline::core#completer_quote_characters=()","readline::completer_word_break_characters()","readline::completer_word_break_characters=()","reline::core#completer_word_break_characters=()","readline::completion_append_character()","readline::completion_append_character=()","reline::core#completion_append_character=()","readline::completion_case_fold()","reline::core#completion_case_fold()","readline::completion_case_fold=()","reline::core#completion_case_fold=()","reline::lineeditor::dialogprocscope#completion_journey_data()","readline::completion_proc()","readline::completion_proc=()","reline::core#completion_proc=()","readline::completion_quote_character()","reline::core#completion_quote_character()","uri::generic#component()","uri::generic::component()","uri::generic#component_ary()","gem::resolver::compose_sets()","gem::indexer#compress()","gem::indexer#compress_indices()","reline::keystroke#compress_meta_key()","racc::states#compute_dfa()","racc::grammar#compute_expand()","racc::grammar#compute_hash()","racc::grammar#compute_heads()","openssl::pkey::dh#compute_key()","racc::grammar#compute_locate()","racc::states#compute_nfa()","racc::grammar#compute_nullable()","racc::grammar#compute_nullable_0()","racc::grammar#compute_useless()","array#concat()","gem::requirement#concat()","openssl::buffering::buffer#concat()","reline::history#concat()","string#concat()","stringscanner#concat()","irb::conf()","drb#config()","drb::config()","reline::lineeditor::dialogprocscope#config()","gem::config_file()","gem::configfile#config_file_name()","gem::config_home()","gem::configuration()","gem::configuration=()","bundler::configure()","json::ext::generator::state#configure()","gem::request::configure_connection_for_https()","bundler::configure_gem_home()","bundler::configure_gem_home_and_path()","bundler::configure_gem_path()","gem::command#configure_options()","bundler::configured_bundle_path()","reline::lineeditor#confirm_multiline_termination()","racc::state#conflict?()","gem::resolver::molinillo::resolver::resolution#conflict_fixing_possibilities?()","gem::dependencyresolutionerror#conflicting_dependencies()","gem::resolver::conflict#conflicting_dependencies()","gem::resolver::molinillo::delegates::resolutionstate#conflicts()","gem::specification#conflicts()","etc::confstr()","makemakefile#conftest_source()","complex#conj()","numeric#conj()","complex#conjugate()","numeric#conjugate()","addrinfo#connect()","drb::drbsslsocket::sslconfig#connect()","net::http#connect()","openssl::ssl::sslsocket#connect()","socket#connect()","udpsocket#connect()","win32ole::connect()","basicsocket#connect_address()","addrinfo#connect_from()","addrinfo#connect_internal()","openssl::ssl::sslsocket#connect_nonblock()","socket#connect_nonblock()","addrinfo#connect_to()","net::httpheader#connection_close?()","gem::request#connection_for()","net::httpheader#connection_keep_alive?()","gem::dependencyinstaller#consider_local?()","gem::dependencyinstaller#consider_remote?()","io::console()","io#console_mode()","io#console_mode=()","io::console_size()","module#const_added()","module#const_defined?()","module#const_get()","win32ole::const_load()","module#const_missing()","module#const_set()","module#const_source_location()","module::constants()","module#constants()","openssl::buffering#consume_rbuff()","gem::basicspecification#contains_requirable_file?()","openuri::meta#content_encoding()","net::httpheader#content_length()","net::httpheader#content_length=()","net::httpheader#content_range()","net::httpheader#content_type()","openuri::meta#content_type()","net::httpheader#content_type=()","gem::package#contents()","gem::package::old#contents()","reline::lineeditor::dialog#contents=()","reline::lineeditor::dialogprocscope#context()","rdoc::parser::changelog#continue_entry_body()","net::http#continue_timeout=()","csv#convert()","csv::fieldsconverter#convert()","encoding::converter#convert()","gem::ext::cargobuilder::linkflagconverter::convert()","optionparser::completion#convert()","rdoc::markup#convert()","csv#convert_fields()","irb::irb#convert_invalid_byte_sequence()","uri::rfc2396_parser#convert_to_uri()","uri::rfc2396_parser#convert_to_uri()","csv#converters()","makemakefile#convertible_int()","encoding::converter#convpath()","io#cooked()","io#cooked!()","fileutils::copy()","fileutils#copy()","io::buffer#copy()","net::http#copy()","openssl::bn#copy()","fileutils#copy_entry()","fileutils::copy_entry()","fileutils::copy_file()","fileutils#copy_file()","reline::lineeditor#copy_for_vi()","openssl::ocsp::basicresponse#copy_nonce()","fileutils::copy_stream()","fileutils#copy_stream()","io::copy_stream()","gem::installer::fakepackage#copy_to()","gem::package#copy_to()","reline::core()","racc::states#core_to_state()","process::status#coredump?()","didyoumean::spellchecker#correct()","didyoumean::treespellchecker#correct()","gem::version::correct?()","didyoumean::treespellchecker#correct_element()","didyoumean::correct_error()","gem::util::correct_for_windows_path()","didyoumean::classnamechecker#corrections()","didyoumean::correctable#corrections()","didyoumean::keyerrorchecker#corrections()","didyoumean::methodnamechecker#corrections()","didyoumean::nullchecker#corrections()","didyoumean::patternkeynamechecker#corrections()","didyoumean::requirepathchecker#corrections()","didyoumean::variablenamechecker#corrections()","gem::unknowncommandspellchecker#corrections()","bigmath#cos()","math::cos()","math::cosh()","array#count()","enumerable#count()","gc::count()","ractor::count()","range#count()","string#count()","syntaxsuggest::codefrontier#count()","syntaxsuggest::leftrightlexcount#count_end()","syntaxsuggest::leftrightlexcount#count_for_char()","objectspace::count_imemo_objects()","syntaxsuggest::leftrightlexcount#count_kw()","syntaxsuggest::leftrightlexcount#count_lex()","objectspace::count_nodes()","objectspace::count_objects()","objectspace::count_objects_size()","observable#count_observers()","objectspace::count_symbols()","objectspace::count_tdata_objects()","range#cover?()","rdoc::stats#coverage_level=()","fileutils#cp()","fileutils::cp()","fileutils::cp_lr()","fileutils#cp_lr()","fileutils#cp_r()","fileutils::cp_r()","zlib::gzipfile#crc()","zlib::crc32()","zlib::crc32_combine()","zlib::crc_table()","fiddle::cstructbuilder#create()","fiddle::cstructbuilder::create()","fiddle::closure::create()","gem::noaliasyamltree::create()","gem::requirement::create()","gem::version::create()","openssl::ocsp::response::create()","openssl::pkcs12::create()","psych::visitors::jsontree::create()","psych::visitors::toruby::create()","psych::visitors::yamltree::create()","resolv::dns::name::create()","resolv::ipv4::create()","resolv::ipv6::create()","resolv::loc::alt::create()","resolv::loc::coord::create()","resolv::loc::size::create()","tempfile::create()","win32::registry::create()","win32::registry#create()","syntaxsuggest::codesearch#create_blocks_from_untracked_lines()","bundler::create_bundle_path()","gem::security::create_cert()","gem::security::create_cert_email()","gem::security::create_cert_self_signed()","gem::resolver::molinillo::resolver::resolution#create_conflict()","gem::security::create_digest()","rdoc::parser::changelog#create_document()","rdoc::parser::changelog#create_entries()","rdoc::parser::changelog::git#create_entries()","rinda::tuplespace#create_entry()","openssl::x509::extensionfactory#create_ext()","openssl::x509::extensionfactory#create_ext_from_array()","openssl::x509::extensionfactory#create_ext_from_hash()","openssl::x509::extensionfactory#create_ext_from_string()","openssl::x509::extensionfactory#create_extension()","json::create_fast_state()","win32ole::create_guid()","makemakefile#create_header()","json::create_id()","json::create_id=()","rdoc::parser::changelog#create_items()","gem::security::create_key()","logger::logdevice#create_logfile()","makemakefile#create_makefile()","cgi::session#create_new_id()","gem::command#create_option_parser()","json::create_pretty_state()","gem::s3urisigner#create_request_pool()","openssl::timestamp::factory#create_timestamp()","racc::states#create_tmap()","fiddle::importer#create_value()","win32::registry#created?()","gem::configfile#credentials_path()","racc::parserfilegenerator#cref_pop()","racc::parserfilegenerator#cref_push()","openssl::x509::extension#critical=()","openssl::x509::extension#critical?()","openssl::x509::extensionfactory#crl=()","openssl::x509::extension::crldistributionpoints#crl_uris()","openssl::pkcs7#crls()","openssl::pkcs7#crls=()","irb::vec#cross()","string#crypt()","rdoc::markdown#css()","date#ctime()","file::ctime()","file#ctime()","file::stat#ctime()","pathname#ctime()","time#ctime()","openssl::engine#ctrl_cmd()","fiber::current()","rdoc::rdoc::current()","ractor::current()","thread::current()","rdoc::rdoc::current=()","openssl::x509::storecontext#current_cert()","openssl::x509::storecontext#current_crl()","prettyprint#current_group()","syntaxsuggest::codeblock#current_indent()","fiber::current_scheduler()","rdoc::context#current_section()","drb::current_server()","drb#current_server()","method#curry()","proc#curry()","reline::terminfo::curses_dl()","reline::terminfo::curses_dl_files()","io#cursor()","io#cursor=()","io#cursor_down()","io#cursor_left()","reline::ansi::cursor_pos()","reline::generalio::cursor_pos()","reline::lineeditor::dialogprocscope#cursor_pos()","reline::windows::cursor_pos()","io#cursor_right()","io#cursor_up()","openssl::pkey::ec::group#curve_name()","date#cwday()","date#cweek()","date#cwyear()","array#cycle()","enumerable#cycle()","process::daemon()","gem::ext::cargobuilder#darwin_target?()","resolv::dns::resource::txt#data()","socket::ancillarydata#data()","socket::option#data()","openssl::pkcs7#data=()","gem::data_home()","zlib::zstream#data_type()","gem::datadir()","gem::basicspecification#datadir()","gem::specification#date()","gem::specification#date=()","logger#datetime_format()","logger#datetime_format=()","date#day()","time#day()","date#day_fraction()","gem::resolver::molinillo::resolver::resolution#debug()","gem::resolver::molinillo::ui#debug()","logger#debug()","net::http#debug()","openssl::debug()","syslog::logger#debug()","logger#debug!()","openssl::debug=()","gem::resolver#debug?()","gem::resolver::molinillo::ui#debug?()","logger#debug?()","irb::irb#debug_break()","ripper#debug_output()","ripper#debug_output=()","racc::grammar#declare_precedence()","openssl::asn1::decode()","base64#decode64()","openssl::asn1::decode_all()","uri::decode_uri_component()","uri::decode_www_form()","uri::decode_www_form_component()","uri::generic#decoded_password()","uri::generic#decoded_user()","array#deconstruct()","csv::row#deconstruct()","data#deconstruct()","matchdata#deconstruct()","struct#deconstruct()","csv::row#deconstruct_keys()","data#deconstruct_keys()","date#deconstruct_keys()","datetime#deconstruct_keys()","hash#deconstruct_keys()","matchdata#deconstruct_keys()","struct#deconstruct_keys()","time#deconstruct_keys()","racc::reduce#decref()","openssl::cipher#decrypt()","openssl::pkcs7#decrypt()","openssl::pkey::pkey#decrypt()","ripper::dedent_string()","ripper#dedent_string()","string#dedup()","psych::visitors::toruby#deduplicate()","rdoc::anymethod#deduplicate_call_seq()","erb#def_class()","forwardable#def_delegator()","singleforwardable#def_delegator()","forwardable#def_delegators()","singleforwardable#def_delegators()","erb::defmethod#def_erb_method()","erb::defmethod::def_erb_method()","irb::contextextender::def_extend_command()","irb::extendcommandbundle::def_extend_command()","optionparser#def_head_option()","irb::inspector::def_inspector()","forwardable#def_instance_delegator()","forwardable#def_instance_delegators()","erb#def_method()","erb#def_module()","irb::notifier#def_notifier()","irb::notifier::def_notifier()","irb::notifier::compositenotifier#def_notifier()","optionparser#def_option()","irb::methodextender#def_post_proc()","irb::methodextender#def_pre_proc()","singleforwardable#def_single_delegator()","singleforwardable#def_single_delegators()","optionparser#def_tail_option()","gem::requirement::default()","hash#default()","win32ole::param#default()","hash#default=()","drb::drbserver::default_acl()","drb::drbserver::default_argc_limit()","gem::default_bindir()","bundler::default_bundle_dir()","gem::default_cert_path()","io::default_console_size()","gem::default_dir()","gem::commands::setupcommand#default_dir()","win32ole::type#default_event_sources()","gem::default_exec_format()","gem::default_ext_dir_for()","encoding::default_external()","encoding::default_external=()","gem::basicspecification#default_gem?()","gem::default_gem_load_paths()","bundler::default_gemfile()","gem::gemcutterutilities#default_host?()","drb::drbserver::default_id_conv()","reline::config#default_inputrc_path()","encoding::default_internal()","encoding::default_internal=()","reline::keyactor::base#default_key_bindings()","gem::default_key_path()","drb::drbserver::default_load_limit()","bundler::default_lockfile()","win32ole::type#default_ole_types()","gem::default_path()","gem::pathsupport#default_path()","net::http::default_port()","uri::generic#default_port()","uri::generic::default_port()","gem::requirement::default_prerelease()","hash#default_proc()","hash#default_proc=()","gem::default_rubygems_dirs()","gem::default_sources()","gem::default_spec_cache_dir()","gem::installer#default_spec_file()","gem::uninstaller#default_spec_matches?()","gem::default_specifications_dir()","gem::basicspecification::default_specifications_dir()","gem::uninstaller#default_specs_that_match()","irb::default_src_encoding()","gem::specification::default_stubs()","rdoc::options#default_title=()","gem::specification#default_value()","rdoc::task#defaults()","gem::command#defaults_str()","gem::commands::infocommand#defaults_str()","data::define()","gem::packagetask#define()","optionparser#define()","rdoc::task#define()","racc::grammar::define()","racc::parserclassgenerator#define_actions()","optionparser#define_by_keywords()","objectspace::define_finalizer()","optionparser#define_head()","module#define_method()","object#define_singleton_method()","optionparser#define_tail()","tracepoint#defined_class()","rdoc::context#defined_in?()","bundler::definition()","rdoc::attr#definition()","rdoc::normalclass#definition()","rdoc::normalmodule#definition()","rdoc::singleclass#definition()","rdoc::markdown#definition_lists()","gem::deflate()","zlib::deflate()","zlib::deflate#deflate()","zlib::deflate::deflate()","openssl::pkey::ec::group#degree()","forwardable#delegate()","singleforwardable#delegate()","array#delete()","cgi::session#delete()","cgi::session::filestore#delete()","cgi::session::memorystore#delete()","cgi::session::nullstore#delete()","cgi::session::pstore#delete()","csv::row#delete()","csv::table#delete()","dir::delete()","env::delete()","file::delete()","gem::sourcelist#delete()","hash#delete()","irb::jobmanager#delete()","net::http#delete()","net::httpheader#delete()","pstore#delete()","pathname#delete()","racc::iset#delete()","racc::symboltable#delete()","rinda::tuplebag#delete()","rinda::tuplebag::tuplebin#delete()","set#delete()","string#delete()","syntaxsuggest::codeblock#delete()","tempfile#delete()","win32::registry#delete()","yaml::dbm#delete()","string#delete!()","set#delete?()","array#delete_at()","reline::history#delete_at()","reline::lineeditor#delete_char()","reline::lineeditor#delete_char_or_list()","gem::resolver::molinillo::dependencygraph#delete_edge()","gem::resolver::molinillo::dependencygraph::log#delete_edge()","openstruct#delete_field()","gem::resolver::molinillo::dependencygraph::addedgenocircular#delete_first()","array#delete_if()","csv::row#delete_if()","csv::table#delete_if()","env::delete_if()","hash#delete_if()","set#delete_if()","yaml::dbm#delete_if()","win32::registry#delete_key()","rdoc::rubygemshook#delete_legacy_args()","rdoc::rubygemshook#delete_legacy_args()","observable#delete_observer()","observable#delete_observers()","string#delete_prefix()","string#delete_prefix!()","csv::deletesuffix#delete_suffix()","string#delete_suffix()","string#delete_suffix!()","readline::delete_text()","reline::lineeditor#delete_text()","rinda::tuplebag#delete_unless_alive()","win32::registry#delete_value()","syntaxsuggest::codeblock#deleted?()","complex#denominator()","float#denominator()","integer#denominator()","numeric#denominator()","rational#denominator()","makemakefile#depend_rules()","gem::resolver::indexspecification#dependencies()","gem::resolver::specspecification#dependencies()","gem::specification#dependencies()","gem::resolver::molinillo::delegates::specificationprovider#dependencies_equal?()","gem::resolver::molinillo::specificationprovider#dependencies_equal?()","gem::resolver#dependencies_for()","gem::resolver::molinillo::delegates::specificationprovider#dependencies_for()","gem::resolver::molinillo::specificationprovider#dependencies_for()","gem::impossibledependencieserror#dependency()","gem::dependencylist#dependency_order()","gem::specification#dependent_gems()","gem::specification#dependent_specs()","gem::deprecate#deprecate()","module#deprecate_constant()","gem::command#deprecate_option()","gem::command#deprecated?()","gem::commands::querycommand#deprecation_warning()","reline::ansi::deprep()","reline::generalio::deprep()","reline::windows::deprep()","gem::resolver::molinillo::delegates::resolutionstate#depth()","json::ext::generator::state#depth()","json::ext::generator::state#depth=()","thread::queue#deq()","thread::sizedqueue#deq()","openssl::pkey::pkey#derive()","pathname#descend()","gem::resolver::molinillo::dependencygraph::vertex#descendent?()","gem::command#description()","gem::commands::unpackcommand#description()","gem::specification#description=()","psych::visitors::toruby#deserialize()","encoding::converter#destination_encoding()","encoding::invalidbytesequenceerror#destination_encoding()","encoding::undefinedconversionerror#destination_encoding()","encoding::invalidbytesequenceerror#destination_encoding_name()","encoding::undefinedconversionerror#destination_encoding_name()","racc::parserfilegenerator#detab()","process::detach()","gem::resolver::molinillo::dependencygraph#detach_vertex_named()","gem::resolver::molinillo::dependencygraph::log#detach_vertex_named()","openssl::pkcs7#detached()","openssl::pkcs7#detached=()","openssl::pkcs7#detached?()","didyoumean::correctable#detailed_message()","errorhighlight::coreext#detailed_message()","exception#detailed_message()","syntaxsuggest#detailed_message()","enumerable#detect()","gem::specfetcher#detect()","irb::magicfile::detect_encoding()","rdoc::encoding::detect_encoding()","syntaxsuggest::codefrontier#detect_invalid_blocks()","csv::parser#detect_row_separator()","csv#determine_encoding()","racc::grammar#determine_terminals()","file::stat#dev()","file::stat#dev_major()","file::stat#dev_minor()","gem::resolver::activationrequest#development?()","gem::resolver::dependencyrequest#development?()","gem::specification#development_dependencies()","racc::grammar#dfa()","racc::states#dfa()","jacobian#dfdxi()","openssl::pkey::ec#dh_compute_key()","reline::lineeditor::dialogprocscope#dialog()","reline::core#dialog_proc()","didyoumean::treespellchecker#dictionary_without_leaves()","array#difference()","set#difference()","array#dig()","csv::row#dig()","csv::table#dig()","hash#dig()","openstruct#dig()","struct#dig()","reline::core#dig_perfect_match_proc=()","digest::class::digest()","digest::instance#digest()","openssl::digest::digest()","openssl::engine#digest()","openssl::hmac#digest()","openssl::hmac::digest()","digest::instance#digest!()","digest::base#digest_length()","digest::instance#digest_length()","digest::sha2#digest_length()","openssl::digest#digest_length()","integer#digits()","racc::states#digraph()","didyoumean::treespellchecker#dimensions()","gem::dir()","gem::installer#dir()","makemakefile#dir_config()","rdoc::classmodule#direct_ancestors()","rdoc::normalclass#direct_ancestors()","file::directory?()","file::stat#directory?()","filetest#directory?()","gem::package::tarreader::entry#directory?()","pathname#directory?()","file::dirname()","pathname#dirname()","gem::specification::dirs()","gem::specification::dirs=()","gc::disable()","gc::profiler::disable()","tracepoint#disable()","fiddle::handle#disable_close()","rubyvm::instructionsequence::disasm()","rubyvm::instructionsequence#disasm()","rubyvm::yjit::disasm()","rubyvm::instructionsequence#disassemble()","rubyvm::instructionsequence::disassemble()","set#disjoint?()","psych::visitors::visitor#dispatch()","psych::visitors::visitor::dispatch_cache()","irb::color::dispatch_seq()","win32ole::method#dispid()","gem::resolver::stats#display()","object#display()","rdoc::codeobject#display?()","rdoc::toplevel#display?()","syntaxsuggest::displayinvalidblocks#display_block()","gem::queryutils#display_header()","didyoumean::jaro#distance()","didyoumean::jarowinkler#distance()","bigdecimal#div()","integer#div()","numeric#div()","set#divide()","bigdecimal#divmod()","float#divmod()","integer#divmod()","numeric#divmod()","fiddle::importer#dlload()","fiddle::dlopen()","fiddle#dlopen()","fiddle::dlunwrap()","fiddle::dlwrap()","uri::ldap#dn()","uri::ldap#dn=()","rdoc::servlet#do_get()","rdoc::parser::c#do_aliases()","rdoc::parser::c#do_attrs()","rdoc::parser::c#do_boot_defclass()","rdoc::parser::c#do_classes_and_modules()","gem::gemrunner#do_configuration()","rdoc::parser::c#do_constants()","net::http#do_finish()","rdoc::parser::c#do_includes()","rdoc::parser::c#do_methods()","rdoc::parser::c#do_missing()","basicsocket#do_not_reverse_lookup()","basicsocket::do_not_reverse_lookup()","basicsocket#do_not_reverse_lookup=()","basicsocket::do_not_reverse_lookup=()","openssl::ssl::socketforwarder#do_not_reverse_lookup=()","rinda::ringserver#do_reply()","racc::states#do_resolve_sr()","net::http#do_start()","openssl::buffering#do_write()","rinda::ringserver#do_write()","gem::specification#doc_dir()","rdoc::stats#doc_stats()","gem::commands::checkcommand#doctor()","gem::doctor#doctor()","rdoc::rdoc#document()","rdoc::rubygemshook#document()","rdoc::rubygemshook#document()","psych::nodes::document#document?()","psych::nodes::node#document?()","rdoc::codeobject#document_children=()","syntaxsuggest::displayinvalidblocks#document_ok?()","rdoc::codeobject#document_self=()","rdoc::classmodule#document_self_or_methods()","rdoc::servlet#documentation_page()","rdoc::servlet#documentation_search()","rdoc::servlet#documentation_source()","rdoc::classmodule#documented?()","rdoc::codeobject#documented?()","rdoc::constant#documented?()","rdoc::methodattr#documented?()","cgi::cookie#domain=()","gem::streamui::silentdownloadreporter#done()","gem::streamui::silentprogressreporter#done()","gem::streamui::simpleprogressreporter#done()","gem::streamui::threadeddownloadreporter#done()","gem::streamui::verboseprogressreporter#done()","rdoc::stats#done_adding()","rdoc::codeobject#done_documenting=()","gem::done_installing()","irb::vec#dot()","acl::aclentry#dot_pat()","acl::aclentry#dot_pat_str()","bigdecimal::double_fig()","gem::resolver::molinillo::dependencygraph::action#down()","gem::resolver::molinillo::dependencygraph::addedgenocircular#down()","gem::resolver::molinillo::dependencygraph::deleteedge#down()","gem::resolver::molinillo::dependencygraph::detachvertexnamed#down()","gem::resolver::molinillo::dependencygraph::tag#down()","string#downcase()","symbol#downcase()","string#downcase!()","reline::lineeditor#downcase_word()","gem::remotefetcher#download()","gem::resolver::activationrequest#download()","gem::resolver::specification#download()","gem::source#download()","gem::source::installed#download()","gem::streamui#download_reporter()","gem::remotefetcher#download_to_cache()","date#downto()","integer#downto()","irb::canvas#draw()","array#drop()","enumerable#drop()","enumerator::lazy#drop()","array#drop_while()","enumerable#drop_while()","enumerator::lazy#drop_while()","openssl::pkey::ec#dsa_sign_asn1()","openssl::pkey::ec#dsa_verify_asn1()","time#dst?()","socket::ifaddr#dstaddr()","encoding#dummy?()","racc::sym#dummy?()","rdoc::markupreference#dummy_instance_alias()","rdoc::markupreference#dummy_instance_method()","makemakefile#dummy_makefile()","rdoc::markupreference::dummy_singleton_method()","json#dump()","json::genericobject::dump()","marshal::dump()","objectspace#dump()","psych::dump()","string#dump()","objectspace#dump_all()","psych::visitors::yamltree#dump_coder()","psych::visitors::yamltree#dump_exception()","rubyvm::yjit::dump_exit_locations()","psych::visitors::yamltree#dump_ivars()","psych::visitors::yamltree#dump_list()","objectspace#dump_shapes()","psych::dump_stream()","bigdecimal#dup()","env::dup()","numeric#dup()","object#dup()","racc::iset#dup()","singleton#dup()","irb::relineinputmethod#dynamic_prompt()","argf#each()","array#each()","csv#each()","csv::fieldsconverter#each()","csv::row#each()","csv::table#each()","dir#each()","env::each()","enumerator#each()","enumerator::arithmeticsequence#each()","enumerator::chain#each()","enumerator::product#each()","etc::group::each()","etc::passwd::each()","fiddle::cstruct#each()","gem::availableset#each()","gem::configfile#each()","gem::dependencylist#each()","gem::list#each()","gem::package::tarreader#each()","gem::resolver::molinillo::dependencygraph#each()","gem::resolver::molinillo::dependencygraph::log#each()","gem::sourcelist#each()","gem::specification::each()","getoptlong#each()","hash#each()","io#each()","io::buffer#each()","net::httpheader#each()","objectspace::weakmap#each()","openssl::asn1::constructive#each()","openssl::buffering#each()","openssl::config#each()","psych::nodes::node#each()","racc::grammar#each()","racc::iset#each()","racc::rule#each()","racc::states#each()","racc::symboltable#each()","range#each()","reline::killring#each()","rinda::notifytemplateentry#each()","rinda::ringfinger#each()","rinda::tuple#each()","set#each()","stringio#each()","struct#each()","syntaxsuggest::lexall#each()","win32ole#each()","win32::registry#each()","yaml::dbm#each()","zlib::gzipreader#each()","resolv#each_address()","resolv::each_address()","resolv::dns#each_address()","resolv::hosts#each_address()","resolv::mdns#each_address()","rdoc::classmodule#each_ancestor()","rdoc::context#each_attribute()","rubyvm::each_builtin()","argf#each_byte()","io#each_byte()","io::buffer#each_byte()","openssl::buffering#each_byte()","string#each_byte()","stringio#each_byte()","zlib::gzipreader#each_byte()","thread::each_caller_location()","net::httpheader#each_capitalized()","net::httpheader#each_capitalized_name()","gem::security::trustdir#each_certificate()","argf#each_char()","io#each_char()","string#each_char()","stringio#each_char()","zlib::gzipreader#each_char()","dir#each_child()","dir::each_child()","pathname#each_child()","rubyvm::instructionsequence#each_child()","rdoc::context#each_classmodule()","argf#each_codepoint()","io#each_codepoint()","string#each_codepoint()","stringio#each_codepoint()","enumerable#each_cons()","optionparser::each_const()","rdoc::context#each_constant()","enumerable#each_entry()","gem::package::tarreader#each_entry()","pathname#each_entry()","rinda::tuplebag#each_entry()","rdoc::context#each_extend()","pathname#each_filename()","string#each_grapheme_cluster()","net::httpheader#each_header()","rdoc::context#each_include()","array#each_index()","racc::grammar#each_index()","racc::states#each_index()","env::each_key()","hash#each_key()","net::httpheader#each_key()","objectspace::weakmap#each_key()","win32::registry#each_key()","racc::item#each_la()","argf#each_line()","csv::parser::inputsscanner#each_line()","csv::parser::scanner#each_line()","io#each_line()","openssl::buffering#each_line()","pathname#each_line()","string#each_line()","stringio#each_line()","zlib::gzipreader#each_line()","irb::locale#each_localized_path()","rdoc::context#each_method()","net::httpheader#each_name()","resolv::each_name()","resolv#each_name()","resolv::dns#each_name()","resolv::hosts#each_name()","syntaxsuggest::parseblocksfromindentline#each_neighbor_block()","racc::symboltable#each_nonterminal()","objectspace::each_object()","getoptlong#each_option()","optionparser::list#each_option()","csv::row#each_pair()","env::each_pair()","fiddle::cstruct#each_pair()","hash#each_pair()","objectspace::weakmap#each_pair()","openstruct#each_pair()","struct#each_pair()","yaml::dbm#each_pair()","rdoc::codeobject#each_parent()","racc::actiontable#each_reduce()","resolv::dns#each_resource()","net::httpresponse::each_response_header()","racc::grammar#each_rule()","racc::rule#each_rule()","rdoc::context#each_section()","racc::actiontable#each_shift()","enumerable#each_slice()","gem::sourcelist#each_source()","gem::availableset#each_spec()","racc::states#each_state()","tsort#each_strongly_connected_component()","tsort::each_strongly_connected_component()","tsort::each_strongly_connected_component_from()","tsort#each_strongly_connected_component_from()","irb::locale#each_sublocale()","racc::states#each_t()","racc::symboltable#each_terminal()","racc::grammar#each_useless_nonterminal()","racc::grammar#each_useless_rule()","env::each_value()","hash#each_value()","net::httpheader#each_value()","objectspace::weakmap#each_value()","win32::registry#each_value()","yaml::dbm#each_value()","enumerable#each_with_index()","enumerator#each_with_index()","racc::grammar#each_with_index()","enumerable#each_with_object()","enumerator#each_with_object()","enumerator::lazy#eager()","irb::easter_egg()","gem::s3urisigner#ec2_metadata_credentials_json()","gem::s3urisigner#ec2_metadata_request()","openssl::ssl::sslcontext#ecdh_curves=()","io#echo=()","io#echo?()","reline::lineeditor#ed_argument_digit()","reline::lineeditor#ed_clear_screen()","reline::lineeditor#ed_delete_next_char()","reline::lineeditor#ed_delete_prev_char()","reline::lineeditor#ed_delete_prev_word()","reline::lineeditor#ed_digit()","reline::lineeditor#ed_insert()","reline::lineeditor#ed_kill_line()","reline::lineeditor#ed_move_to_beg()","reline::lineeditor#ed_move_to_end()","reline::lineeditor#ed_newline()","reline::lineeditor#ed_next_char()","reline::lineeditor#ed_next_history()","reline::lineeditor#ed_prev_char()","reline::lineeditor#ed_prev_history()","reline::lineeditor#ed_prev_word()","reline::lineeditor#ed_quoted_insert()","reline::lineeditor#ed_search_next_history()","reline::lineeditor#ed_search_prev_history()","reline::lineeditor#ed_transpose_chars()","reline::lineeditor#ed_transpose_words()","reline::unicode::ed_transpose_words()","reline::lineeditor#ed_unassigned()","net::http#edit_path()","reline::config#editing_mode()","reline::lineeditor#editing_mode()","reline::config#editing_mode=()","reline::config#editing_mode_is?()","openssl::random::egd()","openssl::random::egd_bytes()","process::egid()","process::egid=()","gem::updatesuggestion#eglible_for_update?()","process::gid::eid()","process::uid::eid()","reline::unicode::em_backward_word()","reline::unicode::em_big_backward_word()","reline::lineeditor#em_capitol_case()","reline::lineeditor#em_delete()","reline::lineeditor#em_delete_next_word()","reline::lineeditor#em_delete_or_list()","reline::lineeditor#em_delete_prev_char()","reline::lineeditor#em_exchange_mark()","reline::unicode::em_forward_word()","reline::unicode::em_forward_word_with_capitalization()","reline::lineeditor#em_kill_line()","reline::lineeditor#em_kill_region()","reline::lineeditor#em_lower_case()","reline::lineeditor#em_next_word()","reline::lineeditor#em_set_mark()","reline::lineeditor#em_upper_case()","reline::lineeditor#em_yank()","reline::lineeditor#em_yank_pop()","readline::emacs_editing_mode()","reline::core#emacs_editing_mode()","readline::emacs_editing_mode?()","reline::core#emacs_editing_mode?()","gem::security::email_to_name()","racc::parserfilegenerator#embed_library()","racc::grammarfileparser#embedded_action()","psych::visitors::yamltree#emit_coder()","csv::parser#emit_row()","rdoc::markdown#emphasis()","gem::resolver::molinillo::resolutionstate::empty()","psych::handler#empty()","racc::useraction::empty()","array#empty?()","csv::fieldsconverter#empty?()","dir::empty?()","env::empty?()","file::empty?()","filetest#empty?()","gem::availableset#empty?()","gem::package::tarheader#empty?()","gem::requestset::lockfile::tokenizer#empty?()","gem::resolver::requirementlist#empty?()","gem::sourcelist#empty?()","hash#empty?()","io::buffer#empty?()","pathname#empty?()","rdoc::comment#empty?()","racc::iset#empty?()","racc::rule#empty?()","racc::useraction#empty?()","reline::killring::ringbuffer#empty?()","set#empty?()","string#empty?()","stringscanner#empty?()","symbol#empty?()","syntaxsuggest::codeline#empty?()","syntaxsuggest::priorityengulfqueue#empty?()","syntaxsuggest::priorityqueue#empty?()","syntaxsuggest::unvisitedlines#empty?()","thread::queue#empty?()","thread::sizedqueue#empty?()","reline::ansi::empty_buffer?()","reline::windows::empty_buffer?()","pstore#empty_marshal_checksum()","pstore#empty_marshal_data()","gc::enable()","gc::profiler::enable()","tracepoint#enable()","fiddle::handle#enable_close()","makemakefile#enable_config()","openssl::ssl::sslcontext#enable_fallback_scsv()","gc::profiler::enabled?()","reline::terminfo::enabled?()","rubyvm::mjit::enabled?()","rubyvm::yjit::enabled?()","tracepoint#enabled?()","openssl::pkcs7::recipientinfo#enc_key()","threadgroup#enclose()","threadgroup#enclosed?()","string#encode()","rdoc::comment#encode!()","string#encode!()","base64#encode64()","rdoc::text::encode_fallback()","net::httpgenericrequest#encode_multipart_form_data()","win32::sspi::negotiateauth#encode_token()","uri::encode_uri_component()","irb::irb#encode_with_invalid_byte_sequence()","uri::encode_www_form()","uri::encode_www_form_component()","irb::fileinputmethod#encoding()","irb::locale#encoding()","irb::readlineinputmethod#encoding()","irb::relineinputmethod#encoding()","irb::stdioinputmethod#encoding()","regexp#encoding()","reline::ansi::encoding()","reline::core#encoding()","reline::generalio::encoding()","reline::windows::encoding()","ripper#encoding()","string#encoding()","symbol#encoding()","reline::encoding_system_needs()","openssl::cipher#encrypt()","openssl::pkcs7::encrypt()","openssl::pkey::pkey#encrypt()","enumerator::arithmeticsequence#end()","matchdata#end()","range#end()","zlib::zstream#end()","rdoc::parser::ripperstatelex::end?()","psych::emitter#end_document()","psych::handler#end_document()","psych::treebuilder#end_document()","psych::emitter#end_mapping()","psych::handler#end_mapping()","reline::lineeditor#end_of_line()","racc::grammar#end_precedence_declaration()","gem::resolver::molinillo::resolver::resolution#end_resolution()","ripper#end_seen?()","psych::emitter#end_sequence()","psych::handler#end_sequence()","psych::emitter#end_stream()","psych::handler#end_stream()","psych::treebuilder#end_stream()","net::http#end_transport()","string#end_with?()","symbol#end_with?()","zlib::zstream#ended?()","etc::endgrent()","etc::endpwent()","gem::source#enforce_trailing_slash()","openssl::engine::engines()","date#england()","reline::windows::keyeventrecord#enhanced?()","thread::queue#enq()","thread::sizedqueue#enq()","gem::ensure_default_gem_subdirectories()","gem::installer#ensure_dependency()","gem::ensure_gem_subdirectories()","gem::installer#ensure_loadable_spec()","monitor#enter()","net::httpresponse#entity()","fiddle::cstruct::entity_class()","fiddle::cunion::entity_class()","dir::entries()","enumerable#entries()","pathname#entries()","range#entries()","gem::queryutils#entry_details()","gem::queryutils#entry_versions()","enumerator::lazy#enum_for()","object#enum_for()","gem::env_requirement()","cgi#env_table()","bundler::environment()","optionparser#environment()","argf#eof()","csv#eof()","io#eof()","openssl::buffering#eof()","stringio#eof()","zlib::gzipreader#eof()","argf#eof?()","csv#eof?()","gem::package::tarreader::entry#eof?()","io#eof?()","irb::fileinputmethod#eof?()","irb::readlineinputmethod#eof?()","irb::relineinputmethod#eof?()","irb::stdioinputmethod#eof?()","openssl::buffering#eof?()","reline::lineeditor#eof?()","stringio#eof?()","xmp::stringinputmethod#eof?()","zlib::gzipreader#eof?()","csv::parser::inputsscanner#eos?()","stringscanner#eos?()","array#eql?()","bigdecimal#eql?()","data#eql?()","delegator#eql?()","enumerator::arithmeticsequence#eql?()","fiddle::pointer#eql?()","float#eql?()","gem::nametuple#eql?()","gem::platform#eql?()","gem::resolver::activationrequest#eql?()","gem::resolver::molinillo::dependencygraph::vertex#eql?()","gem::version#eql?()","hash#eql?()","ipaddr#eql?()","matchdata#eql?()","method#eql?()","numeric#eql?()","object#eql?()","openssl::bn#eql?()","openssl::pkey::ec::group#eql?()","openssl::pkey::ec::point#eql?()","openssl::x509::name#eql?()","openstruct#eql?()","pathname#eql?()","proc#eql?()","rdoc::toplevel#eql?()","racc::locationpointer#eql?()","racc::state#eql?()","range#eql?()","regexp#eql?()","string#eql?()","struct#eql?()","time#eql?()","uri::generic#eql?()","unboundmethod#eql?()","basicobject#equal?()","ractor::movedobject#equal?()","reline::keystroke#equal?()","reline::ansi::erase_after_cursor()","reline::generalio::erase_after_cursor()","reline::windows::erase_after_cursor()","io#erase_line()","io#erase_screen()","math::erf()","math::erfc()","systemcallerror#errno()","gem::mockgemui#error()","logger#error()","openssl::x509::storecontext#error()","rdoc::parser::ruby#error()","rdoc::rdoc#error()","rdoc::servlet#error()","syslog::logger#error()","logger#error!()","openssl::x509::storecontext#error=()","logger#error?()","ripper#error?()","encoding::invalidbytesequenceerror#error_bytes()","encoding::undefinedconversionerror#error_char()","openssl::x509::storecontext#error_depth()","gem::commands::buildcommand#error_message()","getoptlong#error_message()","drb::drbserver#error_print()","openssl::x509::storecontext#error_string()","gem::resolver::composedset#errors()","gem::resolver::installerset#errors()","openssl::errors()","syntaxsuggest::explainsyntax#errors()","cgi::escape#escape()","cgi::util#escape()","gem::uriformatter#escape()","regexp::escape()","shellwords::escape()","uri::rfc2396_parser#escape()","uri::rfc2396_parser#escape()","cgi::util#escapeelement()","cgi::escape#escapehtml()","cgi::util#escapehtml()","cgi::escape#escapeuricomponent()","cgi::util#escapeuricomponent()","cgi::util#escape_element()","reline::unicode::escape_for_print()","cgi::util#escape_html()","json::ext::generator::state#escape_slash()","json::ext::generator::state#escape_slash=()","json::ext::generator::state#escape_slash?()","uri::generic#escape_userpass()","process::euid()","process::euid=()","binding#eval()","kernel#eval()","rubyvm::instructionsequence#eval()","bundler::eval_gemspec()","irb::context#eval_history=()","irb::irb#eval_input()","tracepoint#eval_script()","bundler::eval_yaml_gemspec()","irb::workspace#evaluate()","integer#even?()","tracepoint#event()","win32ole::method#event?()","win32ole::method#event_interface()","psych::handler#event_location()","psych::treebuilder#event_location()","gem::requirement#exact?()","didyoumean::keyerrorchecker#exact_matches()","didyoumean::patternkeynamechecker#exact_matches()","env::except()","hash#except()","drb::drbunknown#exception()","exception::exception()","exception#exception()","timeout::error#exception()","syntaxsuggest::priorityqueue#exchange()","reline::lineeditor#exchange_point_and_mark()","rdoc::options#exclude()","enumerator::arithmeticsequence#exclude_end?()","range#exclude_end?()","kernel#exec()","process::exec()","gem::installer::exec_format()","irb::notifier::abstractnotifier#exec_if()","gem::specification#executable()","gem::specification#executable=()","file::executable?()","file::stat#executable?()","filetest#executable?()","pathname#executable?()","file::executable_real?()","file::stat#executable_real?()","filetest#executable_real?()","pathname#executable_real?()","gem::specification#executables()","gem::specification#executables=()","gem::command#execute()","gem::commands::buildcommand#execute()","gem::commands::certcommand#execute()","gem::commands::checkcommand#execute()","gem::commands::cleanupcommand#execute()","gem::commands::contentscommand#execute()","gem::commands::dependencycommand#execute()","gem::commands::environmentcommand#execute()","gem::commands::execcommand#execute()","gem::commands::fetchcommand#execute()","gem::commands::generateindexcommand#execute()","gem::commands::helpcommand#execute()","gem::commands::installcommand#execute()","gem::commands::lockcommand#execute()","gem::commands::mirrorcommand#execute()","gem::commands::opencommand#execute()","gem::commands::outdatedcommand#execute()","gem::commands::ownercommand#execute()","gem::commands::pristinecommand#execute()","gem::commands::pushcommand#execute()","gem::commands::rdoccommand#execute()","gem::commands::servercommand#execute()","gem::commands::setupcommand#execute()","gem::commands::signincommand#execute()","gem::commands::signoutcommand#execute()","gem::commands::sourcescommand#execute()","gem::commands::specificationcommand#execute()","gem::commands::stalecommand#execute()","gem::commands::uninstallcommand#execute()","gem::commands::unpackcommand#execute()","gem::commands::updatecommand#execute()","gem::commands::whichcommand#execute()","gem::commands::yankcommand#execute()","gem::queryutils#execute()","dir::exist?()","file::exist?()","filetest#exist?()","pathname#exist?()","stringscanner#exist?()","irb::context#exit()","kernel#exit()","monitor#exit()","process::exit()","thread::exit()","thread#exit()","kernel#exit!()","process::exit!()","rubyvm::yjit::exit_locations()","localjumperror#exit_value()","process::status#exited?()","process::status#exitstatus()","bigmath::exp()","math::exp()","gem::pathsupport#expand()","reline::keystroke#expand()","syntaxsuggest::codefrontier#expand?()","win32::registry::expand_environ()","syntaxsuggest::codesearch#expand_existing()","openssl::x509::name::rfc2253dn#expand_hexstring()","syntaxsuggest::blockexpand#expand_indent()","syntaxsuggest::blockexpand#expand_neighbors()","openssl::x509::name::rfc2253dn#expand_pair()","file::expand_path()","pathname#expand_path()","rdoc::text#expand_tabs()","openssl::x509::name::rfc2253dn#expand_value()","io#expect()","rinda::tupleentry#expired?()","gem::resolver::conflict#explain()","gem::resolver::conflict#explanation()","gem::resolver::dependencyrequest#explicit?()","gem::installer#explicit_version_requirement()","bigdecimal#exponent()","openssl::pkey::dh#export()","openssl::pkey::dsa#export()","openssl::pkey::ec#export()","openssl::pkey::rsa#export()","openssl::ssl::sslsocket#export_keying_material()","syntaxsuggest::lexvalue#expr_beg?()","syntaxsuggest::lexvalue#expr_label?()","object#extend()","irb::extendcommandbundle::extend_object()","module#extend_object()","monitormixin::extend_object()","optionparser::arguable::extend_object()","module#extended()","rdoc::markdown#extension()","rdoc::markdown::extension()","rdoc::markdown#extension?()","gem::basicspecification#extension_dir()","gem::ext::cargobuilder#extension_nesting()","gem::specification#extensions()","openssl::ocsp::singleresponse#extensions()","openssl::x509::crl#extensions()","openssl::x509::certificate#extensions()","openssl::x509::revoked#extensions()","uri::ldap#extensions()","gem::specification#extensions=()","openssl::x509::crl#extensions=()","openssl::x509::certificate#extensions=()","openssl::x509::revoked#extensions=()","uri::ldap#extensions=()","gem::basicspecification#extensions_dir()","fiddle::importer#extern()","io::buffer#external?()","argf#external_encoding()","io#external_encoding()","stringio#external_encoding()","zlib::gzipreader#external_encoding()","file::extname()","pathname#extname()","gem::command::extra_args()","gem::command::extra_args=()","gem::specification#extra_rdoc_files()","gem::specification#extra_rdoc_files=()","uri::extract()","uri::rfc2396_parser#extract()","uri::rfc2396_parser#extract()","gem::installer#extract_bin()","rdoc::comment#extract_call_seq()","gem::installer#extract_files()","gem::installer::fakepackage#extract_files()","gem::package#extract_files()","gem::package::old#extract_files()","syslog::facility()","kernel#fail()","openssl::timestamp::response#failure_info()","didyoumean::treespellchecker#fall_back_to_normal_spell_check()","socket::ancillarydata#family()","socket::option#family()","addrinfo#family_addrinfo()","json#fast_generate()","logger#fatal()","syslog::logger#fatal()","logger#fatal!()","logger#fatal?()","io#fcntl()","openssl::ssl::socketforwarder#fcntl()","stringio#fcntl()","io#fdatasync()","complex#fdiv()","float#fdiv()","integer#fdiv()","numeric#fdiv()","rational#fdiv()","bundler::feature_flag()","enumerator#feed()","array#fetch()","csv::row#fetch()","drb::weakidconv::weakset#fetch()","env::fetch()","gem::request#fetch()","gem::streamui::silentdownloadreporter#fetch()","gem::streamui::threadeddownloadreporter#fetch()","hash#fetch()","net::httpheader#fetch()","pstore#fetch()","rinda::tuple#fetch()","rinda::tupleentry#fetch()","thread#fetch()","yaml::dbm#fetch()","gem::remotefetcher#fetch_file()","gem::remotefetcher#fetch_http()","gem::remotefetcher#fetch_https()","errorhighlight::spotter#fetch_line()","gem::remotefetcher#fetch_path()","resolv::dns#fetch_resource()","gem::remotefetcher#fetch_s3()","gem::s3urisigner#fetch_s3_config()","drb#fetch_server()","drb::fetch_server()","gem::source#fetch_spec()","gem::source::lock#fetch_spec()","hash#fetch_values()","gem::remotefetcher::fetcher()","gem::specfetcher::fetcher()","fiber::scheduler#fiber()","csv::row#field()","csv::row#field?()","csv::row#field_row?()","csv#field_size_limit()","csv::parser#field_size_limit()","csv::row#fields()","argf#file()","digest::class::file()","digest::instance#file()","file::file?()","file::stat#file?()","filetest#file?()","gem::package::tarreader::entry#file?()","pathname#file?()","cgi::htmlextension#file_field()","irb::context#file_input?()","fiddle::handle#file_name()","gem::specification#file_name()","rdoc::codeobject#file_name()","argf#filename()","ripper#filename()","ripper::filter#filename()","readline::filename_quote_characters()","readline::filename_quote_characters=()","reline::core#filename_quote_characters=()","argf#fileno()","dir#fileno()","io#fileno()","openssl::ssl::socketforwarder#fileno()","stringio#fileno()","gem::specification#files()","gem::specification#files=()","rdoc::store#files_hash()","gem::commands::contentscommand#files_in()","gem::commands::setupcommand#files_in()","gem::commands::contentscommand#files_in_default_gem()","gem::commands::contentscommand#files_in_gem()","array#fill()","prettyprint#fill_breakable()","openssl::buffering#fill_rbuff()","array#filter()","csv::filter()","env::filter()","enumerable#filter()","enumerator::lazy#filter()","hash#filter()","struct#filter()","uri::ldap#filter()","array#filter!()","env::filter!()","hash#filter!()","set#filter!()","uri::ldap#filter=()","irb::workspace#filter_backtrace()","optionparser::parseerror::filter_backtrace()","enumerable#filter_map()","enumerator::lazy#filter_map()","gem::resolver::molinillo::resolver::resolution#filter_possibilities_after_unwind()","gem::resolver::molinillo::resolver::resolution#filter_possibilities_for_parent_unwind()","gem::resolver::molinillo::resolver::resolution#filter_possibilities_for_primary_unwind()","gem::resolver::molinillo::resolver::resolution#filtered_possibility_set()","openssl::cipher#final()","reline::lineeditor#finalize()","encoding::find()","enumerable#find()","find::find()","find#find()","irb::locale#find()","pathname#find()","psych::classloader::restricted#find()","rinda::tuplebag#find()","rinda::tuplebag::tuplebin#find()","gem::specification::find_active_stub_by_path()","gem::commandmanager#find_alias_command()","rdoc::parser::c#find_alias_comment()","enumerable#find_all()","enumerator::lazy#find_all()","gem::availableset#find_all()","gem::resolver::apiset#find_all()","gem::resolver::composedset#find_all()","gem::resolver::currentset#find_all()","gem::resolver::gitset#find_all()","gem::resolver::indexset#find_all()","gem::resolver::installerset#find_all()","gem::resolver::lockset#find_all()","gem::resolver::set#find_all()","gem::resolver::vendorset#find_all()","rinda::tuplebag#find_all()","gem::specification::find_all_by_full_name()","gem::specification::find_all_by_name()","gem::specification#find_all_satisfiers()","rinda::tuplebag#find_all_template()","rdoc::classmodule#find_ancestor_local_symbol()","rdoc::parser::c#find_attr_comment()","rdoc::context#find_attribute()","rdoc::context#find_attribute_named()","rdoc::parser::c#find_body()","gem::specification::find_by_full_name()","gem::specification::find_by_name()","gem::specification::find_by_path()","rdoc::store#find_c_enclosure()","rdoc::parser::c#find_class()","rdoc::parser::c#find_class_comment()","rdoc::context#find_class_method_named()","rdoc::classmodule#find_class_named()","rdoc::store#find_class_named()","rdoc::store#find_class_named_from()","rdoc::store#find_class_or_module()","rdoc::toplevel#find_class_or_module()","gem::commandmanager#find_command()","gem::commandmanager#find_command_possibilities()","gem::find_config_file()","rdoc::parser::c#find_const_comment()","rdoc::context#find_constant_named()","rdoc::context#find_enclosing_module_named()","makemakefile#find_executable()","openssl::x509::extension::helpers#find_extension()","rdoc::context#find_external_alias()","rdoc::context#find_external_alias_named()","rdoc::context#find_file_named()","rdoc::store#find_file_named()","gem::find_files()","gem::validator#find_files_for_gem()","gem::source::local#find_gem()","gem::commands::buildcommand#find_gemspec()","makemakefile#find_header()","gem::find_home()","didyoumean::treespellchecker#find_ideas()","gem::commands::unpackcommand#find_in_cache()","gem::specification::find_in_unresolved()","gem::specification::find_in_unresolved_tree()","gem::specification::find_inactive_by_path()","array#find_index()","enumerable#find_index()","rdoc::context#find_instance_method_named()","gem::find_latest_files()","didyoumean::treespellchecker#find_leaves()","makemakefile#find_library()","rdoc::context#find_local_symbol()","rdoc::toplevel#find_local_symbol()","rdoc::context#find_method()","rdoc::context#find_method_named()","rdoc::parser::c#find_modifiers()","rdoc::context#find_module_named()","rdoc::store#find_module_named()","rdoc::toplevel#find_module_named()","gem::dependencylist#find_name()","rdoc::parser::c#find_override_comment()","gem::commands::whichcommand#find_paths()","uri::generic#find_proxy()","openssl::ocsp::basicresponse#find_response()","gem::find_spec_for_exe()","gem::resolver::molinillo::resolver::resolution#find_state_for()","didyoumean::treespellchecker#find_suggestions()","rdoc::context#find_symbol()","rdoc::context#find_symbol_module()","rdoc::store#find_text_page()","makemakefile#find_type()","rdoc::store#find_unique()","gem::find_unresolved_default_spec()","rinda::ringfinger::finger()","racc::states#fingerprint()","digest::instance#finish()","encoding::converter#finish()","net::http#finish()","openssl::digest#finish()","openssl::engine#finish()","psych::visitors::yamltree#finish()","rdoc::options#finish()","reline::lineeditor#finish()","zlib::gzipfile#finish()","zlib::zstream#finish()","rdoc::options#finish_page_dir()","reline::generalio::finish_pasting()","gem::finish_resolve()","reline::lineeditor#finished?()","zlib::zstream#finished?()","openssl::ssl::sslsocket#finished_message()","bigdecimal#finite?()","complex#finite?()","float#finite?()","numeric#finite?()","openssl::fips_mode()","openssl::fips_mode=()","array#first()","enumerable#first()","enumerator::arithmeticsequence#first()","gem::sourcelist#first()","range#first()","prettyprint::singleline#first?()","rubyvm::abstractsyntaxtree::node#first_column()","rubyvm::abstractsyntaxtree::node#first_lineno()","rubyvm::instructionsequence#first_lineno()","bigdecimal#fix()","racc::symboltable#fix()","rdoc::store#fix_basic_object_inheritance()","racc::grammar#fix_ident()","racc::symboltable#fix_ident()","stringscanner#fixed_anchor?()","regexp#fixed_encoding?()","openssl::fixed_length_secure_compare()","socket::ifaddr#flags()","openssl::x509::store#flags=()","openssl::x509::storecontext#flags=()","enumerable#flat_map()","enumerator::lazy#flat_map()","array#flatten()","hash#flatten()","set#flatten()","array#flatten!()","set#flatten!()","csv#flock()","file#flock()","bigdecimal#floor()","float#floor()","integer#floor()","numeric#floor()","rational#floor()","time#floor()","gem::package::tarwriter#flush()","gem::silentui::nullio#flush()","io#flush()","openssl::buffering#flush()","prettyprint#flush()","stringio#flush()","win32::registry#flush()","zlib::deflate#flush()","zlib::gzipwriter#flush()","net::httpgenericrequest#flush_buffer()","racc::grammar::definitionenv#flush_delayed()","syntaxsuggest::priorityengulfqueue#flush_deleted()","rdoc::text#flush_left()","zlib::zstream#flush_next_in()","zlib::zstream#flush_next_out()","openssl::ssl::sslcontext#flush_sessions()","syntaxsuggest::lexvalue#fname?()","file::fnmatch()","pathname#fnmatch()","file::fnmatch?()","pathname#fnmatch?()","racc::parserfilegenerator#footer()","io::buffer::for()","rdoc::parser::for()","uri::for()","gem::specification#for_cache()","gem::resolver::for_current_gems()","basicsocket::for_fd()","io::for_fd()","gem::installer::for_spec()","gem::resolver::conflict#for_spec?()","enumerator::lazy#force()","rdoc::codeobject#force_documentation=()","string#force_encoding()","csv#force_quotes?()","addrinfo::foreach()","csv::foreach()","dir::foreach()","io::foreach()","kernel#fork()","process::fork()","thread::fork()","cgi::htmlextension#form()","net::httpheader#form_data=()","benchmark::tms#format()","irb::locale#format()","kernel#format()","prettyprint::format()","syntaxsuggest::displaycodewithlinenumbers#format()","rdoc::comment#format=()","logger::formatter#format_datetime()","syntaxsuggest::displaycodewithlinenumbers#format_line()","logger#format_message()","logger#format_severity()","gem::text#format_text()","gem::noaliasyamltree#format_time()","psych::visitors::yamltree#format_time()","gem::installer#formatted_program_filename()","didyoumean::formatter()","errorhighlight::formatter()","didyoumean::formatter=()","errorhighlight::formatter=()","reline::lineeditor#forward_char()","reline::lineeditor#forward_search_history()","reline::lineeditor#forward_word()","bigdecimal#frac()","uri::generic#fragment=()","fiddle::free()","fiddle::closure#free()","fiddle::pointer#free()","io::buffer#free()","fiddle::pointer#free=()","fiddle::closure#freed?()","fiddle::pointer#freed?()","delegator#freeze()","env::freeze()","gem::version#freeze()","module#freeze()","object#freeze()","openssl::ssl::sslcontext#freeze()","openstruct#freeze()","pathname#freeze()","string#freeze()","math::frexp()","date#friday?()","time#friday?()","rdoc::store#friendly_path()","gem::package::tarheader::from()","gem::sourcelist::from()","gem::requestset::lockfile::tokenizer::from_file()","json::genericobject::from_hash()","gem::nametuple::from_list()","rdoc::classmodule::from_module()","process::gid::from_name()","process::uid::from_name()","syntaxsuggest::codeline::from_source()","gem::dependencylist::from_specs()","json::ext::generator::state::from_state()","gem::specification::from_yaml()","drb::front()","drb#front()","drb::extserv#front()","kernel#frozen?()","bundler::frozen_bundle?()","io#fsync()","stringio#fsync()","file::ftype()","file::stat#ftype()","pathname#ftype()","fileutils::streamutils_#fu_blksize()","fileutils#fu_clean_components()","fileutils::streamutils_#fu_default_blksize()","fileutils#fu_split_path()","fileutils#fu_starting_path?()","fileutils::streamutils_#fu_stream_blksize()","fileutils::streamutils_#fu_windows?()","gem::basicspecification#full_gem_path()","exception#full_message()","didyoumean::classnamechecker::classname#full_name()","gem::basicspecification#full_name()","gem::nametuple#full_name()","gem::package::tarreader::entry#full_name()","gem::resolver::activationrequest#full_name()","gem::resolver::specspecification#full_name()","gem::resolver::specification#full_name()","gem::specification#full_name()","rdoc::classmodule#full_name()","rdoc::constant#full_name()","rdoc::context#full_name()","rdoc::methodattr#full_name()","rdoc::mixin#full_name()","rdoc::toplevel#full_name()","rdoc::codeobject#full_name=()","rdoc::alias#full_old_name()","gem::basicspecification#full_require_paths()","gem::resolver::activationrequest#full_spec()","rdoc::context#fully_documented?()","rdoc::stats#fully_documented?()","math::gamma()","gc#garbage_collect()","objectspace::garbage_collect()","objectspace#garbage_collect()","rdoc::rdoc#gather_files()","integer#gcd()","openssl::bn#gcd()","integer#gcdlcm()","gem::installer#gem()","gem::requestset#gem()","gem::requestset::gemdependencyapi#gem()","kernel#gem()","gem::commands::contentscommand#gem_contents()","gem::basicspecification#gem_dir()","gem::installer#gem_dir()","gem::indexer#gem_file_list()","gem::commands::contentscommand#gem_install_dir()","gem::commands::buildcommand#gem_name()","gem::queryutils#gem_name?()","gem::doctor#gem_repository?()","gem::installer#gemdeps_load()","gem::basicspecification#gems_dir()","gem::specification#gems_dir()","gem::requestset::gemdependencyapi#gemspec()","gem::specification::gemspec_stubs_in()","racc::statetransitiontablegenerator#gen_action_tables()","rdoc::parser::c#gen_body_table()","rdoc::parser::c#gen_const_table()","racc::statetransitiontablegenerator#gen_goto_tables()","random::formatter#gen_random()","securerandom::gen_random()","securerandom::gen_random_openssl()","securerandom::gen_random_urandom()","openssl::timestamp::tokeninfo#gen_time()","csv::generate()","json#generate()","json::ext::generator::state#generate()","openssl::pkey::dh::generate()","openssl::pkey::dsa::generate()","openssl::pkey::ec::generate()","openssl::pkey::rsa::generate()","rdoc::rdoc#generate()","rdoc::rubygemshook#generate()","rdoc::rubygemshook#generate()","racc::parserclassgenerator#generate()","racc::statetransitiontable::generate()","racc::statetransitiontablegenerator#generate()","gem::installer#generate_bin_script()","gem::installer#generate_bin_symlink()","gem::s3urisigner#generate_canonical_query_params()","gem::s3urisigner#generate_canonical_request()","gem::commands::setupcommand#generate_default_dirs()","gem::commands::setupcommand#generate_default_man_dir()","gem::indexer#generate_index()","openssl::pkey::generate_key()","openssl::pkey::ec#generate_key()","openssl::pkey::dh#generate_key!()","openssl::pkey::ec#generate_key!()","csv::generate_line()","csv::generate_lines()","openssl::pkey::generate_parameters()","racc::parserfilegenerator#generate_parser()","racc::parserfilegenerator#generate_parser_file()","openssl::bn::generate_prime()","reline::lineeditor#generate_searcher()","gem::s3urisigner#generate_signature()","errorhighlight::coreext#generate_snippet()","racc::states#generate_states()","gem::s3urisigner#generate_string_to_sign()","gem::installer#generate_windows_script()","rdoc::rubygemshook::generation_hook()","rdoc::rubygemshook::generation_hook()","openssl::pkey::ec::group#generator()","rdoc::options#generator_descriptions()","rdoc::servlet#generator_for()","getoptlong#get()","net::http#get()","net::http::get()","net::http#get2()","gem::command#get_all_gem_names()","gem::command#get_all_gem_names_and_versions()","rdoc::parser::ruby#get_bool()","stringscanner#get_byte()","gem::commands::cleanupcommand#get_candidate_gems()","optionparser::list#get_candidates()","gem::request::get_cert_files()","rdoc::parser::ruby#get_class_or_module()","rdoc::parser::ruby#get_class_specification()","reline::windows::get_console_screen_buffer_info()","rdoc::parser::ruby#get_constant()","win32::sspi::negotiateauth#get_credentials()","resolv::get_dns_server_list()","rdoc::parser::ripperstatelex#get_embdoc_tk()","gem::commands::opencommand#get_env_editor()","net::httpheader#get_fields()","openssl::bn#get_flags()","gem::commands::cleanupcommand#get_gems_to_cleanup()","rdoc::parser::ripperstatelex#get_heredoc_tk()","resolv::get_hosts_dir()","gem::commands::pushcommand#get_hosts_for()","resolv::get_hosts_path()","rdoc::parser::ruby#get_included_module_with_optional_parens()","resolv::get_info()","win32::sspi::negotiateauth#get_initial_token()","gem::gemcutterutilities#get_key_name()","reline::unicode::get_mbchar_byte_size_by_first_char()","reline::unicode::get_mbchar_width()","reline::keyactor::base#get_method()","gem::gemcutterutilities#get_mfa_params()","reline::unicode::get_next_mbchar_size()","gem::command#get_one_gem_name()","gem::command#get_one_optional_argument()","rdoc::parser::ripperstatelex#get_op_tk()","getoptlong#get_option()","gem::commands::ownercommand#get_owner_scope()","gem::commands::unpackcommand#get_path()","gem::versionoption#get_platform_from_requirements()","reline::unicode::get_prev_mbchar_size()","gem::commands::cleanupcommand#get_primary_gems()","net::http::get_print()","gem::request::get_proxy_from_env()","gem::security::get_public_key()","gem::commands::pushcommand#get_push_scope()","racc::grammarfilescanner#get_quoted_re()","rdoc::parser::ripperstatelex#get_regexp_tk()","gem::ext::extconfbuilder::get_relative_path()","rinda::tupleentry#get_renewer()","resolv::get_resolv_info()","net::http::get_response()","gem::gemcutterutilities#get_scope_params()","readline::get_screen_size()","reline::ansi::get_screen_size()","reline::core#get_screen_size()","reline::generalio::get_screen_size()","reline::windows::get_screen_size()","gem::resolver::sourceset#get_set()","rdoc::parser::ripperstatelex#get_squashed_tk()","io::buffer#get_string()","rdoc::parser::ripperstatelex#get_string_tk()","rdoc::parser::ruby#get_symbol_or_name()","rdoc::parser::ripperstatelex#get_symbol_tk()","rdoc::parser::rubytools#get_tk()","rdoc::parser::rubytools#get_tk_until()","rdoc::parser::rubytools#get_tkread()","gem::gemcutterutilities#get_user_profile()","io::buffer#get_value()","openssl::config#get_value()","io::buffer#get_values()","gem::commands::yankcommand#get_version_from_requirements()","rdoc::parser::ripperstatelex#get_words_tk()","gem::commands::yankcommand#get_yank_scope()","ipsocket::getaddress()","resolv::getaddress()","resolv#getaddress()","resolv::dns#getaddress()","resolv::hosts#getaddress()","ipsocket::getaddress_orig()","resolv::getaddresses()","resolv#getaddresses()","resolv::dns#getaddresses()","resolv::hosts#getaddresses()","addrinfo::getaddrinfo()","socket::getaddrinfo()","argf#getbyte()","io#getbyte()","openssl::buffering#getbyte()","string#getbyte()","stringio#getbyte()","stringscanner#getbyte()","zlib::gzipreader#getbyte()","argf#getc()","gem::package::tarreader::entry#getc()","io#getc()","openssl::buffering#getc()","reline::ansi::getc()","reline::generalio::getc()","reline::windows::getc()","stringio#getc()","zlib::gzipreader#getc()","reline::ansi::getc_with_bracketed_paste()","io#getch()","io::generic_readable#getch()","stringscanner#getch()","reline::windows::getconsolemode()","process::sys::getegid()","process::sys::geteuid()","process::sys::getgid()","time#getgm()","etc::getgrent()","etc::getgrgid()","etc::getgrnam()","socket::gethostbyaddr()","socket::gethostbyname()","tcpsocket::gethostbyname()","socket::gethostname()","socket::getifaddrs()","time#getlocal()","etc::getlogin()","resolv::getname()","resolv#getname()","resolv::dns#getname()","resolv::hosts#getname()","addrinfo#getnameinfo()","socket::getnameinfo()","resolv::getnames()","resolv#getnames()","resolv::dns#getnames()","resolv::hosts#getnames()","optionparser#getopts()","optionparser::getopts()","optionparser::arguable#getopts()","io#getpass()","io::generic_readable#getpass()","basicsocket#getpeereid()","basicsocket#getpeername()","process::getpgid()","process::getpgrp()","process::getpriority()","pty::getpty()","etc::getpwent()","etc::getpwnam()","etc::getpwuid()","resolv::dns#getresource()","resolv::dns#getresources()","process::getrlimit()","argf#gets()","csv#gets()","gem::silentui::nullio#gets()","io#gets()","irb::fileinputmethod#gets()","irb::inputmethod#gets()","irb::locale#gets()","irb::readlineinputmethod#gets()","irb::relineinputmethod#gets()","irb::stdioinputmethod#gets()","kernel#gets()","openssl::buffering#gets()","stringio#gets()","xmp::stringinputmethod#gets()","zlib::gzipreader#gets()","socket::getservbyname()","socket::getservbyport()","process::getsid()","basicsocket#getsockname()","basicsocket#getsockopt()","openssl::ssl::socketforwarder#getsockopt()","process::sys::getuid()","time#getutc()","dir::getwd()","fileutils::getwd()","fileutils#getwd()","pathname::getwd()","file::stat#gid()","process::gid()","process::gid=()","gem::requestset::gemdependencyapi#git()","gem::commands::environmentcommand#git_path()","bundler::git_present?()","gem::requestset::gemdependencyapi#git_source()","rdoc::markdown#github()","dir::glob()","pathname#glob()","pathname::glob()","gem::util::glob_files_in_dir()","kernel#global_variables()","time::gm()","time#gmt?()","time#gmt_offset()","time#gmtime()","time#gmtoff()","io#goto()","io#goto_column()","racc::shift#goto_id()","racc::grammar::definitionenv#grammar()","process::gid::grant_privilege()","process::uid::grant_privilege()","string#grapheme_clusters()","rdoc::stats#great_job()","date#gregorian()","date#gregorian?()","date::gregorian_leap?()","enumerable#grep()","enumerator::lazy#grep()","enumerable#grep_v()","enumerator::lazy#grep_v()","etc::group()","gem::requestset::gemdependencyapi#group()","openssl::pkey::ec#group()","prettyprint#group()","prettyprint::singleline#group()","thread#group()","openssl::pkey::ec#group=()","enumerable#group_by()","rdoc::parser::changelog#group_entries()","gem::resolver::molinillo::resolver::resolution#group_possibilities()","prettyprint#group_sub()","process::groups()","process::groups=()","file::grpowned?()","file::stat#grpowned?()","filetest#grpowned?()","pathname#grpowned?()","kernel#gsub()","string#gsub()","string#gsub!()","pp::ppmethods#guard_inspect_key()","kconv::guess()","kconv#guess()","nkf::guess()","optionparser::switch::guess()","win32ole::type#guid()","win32ole::typelib#guid()","gem::util::gunzip()","zlib::gunzip()","gem::indexer#gzip()","gem::util::gzip()","zlib::gzip()","gem::package#gzip_to()","cgi::util#h()","gem::configfile#handle_arguments()","rdoc::parser::c#handle_attr()","rdoc::parser::c#handle_class_module()","rdoc::parser::c#handle_constants()","reline::config#handle_directive()","syntaxsuggest::handle_error()","irb::irb#handle_exception()","rdoc::parser::c#handle_ifdefs_in()","thread::handle_interrupt()","rdoc::parser::c#handle_method()","gem::resolver::molinillo::resolver::resolution#handle_missing_or_push_dependency_state()","gem::command#handle_options()","gem::commands::execcommand#handle_options()","rdoc::rdoc#handle_pipe()","rdoc::parser::c#handle_singleton()","rdoc::parser#handle_tab_width()","fiddle::importer#handler()","win32ole::event#handler()","win32ole::event#handler=()","fiddle::compositehandler#handlers()","gem::command#handles?()","gem::specification#has_conflicts?()","rinda::tuplebag#has_expires?()","cgi::queryextension#has_key?()","csv::row#has_key?()","env::has_key?()","hash#has_key?()","env::has_value?()","hash#has_value?()","yaml::dbm#has_value?()","array#hash()","bigdecimal#hash()","complex#hash()","data#hash()","enumerator::arithmeticsequence#hash()","float#hash()","gem::nametuple#hash()","gem::resolver::apispecification#hash()","gem::resolver::activationrequest#hash()","gem::resolver::indexspecification#hash()","gem::resolver::molinillo::dependencygraph::vertex#hash()","hash#hash()","ipaddr#hash()","matchdata#hash()","method#hash()","object#hash()","openssl::bn#hash()","openssl::x509::name#hash()","proc#hash()","rdoc::toplevel#hash()","range#hash()","rational#hash()","regexp#hash()","string#hash()","struct#hash()","time#hash()","uri::generic#hash()","unboundmethod#hash()","racc::rule#hash=()","rinda::tuple#hash?()","openssl::ocsp::certificateid#hash_algorithm()","openssl::x509::name#hash_old()","makemakefile#have_const()","makemakefile#have_devel?()","gem::basicspecification#have_extensions?()","gem::basicspecification#have_file?()","makemakefile#have_framework()","makemakefile#have_func()","makemakefile#have_header()","makemakefile#have_library()","makemakefile#have_macro()","fileutils::have_option?()","makemakefile#have_struct_member()","makemakefile#have_type()","makemakefile#have_var()","net::http#head()","net::http#head2()","racc::locationpointer#head?()","cgi#header()","gem::package::tarheader#header()","racc::parserfilegenerator#header()","csv::row#header?()","csv#header_convert()","csv#header_converters()","csv#header_fields_converter()","csv#header_row?()","csv::parser#header_row?()","csv::row#header_row?()","csv#headers()","csv::parser#headers()","csv::row#headers()","csv::table#headers()","uri::mailto#headers=()","optionparser#help()","win32ole::method#helpcontext()","win32ole::type#helpcontext()","win32ole::method#helpfile()","win32ole::type#helpfile()","win32ole::method#helpstring()","win32ole::type#helpstring()","drb#here?()","drb::here?()","drb::drbserver#here?()","rdoc::parser::ripperstatelex#heredoc_end?()","random::formatter#hex()","string#hex()","digest::class::hexdigest()","digest::instance#hexdigest()","openssl::hmac::hexdigest()","openssl::hmac#hexdigest()","digest::instance#hexdigest!()","io::buffer#hexdump()","digest::hexencode()","cgi::htmlextension#hidden()","syntaxsuggest::codeblock#hidden?()","syntaxsuggest::codeline#hidden?()","reline::ansi::hide_cursor()","reline::generalio::hide_cursor()","reline::windows::hide_cursor()","uri::generic#hierarchical?()","uri::ldap#hierarchical?()","racc::grammar::precedencedefinitionenv#higher()","irb::context#history_file()","irb::context#history_file=()","reline::lineeditor#history_search_backward()","reline::lineeditor#history_search_forward()","openssl::kdf::hkdf()","syntaxsuggest::codefrontier#holds_all_syntax_errors?()","bundler::home()","dir::home()","rdoc::home()","irb::context#home_workspace()","gem::host()","gem::gemcutterutilities#host()","gem::host=()","uri::generic#host=()","uri::generic#hostname()","openssl::ssl::sslsocket#hostname=()","uri::generic#hostname=()","datetime#hour()","time#hour()","cgi::htmlextension#html()","rdoc::markdown#html()","erb::escape::html_escape()","erb::escape#html_escape()","rdoc::alias#html_name()","rdoc::methodattr#html_name()","ipaddr#hton()","net::http::http_default_port()","cgi#http_header()","rdoc::context#http_url()","rdoc::toplevel#http_url()","date::httpdate()","date#httpdate()","datetime::httpdate()","time#httpdate()","time::httpdate()","cgi::cookie#httponly=()","gem::remotefetcher#https?()","net::http::https_default_port()","math::hypot()","numeric#i()","racc::parserfilegenerator#i_i_sym_list()","json::iconv()","openssl::engine#id()","openssl::ssl::session#id()","symbol#id2name()","didyoumean::treespellchecker#ideas_to_paths()","syslog::ident()","file::identical?()","filetest#identical?()","fileutils#identical?()","fileutils::identical?()","gem::dependency#identity()","rdoc::servlet#if_modified_since()","socket::ifaddr#ifindex()","io#iflush()","rdoc::codeobject#ignore()","csv::parser#ignore_broken_line()","thread::ignore_deadlock()","thread::ignore_deadlock=()","syntaxsuggest::lexvalue#ignore_newline?()","syntaxsuggest::codeline#ignore_newline_not_beg?()","rdoc::codeobject#ignored?()","complex#imag()","numeric#imag()","cgi::htmlextension#image_button()","complex#imaginary()","numeric#imaginary()","cgi::htmlextension#img()","win32ole::type#implemented_ole_types()","gem::resolver::dependencyrequest#implicit?()","gem::requestset#import()","fiddle::importer#import_function()","refinement#import_methods()","fiddle::importer#import_symbol()","fiddle::importer#import_value()","ipaddr#in6_addr()","ipaddr#in_addr()","reline::ansi::in_pasting?()","reline::generalio::in_pasting?()","reline::windows::in_pasting?()","pstore#in_transaction()","pstore#in_transaction_wr()","optionparser#inc()","optionparser::inc()","module#include()","array#include?()","cgi::queryextension#include?()","csv::row#include?()","env::include?()","enumerable#include?()","gem::sourcelist#include?()","hash#include?()","ipaddr#include?()","module#include?()","objectspace::weakmap#include?()","racc::iset#include?()","range#include?()","set#include?()","string#include?()","module#included()","openssl::marshal::included()","singleton::included()","syslog::constants::included()","syslog::macros::included()","module#included_modules()","reline::lineeditor#inclusive?()","optionparser::switch::incompatible_argument_styles()","optionparser::switch::noargument::incompatible_argument_styles()","encoding::invalidbytesequenceerror#incomplete_input?()","racc::reduce#incref()","racc::locationpointer#increment()","reline::lineeditor#incremental_search_history()","json::ext::generator::state#indent()","racc::parserfilegenerator#indent()","json::ext::generator::state#indent=()","syntaxsuggest::codeline#indent_index()","racc::parserfilegenerator#indent_re()","psych::emitter#indentation()","psych::emitter#indentation=()","array#index()","csv::row#index()","string#index()","yaml::dbm#index()","gem::resolver::molinillo::resolver::resolution#indicate_progress()","gem::resolver::molinillo::ui#indicate_progress()","bigdecimal#infinite?()","complex#infinite?()","date#infinite?()","float#infinite?()","numeric#infinite?()","openssl::pkey::ec::point#infinity?()","gem::util::inflate()","zlib::inflate()","zlib::inflate#inflate()","zlib::inflate::inflate()","logger#info()","syslog::logger#info()","win32::registry#info()","logger#info!()","logger#info?()","class#inherited()","gem::installer::inherited()","gem::packagetask#init()","irb::inspector#init()","racc::actiontable#init()","racc::grammar#init()","racc::parserfilegenerator#init_line_conversion_system()","irb::rubymodel#init_ruby_model()","psych::visitors::toruby#init_with()","rinda::tuple#init_with_ary()","rinda::tuple#init_with_hash()","process::initgroups()","gem::package#initialize()","set#initialize_clone()","array#initialize_copy()","csv::row#initialize_copy()","gem::resolver::molinillo::dependencygraph#initialize_copy()","gem::specification#initialize_copy()","gem::uri#initialize_copy()","hash#initialize_copy()","io::buffer#initialize_copy()","json::ext::generator::state#initialize_copy()","openssl::bn#initialize_copy()","openssl::cipher#initialize_copy()","openssl::config#initialize_copy()","openssl::digest#initialize_copy()","openssl::hmac#initialize_copy()","openssl::ocsp::basicresponse#initialize_copy()","openssl::ocsp::certificateid#initialize_copy()","openssl::ocsp::request#initialize_copy()","openssl::ocsp::response#initialize_copy()","openssl::ocsp::singleresponse#initialize_copy()","openssl::pkcs12#initialize_copy()","openssl::pkcs7#initialize_copy()","openssl::pkey::dh#initialize_copy()","openssl::pkey::dsa#initialize_copy()","openssl::pkey::ec#initialize_copy()","openssl::pkey::ec::group#initialize_copy()","openssl::pkey::ec::point#initialize_copy()","openssl::pkey::pkey#initialize_copy()","openssl::pkey::rsa#initialize_copy()","openssl::ssl::session#initialize_copy()","openssl::x509::attribute#initialize_copy()","openssl::x509::crl#initialize_copy()","openssl::x509::certificate#initialize_copy()","openssl::x509::extension#initialize_copy()","openssl::x509::name#initialize_copy()","openssl::x509::request#initialize_copy()","openssl::x509::revoked#initialize_copy()","string#initialize_copy()","stringscanner#initialize_copy()","zlib::deflate#initialize_copy()","set#initialize_dup()","rdoc::context#initialize_methods_etc()","uri::rfc2396_parser#initialize_pattern()","uri::rfc2396_parser#initialize_pattern()","cgi::queryextension#initialize_query()","irb::readlineinputmethod::initialize_readline()","uri::rfc2396_parser#initialize_regexp()","uri::rfc2396_parser#initialize_regexp()","irb::initialize_tracer()","enumerable#inject()","gem::availableset#inject_into_list()","racc::parserfilegenerator#inner()","reline::ansi::inner_getc()","reline::core#inner_readline()","file::stat#ino()","argf#inplace_mode()","argf#inplace_mode=()","gem::mockgemui#input()","readline::input=()","reline::ansi::input=()","reline::core#input=()","reline::generalio::input=()","win32ole::param#input?()","reline::lineeditor#input_key()","reline::config#inputrc_path()","drb::drbserver#insecure_method?()","array#insert()","irb::jobmanager#insert()","string#insert()","reline::lineeditor#insert_new_line()","encoding::converter#insert_output()","readline::insert_text()","reline::insert_text()","reline::lineeditor#insert_text()","rubyvm::yjit::insns_compiled()","argf#inspect()","addrinfo#inspect()","array#inspect()","bigdecimal#inspect()","cgi::cookie#inspect()","csv#inspect()","csv::row#inspect()","csv::table#inspect()","complex#inspect()","data#inspect()","date#inspect()","digest::instance#inspect()","dir#inspect()","env::inspect()","encoding#inspect()","encoding::converter#inspect()","enumerator#inspect()","enumerator::arithmeticsequence#inspect()","enumerator::chain#inspect()","enumerator::product#inspect()","exception#inspect()","falseclass#inspect()","fiber#inspect()","fiddle::pointer#inspect()","file::stat#inspect()","float#inspect()","gem::resolver::molinillo::dependencygraph#inspect()","gem::resolver::molinillo::dependencygraph::vertex#inspect()","hash#inspect()","io#inspect()","io::buffer#inspect()","ipaddr#inspect()","ipsocket#inspect()","irb::fileinputmethod#inspect()","irb::inputmethod#inspect()","irb::irb#inspect()","irb::jobmanager#inspect()","irb::readlineinputmethod#inspect()","irb::relineinputmethod#inspect()","irb::stdioinputmethod#inspect()","integer#inspect()","matchdata#inspect()","method#inspect()","module#inspect()","net::http#inspect()","net::httpgenericrequest#inspect()","net::httpresponse#inspect()","net::writeadapter#inspect()","nilclass#inspect()","object#inspect()","objectspace::internalobjectwrapper#inspect()","objectspace::weakmap#inspect()","openssl::config#inspect()","openssl::engine#inspect()","openssl::hmac#inspect()","openssl::pkey::pkey#inspect()","openssl::x509::certificate#inspect()","openstruct#inspect()","optionparser::parseerror#inspect()","proc#inspect()","process::status#inspect()","racc::accept#inspect()","racc::error#inspect()","racc::goto#inspect()","racc::iset#inspect()","racc::locationpointer#inspect()","racc::ormark#inspect()","racc::prec#inspect()","racc::reduce#inspect()","racc::rule#inspect()","racc::shift#inspect()","racc::state#inspect()","racc::states#inspect()","racc::sym#inspect()","racc::useraction#inspect()","ractor#inspect()","range#inspect()","rational#inspect()","regexp#inspect()","ripper::lexer::elem#inspect()","rubyvm::abstractsyntaxtree::node#inspect()","rubyvm::instructionsequence#inspect()","set#inspect()","socket::ancillarydata#inspect()","socket::ifaddr#inspect()","socket::option#inspect()","string#inspect()","stringscanner#inspect()","struct#inspect()","symbol#inspect()","syntaxsuggest::blockexpand#inspect()","syslog::inspect()","thread#inspect()","thread::backtrace::location#inspect()","time#inspect()","tracepoint#inspect()","trueclass#inspect()","uri::generic#inspect()","uri::rfc2396_parser#inspect()","uri::rfc2396_parser#inspect()","unboundmethod#inspect()","win32ole::method#inspect()","win32ole::param#inspect()","win32ole::record#inspect()","win32ole::type#inspect()","win32ole::typelib#inspect()","win32ole::variable#inspect()","win32::registry#inspect()","zlib::gzipfile::error#inspect()","irb::context#inspect?()","irb::color::inspect_colorable?()","irb::context#inspect_mode=()","addrinfo#inspect_sockaddr()","irb::inspector#inspect_value()","fileutils::install()","fileutils#install()","gem::install()","gem::commands::execcommand#install()","gem::dependencyinstaller#install()","gem::installer#install()","gem::requestset#install()","gem::resolver::gitspecification#install()","gem::resolver::installedspecification#install()","gem::resolver::lockspecification#install()","gem::resolver::specification#install()","gem::resolver::vendorspecification#install()","drb#install_acl()","drb::install_acl()","irb::extendcommandbundle#install_alias_method()","gem::commands::setupcommand#install_default_bundler_gem()","gem::commands::setupcommand#install_executables()","irb::contextextender::install_extend_commands()","irb::extendcommandbundle::install_extend_commands()","gem::commands::setupcommand#install_file()","gem::commands::setupcommand#install_file_list()","gem::requestset#install_from_gemdeps()","gem::requestset#install_hooks()","drb::install_id_conv()","drb#install_id_conv()","gem::commands::execcommand#install_if_needed()","gem::indexer#install_indices()","gem::requestset#install_into()","gem::commands::setupcommand#install_lib()","acl#install_list()","bundler::install_path()","gem::commands::setupcommand#install_rdoc()","rdoc::rdoc#install_siginfo_handler()","gem::installupdateoptions#install_update_defaults_str()","gem::installupdateoptions#install_update_options()","gem::platform::installable?()","gem::resolver::installedspecification#installable_platform?()","gem::resolver::localspecification#installable_platform?()","gem::resolver::specification#installable_platform?()","gem::installer#installation_satisfies_dependency?()","gem::queryutils#installed?()","gem::resolver::activationrequest#installed?()","rdoc::servlet#installed_docs()","gem::installer#installed_specs()","gem::specification::installed_stubs()","csv::instance()","gem::commandmanager#instance()","gem::commandmanager::instance()","singleton::instance()","syslog::instance()","rdoc::context#instance_attributes()","forwardable#instance_delegate()","basicobject#instance_eval()","ractor::movedobject#instance_eval()","basicobject#instance_exec()","ractor::movedobject#instance_exec()","module#instance_method()","rdoc::context#instance_method_list()","module#instance_methods()","rdoc::context#instance_methods()","rdoc::store#instance_methods()","object#instance_of?()","object#instance_variable_defined?()","object#instance_variable_get()","object#instance_variable_set()","object#instance_variables()","tracepoint#instruction_sequence()","socket::ancillarydata#int()","socket::ancillarydata::int()","socket::option#int()","socket::option::int()","integer#integer?()","numeric#integer?()","racc::parserfilegenerator#integer_list()","racc::grammar#intern()","racc::symboltable#intern()","string#intern()","symbol#intern()","io::buffer#internal?()","objectspace::internal_class_of()","argf#internal_encoding()","io#internal_encoding()","stringio#internal_encoding()","objectspace::internalobjectwrapper#internal_object_id()","objectspace::internal_super_of()","bigdecimal::interpret_loosely()","array#intersect?()","set#intersect?()","array#intersection()","set#intersection()","syntaxsuggest::invalid?()","syntaxsuggest::codeblock#invalid?()","gem::specification#invalidate_memoized_attributes()","env::invert()","hash#invert()","yaml::dbm#invert()","openssl::pkey::ec::point#invert!()","win32ole::method#invkind()","gem::command#invoke()","win32ole#invoke()","gem::commandmanager#invoke_command()","win32ole::method#invoke_kind()","drb::extservmanager#invoke_service()","drb::extservmanager#invoke_service_command()","drb::extservmanager#invoke_thread()","gem::command#invoke_with_build_args()","fiber::scheduler#io_pread()","fiber::scheduler#io_pwrite()","fiber::scheduler#io_read()","fiber::scheduler#io_select()","fiber::scheduler#io_wait()","fiber::scheduler#io_write()","csv#ioctl()","io#ioctl()","io#ioflush()","addrinfo::ip()","ipaddr#ip6_arpa()","ipaddr#ip6_int()","addrinfo#ip?()","addrinfo#ip_address()","socket::ip_address_list()","socket::ancillarydata#ip_pktinfo()","socket::ancillarydata::ip_pktinfo()","addrinfo#ip_port()","addrinfo#ip_unpack()","net::http#ipaddr()","net::http#ipaddr=()","addrinfo#ipv4?()","ipaddr#ipv4?()","ipaddr#ipv4_compat()","ipaddr#ipv4_compat?()","addrinfo#ipv4_loopback?()","ipaddr#ipv4_mapped()","ipaddr#ipv4_mapped?()","addrinfo#ipv4_multicast?()","socket::option::ipv4_multicast_loop()","socket::option#ipv4_multicast_loop()","socket::option::ipv4_multicast_ttl()","socket::option#ipv4_multicast_ttl()","addrinfo#ipv4_private?()","addrinfo#ipv6?()","ipaddr#ipv6?()","addrinfo#ipv6_linklocal?()","addrinfo#ipv6_loopback?()","addrinfo#ipv6_mc_global?()","addrinfo#ipv6_mc_linklocal?()","addrinfo#ipv6_mc_nodelocal?()","addrinfo#ipv6_mc_orglocal?()","addrinfo#ipv6_mc_sitelocal?()","addrinfo#ipv6_multicast?()","socket::ancillarydata::ipv6_pktinfo()","socket::ancillarydata#ipv6_pktinfo()","socket::ancillarydata#ipv6_pktinfo_addr()","socket::ancillarydata#ipv6_pktinfo_ifindex()","addrinfo#ipv6_sitelocal?()","addrinfo#ipv6_to_ipv4()","addrinfo#ipv6_unique_local?()","addrinfo#ipv6_unspecified?()","addrinfo#ipv6_v4compat?()","addrinfo#ipv6_v4mapped?()","socket#ipv6only!()","binding#irb()","irb::irb()","irb::jobmanager#irb()","irb::irb_abort()","irb::irb_at_exit()","irb::extendcommandbundle#irb_context()","irb::irb_exit()","irb::extendcommandbundle#irb_exit()","irb::context#irb_level()","irb::extendcommandbundle#irb_load()","irb::irbloader#irb_load()","irb::extendcommandbundle#irb_require()","jacobian#isequal()","object#is_a?()","rdoc::constant#is_alias_for()","syntaxsuggest::codeblock#is_end?()","syntaxsuggest::codeline#is_end?()","syntaxsuggest::lexvalue#is_end?()","syntaxsuggest::codeline#is_kw?()","syntaxsuggest::lexvalue#is_kw?()","gem::resolver::molinillo::dependencygraph::vertex#is_reachable_from?()","net::http::is_version_1_2?()","io#isatty()","stringio#isatty()","time#isdst()","kconv::iseuc()","kconv#iseuc()","string#iseuc()","kconv#isjis()","kconv::isjis()","string#isjis()","date::iso8601()","date#iso8601()","datetime::iso8601()","datetime#iso8601()","time#iso8601()","time::iso8601()","process::sys::issetugid()","kconv#issjis()","kconv::issjis()","string#issjis()","openssl::pkcs7::recipientinfo#issuer()","openssl::pkcs7::signerinfo#issuer()","openssl::x509::crl#issuer()","openssl::x509::certificate#issuer()","openssl::x509::crl#issuer=()","openssl::x509::certificate#issuer=()","openssl::x509::extensionfactory#issuer_certificate=()","openssl::ocsp::certificateid#issuer_key_hash()","openssl::ocsp::certificateid#issuer_name_hash()","gem::security::trustdir#issuer_of()","kconv::isutf8()","kconv#isutf8()","string#isutf8()","date#italy()","gem::resolver::stats#iteration!()","kernel#iterator?()","object#itself()","openssl::cipher#iv=()","openssl::cipher#iv_len()","openssl::cipher#iv_len=()","kernel#j()","jacobian#jacobian()","gem::java_platform?()","date::jd()","date#jd()","datetime::jd()","date#jisx0301()","date::jisx0301()","datetime#jisx0301()","datetime::jisx0301()","kernel#jj()","array#join()","file::join()","pathname#join()","set#join()","shellwords::join()","thread#join()","uri::join()","uri::rfc2396_parser#join()","uri::rfc2396_parser#join()","syntaxsuggest::cleandocument#join_consecutive!()","syntaxsuggest::cleandocument#join_groups()","syntaxsuggest::cleandocument#join_heredoc!()","syntaxsuggest::cleandocument#join_trailing_slash!()","class#json_creatable?()","json::genericobject::json_creatable?()","bigdecimal::json_create()","complex::json_create()","date::json_create()","datetime::json_create()","exception::json_create()","json::genericobject::json_create()","openstruct::json_create()","range::json_create()","rational::json_create()","regexp::json_create()","set::json_create()","struct::json_create()","symbol::json_create()","time::json_create()","date#julian()","date#julian?()","date::julian_leap?()","reline::lineeditor::dialogprocscope#just_cursor_moving()","reline::lineeditor#just_move_cursor()","kconv::kconv()","kconv#kconv()","string#kconv()","net::http#keep_alive?()","csv::parser::inputsscanner#keep_back()","csv::parser::scanner#keep_back()","rinda::tuplespace#keep_clean()","csv::parser::inputsscanner#keep_drop()","csv::parser::scanner#keep_drop()","csv::parser::inputsscanner#keep_end()","csv::parser::scanner#keep_end()","array#keep_if()","env::keep_if()","hash#keep_if()","set#keep_if()","gem::specification#keep_only_files_and_directories()","rubyvm::keep_script_lines()","rubyvm::keep_script_lines=()","csv::parser::inputsscanner#keep_start()","csv::parser::scanner#keep_start()","fiber::scheduler#kernel_sleep()","env::key()","hash#key()","keyerror#key()","nomatchingpatternkeyerror#key()","reline::lineeditor::dialogprocscope#key()","yaml::dbm#key()","openssl::cipher#key=()","cgi::queryextension#key?()","csv::row#key?()","env::key?()","hash#key?()","net::httpheader#key?()","objectspace::weakmap#key?()","pstore#key?()","racc::iset#key?()","thread#key?()","reline::config#key_bindings()","reline::lineeditor#key_delete()","openssl::cipher#key_len()","openssl::cipher#key_len=()","reline::keystroke#key_mapping()","reline::lineeditor#key_newline()","reline::config#key_notation_to_code()","reline::config#keymap()","cgi::queryextension#keys()","env::keys()","hash#keys()","objectspace::weakmap#keys()","pstore#keys()","thread#keys()","win32::registry#keys()","irb::inspector::keys_with_inspector()","struct::keyword_init?()","drb::threadobject#kill()","irb::jobmanager#kill()","process::kill()","thread#kill()","thread::kill()","reline::lineeditor#kill_line()","reline::lineeditor#kill_whole_line()","object#kind_of?()","racc::state#la=()","rubyvm::instructionsequence#label()","thread::backtrace::location#label()","kernel#lambda()","proc#lambda?()","array#last()","enumerator::arithmeticsequence#last()","range#last()","syntaxsuggest::lexall#last()","rubyvm::abstractsyntaxtree::node#last_column()","encoding::converter#last_error()","fiddle::last_error()","fiddle::last_error=()","syntaxsuggest::priorityqueue#last_index()","csv::parser#last_line()","rubyvm::abstractsyntaxtree::node#last_lineno()","regexp::last_match()","openuri::meta#last_modified()","rdoc::toplevel#last_modified()","process::last_status()","openssl::x509::crl#last_update()","openssl::x509::crl#last_update=()","gem::configfile#last_update_check()","gem::configfile#last_update_check=()","gc::latest_compact_info()","gc::latest_gc_info()","gem::latest_rubygems_version()","gem::latest_spec_for()","gem::specification::latest_spec_for()","gem::specification::latest_specs()","gem::resolver::molinillo::resolver::resolution::possibilityset#latest_version()","gem::dependency#latest_version?()","gem::latest_version_for()","enumerable#lazy()","enumerator::lazy#lazy()","file::lchmod()","pathname#lchmod()","file::lchown()","pathname#lchown()","integer#lcm()","date#ld()","math::ldexp()","gem::ext::cargobuilder#ldflag_to_link_modifier()","date#leap?()","date::leap?()","racc::grammar::precedencedefinitionenv#left()","array#length()","digest::instance#length()","env::length()","gem::package::tarreader::entry#length()","hash#length()","matchdata#length()","objectspace::weakmap#length()","set#length()","string#length()","stringio#length()","struct#length()","symbol#length()","syntaxsuggest::priorityengulfqueue#length()","syntaxsuggest::priorityqueue#length()","tempfile#length()","thread::queue#length()","thread::sizedqueue#length()","socket::ancillarydata#level()","socket::option#level()","zlib::gzipfile#level()","irb::notifier::compositenotifier#level=()","logger#level=()","irb::notifier::compositenotifier#level_notifier=()","gem::text#levenshtein_distance()","ripper::lex()","ripper::lex_state_name()","math::lgamma()","gem::basicspecification#lib_dirs_glob()","gem::specification#lib_files()","csv#liberal_parsing?()","csv::parser#liberal_parsing?()","win32ole::typelib#library_name()","gem::ext::cargobuilder#libruby_args()","psych::libyaml_version()","gem::specification#license()","gem::specification#license=()","gem::specification#licenses()","gem::specification#licenses=()","bigdecimal::limit()","thread::backtrace::limit()","csv#line()","csv::parser#line()","irb::canvas#line()","irb::readlineinputmethod#line()","irb::relineinputmethod#line()","irb::stdioinputmethod#line()","racc::parserfilegenerator#line()","irb::canvas#line0()","readline::line_buffer()","reline::line_editor()","coverage::line_stub()","psych::emitter#line_width()","psych::emitter#line_width=()","regexp::linear_time?()","argf#lineno()","csv#lineno()","csv::parser#lineno()","io#lineno()","racc::grammarfilescanner#lineno()","ripper#lineno()","ripper::filter#lineno()","stringio#lineno()","thread::backtrace::location#lineno()","tracepoint#lineno()","zlib::gzipreader#lineno()","argf#lineno=()","io#lineno=()","stringio#lineno=()","zlib::gzipreader#lineno=()","gem::resolver::apiset#lines()","string#lines()","syntaxsuggest::aroundblockscan#lines()","syntaxsuggest::cleandocument#lines()","socket::option::linger()","socket::option#linger()","file::link()","fileutils::link()","fileutils#link()","makemakefile#link_command()","fileutils#link_entry()","fileutils::link_entry()","ipaddr#link_local?()","rdoc::markdown#link_to()","gem::ext::cargobuilder#linker_args()","encoding::list()","signal::list()","thread::list()","threadgroup#list()","rdoc::rdoc#list_files_in_directory()","rdoc::markdown#list_item_from()","addrinfo#listen()","openssl::ssl::sslserver#listen()","socket#listen()","tcpserver#listen()","unixserver#listen()","racc::grammarfilescanner#literal_head?()","string#ljust()","fileutils::ln()","fileutils#ln()","openssl::asn1::objectid#ln()","fileutils#ln_s()","fileutils::ln_s()","fileutils#ln_sf()","fileutils::ln_sf()","fileutils::ln_sr()","fileutils#ln_sr()","bundler::load()","gem::requestset::gemdependencyapi#load()","gem::safeyaml::load()","gem::specification::load()","irb::locale#load()","json#load()","json::genericobject::load()","kernel#load()","marshal::load()","openssl::engine::load()","openssl::x509::certificate::load()","optionparser#load()","psych::load()","gem::commands::execcommand#load!()","rdoc::store#load_all()","gem::commandmanager#load_and_instantiate()","gem::configfile#load_api_keys()","rdoc::store#load_cache()","gem::security::trustdir#load_certificate()","rdoc::store#load_class()","rdoc::store#load_class_data()","irb::extendcommandbundle::load_command()","pstore#load_data()","gem::commands::certcommand#load_default_cert()","gem::commands::certcommand#load_default_key()","gem::specification::load_defaults()","gem::load_env_plugins()","gem::configfile#load_file()","irb::irbloader#load_file()","json#load_file()","openssl::x509::certificate::load_file()","psych::load_file()","json#load_file!()","rubyvm::instructionsequence::load_from_binary()","rubyvm::instructionsequence::load_from_binary_extra_data()","gem::requestset#load_gemdeps()","bundler::load_gemspec()","bundler::load_gemspec_uncached()","bundler::load_marshal()","rdoc::store#load_method()","rdoc::options::load_options()","rdoc::store#load_page()","gem::load_path_insert_index()","gem::load_plugins()","openssl::engine#load_private_key()","openssl::engine#load_public_key()","openssl::random::load_random_file()","rdoc::rubygemshook::load_rdoc()","rdoc::rubygemshook::load_rdoc()","gem::installer#load_relative_enabled?()","gem::source#load_specs()","psych::load_stream()","rdoc::parser::c#load_variable_map()","gem::load_yaml()","rdoc::load_yaml()","gem::platform::local()","time::local()","gem::localremoteoptions#local?()","basicsocket#local_address()","bundler::local_platform()","binding#local_variable_defined?()","binding#local_variable_get()","irb::workspace#local_variable_get()","binding#local_variable_set()","irb::workspace#local_variable_set()","binding#local_variables()","kernel#local_variables()","nameerror#local_variables()","win32ole::locale()","win32ole::locale=()","encoding::locale_charmap()","time#localtime()","racc::grammarfileparser#location()","racc::sourcetext#location()","erb#location=()","gem::location_of_caller()","net::http#lock()","thread::mutex#lock()","logger::logdevice#lock_shift_log()","io::buffer#locked()","io::buffer#locked?()","thread::mutex#locked?()","bundler::locked_gems()","gem::streamui::threadeddownloadreporter#locked_puts()","gem::resolver::molinillo::resolver::resolution#locked_requirement_named()","gem::resolver::molinillo::resolver::resolution#locked_requirement_possibility_set()","gem::bundlerversionfinder::lockfile_contents()","gem::bundlerversionfinder::lockfile_version()","bigmath::log()","logger#log()","math::log()","syslog::log()","math::log10()","math::log2()","openssl::asn1::objectid#long_name()","rdoc::parser::c#look_for_directives_in()","rdoc::parser::ruby#look_for_directives_in()","racc::states#lookahead()","rinda::ringfinger#lookup_ring()","rinda::ringfinger#lookup_ring_any()","kernel#loop()","ipaddr#loopback?()","racc::grammar::precedencedefinitionenv#lower()","win32::sspi::securityhandle#lower()","openssl::bn#lshift!()","file#lstat()","file::lstat()","pathname#lstat()","string#lstrip()","string#lstrip!()","lusolve#ludecomp()","lusolve#lusolve()","file::lutime()","pathname#lutime()","complex#magnitude()","float#magnitude()","integer#magnitude()","numeric#magnitude()","rational#magnitude()","irb::context#main()","rdoc::store#main()","ractor::main()","thread::main()","rdoc::store#main=()","irb::jobmanager#main_irb()","drb::drbserver#main_loop()","irb::jobmanager#main_thread()","net::httpheader#main_type()","win32ole::type#major_version()","win32ole::typelib#major_version()","gem::ext::builder::make()","openssl::pkey::ec::point#make_affine!()","racc::state#make_closure()","erb#make_compiler()","racc::parserfilegenerator#make_delimiter()","gem::commands::setupcommand#make_destination_dirs()","gem::resolver::molinillo::dependencygraph::addedgenocircular#make_edge()","gem::resolver::molinillo::dependencygraph::deleteedge#make_edge()","gem::queryutils#make_entry()","rinda::tupleentry#make_expires()","pathname#make_link()","rdoc::parser::ruby#make_message()","syslog::logger::make_methods()","gem::requestset::lockfile::tokenizer#make_parser()","drb::drbconn::make_pool()","uri::rfc2396_parser#make_regexp()","uri::rfc2396_parser#make_regexp()","racc::parserfilegenerator#make_separator()","ractor::make_shareable()","rinda::ringserver#make_socket()","optionparser#make_switch()","pathname#make_symlink()","gem::indexer#make_temp_directories()","rinda::tupleentry#make_tuple()","rdoc::store#make_variable_map()","win32::registry::api#make_wstr()","fileutils::makedirs()","fileutils#makedirs()","gem::ext::cargobuilder#makefile_config()","fiddle::malloc()","fiddle::cstructentity::malloc()","fiddle::pointer::malloc()","gc::malloc_allocated_size()","gc::malloc_allocations()","gem::commands::ownercommand#manage_owners()","racc::grammar::definitionenv#many()","racc::grammar::definitionenv#many1()","array#map()","enumerable#map()","enumerator::lazy#map()","io::buffer::map()","psych::coder#map()","array#map!()","set#map!()","psych::coder#map=()","gem::indexer#map_gems_to_specs()","io::buffer#mapped?()","psych::nodes::mapping#mapping?()","psych::nodes::node#mapping?()","psych::parser#mark()","syntaxsuggest::codeblock#mark_invisible()","syntaxsuggest::codeline#mark_invisible()","gem::specification#mark_version()","rdoc::text#markup()","delegator#marshal_dump()","gem::version#marshal_dump()","rdoc::anymethod#marshal_dump()","rdoc::attr#marshal_dump()","rdoc::constant#marshal_dump()","rdoc::toplevel#marshal_dump()","delegator#marshal_load()","gem::version#marshal_load()","rdoc::anymethod#marshal_load()","rdoc::attr#marshal_load()","rdoc::constant#marshal_load()","gem::marshal_version()","ipaddr#mask()","syslog::mask()","ipaddr#mask!()","syslog::mask=()","acl::aclentry#match()","acl::acllist#match()","gem::platform::match()","matchdata#match()","optionparser::completinghash#match()","regexp#match()","rinda::template#match()","rinda::templateentry#match()","string#match()","symbol#match()","csv::matchp#match?()","gem::dependency#match?()","gem::licenses::match?()","gem::resolver::dependencyrequest#match?()","regexp#match?()","string#match?()","stringscanner#match?()","symbol#match?()","gem::platform::match_gem?()","matchdata#match_length()","gem::availableset#match_platform!()","gem::nametuple#match_platform?()","gem::platform::match_platforms?()","gem::platform::match_spec?()","reline::keystroke#match_status()","stringscanner#matched()","stringscanner#matched?()","stringscanner#matched_size()","nomatchingpatternkeyerror#matchee()","reline::windows::keyeventrecord#matches?()","gem::basicspecification#matches_for_glob()","gem::dependency#matches_spec?()","gem::resolver::dependencyrequest#matches_spec?()","gem::dependency#matching_specs()","array#max()","enumerable#max()","range#max()","thread::sizedqueue#max()","thread::sizedqueue#max=()","enumerable#max_by()","csv#max_field_size()","csv::parser#max_field_size()","json::ext::generator::state#max_nesting()","json::ext::generator::state#max_nesting=()","net::http#max_retries=()","openssl::ssl::sslcontext#max_version=()","process::maxgroups()","process::maxgroups=()","csv::parser#may_quoted?()","reline::core#may_req_ambiguous_char_width()","gem::ext::cargobuilder#maybe_resolve_ldflag_variable()","date#mday()","time#mday()","benchmark#measure()","benchmark::measure()","gc::measure_total_time()","gc::measure_total_time=()","openssl::mem_check_start()","csv::row#member?()","env::member?()","enumerable#member?()","hash#member?()","objectspace::weakmap#member?()","range#member?()","set#member?()","data::members()","data#members()","struct::members()","struct#members()","benchmark::tms#memberwise()","objectspace::memsize_of()","objectspace::memsize_of_all()","reline::lineeditor#menu()","gem::dependency#merge()","hash#merge()","json::ext::generator::state#merge()","rdoc::classmodule#merge()","set#merge()","uri::generic#merge()","env::merge!()","hash#merge!()","uri::generic#merge!()","psych::visitors::toruby#merge_key()","gem::command#merge_options()","uri::generic#merge_path()","exception#message()","gem::resolver::molinillo::nosuchdependencyerror#message()","gem::runtimerequirementnotmeterror#message()","net::readtimeout#message()","net::writetimeout#message()","optionparser::parseerror#message()","didyoumean::formatter::message_for()","didyoumean::formatter#message_for()","didyoumean::formatter::message_for()","didyoumean::formatter#message_for()","didyoumean::formatter::message_for()","didyoumean::formatter#message_for()","errorhighlight::defaultformatter::message_for()","openssl::timestamp::request#message_imprint()","openssl::timestamp::tokeninfo#message_imprint()","openssl::timestamp::request#message_imprint=()","win32ole::event::message_loop()","gem::resolver::molinillo::versionconflict#message_with_trees()","gem::resolver::installerset#metadata_satisfied?()","object#method()","rdoc::markupreference#method()","module#method_added()","module#method_defined?()","rdoc::store#method_file()","tracepoint#method_id()","basicobject#method_missing()","drb::drbobject#method_missing()","drb::drbobject#method_missing()","drb::threadobject#method_missing()","delegator#method_missing()","gem::uri#method_missing()","racc::grammar::definitionenv#method_missing()","ractor::movedobject#method_missing()","win32ole#method_missing()","win32ole::record#method_missing()","didyoumean::methodnamechecker#method_names()","module#method_removed()","module#method_undefined()","delegator#methods()","object#methods()","win32ole#methods()","rdoc::context#methods_by_type()","rdoc::context#methods_matching()","gem::gemcutterutilities#mfa_unauthorized?()","array#min()","datetime#min()","enumerable#min()","range#min()","time#min()","enumerable#min_by()","openssl::ssl::sslcontext#min_version=()","gem::ext::cargobuilder#mingw_target?()","racc::parserfilegenerator#minimum_indent()","array#minmax()","enumerable#minmax()","range#minmax()","enumerable#minmax_by()","win32ole::type#minor_version()","win32ole::typelib#minor_version()","datetime#minute()","syntaxsuggest::explainsyntax#missing()","syntaxsuggest::leftrightlexcount#missing()","gem::specification#missing_extensions?()","syntaxsuggest::leftrightlexcount#missing_keyword_end()","syntaxsuggest::leftrightlexcount#missing_pairs()","syntaxsuggest::leftrightlexcount#missing_pipe()","date#mjd()","net::http#mkcol()","dir::mkdir()","fileutils#mkdir()","fileutils::mkdir()","gem::package::tarwriter#mkdir()","pathname#mkdir()","bundler::mkdir_p()","fileutils::mkdir_p()","fileutils#mkdir_p()","gem::commands::setupcommand::makedirs#mkdir_p()","file::mkfifo()","racc::statetransitiontablegenerator#mkmapexp()","gem::ext::cargobuilder#mkmf_libpath()","fileutils::mkpath()","fileutils#mkpath()","pathname#mkpath()","time::mktime()","dir::mktmpdir()","openssl::bn#mod_add()","openssl::bn#mod_exp()","openssl::bn#mod_inverse()","openssl::bn#mod_mul()","openssl::bn#mod_sqr()","openssl::bn#mod_sqrt()","openssl::bn#mod_sub()","bigdecimal::mode()","file::stat#mode()","reline::lineeditor#modify_lines()","rdoc::mixin#module()","rdoc::classmodule#module?()","rdoc::normalmodule#module?()","module#module_eval()","module#module_exec()","syntaxsuggest::module_for_detailed_message()","module#module_function()","rdoc::store#module_names()","rdoc::context#modules()","rdoc::context#modules_hash()","rdoc::store#modules_hash()","bigdecimal#modulo()","float#modulo()","integer#modulo()","numeric#modulo()","date#mon()","time#mon()","monitor#mon_check_owner()","monitormixin#mon_check_owner()","monitor#mon_enter()","monitormixin#mon_enter()","monitor#mon_exit()","monitormixin#mon_exit()","monitormixin#mon_initialize()","monitor#mon_locked?()","monitormixin#mon_locked?()","monitor#mon_owned?()","monitormixin#mon_owned?()","monitor#mon_synchronize()","monitormixin#mon_synchronize()","monitor#mon_try_enter()","monitormixin#mon_try_enter()","date#monday?()","time#monday?()","date#month()","time#month()","bundler::most_specific_locked_platform?()","pathname#mountpoint?()","fileutils#move()","fileutils::move()","net::http#move()","rinda::tuplespace#move()","reline::lineeditor#move_completed_list()","reline::ansi::move_cursor_column()","reline::generalio::move_cursor_column()","reline::windows::move_cursor_column()","reline::ansi::move_cursor_down()","reline::generalio::move_cursor_down()","reline::lineeditor#move_cursor_down()","reline::windows::move_cursor_down()","reline::ansi::move_cursor_up()","reline::generalio::move_cursor_up()","reline::lineeditor#move_cursor_up()","reline::windows::move_cursor_up()","logger::formatter#msg2str()","gem::ext::cargobuilder#msvc_target?()","gem::ext::cargobuilder#mswin_link_args()","reline::windows::msys_tty?()","rubyvm::mtbl()","rubyvm::mtbl2()","file#mtime()","file::mtime()","file::stat#mtime()","pathname#mtime()","zlib::gzipfile#mtime()","zlib::gzipwriter#mtime=()","mutex_m#mu_lock()","mutex_m#mu_locked?()","mutex_m#mu_synchronize()","mutex_m#mu_try_lock()","mutex_m#mu_unlock()","openssl::pkey::ec::point#mul()","bigdecimal#mult()","reline::lineeditor#multiline_off()","reline::lineeditor#multiline_on()","cgi::queryextension#multipart?()","cgi::htmlextension#multipart_form()","stringscanner::must_c_version()","fileutils#mv()","fileutils::mv()","racc::parserfilegenerator#n_indent()","irb::jobmanager#n_jobs()","racc::state#n_rrconflicts()","racc::states#n_rrconflicts()","bigdecimal#n_significant_digits()","racc::state#n_srconflicts()","racc::states#n_srconflicts()","racc::grammar#n_useless_nonterminals()","racc::grammar#n_useless_rules()","encoding#name()","gem::basicspecification#name()","gem::resolver::activationrequest#name()","gem::resolver::dependencyrequest#name()","gem::resolver::molinillo::delegates::resolutionstate#name()","gem::resolver::specspecification#name()","gem::unsatisfiabledependencyerror#name()","method#name()","module#name()","nameerror#name()","openssl::cipher#name()","openssl::digest#name()","openssl::engine#name()","rdoc::anymethod#name()","racc::ormark#name()","racc::prec#name()","racc::useraction#name()","ractor#name()","socket::ifaddr#name()","symbol#name()","thread#name()","unboundmethod#name()","win32ole::method#name()","win32ole::param#name()","win32ole::type#name()","win32ole::typelib#name()","win32ole::variable#name()","win32::registry#name()","cgi::cookie#name=()","rdoc::classmodule#name=()","thread#name=()","gem::resolver#name_for()","gem::resolver::molinillo::delegates::specificationprovider#name_for()","gem::resolver::molinillo::specificationprovider#name_for()","gem::resolver::molinillo::delegates::specificationprovider#name_for_explicit_dependency_source()","gem::resolver::molinillo::specificationprovider#name_for_explicit_dependency_source()","gem::resolver::molinillo::delegates::specificationprovider#name_for_locking_dependency_source()","gem::resolver::molinillo::specificationprovider#name_for_locking_dependency_source()","rdoc::classmodule#name_for_path()","rdoc::context#name_for_path()","encoding::name_list()","gem::security::trustdir#name_path()","gem::commands::dependencycommand#name_pattern()","rdoc::alias#name_prefix()","rdoc::methodattr#name_prefix()","gem::resolver::activationrequest#name_tuple()","gem::specification#name_tuple()","matchdata#named_captures()","regexp#named_captures()","stringscanner#named_captures()","encoding#names()","matchdata#names()","regexp#names()","didyoumean::methodnamechecker#names_to_exclude()","bigdecimal#nan?()","float#nan?()","psych::visitors::depthfirst#nary()","ipaddr#native()","thread#native_thread_id()","csv::fieldsconverter#need_convert?()","fiddle::function#need_gvl?()","rinda::tuplespace#need_keeper?()","csv::fieldsconverter#need_static_convert?()","gem::needs()","float#negative?()","numeric#negative?()","openssl::bn#negative?()","rational#negative?()","prettyprint#nest()","module::nesting()","ipaddr#netmask()","socket::ifaddr#netmask()","acl::new()","acl::aclentry::new()","acl::acllist::new()","addrinfo::new()","array::new()","basicobject::new()","benchmark::tms::new()","cgi::new()","cgi::cookie::new()","cgi::session::new()","cgi::session::filestore::new()","cgi::session::memorystore::new()","cgi::session::nullstore::new()","cgi::session::pstore::new()","csv::new()","csv::fieldsconverter::new()","csv::malformedcsverror::new()","csv::parser::new()","csv::parser::inputsscanner::new()","csv::parser::scanner::new()","csv::row::new()","csv::table::new()","csv::writer::new()","class#new()","class::new()","coreextensions::tcpsocketext::initializer::new()","drb::drbarray::new()","drb::drbobject::new()","drb::drbobject::new()","drb::drbremoteerror::new()","drb::drbsslsocket::new()","drb::drbsslsocket::sslconfig::new()","drb::drbserver::new()","drb::drbunknown::new()","drb::drbunknownerror::new()","drb::extserv::new()","drb::extservmanager::new()","drb::gw::new()","drb::threadobject::new()","drb::timeridconv::new()","drb::weakidconv::new()","drb::weakidconv::weakset::new()","data::new()","date::new()","datetime::new()","delegator::new()","didyoumean::classnamechecker::new()","didyoumean::classnamechecker::classname::new()","didyoumean::keyerrorchecker::new()","didyoumean::methodnamechecker::new()","didyoumean::nameerrorcheckers::new()","didyoumean::nullchecker::new()","didyoumean::patternkeynamechecker::new()","didyoumean::requirepathchecker::new()","didyoumean::spellchecker::new()","didyoumean::treespellchecker::new()","didyoumean::variablenamechecker::new()","digest::instance#new()","digest::sha2::new()","dir::new()","erb::new()","encoding::converter::new()","enumerator::new()","enumerator::chain::new()","enumerator::lazy::new()","enumerator::product::new()","errorhighlight::spotter::new()","exception::new()","fiber::new()","fiber::pool::new()","fiddle::cstructentity::new()","fiddle::closure::new()","fiddle::closure::blockcaller::new()","fiddle::compositehandler::new()","fiddle::function::new()","fiddle::handle::new()","fiddle::pinned::new()","fiddle::pointer::new()","fiddle::structarray::new()","file::new()","file::stat::new()","frozenerror::new()","gem::availableset::new()","gem::basicspecification::new()","gem::command::new()","gem::commandmanager::new()","gem::commands::buildcommand::new()","gem::commands::certcommand::new()","gem::commands::checkcommand::new()","gem::commands::cleanupcommand::new()","gem::commands::contentscommand::new()","gem::commands::dependencycommand::new()","gem::commands::environmentcommand::new()","gem::commands::execcommand::new()","gem::commands::fetchcommand::new()","gem::commands::generateindexcommand::new()","gem::commands::helpcommand::new()","gem::commands::infocommand::new()","gem::commands::installcommand::new()","gem::commands::listcommand::new()","gem::commands::lockcommand::new()","gem::commands::mirrorcommand::new()","gem::commands::opencommand::new()","gem::commands::outdatedcommand::new()","gem::commands::ownercommand::new()","gem::commands::pristinecommand::new()","gem::commands::pushcommand::new()","gem::commands::querycommand::new()","gem::commands::rdoccommand::new()","gem::commands::searchcommand::new()","gem::commands::servercommand::new()","gem::commands::setupcommand::new()","gem::commands::signincommand::new()","gem::commands::signoutcommand::new()","gem::commands::sourcescommand::new()","gem::commands::specificationcommand::new()","gem::commands::stalecommand::new()","gem::commands::uninstallcommand::new()","gem::commands::unpackcommand::new()","gem::commands::updatecommand::new()","gem::commands::whichcommand::new()","gem::commands::yankcommand::new()","gem::configfile::new()","gem::conflicterror::new()","gem::consoleui::new()","gem::dependency::new()","gem::dependencyinstaller::new()","gem::dependencylist::new()","gem::dependencyresolutionerror::new()","gem::doctor::new()","gem::ext::builder::new()","gem::ext::cargobuilder::new()","gem::ext::cargobuilder::dylibnotfounderror::new()","gem::filepermissionerror::new()","gem::gemrunner::new()","gem::impossibledependencieserror::new()","gem::indexer::new()","gem::installer::new()","gem::installer::fakepackage::new()","gem::list::new()","gem::missingspecerror::new()","gem::missingspecversionerror::new()","gem::mockgemui::new()","gem::mockgemui::inputeoferror::new()","gem::mockgemui::termerror::new()","gem::nametuple::new()","gem::package::new()","gem::package::digestio::new()","gem::package::formaterror::new()","gem::package::old::new()","gem::package::patherror::new()","gem::package::symlinkerror::new()","gem::package::tarheader::new()","gem::package::tarreader::new()","gem::package::tarreader::new()","gem::package::tarreader::entry::new()","gem::package::tarwriter::new()","gem::package::tarwriter::new()","gem::package::tarwriter::boundedstream::new()","gem::package::tarwriter::restrictedstream::new()","gem::packagetask::new()","gem::pathsupport::new()","gem::platform::new()","gem::platformmismatch::new()","gem::remotefetcher::new()","gem::remotefetcher::fetcherror::new()","gem::request::new()","gem::requestset::new()","gem::requestset::gemdependencyapi::new()","gem::requestset::lockfile::new()","gem::requestset::lockfile::parseerror::new()","gem::requestset::lockfile::parser::new()","gem::requestset::lockfile::tokenizer::new()","gem::requirement::new()","gem::resolver::new()","gem::resolver::apiset::new()","gem::resolver::apispecification::new()","gem::resolver::apispecification::new()","gem::resolver::activationrequest::new()","gem::resolver::bestset::new()","gem::resolver::composedset::new()","gem::resolver::conflict::new()","gem::resolver::dependencyrequest::new()","gem::resolver::indexspecification::new()","gem::resolver::installerset::new()","gem::resolver::lockset::new()","gem::resolver::lockspecification::new()","gem::resolver::molinillo::circulardependencyerror::new()","gem::resolver::molinillo::dependencygraph::new()","gem::resolver::molinillo::dependencygraph::addedgenocircular::new()","gem::resolver::molinillo::dependencygraph::deleteedge::new()","gem::resolver::molinillo::dependencygraph::detachvertexnamed::new()","gem::resolver::molinillo::dependencygraph::log::new()","gem::resolver::molinillo::dependencygraph::tag::new()","gem::resolver::molinillo::dependencygraph::vertex::new()","gem::resolver::molinillo::nosuchdependencyerror::new()","gem::resolver::molinillo::resolver::new()","gem::resolver::molinillo::resolver::resolution::new()","gem::resolver::molinillo::versionconflict::new()","gem::resolver::requirementlist::new()","gem::resolver::sourceset::new()","gem::resolver::specspecification::new()","gem::resolver::specification::new()","gem::resolver::stats::new()","gem::s3urisigner::new()","gem::s3urisigner::configurationerror::new()","gem::s3urisigner::instanceprofileerror::new()","gem::security::policy::new()","gem::security::signer::new()","gem::security::trustdir::new()","gem::silentui::new()","gem::source::new()","gem::source::git::new()","gem::source::lock::new()","gem::source::specificfile::new()","gem::source::vendor::new()","gem::sourcefetchproblem::new()","gem::sourcelist::new()","gem::specfetcher::new()","gem::specificgemnotfoundexception::new()","gem::specification::new()","gem::specificationpolicy::new()","gem::streamui::new()","gem::streamui::silentdownloadreporter::new()","gem::streamui::silentprogressreporter::new()","gem::streamui::simpleprogressreporter::new()","gem::streamui::threadeddownloadreporter::new()","gem::streamui::verboseprogressreporter::new()","gem::systemexitexception::new()","gem::uninstaller::new()","gem::unknowncommanderror::new()","gem::unknowncommandspellchecker::new()","gem::unsatisfiabledependencyerror::new()","gem::uri::new()","gem::uriformatter::new()","gem::version::new()","getoptlong::new()","hash::new()","io::new()","io::buffer::new()","ipaddr::new()","irb::canvas::new()","irb::color::symbolstate::new()","irb::context::new()","irb::fileinputmethod::new()","irb::frame::new()","irb::frame::frameoverflow::new()","irb::frame::frameunderflow::new()","irb::inputmethod::new()","irb::inspector::new()","irb::irb::new()","irb::jobmanager::new()","irb::locale::new()","irb::notifier::abstractnotifier::new()","irb::notifier::compositenotifier::new()","irb::notifier::errundefinednotifier::new()","irb::notifier::errunrecognizedlevel::new()","irb::notifier::levelednotifier::new()","irb::notifier::nomsgnotifier::new()","irb::outputmethod::notimplementederror::new()","irb::readlineinputmethod::new()","irb::reidlineinputmethod::new()","irb::relineinputmethod::new()","irb::rubymodel::new()","irb::stdioinputmethod::new()","irb::vec::new()","irb::workspace::new()","json::ext::generator::state::new()","json::ext::parser::new()","keyerror::new()","logger::new()","logger::formatter::new()","logger::logdevice::new()","module::new()","monitormixin::new()","monitormixin::conditionvariable::new()","nameerror::new()","net::http::new()","net::http::new()","net::httpgenericrequest::new()","net::httprequest::new()","net::readtimeout::new()","net::writeadapter::new()","net::writetimeout::new()","nomatchingpatternkeyerror::new()","nomethoderror::new()","oleproperty::new()","openssl::asn1::asn1data::new()","openssl::asn1::constructive::new()","openssl::asn1::primitive::new()","openssl::bn::new()","openssl::buffering::new()","openssl::buffering::buffer::new()","openssl::cipher::new()","openssl::config::new()","openssl::digest::new()","openssl::hmac::new()","openssl::netscape::spki::new()","openssl::ocsp::basicresponse::new()","openssl::ocsp::certificateid::new()","openssl::ocsp::request::new()","openssl::ocsp::response::new()","openssl::ocsp::singleresponse::new()","openssl::pkcs12::new()","openssl::pkcs7::new()","openssl::pkcs7::recipientinfo::new()","openssl::pkcs7::signerinfo::new()","openssl::pkey::dh::new()","openssl::pkey::dsa::new()","openssl::pkey::ec::new()","openssl::pkey::ec::group::new()","openssl::pkey::ec::point::new()","openssl::pkey::pkey::new()","openssl::pkey::rsa::new()","openssl::ssl::sslcontext::new()","openssl::ssl::sslserver::new()","openssl::ssl::sslsocket::new()","openssl::ssl::session::new()","openssl::timestamp::request::new()","openssl::timestamp::response::new()","openssl::timestamp::tokeninfo::new()","openssl::x509::attribute::new()","openssl::x509::crl::new()","openssl::x509::certificate::new()","openssl::x509::extension::new()","openssl::x509::extensionfactory::new()","openssl::x509::name::new()","openssl::x509::request::new()","openssl::x509::revoked::new()","openssl::x509::store::new()","openssl::x509::storecontext::new()","openstruct::new()","openuri::httperror::new()","openuri::httpredirect::new()","optionparser::new()","optionparser#new()","optionparser::arguable::new()","optionparser::list::new()","optionparser::parseerror::new()","optionparser::switch::new()","pstore::new()","pathname::new()","prettyprint::new()","prettyprint::singleline::new()","proc::new()","psych::aliasesnotenabled::new()","psych::anchornotdefined::new()","psych::classloader::restricted::new()","psych::coder::new()","psych::disallowedclass::new()","psych::emitter::new()","psych::handler::dumperoptions::new()","psych::handlers::recorder::new()","psych::nodes::alias::new()","psych::nodes::document::new()","psych::nodes::mapping::new()","psych::nodes::node::new()","psych::nodes::scalar::new()","psych::nodes::sequence::new()","psych::nodes::stream::new()","psych::parser::new()","psych::scalarscanner::new()","psych::streaming::classmethods#new()","psych::syntaxerror::new()","psych::treebuilder::new()","psych::visitors::depthfirst::new()","psych::visitors::emitter::new()","psych::visitors::restrictedyamltree::new()","psych::visitors::toruby::new()","psych::visitors::yamltree::new()","rdoc::alias::new()","rdoc::anymethod::new()","rdoc::attr::new()","rdoc::classmodule::new()","rdoc::codeobject::new()","rdoc::comment::new()","rdoc::constant::new()","rdoc::context::new()","rdoc::crossreference::new()","rdoc::erbio::new()","rdoc::markdown::new()","rdoc::markup::new()","rdoc::methodattr::new()","rdoc::mixin::new()","rdoc::parser::new()","rdoc::parser::c::new()","rdoc::parser::ripperstatelex::new()","rdoc::parser::ripperstatelex::innerstatelex::new()","rdoc::parser::ruby::new()","rdoc::parser::simple::new()","rdoc::rdoc::new()","rdoc::require::new()","rdoc::rubygemshook::new()","rdoc::rubygemshook::new()","rdoc::servlet::new()","rdoc::stats::new()","rdoc::store::new()","rdoc::store::missingfileerror::new()","rdoc::task::new()","rdoc::tomdoc::new()","rdoc::toplevel::new()","racc::actiontable::new()","racc::debugflags::new()","racc::goto::new()","racc::grammar::new()","racc::grammar::definitionenv::new()","racc::grammar::precedencedefinitionenv::new()","racc::grammarfileparser::new()","racc::grammarfileparser::result::new()","racc::grammarfilescanner::new()","racc::iset::new()","racc::item::new()","racc::locationpointer::new()","racc::logfilegenerator::new()","racc::ormark::new()","racc::parserclassgenerator::new()","racc::parserfilegenerator::new()","racc::parserfilegenerator::params::new()","racc::prec::new()","racc::rrconflict::new()","racc::reduce::new()","racc::rule::new()","racc::srconflict::new()","racc::shift::new()","racc::sourcetext::new()","racc::state::new()","racc::statetransitiontable::new()","racc::statetransitiontablegenerator::new()","racc::states::new()","racc::sym::new()","racc::symboltable::new()","racc::useraction::new()","ractor::new()","random::new()","range::new()","regexp::new()","reline::config::new()","reline::core::new()","reline::history::new()","reline::keyactor::base::new()","reline::keystroke::new()","reline::killring::new()","reline::killring::ringbuffer::new()","reline::lineeditor::new()","reline::lineeditor::dialog::new()","reline::lineeditor::dialogprocscope::new()","reline::windows::keyeventrecord::new()","reline::windows::win32api::new()","resolv::new()","resolv::dns::new()","resolv::dns::resource::domainname::new()","resolv::dns::resource::generic::new()","resolv::dns::resource::hinfo::new()","resolv::dns::resource::in::a::new()","resolv::dns::resource::in::aaaa::new()","resolv::dns::resource::in::srv::new()","resolv::dns::resource::in::wks::new()","resolv::dns::resource::loc::new()","resolv::dns::resource::minfo::new()","resolv::dns::resource::mx::new()","resolv::dns::resource::soa::new()","resolv::dns::resource::txt::new()","resolv::hosts::new()","resolv::loc::alt::new()","resolv::loc::coord::new()","resolv::loc::size::new()","resolv::mdns::new()","rinda::drbobjecttemplate::new()","rinda::notifytemplateentry::new()","rinda::ringfinger::new()","rinda::ringprovider::new()","rinda::ringserver::new()","rinda::simplerenewer::new()","rinda::tuple::new()","rinda::tuplebag::tuplebin::new()","rinda::tupleentry::new()","rinda::tuplespace::new()","rinda::tuplespaceproxy::new()","rinda::waittemplateentry::new()","ripper::new()","ripper::filter::new()","ripper::lexer::elem::new()","ripper::lexer::state::new()","rubyvm::instructionsequence::new()","sockssocket::new()","sockssocket::new()","set::new()","signalexception::new()","socket::new()","socket::ancillarydata::new()","socket::option::new()","socket::udpsource::new()","string::new()","stringio::new()","stringscanner::new()","struct::new()","syntaxerror::new()","syntaxsuggest::aroundblockscan::new()","syntaxsuggest::blockexpand::new()","syntaxsuggest::capturecodecontext::new()","syntaxsuggest::cleandocument::new()","syntaxsuggest::cli::new()","syntaxsuggest::codeblock::new()","syntaxsuggest::codefrontier::new()","syntaxsuggest::codeline::new()","syntaxsuggest::codesearch::new()","syntaxsuggest::displaycodewithlinenumbers::new()","syntaxsuggest::displayinvalidblocks::new()","syntaxsuggest::explainsyntax::new()","syntaxsuggest::leftrightlexcount::new()","syntaxsuggest::lexall::new()","syntaxsuggest::lexvalue::new()","syntaxsuggest::ministringio::new()","syntaxsuggest::parseblocksfromindentline::new()","syntaxsuggest::pathnamefrommessage::new()","syntaxsuggest::priorityengulfqueue::new()","syntaxsuggest::priorityqueue::new()","syntaxsuggest::unvisitedlines::new()","syslog::logger::new()","systemcallerror::new()","systemexit::new()","tcpserver::new()","tcpsocket::new()","tcpsocket::new()","tempfile::new()","thread::new()","thread::conditionvariable::new()","thread::mutex::new()","thread::queue::new()","thread::sizedqueue::new()","time::new()","tracepoint::new()","udpsocket::new()","unixserver::new()","unixsocket::new()","uri::ftp::new()","uri::generic::new()","uri::ldap::new()","uri::mailto::new()","uri::rfc2396_parser::new()","uri::rfc2396_parser::new()","uncaughtthrowerror::new()","win32ole::new()","win32ole::event::new()","win32ole::method::new()","win32ole::param::new()","win32ole::record::new()","win32ole::type::new()","win32ole::typelib::new()","win32ole::variant::new()","weakref::new()","win32::registry::new()","win32::registry::error::new()","win32::registry::predefinedkey::new()","win32::sspi::identity::new()","win32::sspi::negotiateauth::new()","win32::sspi::sspiresult::new()","win32::sspi::securitybuffer::new()","xmp::new()","xmp::stringinputmethod::new()","yaml::store::new()","zlib::deflate::new()","zlib::gzipreader::new()","zlib::gzipwriter::new()","zlib::inflate::new()","irb::methodextender#new_alias_name()","rdoc::parser::c#new_comment()","rdoc::parser::ruby#new_comment()","monitor#new_cond()","monitormixin#new_cond()","ipaddr::new_ntoh()","datetime#new_offset()","random::new_seed()","date#new_start()","erb#new_toplevel()","gem::resolver::molinillo::dependencygraph::vertex#new_vertex_set()","drb::drbobject::new_with()","drb::drbobject::new_with()","drb::drbobject::new_with_uri()","drb::drbobject::new_with_uri()","net::http::newobj()","date#next()","enumerator#next()","integer#next()","racc::locationpointer#next()","string#next()","symbol#next()","string#next!()","gem::resolver::requirementlist#next5()","date#next_day()","syntaxsuggest::aroundblockscan#next_down()","float#next_float()","reline::lineeditor#next_history()","syntaxsuggest::codefrontier#next_indent_line()","racc::grammarfilescanner#next_line()","date#next_month()","logger::period#next_rotate_time()","gem::requestset::lockfile::tokenizer#next_token()","racc::grammarfileparser#next_token()","racc::parser#next_token()","syntaxsuggest::aroundblockscan#next_up()","openssl::ocsp::singleresponse#next_update()","openssl::x509::crl#next_update()","openssl::x509::crl#next_update=()","enumerator#next_values()","date#next_year()","racc::grammar#nfa()","racc::states#nfa()","nilclass#nil?()","object#nil?()","gem::version::nil_versions_are_discouraged!()","nkf::nkf()","file::stat#nlink()","newton#nlsolve()","integer#nobits?()","ripper::lexer::state#nobits?()","rubyvm::abstractsyntaxtree::node#node_id()","rubyvm::abstractsyntaxtree::node_id_for_backtrace_location()","gem::mockgemui::tty#noecho()","io#noecho()","rdoc::classmodule#non_aliases()","gem::specification::non_nil_attributes()","racc::grammar::precedencedefinitionenv#nonassoc()","io#nonblock()","io#nonblock=()","io#nonblock?()","openssl::timestamp::request#nonce()","openssl::timestamp::tokeninfo#nonce()","openssl::timestamp::request#nonce=()","array#none?()","enumerable#none?()","gem::requirement#none?()","racc::sym#nonterminal?()","racc::grammar#nonterminal_base()","racc::symboltable#nonterminals()","bigdecimal#nonzero?()","numeric#nonzero?()","reline::lineeditor#normal_char()","didyoumean::treespellchecker#normalize()","gem::specification#normalize()","gem::uriformatter#normalize()","irb::vec#normalize()","rdoc::comment#normalize()","uri::generic#normalize()","uri::generic#normalize!()","rdoc::text#normalize_comment()","csv#normalize_converters()","gem::ext::cargobuilder#normalize_path()","gem::package#normalize_path()","gem::specification::normalize_yaml_input()","rdoc::rdoc#normalized_file_list()","gem::platform#normalized_linux_version()","io::buffer#not!()","openssl::x509::certificate#not_after()","openssl::x509::certificate#not_after=()","openssl::x509::certificate#not_before()","openssl::x509::certificate#not_before=()","syntaxsuggest::codeline#not_empty?()","rdoc::servlet#not_found()","rdoc::markdown#note()","rdoc::markdown#note_for()","rdoc::markdown#notes()","racc::parserfilegenerator#notice()","rinda::notifytemplateentry#notify()","rinda::tuplespace#notify()","rinda::tuplespaceproxy#notify()","irb::notifier::abstractnotifier#notify?()","irb::notifier::levelednotifier#notify?()","irb::notifier::nomsgnotifier#notify?()","rinda::tuplespace#notify_event()","drb::drbobservable#notify_observers()","observable#notify_observers()","datetime::now()","time::now()","openssl::ssl::sslsocket#npn_protocol()","etc::nprocessors()","io#nread()","time#nsec()","racc::symboltable#nt_max()","ipaddr::ntop()","gem::nametuple::null()","racc::grammar::definitionenv#null()","racc::rule#null=()","racc::sym#null=()","fiddle::pointer#null?()","io::buffer#null?()","racc::rule#nullable?()","racc::sym#nullable?()","openssl::bn#num_bits()","openssl::bn#num_bytes()","thread::queue#num_waiting()","thread::sizedqueue#num_waiting()","complex#numerator()","float#numerator()","integer#numerator()","numeric#numerator()","rational#numerator()","gem::uri#oauth_basic?()","pp::ppmethods#object_address_group()","rdoc::toplevel#object_class()","pp::ppmethods#object_group()","object#object_id()","json::ext::generator::state#object_nl()","json::ext::generator::state#object_nl=()","openssl::x509::extension::authorityinfoaccess#ocsp_uris()","gem::package::tarheader#oct()","string#oct()","gem::package::tarheader::oct_or_256based()","integer#odd?()","openssl::bn#odd?()","rubyvm::abstractsyntaxtree::of()","rubyvm::instructionsequence::of()","win32ole::event#off_event()","datetime#offset()","matchdata#offset()","win32ole::method#offset_vtbl()","io#oflush()","openssl::asn1::objectid#oid()","openssl::pkey::pkey#oid()","openssl::x509::attribute#oid()","openssl::x509::extension#oid()","openssl::x509::attribute#oid=()","openssl::x509::extension#oid=()","gem::dependencylist#ok?()","win32::sspi::sspiresult#ok?()","gem::dependencylist#ok_to_remove?()","gem::commands::updatecommand#oldest_supported_version()","win32ole#ole_activex_initialize()","win32ole::type::ole_classes()","win32ole::typelib#ole_classes()","win32ole#ole_free()","win32ole::ole_free()","win32ole#ole_func_methods()","win32ole#ole_get_methods()","win32ole::record#ole_instance_variable_get()","win32ole::record#ole_instance_variable_set()","win32ole#ole_method()","win32ole#ole_method_help()","win32ole#ole_methods()","win32ole::type#ole_methods()","win32ole#ole_methods_safely()","win32ole#ole_obj_help()","win32ole#ole_put_methods()","win32ole#ole_query_interface()","win32ole::ole_reference_count()","win32ole#ole_respond_to?()","win32ole::ole_show_help()","win32ole#ole_type()","win32ole::param#ole_type()","win32ole::type#ole_type()","win32ole::variable#ole_type()","win32ole::param#ole_type_detail()","win32ole::variable#ole_type_detail()","win32ole#ole_typelib()","win32ole::type#ole_typelib()","win32ole::typelib#ole_types()","optionparser#on()","rdoc::parser::ripperstatelex::innerstatelex#on_char()","syntaxsuggest::rippererrors#on_alias_error()","syntaxsuggest::rippererrors#on_assign_error()","rdoc::parser::ripperstatelex::innerstatelex#on_backref()","syntaxsuggest::rippererrors#on_class_name_error()","rdoc::parser::ripperstatelex::innerstatelex#on_comma()","rdoc::parser::ripperstatelex::innerstatelex#on_comment()","net::http#on_connect()","rdoc::parser::ripperstatelex::innerstatelex#on_const()","openssl::pkey::ec::point#on_curve?()","rdoc::parser::ripperstatelex::innerstatelex#on_cvar()","rdoc::parser::ripperstatelex::innerstatelex#on_default()","ripper::filter#on_default()","racc::grammarfileparser#on_error()","racc::parser#on_error()","win32ole::event#on_event()","win32ole::event#on_event_with_outargs()","syntaxsuggest::aroundblockscan#on_falling_indent()","rdoc::parser::ripperstatelex::innerstatelex#on_float()","rdoc::parser::ripperstatelex::innerstatelex#on_gvar()","optionparser#on_head()","rdoc::parser::ripperstatelex::innerstatelex#on_heredoc_beg()","rdoc::parser::ripperstatelex::innerstatelex#on_heredoc_end()","rdoc::parser::ripperstatelex::innerstatelex#on_ident()","rdoc::parser::ripperstatelex::innerstatelex#on_ignored_nl()","rdoc::parser::ripperstatelex::innerstatelex#on_ignored_sp()","rdoc::parser::ripperstatelex::innerstatelex#on_imaginary()","rdoc::parser::ripperstatelex::innerstatelex#on_int()","rdoc::parser::ripperstatelex::innerstatelex#on_ivar()","rdoc::parser::ripperstatelex::innerstatelex#on_kw()","rdoc::parser::ripperstatelex::innerstatelex#on_lbrace()","rdoc::parser::ripperstatelex::innerstatelex#on_lbracket()","rdoc::parser::ripperstatelex::innerstatelex#on_lparen()","rdoc::parser::ripperstatelex::innerstatelex#on_nl()","rdoc::parser::ripperstatelex::innerstatelex#on_op()","syntaxsuggest::rippererrors#on_param_error()","syntaxsuggest::rippererrors#on_parse_error()","rdoc::parser::ripperstatelex::innerstatelex#on_period()","rdoc::parser::ripperstatelex::innerstatelex#on_rational()","rdoc::parser::ripperstatelex::innerstatelex#on_rbrace()","rdoc::parser::ripperstatelex::innerstatelex#on_rbracket()","rdoc::parser::ripperstatelex::innerstatelex#on_rparen()","rdoc::parser::ripperstatelex::innerstatelex#on_sp()","rdoc::parser::ripperstatelex::innerstatelex#on_symbeg()","optionparser#on_tail()","rdoc::parser::ripperstatelex::innerstatelex#on_tstring_beg()","rdoc::parser::ripperstatelex::innerstatelex#on_tstring_end()","rdoc::parser::ripperstatelex::innerstatelex#on_variables()","pstore#on_windows?()","racc::sym::once_writer()","array#one?()","enumerable#one?()","openssl::bn#one?()","rdoc::context#ongoing_visibility=()","uri::generic#opaque=()","csv::open()","drb::drbprotocol#open()","drb::drbprotocol::open()","drb::drbsslsocket::open()","dir::open()","file::open()","gem::package::tarreader::entry::open()","io::open()","irb::fileinputmethod::open()","irb::magicfile::open()","kernel#open()","openssl::ssl::sslsocket::open()","openuri::openread#open()","pty::open()","pathname#open()","resolv::dns::open()","stringio::open()","syslog::open()","tempfile::open()","tempfile#open()","uri::open()","win32::registry::open()","win32::registry#open()","zlib::gzipreader::open()","zlib::gzipwriter::open()","syslog::open!()","win32::registry#open?()","pstore#open_and_lock_file()","gem::commands::certcommand#open_cert()","gem::commands::opencommand#open_editor()","gem::open_file()","gem::commands::opencommand#open_gem()","logger::logdevice#open_logfile()","gem::commands::certcommand#open_private_key()","drb::drbprotocol#open_server()","drb::drbprotocol::open_server()","drb::drbsslsocket::open_server()","pathname#opendir()","syslog::opened?()","gem::operating_system_defaults()","racc::grammar::definitionenv#option()","gem::command#option_is_deprecated?()","rdoc::task#option_list()","win32ole::param#optional?()","fileutils::options()","net::http#options()","openssl::ssl::sslcontext#options()","optionparser::arguable#options()","rdoc::codeobject#options()","regexp#options()","syslog::options()","openssl::ssl::sslcontext#options=()","optionparser::arguable#options=()","fileutils::options_of()","socket::option#optname()","io::buffer#or!()","integer#ord()","string#ord()","openssl::pkey::ec::group#order()","optionparser#order()","optionparser#order!()","optionparser::arguable#order!()","openssl::timestamp::tokeninfo#ordering()","getoptlong#ordering=()","date::ordinal()","datetime::ordinal()","rdoc::markdown#orig_initialize()","zlib::gzipfile#orig_name()","zlib::gzipwriter#orig_name=()","uri::http#origin()","bundler::original_env()","bundler::original_exec()","didyoumean::correctable#original_message()","method#original_name()","unboundmethod#original_name()","bundler::original_system()","zlib::gzipfile#os_code()","gem::gemcutterutilities#otp()","cgi#out()","racc::logfilegenerator#outact()","gem::specification::outdated()","gem::specification::outdated_and_latest_version()","gem::mockgemui#output()","gem::resolver#output()","gem::resolver::molinillo::ui#output()","racc::logfilegenerator#output()","readline::output=()","reline::ansi::output=()","reline::core#output=()","win32ole::param#output?()","racc::logfilegenerator#output_conflict()","rdoc::rdoc#output_flag_file()","reline::core#output_modifier_proc=()","rdoc::methodattr#output_name()","gem::queryutils#output_query_results()","racc::logfilegenerator#output_rule()","racc::logfilegenerator#output_state()","racc::logfilegenerator#output_token()","racc::logfilegenerator#output_useless()","gem::queryutils#output_versions()","racc::logfilegenerator#outrrconf()","racc::logfilegenerator#outsrconf()","file::owned?()","file::stat#owned?()","filetest#owned?()","pathname#owned?()","thread::mutex#owned?()","method#owner()","unboundmethod#owner()","kernel#p()","array#pack()","racc::states#pack()","socket::pack_sockaddr_in()","socket::pack_sockaddr_un()","win32::registry::api#packdw()","win32::registry::api#packhandle()","win32::registry::api#packqw()","openssl::cipher#padding=()","reline::lineeditor#padding_space_with_escape_sequences()","rdoc::store#page()","rdoc::store#page_file()","rdoc::toplevel#page_name()","socket::pair()","unixsocket::pair()","rdoc::markdown#paragraph()","rdoc::anymethod#param_list()","rdoc::anymethod#param_seq()","method#parameters()","proc#parameters()","tracepoint#parameters()","unboundmethod#parameters()","openssl::pkey::dh#params()","openssl::pkey::dsa#params()","openssl::pkey::rsa#params()","win32ole::method#params()","zlib::deflate#params()","cgi::queryextension#params=()","openssl::pkey::dh#params_ok?()","gem::indexer#paranoid()","gem::resolver::activationrequest#parent()","pathname#parent()","rdoc::codeobject#parent()","rdoc::codeobject#parent_file_name()","rdoc::codeobject#parent_name()","rdoc::methodattr#parent_name()","gem::resolver::molinillo::resolver::resolution#parent_of()","cgi::parse()","cgi::cookie::parse()","csv::parse()","csv::parser#parse()","date::parse()","datetime::parse()","gem::requestset::lockfile::parser#parse()","gem::requirement::parse()","gem::resolver::apiset::gemparser#parse()","gem::uri::parse()","gem::uri#parse()","json#parse()","json::ext::parser#parse()","openssl::config::parse()","openssl::x509::name::parse()","optionparser#parse()","optionparser::switch::noargument#parse()","optionparser::switch::optionalargument#parse()","optionparser::switch::placedargument#parse()","optionparser::switch::requiredargument#parse()","psych::parse()","psych::parser#parse()","rdoc::classmodule#parse()","rdoc::comment#parse()","rdoc::markdown::parse()","rdoc::markdown#parse()","rdoc::markup::parse()","rdoc::options#parse()","rdoc::parser::ripperstatelex::parse()","rdoc::rd::parse()","rdoc::text#parse()","rdoc::tomdoc::parse()","racc::grammarfileparser::parse()","racc::grammarfileparser#parse()","ripper#parse()","ripper::parse()","ripper::filter#parse()","rubyvm::abstractsyntaxtree::parse()","syntaxsuggest::cli#parse()","time::parse()","uri::parse()","uri::rfc2396_parser#parse()","uri::rfc2396_parser#parse()","gem::uri::parse!()","gem::uri#parse!()","json#parse!()","optionparser#parse!()","optionparser::arguable#parse!()","openssl::x509::extension::authorityinfoaccess#parse_aia_asn1()","rdoc::parser::ruby#parse_alias()","rdoc::parser::ruby#parse_attr()","rdoc::parser::ruby#parse_attr_accessor()","fiddle::importer#parse_bind_options()","rdoc::parser::ruby#parse_call_parameters()","rdoc::parser::ruby#parse_class()","csv::parser#parse_column_end()","csv::parser#parse_column_value()","rdoc::parser::ruby#parse_comment()","rdoc::parser::ruby#parse_comment_tomdoc()","openssl::config::parse_config()","rdoc::parser::ruby#parse_constant()","rdoc::parser::ruby#parse_constant_visibility()","fiddle::cparser#parse_ctype()","rdoc::parser::changelog#parse_date()","gem::resolver::apiset::gemparser#parse_dependency()","uri::ldap#parse_dn()","rdoc::rdoc#parse_dot_doc_file()","rdoc::parser::changelog#parse_entries()","rdoc::parser::changelog::git#parse_entries()","psych::parse_file()","rdoc::rdoc#parse_file()","racc::grammarfileparser::parse_file()","rubyvm::abstractsyntaxtree::parse_file()","rdoc::rdoc#parse_files()","rdoc::parser::parse_files_matching()","gem::resolver::apiset#parse_gem()","csv::parser#parse_headers()","rdoc::parser::changelog::git#parse_info()","psych::scalarscanner#parse_int()","reline::config#parse_keyseq()","csv::parse_line()","rdoc::parser::ruby#parse_meta_attr()","rdoc::parser::ruby#parse_meta_method()","rdoc::parser::ruby#parse_method()","rdoc::parser::ruby#parse_method_dummy()","rdoc::parser::ruby#parse_method_or_yield_parameters()","rdoc::parser::ruby#parse_method_parameters()","rdoc::parser::ruby#parse_method_params_and_body()","rdoc::parser::ruby#parse_module()","csv::parser#parse_no_quote()","openssl::x509::name::parse_openssl()","racc::debugflags::parse_option_string()","irb::outputmethod#parse_printf_format()","uri::ldap#parse_query()","csv::parser#parse_quotable_loose()","csv::parser#parse_quotable_robust()","csv::parser#parse_quoted_column_value()","rdoc::parser::ruby#parse_require()","rdoc::parser::ruby#parse_rescue()","openssl::x509::name::parse_rfc2253()","csv::parser#parse_row_end()","fiddle::cparser#parse_signature()","rdoc::parser::ruby#parse_statements()","psych::parse_stream()","fiddle::cparser#parse_struct_signature()","rdoc::parser::ruby#parse_symbol_arg()","rdoc::parser::ruby#parse_symbol_in_arg()","psych::scalarscanner#parse_time()","rdoc::parser::ruby#parse_top_level_statements()","csv::parser#parse_unquoted_column_value()","racc::grammarfileparser#parse_user_code()","rdoc::parser::ruby#parse_visibility()","rdoc::parser::ruby#parse_yield()","csv#parser()","gem::command#parser()","psych::parser()","syntaxsuggest::cli#parser()","uri::generic#parser()","rdoc::toplevel#parser=()","racc::grammar#parser_class()","racc::parserfilegenerator#parser_class()","racc::statetransitiontable#parser_class()","csv#parser_enumerator()","csv#parser_fields_converter()","racc::parserfilegenerator#parser_file()","csv#parser_options()","enumerable#partition()","string#partition()","thread::pass()","etc::passwd()","uri::generic#password()","uri::generic#password=()","gem::uri#password?()","cgi::htmlextension#password_field()","net::http#patch()","argf#path()","csv#path()","dir#path()","file::path()","gem::path()","gem::resolver::molinillo::dependencygraph#path()","io#path()","pstore#path()","rdoc::classmodule#path()","rdoc::constant#path()","rdoc::methodattr#path()","rdoc::toplevel#path()","rubyvm::instructionsequence#path()","tempfile#path()","thread::backtrace::location#path()","tracepoint#path()","unixsocket#path()","uri::ftp#path()","win32ole::typelib#path()","psych::classloader#path2class()","cgi::cookie#path=()","uri::generic#path=()","gem::uninstaller#path_ok?()","gem::path_separator()","gem::resolver::molinillo::dependencygraph::vertex#path_to?()","io#pathconf()","gem::paths()","gem::paths=()","optionparser::switch::pattern()","optionparser::switch::noargument::pattern()","rubyvm::mjit::pause()","openssl::kdf::pbkdf2_hmac()","openssl::pkcs5#pbkdf2_hmac()","openssl::pkcs5#pbkdf2_hmac_sha1()","enumerator#peek()","gem::requestset::lockfile::tokenizer#peek()","stringscanner#peek()","syntaxsuggest::priorityengulfqueue#peek()","syntaxsuggest::priorityqueue#peek()","syntaxsuggest::unvisitedlines#peek()","rdoc::parser::rubytools#peek_read()","coverage::peek_result()","rdoc::parser::rubytools#peek_tk()","enumerator#peek_values()","stringscanner#peep()","net::http#peer_cert()","openssl::ssl::sslsocket#peer_cert()","openssl::ssl::sslsocket#peer_cert_chain()","openssl::ssl::sslsocket#peer_finished_message()","ipsocket#peeraddr()","openssl::ssl::socketforwarder#peeraddr()","unixsocket#peeraddr()","rdoc::markdown#peg_parse()","openssl::ssl::sslsocket#pending()","thread#pending_interrupt?()","thread::pending_interrupt?()","rdoc::stats#percent_doc()","array#permutation()","optionparser#permute()","optionparser#permute!()","optionparser::arguable#permute!()","addrinfo#pfamily()","complex#phase()","float#phase()","numeric#phase()","gem::availableset#pick_best!()","io#pid()","process::pid()","process::status#pid()","stringio#pid()","gem::requestset::gemdependencyapi#pin_gem_source()","io::pipe()","file::pipe?()","file::stat#pipe?()","filetest#pipe?()","pathname#pipe?()","open3#pipeline()","open3::pipeline()","open3::pipeline_r()","open3#pipeline_r()","open3#pipeline_rw()","open3::pipeline_rw()","open3::pipeline_start()","open3#pipeline_start()","open3#pipeline_w()","open3::pipeline_w()","openssl::cipher#pkcs5_keyivgen()","makemakefile#pkg_config()","gem::basicspecification#platform()","gem::requestset::gemdependencyapi#platform()","gem::resolver::activationrequest#platform()","gem::resolver::specspecification#platform()","gem::specification#platform()","gem::specification#platform=()","gem::platform_defaults()","gem::ext::cargobuilder#platform_specific_rustc_args()","gem::platforms()","gem::requestset::gemdependencyapi#platforms()","gem::platforms=()","didyoumean::treespellchecker#plausible_dimensions()","gem::plugin_suffix_pattern()","gem::plugin_suffix_regexp()","gem::plugindir()","gem::basicspecification#plugins()","readline::point()","readline::point=()","openssl::pkey::ec::group#point_conversion_form()","openssl::pkey::ec::group#point_conversion_form=()","stringscanner#pointer()","stringscanner#pointer=()","racc::logfilegenerator#pointer_out()","complex::polar()","complex#polar()","numeric#polar()","openssl::timestamp::request#policy_id()","openssl::timestamp::tokeninfo#policy_id()","openssl::timestamp::request#policy_id=()","gem::remotefetcher#pools_for()","array#pop()","psych::treebuilder#pop()","rinda::notifytemplateentry#pop()","syntaxsuggest::codefrontier#pop()","syntaxsuggest::priorityengulfqueue#pop()","syntaxsuggest::priorityqueue#pop()","syntaxsuggest::unvisitedlines#pop()","thread::queue#pop()","thread::sizedqueue#pop()","gem::resolver::molinillo::dependencygraph::log#pop!()","pp::ppmethods#pop_inspect_key()","gem::resolver::molinillo::dependencystate#pop_possibility_state()","rdoc::tokenstream#pop_token()","irb::context#pop_workspace()","gem::util::popen()","io::popen()","open3#popen2()","open3::popen2()","open3::popen2e()","open3#popen2e()","open3#popen3()","open3::popen3()","cgi::htmlextension#popup_menu()","uri::generic#port=()","argf#pos()","dir#pos()","gem::package::tarreader::entry#pos()","io#pos()","stringio#pos()","stringscanner#pos()","zlib::gzipreader#pos()","zlib::gzipwriter#pos()","argf#pos=()","dir#pos=()","gem::package::tarreader::entry#pos=()","io#pos=()","stringio#pos=()","stringscanner#pos=()","float#positive?()","numeric#positive?()","rational#positive?()","gem::resolver::molinillo::delegates::resolutionstate#possibilities()","gem::resolver::molinillo::resolver::resolution#possibilities_for_requirement()","gem::resolver::molinillo::resolver::resolution#possibility()","gem::resolver::molinillo::resolver::resolution::conflict#possibility()","gem::resolver::molinillo::resolver::resolution#possibility_satisfies_requirements?()","didyoumean::treespellchecker#possible_paths()","net::http#post()","net::http::post()","net::http#post2()","gem::post_build()","openssl::ssl::sslsocket#post_connection_check()","net::http::post_form()","gem::post_install()","matchdata#post_match()","stringscanner#post_match()","gem::post_reset()","gem::post_uninstall()","integer#pow()","bigdecimal#power()","irb::colorprinter::pp()","irb::colorprinter#pp()","irb::notifier::abstractnotifier#pp()","irb::outputmethod#pp()","kernel#pp()","kernel::pp()","pp::pp()","pp::ppmethods#pp()","pp::ppmethods#pp_hash()","pp::ppmethods#pp_object()","process::ppid()","irb::notifier::abstractnotifier#ppx()","irb::outputmethod#ppx()","readline::pre_input_hook()","readline::pre_input_hook=()","reline::core#pre_input_hook=()","gem::pre_install()","gem::installer#pre_install_checks()","matchdata#pre_match()","stringscanner#pre_match()","gem::pre_reset()","gem::pre_uninstall()","io#pread()","io::buffer#pread()","racc::rule#prec()","racc::rule#precedence()","racc::rule#precedence=()","racc::grammar::definitionenv#precedence_table()","bigdecimal#precision()","bigdecimal#precision_scale()","bigdecimal#precs()","integer#pred()","gem::resolver::molinillo::dependencygraph::vertex#predecessors()","bundler::preferred_gemfile_name()","gem::availableset#prefetch()","gem::resolver::apiset#prefetch()","gem::resolver::composedset#prefetch()","gem::resolver::gitset#prefetch()","gem::resolver::installerset#prefetch()","gem::resolver::set#prefetch()","gem::prefix()","ipaddr#prefix()","ipaddr#prefix=()","reline::ansi::prep()","reline::generalio::prep()","reline::windows::prep()","csv::parser#prepare()","csv::writer#prepare()","csv::parser#prepare_backslash()","csv::writer#prepare_force_quotes_fields()","csv::writer#prepare_format()","csv::parser#prepare_header()","csv::writer#prepare_header()","csv::parser#prepare_line()","csv::writer#prepare_output()","csv::parser#prepare_parser()","csv::parser#prepare_quote_character()","csv::parser#prepare_quoted()","csv::parser#prepare_separators()","csv::parser#prepare_skip_lines()","csv::parser#prepare_strip()","csv::parser#prepare_unquoted()","csv::parser#prepare_variable()","gem::commands::updatecommand#preparing_gem_layout_for()","array#prepend()","gem::list::prepend()","gem::list#prepend()","module#prepend()","optionparser::list#prepend()","string#prepend()","gem::commands::setupcommand#prepend_destdir_if_present()","module#prepend_features()","coreextensions::tcpsocketext::prepended()","module#prepended()","gem::queryutils#prerelease()","gem::resolver::composedset#prerelease=()","gem::resolver::installerset#prerelease=()","gem::dependency#prerelease?()","gem::nametuple#prerelease?()","gem::requirement#prerelease?()","gem::version#prerelease?()","io#pressed?()","cgi::util#pretty()","json#pretty_generate()","gem::gemcutterutilities#pretty_host()","kernel#pretty_inspect()","rdoc::alias#pretty_name()","rdoc::methodattr#pretty_name()","rdoc::alias#pretty_new_name()","rdoc::alias#pretty_old_name()","openssl::bn#pretty_print()","openssl::x509::certificate#pretty_print()","openssl::x509::name#pretty_print()","ripper::lexer::elem#pretty_print()","ripper::lexer::state#pretty_print()","rubyvm::abstractsyntaxtree::node#pretty_print()","rubyvm::abstractsyntaxtree::node#pretty_print_children()","date#prev_day()","float#prev_float()","date#prev_month()","date#prev_year()","reline::lineeditor#previous_history()","logger::period#previous_period_end()","rinda::ringfinger::primary()","openssl::bn#prime?()","openssl::bn#prime_fasttest?()","encoding::converter#primitive_convert()","encoding::converter#primitive_errinfo()","argf#print()","cgi#print()","gem::silentui::nullio#print()","io#print()","io::generic_writable#print()","irb::locale#print()","irb::notifier::abstractnotifier#print()","irb::outputmethod#print()","irb::stdiooutputmethod#print()","kernel#print()","net::writeadapter#print()","openssl::buffering#print()","zlib::gzipwriter#print()","racc::states#print_atab()","gem::commands::execcommand#print_command()","openssl::print_mem_leaks()","racc::states#print_tab()","racc::states#print_tab_i()","irb::print_usage()","racc::states#printb()","argf#printf()","io#printf()","io::generic_writable#printf()","irb::locale#printf()","irb::notifier::abstractnotifier#printf()","irb::outputmethod#printf()","kernel#printf()","net::writeadapter#printf()","openssl::buffering#printf()","zlib::gzipwriter#printf()","irb::notifier::abstractnotifier#printn()","irb::outputmethod#printn()","gem::bundlerversionfinder::prioritize!()","gem::dependency#prioritizes_bundler?()","thread#priority()","thread#priority=()","module#private()","ipaddr#private?()","openssl::pkey::dh#private?()","openssl::pkey::dsa#private?()","openssl::pkey::ec#private?()","openssl::pkey::rsa#private?()","nomethoderror#private_call?()","module#private_class_method()","module#private_constant()","openssl::pkey::rsa#private_decrypt()","openssl::pkey::rsa#private_encrypt()","module#private_instance_methods()","openssl::pkey::ec#private_key()","openssl::pkey::ec#private_key=()","openssl::pkey::ec#private_key?()","module#private_method_defined?()","object#private_methods()","openssl::pkey::pkey#private_to_der()","openssl::pkey::pkey#private_to_pem()","kernel#proc()","racc::useraction::proc()","racc::useraction#proc?()","reline::killring#process()","gem::commandmanager#process_args()","reline::lineeditor#process_auto_indent()","reline::lineeditor#process_insert()","reline::lineeditor#process_key()","reline::windows::process_key_event()","gem::resolver::molinillo::resolver::resolution#process_topmost_state()","fiber::scheduler#process_wait()","enumerator::produce()","array#product()","enumerator::product()","win32ole::type#progid()","win32ole::type::progids()","optionparser#program_name()","gem::resolver::molinillo::ui#progress_rate()","gem::streamui#progress_reporter()","irb::context#prompt_mode=()","reline::core#prompt_proc=()","irb::context#prompting?()","set#proper_subset?()","set#proper_superset?()","net::http#propfind()","net::http#proppatch()","module#protected()","module#protected_instance_methods()","module#protected_method_defined?()","delegator#protected_methods()","object#protected_methods()","addrinfo#protocol()","rinda::ringprovider#provide()","net::http#proxy?()","net::http#proxy_address()","win32::sspi::negotiateauth::proxy_auth_get()","net::httpheader#proxy_basic_auth()","net::http::proxy_class?()","gem::remotefetcher#proxy_for()","net::http#proxy_from_env?()","net::http#proxy_pass()","net::http#proxy_port()","gem::request#proxy_uri()","net::http#proxy_user()","net::http#proxyaddr()","net::http#proxyport()","find::prune()","find#prune()","syntaxsuggest::priorityengulfqueue#prune_engulf()","fiddle::pointer#ptr()","racc::locationpointer#ptr_bug!()","module#public()","openssl::pkey::dh#public?()","openssl::pkey::dsa#public?()","openssl::pkey::ec#public?()","openssl::pkey::rsa#public?()","module#public_class_method()","module#public_constant()","openssl::pkey::rsa#public_decrypt()","openssl::pkey::rsa#public_encrypt()","module#public_instance_method()","module#public_instance_methods()","openssl::netscape::spki#public_key()","openssl::pkey::dh#public_key()","openssl::pkey::dsa#public_key()","openssl::pkey::ec#public_key()","openssl::pkey::rsa#public_key()","openssl::x509::certificate#public_key()","openssl::x509::request#public_key()","openssl::netscape::spki#public_key=()","openssl::pkey::ec#public_key=()","openssl::x509::certificate#public_key=()","openssl::x509::request#public_key=()","openssl::pkey::ec#public_key?()","object#public_method()","module#public_method_defined?()","delegator#public_methods()","object#public_methods()","object#public_send()","openssl::pkey::pkey#public_to_der()","openssl::pkey::pkey#public_to_pem()","openssl::x509::store#purpose=()","openssl::x509::storecontext#purpose=()","array#push()","csv::row#push()","csv::table#push()","psych::treebuilder#push()","psych::visitors::yamltree#push()","reline::history#push()","rinda::tuplebag#push()","syntaxsuggest::codesearch#push()","syntaxsuggest::priorityengulfqueue#push()","thread::queue#push()","thread::sizedqueue#push()","gem::resolver::molinillo::dependencygraph::log#push_action()","gem::resolver::molinillo::resolver::resolution#push_initial_state()","pp::ppmethods#push_inspect_key()","gem::resolver::molinillo::resolver::resolution#push_state_for_requirements()","irb::context#push_workspace()","racc::parserfilegenerator#put()","racc::parserfilegenerator#put_state_transition_table()","encoding::converter#putback()","argf#putc()","io#putc()","kernel#putc()","stringio#putc()","zlib::gzipwriter#putc()","argf#puts()","csv#puts()","gem::silentui::nullio#puts()","io#puts()","io::generic_writable#puts()","irb::locale#puts()","irb::notifier::abstractnotifier#puts()","irb::outputmethod#puts()","kernel#puts()","net::writeadapter#puts()","openssl::buffering#puts()","syntaxsuggest::ministringio#puts()","xmp#puts()","xmp::stringinputmethod#puts()","zlib::gzipwriter#puts()","dir::pwd()","fileutils#pwd()","fileutils::pwd()","pathname::pwd()","io#pwrite()","io::buffer#pwrite()","uri::generic#query=()","rdoc::options#quiet()","rdoc::options#quiet=()","bigdecimal#quo()","complex#quo()","float#quo()","numeric#quo()","rational#quo()","csv::writer#quote()","regexp::quote()","csv#quote_char()","csv::parser#quote_character()","csv::writer#quote_field()","net::httpgenericrequest#quote_string()","reline::lineeditor#quoted_insert()","readline::quoting_detection_proc()","readline::quoting_detection_proc=()","racc::parser#racc_accept()","racc::parser#racc_e_pop()","racc::parser#racc_next_state()","racc::parser#racc_print_stacks()","racc::parser#racc_print_states()","racc::parser#racc_read_token()","racc::parser#racc_reduce()","racc::parser#racc_shift()","racc::parser#racc_token2str()","cgi::htmlextension#radio_button()","cgi::htmlextension#radio_group()","delegator#raise()","fiber#raise()","kernel#raise()","thread#raise()","gem::resolver::molinillo::resolver::resolution#raise_error_unless_state()","tracepoint#raised_exception()","kernel#rand()","openssl::bn::rand()","random#rand()","random::rand()","random::formatter#rand()","openssl::bn::rand_range()","openssl::random::random_add()","openssl::random::random_bytes()","random::formatter#random_bytes()","openssl::cipher#random_iv()","openssl::cipher#random_key()","random::formatter#random_number()","net::httpheader#range()","net::httpheader#range=()","net::httpheader#range_length()","array#rassoc()","env::rassoc()","hash#rassoc()","complex#rationalize()","float#rationalize()","integer#rationalize()","nilclass#rationalize()","rational#rationalize()","io#raw()","io#raw!()","cgi::queryextension#raw_cookie()","cgi::queryextension#raw_cookie2()","gc::profiler::raw_data()","csv#raw_encoding()","gem::package::raw_spec()","gem::installer#rb_config()","gem::ext::cargobuilder#rb_config_env()","rdoc::parser::c#rb_scan_args()","file::stat#rdev()","file::stat#rdev_major()","file::stat#rdev_minor()","rdoc::rubygemshook#rdoc_installed?()","rdoc::rubygemshook#rdoc_installed?()","gem::specification#rdoc_options()","gem::specification#rdoc_options=()","rdoc::task#rdoc_target()","rdoc::task#rdoc_task_description()","rdoc::task#rdoc_task_name()","process::gid::re_exchange()","process::uid::re_exchange()","process::gid::re_exchangeable?()","process::uid::re_exchangeable?()","gem::security::re_sign()","gem::commands::certcommand#re_sign_cert()","gem::security::signer::re_sign_cert()","objectspace::reachable_objects_from()","objectspace::reachable_objects_from_root()","argf#read()","csv::read()","csv#read()","dir#read()","gem::package::tarreader::entry#read()","io::read()","io#read()","io::buffer#read()","openssl::buffering#read()","openssl::pkey::read()","openuri::openread#read()","pathname#read()","racc::grammarfilescanner#read()","reline::config#read()","rinda::tuplespace#read()","rinda::tuplespaceproxy#read()","rinda::waittemplateentry#read()","stringio#read()","win32::registry#read()","zlib::gzipreader#read()","reline::core#read_2nd_character_of_key_sequence()","rinda::tuplespace#read_all()","rinda::tuplespaceproxy#read_all()","win32::registry#read_bin()","gem::read_binary()","net::httpresponse#read_body()","gem::package#read_checksums()","csv::parser::inputsscanner#read_chunk()","rdoc::parser::ruby#read_directive()","rdoc::parser::ruby#read_documentation_modifiers()","reline::core#read_escaped_key()","bundler::read_file()","rdoc::encoding::read_file()","cgi::queryextension#read_from_cmdline()","win32::registry#read_i()","reline::core#read_io()","reline::config#read_lines()","cgi::queryextension#read_multipart()","argf#read_nonblock()","io#read_nonblock()","io::generic_readable#read_nonblock()","openssl::buffering#read_nonblock()","resolv::sz#read_s()","win32::registry#read_s()","win32::registry#read_s_expand()","openssl::pkcs7::read_smime()","net::httpresponse::read_status_line()","net::http#read_timeout=()","file::readable?()","file::stat#readable?()","filetest#readable?()","pathname#readable?()","irb::inputmethod#readable_after_eof?()","irb::readlineinputmethod#readable_after_eof?()","irb::relineinputmethod#readable_after_eof?()","irb::stdioinputmethod#readable_after_eof?()","file::readable_real?()","file::stat#readable_real?()","filetest#readable_real?()","pathname#readable_real?()","encoding::invalidbytesequenceerror#readagain_bytes()","argf#readbyte()","io#readbyte()","io::generic_readable#readbyte()","zlib::gzipreader#readbyte()","argf#readchar()","io#readchar()","io::generic_readable#readchar()","openssl::buffering#readchar()","zlib::gzipreader#readchar()","argf#readline()","csv#readline()","io#readline()","io::generic_readable#readline()","irb::locale#readline()","kernel#readline()","openssl::buffering#readline()","readline::readline()","reline::core#readline()","zlib::gzipreader#readline()","argf#readlines()","csv::readlines()","csv#readlines()","io#readlines()","io::readlines()","kernel#readlines()","openssl::buffering#readlines()","pathname#readlines()","stringio#readlines()","zlib::gzipreader#readlines()","file::readlink()","pathname#readlink()","reline::core#readmultiline()","io::buffer#readonly?()","argf#readpartial()","gem::package::tarreader::entry#readpartial()","io#readpartial()","io::generic_readable#readpartial()","openssl::buffering#readpartial()","zlib::gzipreader#readpartial()","racc::grammarfilescanner#reads()","io#ready?()","complex#real()","numeric#real()","complex#real?()","numeric#real?()","irb::locale#real_load()","file::realdirpath()","pathname#realdirpath()","fiddle::realloc()","gem::configfile#really_verbose()","file::realpath()","pathname#realpath()","benchmark#realtime()","benchmark::realtime()","localjumperror#reason()","optionparser::parseerror#reason()","ractor#receive()","ractor::receive()","ractor::receive_if()","ractor#receive_if()","binding#receiver()","frozenerror#receiver()","keyerror#receiver()","method#receiver()","nameerror#receiver()","openssl::pkcs7#recipients()","syntaxsuggest::codesearch#record()","gem::resolver::stats#record_depth()","syntaxsuggest::record_dir()","rdoc::codeobject#record_location()","rdoc::context#record_location()","racc::states#record_path()","gem::resolver::stats#record_requirements()","optionparser::parseerror#recover()","complex#rect()","complex::rect()","numeric#rect()","complex::rectangular()","complex#rectangular()","numeric#rectangular()","gem::resolver::molinillo::dependencygraph::vertex#recursive_predecessors()","gem::resolver::molinillo::dependencygraph::vertex#recursive_successors()","basicsocket#recv()","ractor#recv()","ractor::recv()","unixsocket#recv_io()","basicsocket#recv_nonblock()","ipsocket#recvfrom()","socket#recvfrom()","unixsocket#recvfrom()","socket#recvfrom_nonblock()","udpsocket#recvfrom_nonblock()","basicsocket#recvmsg()","basicsocket#recvmsg_nonblock()","gem::uri::redact()","gem::uri#redact_credentials_from()","gem::uri#redacted()","readline::redisplay()","enumerable#reduce()","racc::actiontable#reduce()","racc::actiontable#reduce_n()","racc::statetransitiontablegenerator#reduce_table()","fiddle::pinned#ref()","fiddle::pointer#ref()","rdoc::markdown#reference()","module#refine()","refinement#refined_class()","module#refinements()","gem::refresh()","readline::refresh_line()","gem::commands::setupcommand#regenerate_binstubs()","gem::commands::setupcommand#regenerate_plugins()","gem::uninstaller#regenerate_plugins()","gem::installeruninstallerutils#regenerate_plugins_for()","matchdata#regexp()","optionparser::completion::regexp()","uri::regexp()","drb::extservmanager#regist()","drb::regist_server()","drb#regist_server()","drb::extservmanager#register()","gem::noaliasyamltree#register()","openssl::asn1::objectid::register()","psych::streaming#register()","psych::visitors::toruby#register()","psych::visitors::yamltree#register()","gem::commandmanager#register_command()","gem::register_default_spec()","psych::visitors::toruby#register_empty()","syntaxsuggest::codefrontier#register_engulf_block()","syntaxsuggest::codefrontier#register_indent_block()","uri::register_scheme()","uri::generic#registry=()","env::rehash()","hash#rehash()","array#reject()","env::reject()","enumerable#reject()","enumerator::lazy#reject()","hash#reject()","optionparser::reject()","optionparser#reject()","optionparser::list#reject()","yaml::dbm#reject()","array#reject!()","env::reject!()","hash#reject!()","set#reject!()","pathname#relative?()","uri::generic#relative?()","pathname#relative_path_from()","gem::version#release()","optionparser#release()","drb::drbunknown#reload()","bigdecimal#remainder()","integer#remainder()","numeric#remainder()","gem::resolver::composedset#remote=()","gem::localremoteoptions#remote?()","basicsocket#remote_address()","fileutils::remove()","fileutils#remove()","gem::resolver::requirementlist#remove()","gem::uninstaller#remove()","optionparser#remove()","rdoc::rubygemshook#remove()","rdoc::rubygemshook#remove()","gem::uninstaller#remove_all()","racc::parserfilegenerator#remove_blank_lines()","gem::dependencylist#remove_by_name()","module#remove_class_variable()","rdoc::parser::simple#remove_coding_comment()","rdoc::parser::c#remove_commented_out_lines()","module#remove_const()","fileutils::remove_dir()","fileutils#remove_dir()","fileutils::remove_entry()","fileutils#remove_entry()","fileutils::remove_entry_secure()","fileutils#remove_entry_secure()","gem::uninstaller#remove_executables()","fileutils::remove_file()","fileutils#remove_file()","gem::commands::setupcommand#remove_file_list()","rdoc::context#remove_from_documentation?()","rdoc::encoding::remove_frozen_string_literal()","gem::availableset#remove_installed!()","object#remove_instance_variable()","rdoc::context#remove_invisible()","rdoc::encoding::remove_magic_comment()","module#remove_method()","rdoc::parser::remove_modeline()","rdoc::store#remove_nodoc()","rdoc::classmodule#remove_nodoc_children()","gem::commands::setupcommand#remove_old_bin_files()","gem::commands::setupcommand#remove_old_lib_files()","gem::commands::setupcommand#remove_old_man_files()","gem::command#remove_option()","gem::commands::ownercommand#remove_owners()","gem::installeruninstallerutils#remove_plugins_for()","rdoc::comment#remove_private()","rdoc::parser::simple#remove_private_comment()","drb::remove_server()","drb#remove_server()","rdoc::rdoc#remove_siginfo_handler()","gem::specification::remove_spec()","gem::dependencylist#remove_specs_unsatisfied_by()","gc::remove_stress_to_class()","rdoc::parser::rubytools#remove_token_listener()","rdoc::rdoc#remove_unparseable()","gem::specification#removed_method_calls()","file::rename()","pathname#rename()","reline::lineeditor#render_dialog()","reline::lineeditor#render_each_dialog()","irb::rubymodel#render_frame()","reline::lineeditor#render_partial()","reline::lineeditor#render_whole_lines()","rinda::simplerenewer#renew()","rinda::tupleentry#renew()","io#reopen()","logger#reopen()","logger::logdevice#reopen()","stringio#reopen()","syslog::reopen()","array#repeated_combination()","array#repeated_permutation()","array#replace()","env::replace()","fiddle::cstruct#replace()","gem::sourcelist#replace()","hash#replace()","racc::rule#replace()","set#replace()","string#replace()","yaml::dbm#replace()","uri::generic#replace!()","racc::parserfilegenerator#replace_location()","encoding::converter#replacement()","encoding::converter#replacement=()","encoding#replicate()","socket::udpsource#reply()","rinda::ringserver#reply_service()","gc::profiler::report()","rdoc::stats#report()","rdoc::stats#report_attributes()","rdoc::stats#report_class_module()","rdoc::stats#report_constants()","rdoc::stats#report_methods()","thread#report_on_exception()","thread::report_on_exception()","thread::report_on_exception=()","thread#report_on_exception=()","psych::coder#represent_map()","psych::coder#represent_object()","psych::coder#represent_scalar()","psych::coder#represent_seq()","gem::remotefetcher#request()","net::http#request()","net::httpgenericrequest#request_body_permitted?()","gem::resolver::dependencyrequest#request_context()","net::http#request_get()","net::http#request_head()","gem::resolver::conflict#request_path()","net::http#request_post()","uri::http#request_uri()","uri::ws#request_uri()","gem::gemcutterutilities#request_with_otp()","gem::resolver::conflict#requester()","gem::requestset::lockfile#requests()","bundler::require()","irb::locale#require()","kernel#require()","racc::parserfilegenerator#require()","gem::streamui#require_io_console()","gem::resolver::molinillo::resolver::resolution#require_nested_dependencies_for()","gem::specification#require_path()","gem::specification#require_path=()","gem::basicspecification#require_paths()","gem::specification#require_paths=()","kernel#require_relative()","didyoumean::requirepathchecker::requireables()","gem::specification::required_attribute?()","gem::specification::required_attributes()","gem::resolver::indexspecification#required_ruby_version()","gem::resolver::specspecification#required_ruby_version()","gem::specification#required_ruby_version=()","gem::resolver::indexspecification#required_rubygems_version()","gem::resolver::specspecification#required_rubygems_version()","gem::specification#required_rubygems_version=()","gem::dependency#requirement()","gem::resolver::dependencyrequest#requirement()","gem::resolver::molinillo::delegates::resolutionstate#requirement()","gem::resolver::stats#requirement!()","gem::resolver::molinillo::resolver::resolution#requirement_for_existing_name()","gem::resolver#requirement_satisfied_by?()","gem::resolver::molinillo::delegates::specificationprovider#requirement_satisfied_by?()","gem::resolver::molinillo::specificationprovider#requirement_satisfied_by?()","gem::resolver::molinillo::resolver::resolution#requirement_tree_for()","gem::resolver::molinillo::resolver::resolution#requirement_trees()","gem::resolver::molinillo::delegates::resolutionstate#requirements()","gem::resolver::molinillo::dependencygraph::vertex#requirements()","gem::specification#requirements()","gem::specification#requirements=()","gem::dependency#requirements_list()","rdoc::task#rerdoc_task_description()","rdoc::task#rerdoc_task_name()","reline::lineeditor#rerender()","reline::lineeditor#rerender_added_newline()","reline::lineeditor#rerender_all()","reline::lineeditor#rerender_all_lines()","reline::lineeditor#rerender_changed_current_line()","cgi::htmlextension#reset()","digest::base#reset()","digest::instance#reset()","digest::sha2#reset()","gem::commandmanager::reset()","gem::request#reset()","gem::security::reset()","gem::specification::reset()","openssl::cipher#reset()","openssl::digest#reset()","openssl::hmac#reset()","rdoc::parser::ripperstatelex::innerstatelex#reset()","rdoc::parser::rubytools#reset()","reline::config#reset()","reline::generalio::reset()","reline::lineeditor#reset()","set#reset()","stringscanner#reset()","zlib::zstream#reset()","bundler::reset!()","reline::config#reset_default_key_bindings()","reline::keyactor::base#reset_default_key_bindings()","reline::lineeditor#reset_dialog()","reline::lineeditor#reset_line()","gem::specification#reset_nil_attributes_to_default()","reline::config#reset_oneshot_key_bindings()","bundler::reset_paths!()","bundler::reset_rubygems!()","bundler::reset_settings_and_root!()","rubyvm::yjit::reset_stats!()","reline::lineeditor#reset_variables()","io::buffer#resize()","reline::lineeditor#resize()","gem::requestset#resolve()","gem::resolver#resolve()","gem::resolver::molinillo::resolver#resolve()","gem::resolver::molinillo::resolver::resolution#resolve()","rdoc::crossreference#resolve()","racc::states#resolve()","gem::resolver::molinillo::resolver::resolution#resolve_activated_specs()","rdoc::context#resolve_aliases()","psych::visitors::toruby#resolve_class()","gem::requestset#resolve_current()","gem::commands::buildcommand#resolve_gem_name()","rdoc::crossreference#resolve_method()","csv::parser#resolve_row_separator()","racc::states#resolve_rr()","racc::states#resolve_sr()","drb::drbobject#respond_to?()","drb::drbobject#respond_to?()","object#respond_to?()","delegator#respond_to_missing?()","gem::uri#respond_to_missing?()","object#respond_to_missing?()","net::http#response_body_encoding=()","net::httpgenericrequest#response_body_permitted?()","net::httpresponse::response_class()","openssl::ocsp::basicresponse#responses()","csv::parser::inputsscanner#rest()","stringscanner#rest()","stringscanner#rest?()","stringscanner#rest_size()","cgi::session::filestore#restore()","cgi::session::memorystore#restore()","cgi::session::nullstore#restore()","cgi::session::pstore#restore()","json::restore()","json#restore()","marshal::restore()","stringscanner#restsize()","coverage::result()","erb#result()","gc::profiler::result()","stopiteration#result()","erb#result_with_hash()","coverage::resume()","fiber#resume()","rubyvm::mjit::resume()","rdoc::parser::ruby#retrieve_comment_body()","reline::lineeditor#retrieve_completion_block()","reline::lineeditor::dialogprocscope#retrieve_completion_block()","rdoc::parser::ripperstatelex#retrieve_heredoc_info()","reline::ansi::retrieve_keybuffer()","reline::config#retrieve_string()","csv#return_headers?()","csv::parser#return_headers?()","win32ole::method#return_type()","win32ole::method#return_type_detail()","tracepoint#return_value()","win32ole::method#return_vtype()","win32ole::param#retval?()","array#reverse()","ipaddr#reverse()","string#reverse()","array#reverse!()","string#reverse!()","array#reverse_each()","enumerable#reverse_each()","gem::resolver::molinillo::dependencygraph::log#reverse_each()","reline::lineeditor#reverse_search_history()","gem::resolver::molinillo::resolver::resolution::unwinddetails#reversed_requirement_tree_index()","psych::visitors::toruby#revive()","psych::visitors::toruby#revive_hash()","openssl::ocsp::singleresponse#revocation_reason()","openssl::ocsp::singleresponse#revocation_time()","openssl::x509::crl#revoked()","openssl::x509::crl#revoked=()","argf#rewind()","csv#rewind()","csv::writer#rewind()","dir#rewind()","enumerator#rewind()","enumerator::chain#rewind()","enumerator::product#rewind()","gem::package::tarreader#rewind()","gem::package::tarreader::entry#rewind()","io#rewind()","stringio#rewind()","zlib::gzipreader#rewind()","gem::resolver::molinillo::dependencygraph#rewind_to()","gem::resolver::molinillo::dependencygraph::log#rewind_to()","cgi::util#rfc1123_date()","date#rfc2822()","date::rfc2822()","datetime::rfc2822()","time::rfc2822()","time#rfc2822()","date#rfc3339()","date::rfc3339()","datetime#rfc3339()","datetime::rfc3339()","date#rfc822()","date::rfc822()","datetime::rfc822()","time::rfc822()","time#rfc822()","gem::specification#ri_dir()","rdoc::rubygemshook#ri_installed?()","rdoc::rubygemshook#ri_installed?()","rdoc::servlet#ri_paths()","process::gid::rid()","process::uid::rid()","racc::grammar::precedencedefinitionenv#right()","array#rindex()","string#rindex()","string#rjust()","fileutils#rm()","fileutils::rm()","fileutils#rm_f()","fileutils::rm_f()","fileutils#rm_r()","fileutils::rm_r()","bundler::rm_rf()","fileutils#rm_rf()","fileutils::rm_rf()","dir::rmdir()","fileutils::rmdir()","fileutils#rmdir()","pathname#rmdir()","fileutils::rmtree()","fileutils#rmtree()","pathname#rmtree()","bundler::root()","psych::nodes::document#root()","rdoc::servlet#root()","pstore#root?()","pathname#root?()","rdoc::servlet#root_search()","gem::resolver::molinillo::dependencygraph#root_vertex_named()","pstore#roots()","array#rotate()","array#rotate!()","bigdecimal#round()","float#round()","integer#round()","numeric#round()","rational#round()","time#round()","uri::generic#route_from()","uri::generic#route_to()","csv#row_sep()","csv::parser#row_separator()","string#rpartition()","racc::state#rr_conflict()","racc::states#rrconflict_exist?()","racc::state#rruleid()","openssl::bn#rshift!()","string#rstrip()","string#rstrip!()","gem::ruby()","gem::ext::builder::ruby()","gem::requestset::gemdependencyapi#ruby()","module#ruby2_keywords()","proc#ruby2_keywords()","hash::ruby2_keywords_hash()","hash::ruby2_keywords_hash?()","gem::ruby_api_version()","gem::specification#ruby_code()","gem::ruby_engine()","gem::installer#ruby_install_name()","bundler::ruby_scope()","gem::ext::cargobuilder#ruby_static?()","gem::ruby_version()","gem::configfile#rubygems_api_key()","gem::configfile#rubygems_api_key=()","gem::gemcutterutilities#rubygems_api_request()","gem::deprecate#rubygems_deprecate()","gem::deprecate::rubygems_deprecate()","gem::deprecate::rubygems_deprecate_command()","gem::deprecate#rubygems_deprecate_command()","gem::commands::updatecommand#rubygems_target_version()","gem::rubygems_version()","racc::rule#rule()","racc::sym#rule()","racc::reduce#ruleid()","drb::drbserver#run()","erb#run()","gem::commandmanager#run()","gem::ext::builder::run()","gem::gemrunner#run()","irb::irb#run()","thread#run()","reline::lineeditor#run_for_operators()","coverage::running?()","gem::dependency#runtime?()","gem::specification#runtime_dependencies()","racc::parserfilegenerator#runtime_source()","rubyvm::yjit::runtime_stats()","gem::ext::cargobuilder#rustc_dynamic_linker_flags()","gem::ext::cargobuilder#rustc_lib_flags()","gem::remotefetcher#s3_uri_signer()","gem::uninstaller#safe_delete()","psych::safe_dump()","gem::safeyaml::safe_load()","psych::safe_load()","psych::safe_load_file()","bundler::safe_load_marshal()","fileutils#safe_unlink()","fileutils::safe_unlink()","gem::specification#same_attributes?()","array#sample()","gem::specification#sanitize()","rdoc::options#sanitize_path()","gem::specification#sanitize_string()","gem::requirement#satisfied_by?()","gem::specification#satisfies_requirement?()","date#saturday?()","time#saturday?()","rdoc::store#save()","rdoc::store#save_cache()","rdoc::store#save_class()","pstore#save_data()","pstore#save_data_with_atomic_file_rename_strategy()","pstore#save_data_with_fast_strategy()","bigdecimal::save_exception_mode()","irb::context#save_history()","irb::context#save_history=()","bigdecimal::save_limit()","rdoc::store#save_method()","rdoc::store#save_page()","bigdecimal::save_rounding_mode()","gem::streamui#say()","gem::userinteraction#say()","psych::coder#scalar()","psych::emitter#scalar()","psych::handler#scalar()","psych::treebuilder#scalar()","psych::coder#scalar=()","psych::nodes::node#scalar?()","psych::nodes::scalar#scalar?()","bigdecimal#scale()","csv::parser::inputsscanner#scan()","irb::color::scan()","openssl::x509::name::rfc2253dn#scan()","rdoc::parser::c#scan()","rdoc::parser::changelog#scan()","rdoc::parser::markdown#scan()","rdoc::parser::rd#scan()","rdoc::parser::ruby#scan()","rdoc::parser::simple#scan()","string#scan()","stringscanner#scan()","racc::grammarfilescanner#scan_action()","syntaxsuggest::aroundblockscan#scan_adjacent_indent()","csv::parser::inputsscanner#scan_all()","racc::grammarfilescanner#scan_error!()","stringscanner#scan_full()","syntaxsuggest::aroundblockscan#scan_neighbors()","racc::grammarfilescanner#scan_quoted()","irb::color::symbolstate#scan_token()","stringscanner#scan_until()","syntaxsuggest::aroundblockscan#scan_while()","fiber::schedule()","fiber::scheduler()","uri::generic#scheme=()","uri::scheme_list()","uri::ldap#scope()","uri::ldap#scope=()","didyoumean::classnamechecker#scopes()","irb::colorprinter::screen_width()","reline::lineeditor::dialogprocscope#screen_width()","rubyvm::abstractsyntaxtree::node#script_lines()","rubyvm::instructionsequence#script_lines()","io#scroll_backward()","reline::ansi::scroll_down()","reline::generalio::scroll_down()","reline::lineeditor#scroll_down()","reline::windows::scroll_down()","io#scroll_forward()","cgi::htmlextension#scrolling_list()","string#scrub()","string#scrub!()","openssl::kdf::scrypt()","irb::jobmanager#search()","optionparser::list#search()","optionparser::search_const()","encoding::converter::search_convpath()","irb::locale#search_file()","gem::resolver#search_for()","gem::resolver::molinillo::delegates::specificationprovider#search_for()","gem::resolver::molinillo::specificationprovider#search_for()","gem::specfetcher#search_for_dependency()","stringscanner#search_full()","reline::lineeditor#search_next_char()","reline::lineeditor#search_prev_char()","rdoc::classmodule#search_record()","rdoc::methodattr#search_record()","rdoc::toplevel#search_record()","datetime#sec()","time#sec()","datetime#sec_fraction()","datetime#second()","datetime#second_fraction()","rdoc::codeobject#section()","rdoc::context#section_contents()","openssl::config#sections()","rdoc::context#sections()","cgi::cookie#secure=()","openssl::secure_compare()","openssl::ssl::sslcontext#security_level()","openssl::ssl::sslcontext#security_level=()","rdoc::methodattr#see()","openssl::pkey::ec::group#seed()","openssl::random::seed()","random#seed()","random::seed()","openssl::pkey::ec::group#seed=()","argf#seek()","dir#seek()","gem::package::tarreader#seek()","gem::package::tarreader::entry#seek()","io#seek()","stringio#seek()","array#select()","env::select()","enumerable#select()","enumerator::lazy#select()","hash#select()","io::select()","kernel#select()","ractor::select()","struct#select()","uri::generic#select()","yaml::dbm#select()","array#select!()","env::select!()","hash#select!()","set#select!()","tracepoint#self()","reline::lineeditor#self_insert()","bundler::self_manager()","racc::sym#self_null?()","basicsocket#send()","object#send()","ractor#send()","udpsocket#send()","net::http#send_entity()","gem::commands::pushcommand#send_gem()","unixsocket#send_io()","gem::commands::ownercommand#send_owner_request()","gem::commands::pushcommand#send_push_request()","net::http#send_request()","net::httpgenericrequest#send_request_with_body()","net::httpgenericrequest#send_request_with_body_data()","net::httpgenericrequest#send_request_with_body_stream()","irb::frame::sender()","basicsocket#sendmsg()","basicsocket#sendmsg_nonblock()","racc::grammar::definitionenv#separated_by()","racc::grammar::definitionenv#separated_by1()","optionparser#separator()","pp::ppmethods#seplist()","racc::grammar::definitionenv#seq()","psych::coder#seq=()","psych::nodes::node#sequence?()","psych::nodes::sequence#sequence?()","openssl::ocsp::certificateid#serial()","openssl::pkcs7::recipientinfo#serial()","openssl::pkcs7::signerinfo#serial()","openssl::x509::certificate#serial()","openssl::x509::revoked#serial()","openssl::x509::certificate#serial=()","openssl::x509::revoked#serial=()","openssl::timestamp::tokeninfo#serial_number()","racc::sym#serialize()","drb::extservmanager#service()","openssl::ssl::sslsocket#session()","openssl::ssl::sslsocket#session=()","openssl::ssl::sslcontext#session_add()","openssl::ssl::sslcontext#session_cache_mode()","openssl::ssl::sslcontext#session_cache_mode=()","openssl::ssl::sslcontext#session_cache_size()","openssl::ssl::sslcontext#session_cache_size=()","openssl::ssl::sslcontext#session_cache_stats()","openssl::ssl::sslsocket#session_get_cb()","openssl::ssl::sslsocket#session_new_cb()","openssl::ssl::sslcontext#session_remove()","openssl::ssl::sslsocket#session_reused?()","ipaddr#set()","racc::states#set_accept()","gem::configfile#set_api_key()","gem::gemcutterutilities#set_api_key()","uri::ldap#set_attributes()","exception#set_backtrace()","optionparser::parseerror#set_backtrace()","openssl::bn#set_bit!()","gem::configfile#set_config_file_name()","rdoc::context#set_constant_visibility_for()","net::httpheader#set_content_type()","openssl::pkey::rsa#set_crt_params()","fiddle::cstructentity#set_ctypes()","fiddle::cunionentity#set_ctypes()","rdoc::context#set_current_section()","reline::lineeditor::dialog#set_cursor_pos()","reline::lineeditor::dialogprocscope#set_cursor_pos()","net::http#set_debug_output()","openssl::engine#set_default()","reline::ansi::set_default_key_bindings()","reline::generalio::set_default_key_bindings()","reline::windows::set_default_key_bindings()","reline::ansi::set_default_key_bindings_comprehensive_list()","reline::ansi::set_default_key_bindings_terminfo()","openssl::x509::store#set_default_paths()","logger::logdevice#set_dev()","reline::lineeditor::dialogprocscope#set_dialog()","zlib::deflate#set_dictionary()","zlib::inflate#set_dictionary()","uri::ldap#set_dn()","argf#set_encoding()","io#set_encoding()","stringio#set_encoding()","io#set_encoding_by_bom()","stringio#set_encoding_by_bom()","psych::treebuilder#set_end_location()","erb#set_eoutvar()","rdoc::erbio#set_eoutvar()","rdoc::erbpartial#set_eoutvar()","getoptlong#set_error()","uri::ldap#set_extensions()","openssl::pkey::rsa#set_factors()","net::httpheader#set_field()","uri::ldap#set_filter()","openssl::bn#set_flags()","net::httpheader#set_form()","net::httpheader#set_form_data()","gem::commands::execcommand#set_gem_exec_install_paths()","openssl::pkey::ec::group#set_generator()","uri::mailto#set_headers()","uri::file#set_host()","uri::generic#set_host()","openssl::pkey::dh#set_key()","openssl::pkey::dsa#set_key()","openssl::pkey::rsa#set_key()","reline::lineeditor::dialogprocscope#set_key()","syntaxsuggest::codeline#set_kw_end()","syntaxsuggest::lexvalue#set_kw_end()","irb::context#set_last_value()","psych::treebuilder#set_location()","reline::lineeditor#set_mark()","openssl::ssl::sslcontext#set_minmax_proto_version()","uri::generic#set_opaque()","optionparser::parseerror#set_option()","getoptlong#set_options()","openstruct#set_ostruct_member_value!()","openssl::ssl::sslcontext#set_params()","uri::file#set_password()","uri::generic#set_password()","reline::lineeditor#set_pasting_state()","uri::ftp#set_path()","uri::generic#set_path()","gem::resolver::molinillo::dependencygraph#set_payload()","gem::resolver::molinillo::dependencygraph::log#set_payload()","uri::file#set_port()","uri::generic#set_port()","openssl::pkey::dh#set_pqg()","openssl::pkey::dsa#set_pqg()","net::httpheader#set_range()","fiber::set_scheduler()","uri::generic#set_scheme()","uri::ldap#set_scope()","readline::set_screen_size()","reline::ansi::set_screen_size()","reline::generalio::set_screen_size()","reline::windows::set_screen_size()","reline::lineeditor#set_signal_handlers()","psych::treebuilder#set_start_location()","io::buffer#set_string()","racc::statetransitiontablegenerator#set_table()","uri::mailto#set_to()","openssl::pkey::ec::point#set_to_infinity!()","kernel#set_trace_func()","thread#set_trace_func()","uri::ftp#set_typecode()","uri::file#set_user()","uri::generic#set_user()","uri::file#set_userinfo()","uri::generic#set_userinfo()","io::buffer#set_value()","io::buffer#set_values()","rdoc::context#set_visibility_for()","reline::ansi::set_winch_handler()","reline::generalio::set_winch_handler()","reline::windows::set_winch_handler()","string#setbyte()","reline::windows::setconsolemode()","process::sys::setegid()","process::sys::seteuid()","process::sys::setgid()","file::setgid?()","file::stat#setgid?()","filetest#setgid?()","pathname#setgid?()","etc::setgrent()","process::setpgid()","process::setpgrp()","process::setpriority()","process::setproctitle()","win32ole#setproperty()","etc::setpwent()","process::sys::setregid()","process::sys::setresgid()","process::sys::setresuid()","process::sys::setreuid()","process::sys::setrgid()","process::setrlimit()","process::sys::setruid()","process::setsid()","basicsocket#setsockopt()","openssl::ssl::socketforwarder#setsockopt()","bundler::settings()","process::sys::setuid()","file::setuid?()","file::stat#setuid?()","filetest#setuid?()","pathname#setuid?()","bundler::setup()","coverage::setup()","openssl::ssl::sslcontext#setup()","rdoc::rubygemshook#setup()","rdoc::rubygemshook#setup()","drb::drbsslsocket::sslconfig#setup_certificate()","rdoc::options#setup_generator()","rdoc::rdoc#setup_output_dir()","gem::package#setup_signer()","drb::drbsslsocket::sslconfig#setup_ssl_context()","reline::terminfo::setupterm()","logger#sev_threshold=()","reline::config#seven_bit_encoding?()","ripper::sexp()","ripper::sexp_raw()","gem::resolver::molinillo::dependencygraph::vertex#shallow_eql?()","ractor::shareable?()","io::buffer#shared?()","pp::sharing_detection()","pp::sharing_detection=()","gem::commands::setupcommand#shebang()","gem::installer#shebang()","racc::parserfilegenerator#shebang()","shellwords::shellescape()","shellwords#shellescape()","string#shellescape()","array#shelljoin()","shellwords::shelljoin()","shellwords#shelljoin()","shellwords#shellsplit()","shellwords::shellsplit()","string#shellsplit()","shellwords::shellwords()","shellwords#shellwords()","array#shift()","csv#shift()","env::shift()","gem::requestset::lockfile::tokenizer#shift()","hash#shift()","racc::actiontable#shift()","thread::queue#shift()","thread::sizedqueue#shift()","yaml::dbm#shift()","logger::logdevice#shift_log_age()","logger::logdevice#shift_log_period()","racc::actiontable#shift_n()","openssl::asn1::objectid#short_name()","racc::states#should_report_srconflict?()","racc::sym#should_terminal()","racc::sym#should_terminal?()","reline::ansi::show_cursor()","reline::generalio::show_cursor()","reline::windows::show_cursor()","rdoc::servlet#show_documentation()","gem::commands::contentscommand#show_files()","gem::queryutils#show_gems()","gem::command#show_help()","gem::queryutils#show_local_gems()","gem::command#show_lookup_failure()","reline::lineeditor#show_menu()","gem::commands::ownercommand#show_owners()","gem::queryutils#show_prereleases?()","gem::commands::setupcommand#show_release_notes()","gem::queryutils#show_remote_gems()","optionparser::show_version()","array#shuffle()","array#shuffle!()","basicsocket#shutdown()","drb::drbserver#shutdown()","openssl::ssl::sslserver#shutdown()","rinda::ringserver#shutdown()","process::gid::sid_available?()","process::uid::sid_available?()","bigdecimal#sign()","gem::commands::certcommand#sign()","gem::s3urisigner#sign()","gem::security::sign()","gem::security::signer#sign()","openssl::netscape::spki#sign()","openssl::ocsp::basicresponse#sign()","openssl::ocsp::request#sign()","openssl::pkcs7::sign()","openssl::pkey::pkey#sign()","openssl::x509::crl#sign()","openssl::x509::certificate#sign()","openssl::x509::request#sign()","gem::gemcutterutilities#sign_in()","openssl::pkey::rsa#sign_pss()","openssl::pkey::pkey#sign_raw()","monitormixin::conditionvariable#signal()","rinda::waittemplateentry#signal()","thread::conditionvariable#signal()","irb::irb#signal_handle()","irb::irb#signal_status()","process::status#signaled?()","signal::signame()","rdoc::tomdoc::signature()","openssl::x509::crl#signature_algorithm()","openssl::x509::certificate#signature_algorithm()","openssl::x509::request#signature_algorithm()","openssl::ocsp::request#signed?()","openssl::pkcs7::signerinfo#signed_time()","openssl::pkcs7#signers()","signalexception#signo()","gem::util::silent_system()","reline::lineeditor#simplified_rendering?()","bigmath#sin()","math::sin()","singleforwardable#single_delegate()","prettyprint::singleline_format()","pp::singleline_pp()","object#singleton_class()","module#singleton_class?()","object#singleton_method()","basicobject#singleton_method_added()","basicobject#singleton_method_removed()","basicobject#singleton_method_undefined()","object#singleton_methods()","math::sinh()","array#size()","digest::instance#size()","env::size()","enumerator#size()","enumerator::arithmeticsequence#size()","enumerator::chain#size()","enumerator::product#size()","fiddle::cstructentity::size()","fiddle::cunionentity::size()","fiddle::pointer#size()","file::size()","file#size()","file::stat#size()","filetest#size()","gem::availableset#size()","gem::package::tarreader::entry#size()","gem::resolver::requirementlist#size()","hash#size()","io::buffer#size()","integer#size()","matchdata#size()","objectspace::weakmap#size()","pathname#size()","racc::grammar#size()","racc::iset#size()","racc::rule#size()","racc::states#size()","range#size()","rinda::tuple#size()","rinda::tupleentry#size()","set#size()","string#size()","stringio#size()","stringscanner#size()","struct#size()","symbol#size()","tempfile#size()","thread::queue#size()","thread::sizedqueue#size()","fiddle::pointer#size=()","file::size?()","file::stat#size?()","filetest#size?()","pathname#size?()","io::buffer::size_of()","win32ole::method#size_opt_params()","win32ole::method#size_params()","fiddle::importer#sizeof()","argf#skip()","gem::requestset::lockfile::tokenizer#skip()","stringscanner#skip()","syntaxsuggest::aroundblockscan#skip()","csv#skip_blanks?()","csv::parser#skip_blanks?()","racc::grammarfilescanner#skip_comment()","gem::deprecate::skip_during()","gem::deprecate#skip_during()","rdoc::parser::ruby#skip_for_variable()","csv::parser#skip_line?()","csv#skip_lines()","csv::parser#skip_lines()","rdoc::parser::ruby#skip_method()","syntaxsuggest::pathnamefrommessage#skip_missing_file_name?()","csv::parser#skip_needless_lines()","rdoc::parser::ruby#skip_optional_do_after_expression()","rdoc::parser::ruby#skip_parentheses()","rdoc::parser::rubytools#skip_tkspace()","rdoc::parser::ruby#skip_tkspace_comment()","rdoc::parser::rubytools#skip_tkspace_without_nl()","stringscanner#skip_until()","kernel#sleep()","mutex_m#sleep()","thread::mutex#sleep()","array#slice()","env::slice()","hash#slice()","io::buffer#slice()","ripper::slice()","string#slice()","symbol#slice()","array#slice!()","string#slice!()","enumerable#slice_after()","enumerator::lazy#slice_after()","enumerable#slice_before()","enumerator::lazy#slice_before()","enumerable#slice_when()","enumerator::lazy#slice_when()","openssl::asn1::objectid#sn()","rdoc::text#snippet()","gem::ext::cargobuilder#so_ext()","socket::sockaddr_in()","socket::sockaddr_un()","file::socket?()","file::stat#socket?()","filetest#socket?()","pathname#socket?()","socket::socketpair()","unixsocket::socketpair()","addrinfo#socktype()","gem::solaris_platform?()","array#sort()","enumerable#sort()","array#sort!()","enumerable#sort_by()","array#sort_by!()","gem::resolver#sort_dependencies()","gem::resolver::molinillo::delegates::specificationprovider#sort_dependencies()","gem::resolver::molinillo::specificationprovider#sort_dependencies()","gem::specification#sort_obj()","gem::platform::sort_priority()","rdoc::context#sort_sections()","gem::availableset#sorted()","syntaxsuggest::priorityqueue#sorted()","gem::requestset#sorted_requests()","gem::requestset::gemdependencyapi#source()","gem::resolver::installedspecification#source()","json::ext::parser#source()","rdoc::store#source()","regexp#source()","rubyvm::abstractsyntaxtree::node#source()","racc::useraction#source?()","gem::source_date_epoch()","gem::source_date_epoch_string()","encoding::converter#source_encoding()","encoding::invalidbytesequenceerror#source_encoding()","encoding::undefinedconversionerror#source_encoding()","encoding::invalidbytesequenceerror#source_encoding_name()","encoding::undefinedconversionerror#source_encoding_name()","irb::irbloader#source_file()","gem::availableset#source_for()","binding#source_location()","method#source_location()","proc#source_location()","unboundmethod#source_location()","win32ole::type#source_ole_types()","gem::basicspecification#source_paths()","racc::useraction::source_text()","gem::sources()","gem::sources=()","json::ext::generator::state#space()","json::ext::generator::state#space=()","json::ext::generator::state#space_before()","json::ext::generator::state#space_before=()","kernel#spawn()","pty::spawn()","process::spawn()","gem::installer#spec()","gem::package#spec()","gem::package::old#spec()","gem::resolver::lockspecification#spec()","gem::queryutils#spec_authors()","gem::spec_cache_dir()","gem::specification#spec_dir()","gem::installer#spec_file()","gem::specification#spec_file()","gem::commands::contentscommand#spec_for()","gem::commands::opencommand#spec_for()","gem::specfetcher#spec_for_dependency()","gem::requestset::lockfile#spec_groups()","gem::queryutils#spec_homepage()","gem::queryutils#spec_license()","gem::queryutils#spec_loaded_from()","gem::nametuple#spec_name()","gem::specification#spec_name()","gem::commands::lockcommand#spec_path()","gem::queryutils#spec_platforms()","gem::dependencylist#spec_predecessors()","gem::queryutils#spec_summary()","readline::special_prefixes()","readline::special_prefixes=()","reline::core#special_prefixes=()","gem::dependency#specific?()","gem::requirement#specific?()","gem::command::specific_extra_args()","gem::command::specific_extra_args_hash()","gem::requestset#specs()","gem::source::git#specs()","gem::requestset#specs_in()","bundler::specs_path()","gem::queryutils#specs_type()","didyoumean::correctable#spell_checker()","gem::unknowncommandspellchecker#spell_checker()","didyoumean::spell_checkers()","bigdecimal#split()","file::split()","pathname#split()","shellwords::split()","string#split()","uri::split()","uri::rfc2396_parser#split()","uri::rfc2396_parser#split()","fiddle::cparser#split_arguments()","reline::lineeditor#split_by_width()","reline::unicode::split_by_width()","gem::ext::cargobuilder#split_flags()","gem::pathsupport#split_gem_path()","uri::generic#split_path()","uri::generic#split_userinfo()","errorhighlight::spot()","errorhighlight::spotter#spot()","errorhighlight::spotter#spot_attrasgn_for_args()","errorhighlight::spotter#spot_attrasgn_for_name()","errorhighlight::spotter#spot_call_for_args()","errorhighlight::spotter#spot_call_for_name()","errorhighlight::spotter#spot_colon2()","errorhighlight::spotter#spot_fcall_for_args()","errorhighlight::spotter#spot_fcall_for_name()","errorhighlight::spotter#spot_op_asgn1_for_args()","errorhighlight::spotter#spot_op_asgn1_for_name()","errorhighlight::spotter#spot_op_asgn2_for_args()","errorhighlight::spotter#spot_op_asgn2_for_name()","errorhighlight::spotter#spot_op_cdecl()","errorhighlight::spotter#spot_opcall_for_args()","errorhighlight::spotter#spot_opcall_for_name()","errorhighlight::spotter#spot_vcall()","kernel#sprintf()","openssl::bn#sqr()","bigdecimal#sqrt()","bigmath#sqrt()","integer::sqrt()","math::sqrt()","string#squeeze()","string#squeeze!()","racc::state#sr_conflict()","kernel#srand()","random::srand()","win32ole::type#src_type()","racc::states#srconflict_exist?()","openssl::ssl::sslsocket#ssl_version()","openssl::ssl::sslcontext#ssl_version=()","net::http#sspi_auth()","net::http#sspi_auth?()","coverage::start()","date#start()","gc::start()","irb::start()","net::http::start()","net::http#start()","psych::streaming#start()","psych::visitors::yamltree#start()","thread::start()","syntaxsuggest::aroundblockscan#start_at_next_line()","rdoc::tokenstream#start_collecting_tokens()","rdoc::codeobject#start_doc()","psych::emitter#start_document()","psych::handler#start_document()","psych::treebuilder#start_document()","rinda::tuplespace#start_keeper()","psych::emitter#start_mapping()","psych::handler#start_mapping()","reline::generalio::start_pasting()","gem::resolver::molinillo::resolver::resolution#start_resolution()","csv::parser#start_row()","psych::emitter#start_sequence()","psych::handler#start_sequence()","drb#start_service()","drb::start_service()","psych::emitter#start_stream()","psych::handler#start_stream()","psych::treebuilder#start_stream()","racc::grammar#start_symbol=()","reline::keystroke#start_with?()","string#start_with?()","symbol#start_with?()","net::http#started?()","csv#stat()","file::stat()","gc::stat()","io#stat()","pathname#stat()","rubyvm::stat()","tracepoint::stat()","gc::stat_heap()","coverage::state()","gem::resolver::molinillo::resolver::resolution#state()","openssl::ssl::sslsocket#state()","ripper#state()","ripper::filter#state()","gem::state_file()","gem::configfile#state_file_name()","gem::configfile#state_file_writable?()","gem::state_home()","racc::grammar#state_transition_table()","racc::parserfilegenerator#state_transition_table()","racc::states#state_transition_table()","racc::grammar#states()","rubyvm::yjit::stats_enabled?()","openssl::ocsp::basicresponse#status()","openssl::ocsp::response#status()","openssl::timestamp::response#status()","pty::childexited#status()","systemexit#status()","thread#status()","openssl::random::status?()","openssl::ocsp::response#status_string()","openssl::timestamp::response#status_text()","cgi#stdinput()","cgi#stdoutput()","date#step()","enumerator::arithmeticsequence#step()","numeric#step()","range#step()","file::sticky?()","file::stat#sticky?()","filetest#sticky?()","pathname#sticky?()","openssl::ssl::sslsocket#stop()","thread::stop()","syntaxsuggest::pathnamefrommessage#stop?()","thread#stop?()","syntaxsuggest::aroundblockscan#stop_after_kw()","rdoc::codeobject#stop_doc()","drb::drbconn::stop_pool()","drb::stop_service()","drb#stop_service()","drb::drbserver#stop_service()","drb::extserv#stop_service()","process::status#stopped?()","process::status#stopsig()","fiber#storage()","fiber#storage=()","env::store()","hash#store()","yaml::dbm#store()","rdoc::anymethod#store=()","rdoc::classmodule#store=()","rdoc::codeobject#store=()","rdoc::constant#store=()","rdoc::methodattr#store=()","rdoc::mixin#store=()","rdoc::rdoc#store=()","rdoc::servlet#store_for()","psych::nodes::node#stream?()","psych::nodes::stream#stream?()","zlib::zstream#stream_end?()","psych::handler#streaming?()","gc::stress()","gc::stress=()","date#strftime()","datetime#strftime()","time#strftime()","base64#strict_decode64()","base64#strict_encode64()","gem::package::tarheader::strict_oct()","rdoc::markdown#strike()","matchdata#string()","stringio#string()","stringscanner#string()","stringio#string=()","stringscanner#string=()","racc::parserfilegenerator#string_list()","racc::sym#string_symbol?()","string#strip()","string#strip!()","rdoc::text#strip_hashes()","rdoc::text#strip_newlines()","rdoc::text#strip_stars()","csv::parser#strip_value()","rdoc::markdown#strong()","tsort#strongly_connected_components()","tsort::strongly_connected_components()","date::strptime()","datetime::strptime()","time::strptime()","fiddle::importer#struct()","gem::basicspecification#stubbed?()","gem::specification#stubbed?()","gem::specification::stubs()","gem::specification::stubs_for()","bigdecimal#sub()","irb::vec#sub()","kernel#sub()","pathname#sub()","string#sub()","string#sub!()","gem::resolver::molinillo::resolver::resolution::unwinddetails#sub_dependencies_to_avoid()","pathname#sub_ext()","net::httpheader#sub_type()","class#subclasses()","resolv::dns::name#subdomain_of?()","openssl::x509::certificate#subject()","openssl::x509::request#subject()","openssl::x509::certificate#subject=()","openssl::x509::request#subject=()","openssl::x509::extensionfactory#subject_certificate=()","openssl::x509::extension::subjectkeyidentifier#subject_key_identifier()","openssl::x509::extensionfactory#subject_request=()","cgi::htmlextension#submit()","time#subsec()","set#subset?()","set#subtract()","date#succ()","ipaddr#succ()","integer#succ()","string#succ()","symbol#succ()","string#succ!()","process::status#success?()","systemexit#success?()","gem::resolver::molinillo::dependencygraph::vertex#successors()","gem::suffix_pattern()","gem::suffix_regexp()","gem::suffixes()","gem::specfetcher#suggest_gems_from_name()","gem::licenses::suggestions()","array#sum()","enumerable#sum()","string#sum()","optionparser#summarize()","optionparser::list#summarize()","optionparser::switch#summarize()","rdoc::stats#summary()","gem::specification#summary=()","date#sunday?()","time#sunday?()","method#super_method()","unboundmethod#super_method()","class#superclass()","rdoc::classmodule#superclass()","rdoc::normalmodule#superclass()","rdoc::classmodule#superclass=()","rdoc::anymethod#superclass_method()","set#superset?()","net::httpgenericrequest#supply_default_content_type()","coverage::supported?()","rdoc::codeobject#suppress()","gem::commands::execcommand#suppress_always_install()","rdoc::codeobject#suppressed?()","coverage::suspend()","irb::irb#suspend_context()","irb::irb#suspend_input_method()","irb::irb#suspend_name()","irb::irb#suspend_workspace()","string#swapcase()","symbol#swapcase()","string#swapcase!()","irb::jobmanager#switch()","process::gid::switch()","process::uid::switch()","optionparser::switch#switch_name()","fiddle::compositehandler#sym()","fiddle::handle#sym()","fiddle::handle::sym()","fiddle::handle::sym_defined?()","fiddle::handle#sym_defined?()","racc::parserfilegenerator#sym_int_hash()","irb::context#symbol_alias?()","racc::logfilegenerator#symbol_locations()","psych::classloader::restricted#symbolize()","racc::grammar#symbols()","file::symlink()","fileutils::symlink()","fileutils#symlink()","file::symlink?()","file::stat#symlink?()","filetest#symlink?()","gem::package::tarreader::entry#symlink?()","pathname#symlink?()","io#sync()","stringio#sync()","zlib::gzipfile#sync()","zlib::inflate#sync()","io#sync=()","stringio#sync=()","zlib::gzipfile#sync=()","zlib::inflate#sync_point?()","monitor#synchronize()","monitormixin#synchronize()","thread::mutex#synchronize()","kernel#syntax_suggest_original_load()","kernel#syntax_suggest_original_require()","kernel#syntax_suggest_original_require_relative()","socket#sysaccept()","tcpserver#sysaccept()","unixserver#sysaccept()","kernel#syscall()","openssl::ssl::sslsocket#sysclose()","etc::sysconf()","etc::sysconfdir()","syslog::logger::syslog()","syslog::logger::syslog=()","io::sysopen()","pathname#sysopen()","io#sysread()","io::generic_readable#sysread()","openssl::ssl::sslsocket#sysread()","openssl::ssl::sslsocket#sysread_nonblock()","io#sysseek()","openssl::pkey::dsa#syssign()","kernel#system()","bundler::system_bindir()","etc::systmpdir()","openssl::pkey::dsa#sysverify()","io#syswrite()","openssl::ssl::sslsocket#syswrite()","openssl::ssl::sslsocket#syswrite_nonblock()","csv::table()","gem::resolver::molinillo::dependencygraph#tag()","gem::resolver::molinillo::dependencygraph::log#tag()","uncaughtthrowerror#tag()","pathname#taint()","array#take()","enumerable#take()","enumerator::lazy#take()","ractor#take()","rinda::tuplespace#take()","rinda::tuplespaceproxy#take()","reline::unicode::take_range()","array#take_while()","enumerable#take_while()","enumerator::lazy#take_while()","syntaxsuggest::cleandocument#take_while_including()","enumerable#tally()","math::tan()","math::tanh()","kernel#tap()","gem::commands::setupcommand#target_bin_path()","delegator#target_respond_to?()","addrinfo::tcp()","socket::tcp()","socket::tcp_server_loop()","socket::tcp_server_sockets()","argf#tell()","dir#tell()","io#tell()","stringio#tell()","zlib::gzipreader#tell()","zlib::gzipwriter#tell()","rdoc::options#template_dir_for()","racc::sym#term=()","psych::visitors::depthfirst#terminal()","racc::sym#terminal?()","racc::symboltable#terminals()","getoptlong#terminate()","optionparser#terminate()","optionparser::terminate()","stringscanner#terminate()","thread#terminate()","gem::mockgemui#terminate_interaction()","gem::streamui#terminate_interaction()","gem::userinteraction#terminate_interaction()","gem::mockgemui#terminated?()","getoptlong#terminated?()","process::status#termsig()","kernel#test()","irb::colorprinter#text()","prettyprint#text()","prettyprint::singleline#text()","rdoc::comment#text=()","rdoc::toplevel#text?()","cgi::htmlextension#text_field()","cgi::htmlextension#textarea()","kernel#then()","gem::basicspecification#this()","openssl::ocsp::singleresponse#this_update()","drb::thread()","drb#thread()","irb::jobmanager#thread()","thread#thread_variable?()","thread#thread_variable_get()","thread#thread_variable_set()","thread#thread_variables()","kernel#throw()","date#thursday?()","time#thursday?()","reline::terminfo::tigetflag()","reline::terminfo::tigetnum()","reline::terminfo::tigetstr()","gem::time()","openssl::ssl::session#time()","openssl::x509::revoked#time()","win32::registry::time2wtime()","openssl::ssl::session#time=()","openssl::x509::revoked#time=()","openssl::x509::store#time=()","openssl::x509::storecontext#time=()","io#timeout()","openssl::ssl::session#timeout()","regexp::timeout()","regexp#timeout()","timeout#timeout()","timeout::timeout()","io#timeout=()","openssl::ssl::session#timeout=()","regexp::timeout=()","fiber::scheduler#timeout_after()","resolv::dns#timeouts=()","integer#times()","process::times()","socket::ancillarydata#timestamp()","reline::terminfo::tiparm()","reline::terminfo::stringwithtiparm#tiparm()","rdoc::store#title()","rdoc::store#title=()","rdoc::parser::ruby#tk_nl?()","bundler::tmp()","openssl::ssl::sslcontext#tmp_dh=()","openssl::ssl::sslsocket#tmp_dh_callback()","bundler::tmp_home_path()","openssl::ssl::sslsocket#tmp_key()","dir::tmpdir()","uri::mailto#to=()","argf#to_a()","array#to_a()","benchmark::tms#to_a()","csv::table#to_a()","env::to_a()","enumerable#to_a()","enumerator::lazy#to_a()","gem::list#to_a()","gem::nametuple#to_a()","gem::platform#to_a()","gem::requestset::lockfile::tokenizer#to_a()","gem::sourcelist#to_a()","hash#to_a()","matchdata#to_a()","nilclass#to_a()","openssl::x509::extension#to_a()","openssl::x509::name#to_a()","optionparser#to_a()","racc::iset#to_a()","range#to_a()","rinda::ringfinger::to_a()","rinda::ringfinger#to_a()","ripper::lexer::elem#to_a()","rubyvm::instructionsequence#to_a()","set#to_a()","struct#to_a()","syntaxsuggest::lexall#to_a()","syntaxsuggest::priorityengulfqueue#to_a()","syntaxsuggest::priorityqueue#to_a()","time#to_a()","yaml::dbm#to_a()","array#to_ary()","gem::sourcelist#to_ary()","gem::nametuple::to_basic()","rubyvm::instructionsequence#to_binary()","integer#to_bn()","openssl::bn#to_bn()","openssl::pkey::ec::point#to_bn()","complex#to_c()","nilclass#to_c()","numeric#to_c()","string#to_c()","csv::row#to_csv()","csv::table#to_csv()","bigdecimal#to_d()","complex#to_d()","float#to_d()","integer#to_d()","nilclass#to_d()","rational#to_d()","string#to_d()","date#to_date()","datetime#to_date()","time#to_date()","date#to_datetime()","datetime#to_datetime()","time#to_datetime()","openssl::asn1::asn1data#to_der()","openssl::asn1::constructive#to_der()","openssl::asn1::primitive#to_der()","openssl::netscape::spki#to_der()","openssl::ocsp::basicresponse#to_der()","openssl::ocsp::certificateid#to_der()","openssl::ocsp::request#to_der()","openssl::ocsp::response#to_der()","openssl::ocsp::singleresponse#to_der()","openssl::pkcs12#to_der()","openssl::pkcs7#to_der()","openssl::pkey::dh#to_der()","openssl::pkey::dsa#to_der()","openssl::pkey::ec#to_der()","openssl::pkey::ec::group#to_der()","openssl::pkey::rsa#to_der()","openssl::ssl::session#to_der()","openssl::timestamp::request#to_der()","openssl::timestamp::response#to_der()","openssl::timestamp::tokeninfo#to_der()","openssl::x509::attribute#to_der()","openssl::x509::crl#to_der()","openssl::x509::certificate#to_der()","openssl::x509::extension#to_der()","openssl::x509::name#to_der()","openssl::x509::request#to_der()","openssl::x509::revoked#to_der()","bigdecimal#to_digits()","gem::resolver::molinillo::dependencygraph#to_dot()","enumerator::lazy#to_enum()","object#to_enum()","bigdecimal#to_f()","complex#to_f()","float#to_f()","integer#to_f()","nilclass#to_f()","rational#to_f()","string#to_f()","time#to_f()","gem::basicspecification#to_fullpath()","array#to_h()","benchmark::tms#to_h()","csv::row#to_h()","data#to_h()","env::to_h()","enumerable#to_h()","fiddle::cstruct#to_h()","hash#to_h()","json::ext::generator::state#to_h()","nilclass#to_h()","openssl::x509::extension#to_h()","openstruct#to_h()","struct#to_h()","win32ole::record#to_h()","csv::row#to_hash()","env::to_hash()","hash#to_hash()","json::ext::generator::state#to_hash()","json::genericobject#to_hash()","net::httpheader#to_hash()","yaml::dbm#to_hash()","rdoc::text#to_html()","rdoc::tokenstream::to_html()","argf#to_i()","bigdecimal#to_i()","csv#to_i()","complex#to_i()","fiddle::closure#to_i()","fiddle::function#to_i()","fiddle::handle#to_i()","fiddle::pointer#to_i()","float#to_i()","io#to_i()","ipaddr#to_i()","integer#to_i()","nilclass#to_i()","openssl::bn#to_i()","process::status#to_i()","rational#to_i()","string#to_i()","time#to_i()","drb::to_id()","drb#to_id()","drb::drbidconv#to_id()","drb::drbidconv#to_id()","drb::drbserver#to_id()","bigdecimal#to_int()","fiddle::pointer#to_int()","float#to_int()","integer#to_int()","numeric#to_int()","openssl::bn#to_int()","argf#to_io()","csv#to_io()","io#to_io()","openssl::ssl::sslserver#to_io()","zlib::gzipfile#to_io()","bigdecimal#to_json()","complex#to_json()","date#to_json()","datetime#to_json()","exception#to_json()","json::genericobject#to_json()","openstruct#to_json()","psych::to_json()","range#to_json()","rational#to_json()","regexp#to_json()","set#to_json()","struct#to_json()","symbol#to_json()","time#to_json()","uri::mailto#to_mailtext()","resolv::ipv4#to_name()","resolv::ipv6#to_name()","drb#to_obj()","drb::to_obj()","drb::drbidconv#to_obj()","drb::drbidconv#to_obj()","drb::drbserver#to_obj()","openssl::pkey::ec::point#to_octet_string()","win32::sspi::identity#to_p()","win32::sspi::securitybuffer#to_p()","win32::sspi::securityhandle#to_p()","win32::sspi::timestamp#to_p()","dir#to_path()","io#to_path()","pathname#to_path()","openssl::netscape::spki#to_pem()","openssl::pkcs7#to_pem()","openssl::pkey::dh#to_pem()","openssl::pkey::dsa#to_pem()","openssl::pkey::ec#to_pem()","openssl::pkey::ec::group#to_pem()","openssl::pkey::rsa#to_pem()","openssl::ssl::session#to_pem()","openssl::x509::crl#to_pem()","openssl::x509::certificate#to_pem()","openssl::x509::request#to_pem()","enumerator::yielder#to_proc()","fiddle::function#to_proc()","hash#to_proc()","method#to_proc()","proc#to_proc()","symbol#to_proc()","fiddle::handle#to_ptr()","fiddle::pointer::to_ptr()","fiddle::structarray#to_ptr()","bigdecimal#to_r()","complex#to_r()","float#to_r()","integer#to_r()","nilclass#to_r()","rational#to_r()","string#to_r()","time#to_r()","ipaddr#to_range()","gem::availableset#to_request_set()","uri::mailto#to_rfc822text()","gem::specification#to_ruby()","psych::nodes::node#to_ruby()","gem::specification#to_ruby_for_cache()","argf#to_s()","addrinfo#to_s()","array#to_s()","benchmark::tms#to_s()","bigdecimal#to_s()","cgi::cookie#to_s()","csv::row#to_s()","csv::table#to_s()","complex#to_s()","data#to_s()","date#to_s()","datetime#to_s()","didyoumean::correctable#to_s()","digest::instance#to_s()","env::to_s()","encoding#to_s()","errorhighlight::coreext#to_s()","exception#to_s()","falseclass#to_s()","fiber#to_s()","fiddle::pointer#to_s()","float#to_s()","gem::platform#to_s()","gem::requestset::lockfile#to_s()","gem::resolver::activationrequest#to_s()","gem::resolver::molinillo::resolver::resolution::possibilityset#to_s()","gem::uri#to_s()","gem::version#to_s()","hash#to_s()","io::buffer#to_s()","ipaddr#to_s()","integer#to_s()","matchdata#to_s()","method#to_s()","module#to_s()","nilclass#to_s()","object#to_s()","openssl::bn#to_s()","openssl::config#to_s()","openssl::hmac#to_s()","openssl::netscape::spki#to_s()","openssl::pkcs7#to_s()","openssl::pkey::dh#to_s()","openssl::pkey::dsa#to_s()","openssl::pkey::rsa#to_s()","openssl::x509::crl#to_s()","openssl::x509::certificate#to_s()","openssl::x509::extension#to_s()","openssl::x509::name#to_s()","openssl::x509::request#to_s()","openstruct#to_s()","optionparser#to_s()","optionparser::parseerror#to_s()","pathname#to_s()","proc#to_s()","process::status#to_s()","racc::grammar#to_s()","racc::iset#to_s()","racc::locationpointer#to_s()","racc::rrconflict#to_s()","racc::rule#to_s()","racc::srconflict#to_s()","racc::sourcetext#to_s()","racc::state#to_s()","racc::states#to_s()","racc::sym#to_s()","ractor#to_s()","range#to_s()","rational#to_s()","regexp#to_s()","reline::history#to_s()","resolv::dns::name#to_s()","ripper::lexer::elem#to_s()","set#to_s()","socket::option#to_s()","string#to_s()","struct#to_s()","symbol#to_s()","syntaxsuggest::cleandocument#to_s()","syntaxsuggest::codeblock#to_s()","syntaxsuggest::codeline#to_s()","thread#to_s()","thread::backtrace::location#to_s()","time#to_s()","trueclass#to_s()","uri::ftp#to_s()","uri::generic#to_s()","uri::mailto#to_s()","unboundmethod#to_s()","uncaughtthrowerror#to_s()","win32ole::method#to_s()","win32ole::param#to_s()","win32ole::type#to_s()","win32ole::typelib#to_s()","win32ole::variable#to_s()","win32::sspi::sspiresult#to_s()","enumerable#to_set()","set#to_set()","addrinfo#to_sockaddr()","gem::basicspecification#to_spec()","gem::dependency#to_spec()","gem::specification#to_spec()","gem::dependency#to_specs()","fiddle::pointer#to_str()","string#to_str()","ipaddr#to_string()","string#to_sym()","symbol#to_sym()","openssl::netscape::spki#to_text()","openssl::pkey::ec::group#to_text()","openssl::pkey::pkey#to_text()","openssl::ssl::session#to_text()","openssl::x509::crl#to_text()","openssl::x509::certificate#to_text()","openssl::x509::request#to_text()","date#to_time()","datetime#to_time()","time#to_time()","exception::to_tty?()","openssl::x509::name#to_utf8()","fiddle::pointer#to_value()","argf#to_write_io()","object#to_yaml()","psych::nodes::node#to_yaml()","date::today()","kconv::toeuc()","kconv#toeuc()","string#toeuc()","kconv#tojis()","kconv::tojis()","string#tojis()","openssl::timestamp::response#token()","ripper#token()","win32::sspi::securitybuffer#token()","gem::uri#token?()","openssl::timestamp::response#token_info()","rdoc::parser::rubytools#token_listener()","rdoc::tokenstream#token_stream()","racc::statetransitiontablegenerator#token_table()","racc::parser#token_to_str()","racc::statetransitiontable#token_value_table()","gem::requestset::lockfile::tokenizer#tokenize()","psych::scalarscanner#tokenize()","rdoc::tomdoc#tokenize()","ripper::tokenize()","rubyvm::abstractsyntaxtree::node#tokens()","rdoc::tokenstream#tokens_to_s()","kconv#tolocale()","kconv::tolocale()","string#tolocale()","rdoc::comment#tomdoc?()","irb::frame#top()","irb::frame::top()","optionparser#top()","optionparser::top()","rdoc::context#top_level()","rdoc::require#top_level()","racc::parserfilegenerator#toplevel?()","irb::locale#toplevel_load()","kconv::tosjis()","kconv#tosjis()","string#tosjis()","zlib::zstream#total_in()","zlib::zstream#total_out()","gc::total_time()","gc::profiler::total_time()","fileutils#touch()","fileutils::touch()","kconv#toutf16()","kconv::toutf16()","string#toutf16()","kconv::toutf32()","kconv#toutf32()","string#toutf32()","kconv::toutf8()","kconv#toutf8()","string#toutf8()","string#tr()","string#tr!()","string#tr_s()","string#tr_s!()","csv::parser::inputsscanner#trace()","net::http#trace()","tracepoint::trace()","rubyvm::yjit::trace_exit_locations_enabled?()","irb::frame#trace_func()","objectspace::trace_object_allocations()","objectspace::trace_object_allocations_clear()","objectspace::trace_object_allocations_debug_start()","objectspace::trace_object_allocations_start()","objectspace::trace_object_allocations_stop()","rubyvm::instructionsequence#trace_points()","kernel#trace_var()","syntaxsuggest::codeline#trailing_slash?()","pstore#transaction()","fiber#transfer()","io::buffer#transfer()","psych::nodes::node#transform()","irb::context#transform_args?()","hash#transform_keys()","hash#transform_keys!()","hash#transform_values()","hash#transform_values!()","openssl::pkey::rsa#translate_padding_mode()","net::http#transport_request()","array#transpose()","racc::states#transpose()","reline::lineeditor#transpose_chars()","reline::lineeditor#transpose_words()","kernel#trap()","signal::trap()","gem::specification#traverse()","openssl::asn1::traverse()","racc::states#traverse()","gem::util::traverse_parents()","psych::visitors::yamltree#tree()","didyoumean::treespellchecker#tree_depth()","bigdecimal#truncate()","file#truncate()","file::truncate()","float#truncate()","integer#truncate()","numeric#truncate()","pathname#truncate()","rational#truncate()","stringio#truncate()","gem::text#truncate_text()","openssl::x509::store#trust=()","openssl::x509::storecontext#trust=()","gem::security::trustdir#trust_cert()","gem::security::trust_dir()","gem::security::trusted_certificates()","gem::try_activate()","makemakefile#try_const()","array::try_convert()","hash::try_convert()","io::try_convert()","integer::try_convert()","regexp::try_convert()","string::try_convert()","monitor#try_enter()","thread::mutex#try_lock()","monitor#try_mon_enter()","monitormixin#try_mon_enter()","makemakefile#try_type()","openssl::timestamp::response#tsa_certificate()","gem::resolver::molinillo::dependencygraph::tsort()","tsort::tsort()","tsort#tsort()","tsort::tsort_each()","tsort#tsort_each()","gem::dependencylist#tsort_each_child()","gem::resolver::molinillo::dependencygraph#tsort_each_child()","tsort#tsort_each_child()","gem::dependencylist#tsort_each_node()","gem::resolver::molinillo::dependencygraph#tsort_each_node()","tsort#tsort_each_node()","gem::mockgemui::tty#tty?()","gem::silentui::nullio#tty?()","gem::streamui#tty?()","io#tty?()","stringio#tty?()","date#tuesday?()","time#tuesday?()","time#tv_nsec()","time#tv_sec()","time#tv_usec()","gem::dependency#type()","gem::resolver::dependencyrequest#type()","objectspace::internalobjectwrapper#type()","openssl::pkcs7#type()","rdoc::classmodule#type()","rdoc::methodattr#type()","rubyvm::abstractsyntaxtree::node#type()","socket::ancillarydata#type()","win32::registry::type2name()","openssl::pkcs7#type=()","net::httpheader#type_params()","fiddle::importer#typealias()","uri::ftp#typecode=()","win32ole::type#typekind()","win32ole::type::typelibs()","win32ole::typelib::typelibs()","win32ole::record#typename()","gem::source#typo_squatting?()","erb::util::u()","erb::util#u()","openssl::bn#ucmp()","addrinfo::udp()","socket::udp_server_loop()","socket::udp_server_loop_on()","socket::udp_server_recv()","socket::udp_server_sockets()","bundler::ui()","gem::ui()","gem::defaultuserinteraction::ui()","gem::defaultuserinteraction#ui()","bundler::ui=()","gem::defaultuserinteraction#ui=()","gem::defaultuserinteraction::ui=()","file::stat#uid()","process::uid()","process::uid=()","file::umask()","win32ole::event#unadvise()","etc::uname()","method#unbind()","fiber::scheduler#unblock()","bundler::unbundled_env()","bundler::unbundled_exec()","bundler::unbundled_system()","csv#unconverted_fields?()","csv::parser#unconverted_fields?()","module#undef_method()","objectspace::undefine_finalizer()","module#undefined_instance_methods()","rdoc::stats#undoc_params()","string#undump()","cgi::escape#unescape()","cgi::util#unescape()","gem::uriformatter#unescape()","net::http#unescape()","uri::rfc2396_parser#unescape()","uri::rfc2396_parser#unescape()","cgi::util#unescapeelement()","cgi::escape#unescapehtml()","cgi::util#unescapehtml()","cgi::escape#unescapeuricomponent()","cgi::util#unescapeuricomponent()","cgi::util#unescape_element()","cgi::util#unescape_html()","rdoc::parser::rubytools#unget_tk()","io#ungetbyte()","stringio#ungetbyte()","zlib::gzipreader#ungetbyte()","io#ungetc()","openssl::buffering#ungetc()","reline::ungetc()","reline::ansi::ungetc()","reline::generalio::ungetc()","reline::windows::ungetc()","stringio#ungetc()","zlib::gzipreader#ungetc()","string#unicode_normalize()","string#unicode_normalize!()","string#unicode_normalized?()","racc::parserfilegenerator#unindent_auto()","gem::commands::uninstallcommand#uninstall()","gem::uninstaller#uninstall()","gem::commands::uninstallcommand#uninstall_all()","gem::commands::cleanupcommand#uninstall_dep()","gem::commands::uninstallcommand#uninstall_gem()","gem::uninstaller#uninstall_gem()","gem::commands::setupcommand#uninstall_old_gemcutter()","gem::commands::uninstallcommand#uninstall_specific()","array#union()","fiddle::importer#union()","regexp::union()","set#union()","array#uniq()","enumerable#uniq()","enumerator::lazy#uniq()","array#uniq!()","rdoc::store#unique_classes()","rdoc::store#unique_classes_and_modules()","rdoc::store#unique_modules()","racc::parserfilegenerator#unique_separator()","addrinfo::unix()","socket::unix()","addrinfo#unix?()","reline::lineeditor#unix_line_discard()","addrinfo#unix_path()","socket::ancillarydata::unix_rights()","socket::ancillarydata#unix_rights()","socket::unix_server_loop()","socket::unix_server_socket()","socket::unix_socket_abstract_name?()","reline::lineeditor#unix_word_rubout()","logger#unknown()","syslog::logger#unknown()","dir::unlink()","file::unlink()","pathname#unlink()","tempfile#unlink()","net::http#unlock()","thread::mutex#unlock()","gem::installer#unpack()","socket::option#unpack()","string#unpack()","win32::sspi::securitybuffer#unpack()","string#unpack1()","socket::unpack_sockaddr_in()","socket::unpack_sockaddr_un()","win32::registry::api#unpackdw()","win32::registry::api#unpackhandle()","win32::registry::api#unpackqw()","drb::extservmanager#unregist()","drb::extservmanager#unregister()","gem::commandmanager#unregister_command()","gem::specification::unresolved_deps()","gem::specification::unresolved_specs()","psych::unsafe_load()","psych::unsafe_load_file()","stringscanner#unscan()","gem::configfile#unset_api_key!()","array#unshift()","gem::requestset::lockfile::tokenizer#unshift()","fiddle::cstruct#unstruct()","pathname#untaint()","kernel#untrace_var()","zlib::gzipreader#unused()","gem::resolver::molinillo::delegates::resolutionstate#unused_unwind_options()","gem::resolver::molinillo::resolver::resolution#unwind_for_conflict()","gem::resolver::molinillo::resolver::resolution#unwind_options_for_requirements()","gem::resolver::molinillo::resolver::resolution::unwinddetails#unwinding_to_primary_requirement?()","gem::resolver::molinillo::dependencygraph::action#up()","gem::resolver::molinillo::dependencygraph::addedgenocircular#up()","gem::resolver::molinillo::dependencygraph::deleteedge#up()","gem::resolver::molinillo::dependencygraph::detachvertexnamed#up()","gem::resolver::molinillo::dependencygraph::tag#up()","string#upcase()","symbol#upcase()","string#upcase!()","reline::lineeditor#upcase_word()","cgi::session#update()","cgi::session::filestore#update()","cgi::session::memorystore#update()","cgi::session::nullstore#update()","cgi::session::pstore#update()","digest::base#update()","digest::instance#update()","digest::sha2#update()","env::update()","gem::streamui::silentdownloadreporter#update()","gem::streamui::threadeddownloadreporter#update()","hash#update()","openssl::cipher#update()","openssl::digest#update()","openssl::hmac#update()","racc::iset#update()","yaml::dbm#update()","racc::iset#update_a()","rdoc::classmodule#update_aliases()","gem::source#update_cache?()","gem::package::tarheader#update_checksum()","rdoc::classmodule#update_extends()","gem::commands::updatecommand#update_gem()","gem::commands::updatecommand#update_gems()","rdoc::classmodule#update_includes()","gem::indexer#update_index()","rdoc::rdoc#update_output_dir()","rdoc::store#update_parser_of_file()","gem::commands::updatecommand#update_rubygems()","gem::gemcutterutilities#update_scope()","gem::indexer#update_specs_index()","gem::updatesuggestion#update_suggestion()","gem::streamui::silentprogressreporter#updated()","gem::streamui::simpleprogressreporter#updated()","gem::streamui::verboseprogressreporter#updated()","rdoc::context#upgrade_to_class()","win32::sspi::securityhandle#upper()","date#upto()","integer#upto()","string#upto()","fileutils#uptodate?()","fileutils::uptodate?()","random::urandom()","drb#uri()","drb::uri()","drb::drbprotocol#uri_option()","drb::drbprotocol::uri_option()","erb::util#url_encode()","erb::util::url_encode()","random::formatter#urlsafe_base64()","base64#urlsafe_decode64()","base64#urlsafe_encode64()","gem::command#usage()","gem::use_gemdeps()","csv::parser#use_headers?()","irb::context#use_loader()","irb::context#use_loader=()","irb::context#use_loader?()","rdoc::parser::use_markup()","gem::use_paths()","net::http#use_ssl=()","net::http#use_ssl?()","bundler::use_system_gems?()","irb::context#use_tracer=()","gem::defaultuserinteraction::use_ui()","gem::defaultuserinteraction#use_ui()","time#usec()","module::used_modules()","module::used_refinements()","racc::rule#useless=()","racc::sym#useless=()","racc::rule#useless?()","racc::sym#useless?()","racc::grammar#useless_nonterminal_exist?()","racc::grammar#useless_rule_exist?()","uri::generic#user()","uri::generic#user=()","gem::request#user_agent()","bundler::user_bundle_path()","bundler::user_cache()","gem::user_dir()","bundler::user_home()","gem::user_home()","uri::generic#userinfo()","uri::generic#userinfo=()","module#using()","openssl::ssl::sslsocket#using_anon_cipher?()","gc::using_rvargc?()","time::utc()","time#utc()","time#utc?()","time#utc_offset()","file::utime()","pathname#utime()","random::formatter#uuid()","io::buffer#valid?()","syntaxsuggest::valid?()","syntaxsuggest::codeblock#valid?()","date::valid_civil?()","date::valid_commercial?()","date::valid_date?()","gem::commands::certcommand#valid_email?()","string#valid_encoding?()","date::valid_jd?()","date::valid_ordinal?()","gem::uri#valid_uri?()","ipsocket::valid_v6?()","syntaxsuggest::valid_without?()","gem::specification#validate()","gem::specificationpolicy#validate()","gem::specificationpolicy#validate_array_attribute()","gem::specificationpolicy#validate_array_attributes()","gem::specificationpolicy#validate_attribute_present()","gem::specificationpolicy#validate_authors_field()","gem::specification#validate_dependencies()","csv::parser#validate_field_size()","gem::specificationpolicy#validate_lazy_metadata()","gem::specificationpolicy#validate_licenses()","gem::specificationpolicy#validate_licenses_length()","gem::specification#validate_metadata()","gem::specificationpolicy#validate_metadata()","gem::specificationpolicy#validate_name()","gem::specificationpolicy#validate_nil_attributes()","gem::specificationpolicy#validate_non_files()","gem::specificationpolicy#validate_optional()","gem::specification#validate_permissions()","gem::specificationpolicy#validate_permissions()","gem::specificationpolicy#validate_platform()","gem::specificationpolicy#validate_require_paths()","gem::specificationpolicy#validate_required!()","gem::specificationpolicy#validate_required_attributes()","gem::specificationpolicy#validate_rubygems_version()","gem::specificationpolicy#validate_self_inclusion_in_files_list()","gem::specificationpolicy#validate_shebang_line_in()","gem::specificationpolicy#validate_specification_version()","csv::parser#validate_strip_and_col_sep_options()","gem::specificationpolicy#validate_values()","cgi::cookie#value()","csv::inputrecordseparator::value()","fiddle::importer#value()","net::httpresponse#value()","openssl::x509::attribute#value()","openssl::x509::extension#value()","rinda::tuple#value()","rinda::tupleentry#value()","thread#value()","uncaughtthrowerror#value()","win32ole::variable#value()","win32ole::variant#value()","cgi::cookie#value=()","openssl::x509::attribute#value=()","openssl::x509::extension#value=()","win32ole::variant#value=()","env::value?()","hash#value?()","openssl::x509::extension#value_der()","env::values()","hash#values()","io::buffer#values()","objectspace::weakmap#values()","struct#values()","win32::registry#values()","yaml::dbm#values()","array#values_at()","csv::row#values_at()","csv::table#values_at()","env::values_at()","hash#values_at()","matchdata#values_at()","stringscanner#values_at()","struct#values_at()","yaml::dbm#values_at()","win32ole::variable#variable_kind()","win32ole::type#variables()","win32ole::variable#varkind()","win32ole::variant#vartype()","optionparser#ver()","drb::drbserver#verbose()","drb::drbserver::verbose()","gem::userinteraction#verbose()","drb::drbserver::verbose=()","drb::drbserver#verbose=()","irb::context#verbose?()","gem::package#verify()","gem::package::old#verify()","gem::security::policy#verify()","gem::security::trustdir#verify()","openssl::netscape::spki#verify()","openssl::ocsp::basicresponse#verify()","openssl::ocsp::request#verify()","openssl::pkcs7#verify()","openssl::pkey::pkey#verify()","openssl::timestamp::response#verify()","openssl::x509::crl#verify()","openssl::x509::certificate#verify()","openssl::x509::request#verify()","openssl::x509::store#verify()","openssl::x509::storecontext#verify()","gem::gemcutterutilities#verify_api_key()","openssl::x509::store#verify_callback=()","gem::request::verify_certificate()","openssl::ssl::verify_certificate_identity()","openssl::ssl#verify_certificate_identity()","gem::request::verify_certificate_message()","gc::verify_compaction_references()","gem::package#verify_entry()","gem::package#verify_files()","gc::verify_internal_consistency()","openssl::pkey::rsa#verify_pss()","openssl::pkey::pkey#verify_raw()","openssl::pkey::pkey#verify_recover()","openssl::ssl::sslsocket#verify_result()","gem::security::policy#verify_signatures()","gem::installer#verify_spec()","gc::verify_transient_heap_internal_consistency()","erb::version()","gem::basicspecification#version()","gem::resolver::activationrequest#version()","gem::resolver::specspecification#version()","gem::unsatisfiabledependencyerror#version()","gem::version#version()","irb::version()","openssl::timestamp::request#version()","openssl::timestamp::tokeninfo#version()","openssl::x509::crl#version()","openssl::x509::certificate#version()","openssl::x509::request#version()","optionparser#version()","win32ole::typelib#version()","gem::specification#version=()","openssl::timestamp::request#version=()","openssl::x509::crl#version=()","openssl::x509::certificate#version=()","openssl::x509::request#version=()","net::http::version_1_2()","net::http::version_1_2?()","gem::resolver::molinillo::dependencygraph#vertex_named()","socket::ifaddr#vhid()","reline::lineeditor#vi_add()","reline::lineeditor#vi_add_at_eol()","reline::unicode::vi_backward_word()","reline::unicode::vi_big_backward_word()","reline::unicode::vi_big_forward_end_word()","reline::unicode::vi_big_forward_word()","reline::lineeditor#vi_change_meta()","reline::lineeditor#vi_command_mode()","reline::lineeditor#vi_delete_meta()","reline::lineeditor#vi_delete_prev_char()","readline::vi_editing_mode()","reline::core#vi_editing_mode()","readline::vi_editing_mode?()","reline::core#vi_editing_mode?()","reline::lineeditor#vi_end_big_word()","reline::lineeditor#vi_end_of_transmission()","reline::lineeditor#vi_end_word()","reline::lineeditor#vi_eof_maybe()","reline::lineeditor#vi_first_print()","reline::unicode::vi_first_print()","reline::unicode::vi_forward_end_word()","reline::unicode::vi_forward_word()","reline::lineeditor#vi_histedit()","reline::lineeditor#vi_insert()","reline::lineeditor#vi_insert_at_bol()","reline::lineeditor#vi_join_lines()","reline::lineeditor#vi_kill_line_prev()","reline::lineeditor#vi_list_or_eof()","reline::lineeditor#vi_movement_mode()","reline::lineeditor#vi_next_big_word()","reline::lineeditor#vi_next_char()","reline::lineeditor#vi_next_word()","reline::lineeditor#vi_paste_next()","reline::lineeditor#vi_paste_prev()","reline::lineeditor#vi_prev_big_word()","reline::lineeditor#vi_prev_char()","reline::lineeditor#vi_prev_word()","reline::lineeditor#vi_replace_char()","reline::lineeditor#vi_search_next()","reline::lineeditor#vi_search_prev()","reline::lineeditor#vi_to_column()","reline::lineeditor#vi_to_history_line()","reline::lineeditor#vi_to_next_char()","reline::lineeditor#vi_to_prev_char()","reline::lineeditor#vi_yank()","reline::lineeditor#vi_zero()","rdoc::options#visibility=()","syntaxsuggest::codeline#visible?()","win32ole::method#visible?()","win32ole::type#visible?()","win32ole::typelib#visible?()","win32ole::variable#visible?()","syntaxsuggest::codeblock#visible_lines()","psych::visitors::visitor#visit()","psych::visitors::yamltree#visit_array()","psych::visitors::yamltree#visit_basicobject()","psych::visitors::yamltree#visit_bigdecimal()","psych::visitors::yamltree#visit_class()","psych::visitors::yamltree#visit_complex()","psych::visitors::yamltree#visit_date()","psych::visitors::yamltree#visit_datetime()","psych::visitors::yamltree#visit_delegator()","psych::visitors::yamltree#visit_encoding()","psych::visitors::yamltree#visit_enumerator()","psych::visitors::yamltree#visit_exception()","psych::visitors::yamltree#visit_falseclass()","psych::visitors::yamltree#visit_float()","psych::visitors::yamltree#visit_hash()","psych::visitors::yamltree#visit_integer()","psych::visitors::yamltree#visit_module()","psych::visitors::yamltree#visit_nameerror()","psych::visitors::yamltree#visit_nilclass()","psych::visitors::yamltree#visit_object()","psych::visitors::depthfirst#visit_psych_nodes_alias()","psych::visitors::emitter#visit_psych_nodes_alias()","psych::visitors::noaliasruby#visit_psych_nodes_alias()","psych::visitors::toruby#visit_psych_nodes_alias()","psych::visitors::depthfirst#visit_psych_nodes_document()","psych::visitors::emitter#visit_psych_nodes_document()","psych::visitors::toruby#visit_psych_nodes_document()","psych::visitors::depthfirst#visit_psych_nodes_mapping()","psych::visitors::emitter#visit_psych_nodes_mapping()","psych::visitors::toruby#visit_psych_nodes_mapping()","psych::visitors::depthfirst#visit_psych_nodes_scalar()","psych::visitors::emitter#visit_psych_nodes_scalar()","psych::visitors::toruby#visit_psych_nodes_scalar()","psych::visitors::depthfirst#visit_psych_nodes_sequence()","psych::visitors::emitter#visit_psych_nodes_sequence()","psych::visitors::toruby#visit_psych_nodes_sequence()","psych::visitors::depthfirst#visit_psych_nodes_stream()","psych::visitors::emitter#visit_psych_nodes_stream()","psych::visitors::toruby#visit_psych_nodes_stream()","psych::visitors::yamltree#visit_psych_omap()","psych::visitors::yamltree#visit_psych_set()","psych::visitors::yamltree#visit_range()","psych::visitors::yamltree#visit_rational()","psych::visitors::yamltree#visit_regexp()","gem::noaliasyamltree#visit_string()","psych::visitors::yamltree#visit_string()","psych::visitors::yamltree#visit_struct()","psych::visitors::restrictedyamltree#visit_symbol()","psych::visitors::yamltree#visit_symbol()","psych::visitors::yamltree#visit_time()","psych::visitors::yamltree#visit_trueclass()","psych::visitors::yamltree#visit_array_subclass()","syntaxsuggest::unvisitedlines#visit_block()","psych::visitors::yamltree#visit_hash_subclass()","io#wait()","monitormixin::conditionvariable#wait()","process::wait()","process::status::wait()","rinda::waittemplateentry#wait()","thread::conditionvariable#wait()","process::wait2()","monitor#wait_for_cond()","net::httpgenericrequest#wait_for_continue()","io#wait_priority()","io#wait_readable()","monitormixin::conditionvariable#wait_until()","monitormixin::conditionvariable#wait_while()","io#wait_writable()","process::waitall()","process::waitpid()","process::waitpid2()","thread#wakeup()","kernel#warn()","logger#warn()","optionparser#warn()","rdoc::options#warn()","rdoc::parser::ruby#warn()","ripper#warn()","syslog::logger#warn()","warning#warn()","logger#warn!()","logger#warn?()","gem::uninstaller#warn_cannot_uninstall_default_gems()","ripper#warning()","gem::commands::querycommand#warning_without_suggested_alternatives()","date#wday()","time#wday()","weakref#weakref_alive?()","date#wednesday?()","time#wednesday?()","gem::command#when_invoked()","bundler::which()","gem::commands::updatecommand#which_to_update()","reline::lineeditor#whole_buffer()","reline::lineeditor#whole_lines()","syntaxsuggest::explainsyntax#why()","gem::dependencylist#why_not_ok?()","reline::lineeditor::dialog#width=()","pp::width_for()","fiddle::win32_last_error()","fiddle::win32_last_error=()","fiddle::win32_last_socket_error()","fiddle::win32_last_socket_error=()","win32::registry::api#win64?()","reline::ansi::win?()","reline::generalio::win?()","reline::windows::win?()","reline::windows::win_legacy_console?()","gem::win_platform?()","gem::ext::cargobuilder#win_target?()","gem::installer#windows_stub_script()","io#winsize()","irb::inputmethod#winsize()","io#winsize=()","data#with()","optionparser::with()","bundler::with_clean_env()","makemakefile#with_config()","bundler::with_env()","enumerator#with_index()","enumerator::lazy#with_index()","gem::resolver::molinillo::delegates::specificationprovider#with_no_such_dependency_error_handling()","enumerator#with_object()","bundler::with_original_env()","gem::uri#with_redacted_password()","gem::uri#with_redacted_user()","gem::gemcutterutilities#with_response()","bundler::with_unbundled_env()","irb::color::without_circular_ref()","gem::platformmismatch#wordy()","gem::sourcefetchproblem#wordy()","irb::context#workspaces()","file::world_readable?()","file::stat#world_readable?()","filetest#world_readable?()","pathname#world_readable?()","file::world_writable?()","file::stat#world_writable?()","filetest#world_writable?()","pathname#world_writable?()","gem::command#wrap()","gem::package::digestio::wrap()","json::jsonerror::wrap()","rdoc::text#wrap()","zlib::gzipfile::wrap()","reline::lineeditor#wrap_method_call()","file::writable?()","file::stat#writable?()","filetest#writable?()","pathname#writable?()","file::writable_real?()","file::stat#writable_real?()","filetest#writable_real?()","pathname#writable_real?()","argf#write()","gem::configfile#write()","gem::package::digestio#write()","gem::package::tarwriter::boundedstream#write()","gem::package::tarwriter::restrictedstream#write()","gem::requestset::lockfile#write()","gem::security::write()","io::write()","io#write()","io::buffer#write()","logger::logdevice#write()","net::writeadapter#write()","openssl::buffering#write()","pathname#write()","rinda::tuplespace#write()","rinda::tuplespaceproxy#write()","stringio#write()","win32::registry#write()","zlib::gzipwriter#write()","win32::registry#write_bin()","gem::write_binary()","gem::installer#write_build_info_file()","gem::installer#write_cache_file()","gem::installer#write_default_spec()","gem::ext::cargobuilder#write_deffile()","net::httpgenericrequest#write_header()","csv#write_headers?()","win32::registry#write_i()","racc::grammar#write_log()","io#write_nonblock()","io::generic_writable#write_nonblock()","openssl::buffering#write_nonblock()","rdoc::options#write_options()","openssl::random::write_random_file()","win32::registry#write_s()","rinda::ringserver#write_services()","openssl::pkcs7::write_smime()","gem::installer#write_spec()","net::http#write_timeout=()","csv#writer()","csv#writer_fields_converter()","csv#writer_options()","win32::registry::wtime2time()","date::xmlschema()","date#xmlschema()","datetime::xmlschema()","datetime#xmlschema()","time::xmlschema()","time#xmlschema()","object#xmp()","io::buffer#xor!()","kernel#y()","psych::nodes::node#yaml()","object::yaml_tag()","reline::killring#yank()","reline::lineeditor#yank()","gem::commands::yankcommand#yank_api_request()","gem::commands::yankcommand#yank_gem()","reline::killring#yank_pop()","reline::lineeditor#yank_pop()","date#yday()","time#yday()","date#year()","time#year()","fiber::yield()","proc#yield()","ractor::yield()","kernel#yield_self()","rdoc::markupreference#yields_directive()","racc::parser#yyaccept()","ripper#yydebug()","ripper#yydebug=()","racc::parser#yyerrok()","racc::parser#yyerror()","racc::grammarfilescanner#yylex()","racc::grammarfilescanner#yylex0()","zlib::gzipreader::zcat()","bigdecimal#zero?()","file::zero?()","file::stat#zero?()","filetest#zero?()","float#zero?()","integer#zero?()","numeric#zero?()","openssl::bn#zero?()","pathname#zero?()","array#zip()","enumerable#zip()","enumerator::lazy#zip()","rdoc::parser::zip?()","zlib::zlib_version()","datetime#zone()","time#zone()","ipaddr#zone_id()","ipaddr#zone_id=()","time::zone_offset()","array#|()","falseclass#|()","io::buffer#|()","ipaddr#|()","integer#|()","json::genericobject#|()","nilclass#|()","racc::rule#|()","racc::sym#|()","ripper::lexer::state#|()","set#|()","trueclass#|()","io::buffer#~()","ipaddr#~()","integer#~()","regexp#~()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["ACL","","ACL.html","","<p>Simple Access Control Lists.\n<p>Access control lists are composed of “allow” and “deny” …\n"],["ACL::ACLEntry","","ACL/ACLEntry.html","","<p>An entry in an ACL\n"],["ACL::ACLList","","ACL/ACLList.html","","<p>A list of ACLEntry objects.  Used to implement the allow and deny halves of an ACL\n"],["ARGF","","ARGF.html","","<p>ARGF is a stream designed for use in scripts that process files given as command-line arguments or passed …\n"],["Abbrev","","Abbrev.html","","<p>Calculates the set of unambiguous abbreviations for a given set of strings.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;abbrev&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;pp&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Addrinfo","","Addrinfo.html","",""],["ArgumentError","","ArgumentError.html","","<p>Raised when the arguments are wrong and there isn’t a more specific Exception class.\n<p>Ex: passing the …\n"],["Array","","Array.html","","<p>An Array is an ordered, integer-indexed collection of objects, called <em>elements</em>. Any object (even another …\n"],["Base64","","Base64.html","","<p>The Base64 module provides for the encoding (#encode64, #strict_encode64, #urlsafe_encode64) and decoding …\n"],["BasicObject","","BasicObject.html","","<p>BasicObject is the parent class of all classes in Ruby.  It’s an explicit blank class.\n<p>BasicObject …\n"],["BasicSocket","","BasicSocket.html","","<p>BasicSocket is the super class for all the Socket classes.\n"],["Benchmark","","Benchmark.html","","<p>The Benchmark module provides methods to measure and report the time used to execute Ruby code.\n<p>Measure …\n"],["Benchmark::Tms","","Benchmark/Tms.html","","<p>A data object, representing the times associated with a benchmark measurement.\n"],["BigDecimal","","BigDecimal.html","","<p>BigDecimal provides arbitrary-precision floating point decimal arithmetic.\n<p>Introduction\n<p>Ruby provides built-in …\n"],["BigMath","","BigMath.html","","<p>Provides mathematical functions.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&quot;bigdecimal/math&quot;</span>\n\n<span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">BigMath</span>\n\n<span class=\"ruby-identifier\">a</span> = <span class=\"ruby-constant\">BigDecimal</span>((<span class=\"ruby-constant\">PI</span>(<span class=\"ruby-value\">100</span>)<span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_s</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Binding","","Binding.html","","<p>Objects of class Binding encapsulate the execution context at some particular place in the code and retain …\n"],["Bundler","","Bundler.html","","<p>Bundler provides a consistent environment for Ruby projects by tracking and installing the exact gems …\n"],["CGI","","CGI.html","","<p>Overview\n<p>The Common Gateway Interface (CGI) is a simple protocol for passing an HTTP request from a web …\n"],["CGI::Cookie","","CGI/Cookie.html","","<p>Class representing an HTTP cookie.\n<p>In addition to its specific fields and methods, a Cookie instance is …\n"],["CGI::Escape","","CGI/Escape.html","",""],["CGI::HTML3","","CGI/HTML3.html","",""],["CGI::HTML4","","CGI/HTML4.html","",""],["CGI::HTML4Fr","","CGI/HTML4Fr.html","",""],["CGI::HTML4Tr","","CGI/HTML4Tr.html","",""],["CGI::HTML5","","CGI/HTML5.html","",""],["CGI::HtmlExtension","","CGI/HtmlExtension.html","","<p>Mixin module providing HTML generation methods.\n<p>For example,\n\n<pre>cgi.a(&quot;http://www.example.com&quot;) { &quot;Example&quot; ...</pre>\n"],["CGI::InvalidEncoding","","CGI/InvalidEncoding.html","","<p>Exception raised when there is an invalid encoding detected\n"],["CGI::QueryExtension","","CGI/QueryExtension.html","","<p>Mixin module that provides the following:\n<p>Access to the CGI environment variables as methods.  See documentation …\n"],["CGI::Session","","CGI/Session.html","","<p>Overview\n<p>This file provides the CGI::Session class, which provides session support for CGI scripts.   …\n"],["CGI::Session::FileStore","","CGI/Session/FileStore.html","","<p>File-based session storage class.\n<p>Implements session storage as a flat file of ‘key=value’ values. …\n"],["CGI::Session::MemoryStore","","CGI/Session/MemoryStore.html","","<p>In-memory session storage class.\n<p>Implements session storage as a global in-memory hash.  Session data …\n"],["CGI::Session::NullStore","","CGI/Session/NullStore.html","","<p>Dummy session storage class.\n<p>Implements session storage place holder.  No actual storage will be done. …\n"],["CGI::Session::PStore","","CGI/Session/PStore.html","","<p>PStore-based session storage class.\n<p>This builds upon the top-level PStore class provided by the library …\n"],["CGI::Util","","CGI/Util.html","",""],["CSV","","CSV.html","","<p>CSV\n<p>In a Hurry?\n<p>If you are familiar with CSV data and have a particular task in mind, you may want to go …\n"],["CSV::DeleteSuffix","","CSV/DeleteSuffix.html","",""],["CSV::FieldsConverter","","CSV/FieldsConverter.html","","<p>Note: Don’t use this class directly. This is an internal class.\n"],["CSV::InputRecordSeparator","","CSV/InputRecordSeparator.html","",""],["CSV::MalformedCSVError","","CSV/MalformedCSVError.html","","<p>The error thrown when the parser encounters illegal CSV formatting.\n"],["CSV::MatchP","","CSV/MatchP.html","",""],["CSV::Parser","","CSV/Parser.html","","<p>Note: Don’t use this class directly. This is an internal class.\n"],["CSV::Parser::InputsScanner","","CSV/Parser/InputsScanner.html","","<p>CSV::InputsScanner receives IO inputs, encoding and the chunk_size. It also controls the life cycle of …\n"],["CSV::Parser::InvalidEncoding","","CSV/Parser/InvalidEncoding.html","","<p>Raised when encoding is invalid.\n"],["CSV::Parser::Scanner","","CSV/Parser/Scanner.html","","<p>CSV::Scanner receives a CSV output, scans it and return the content. It also controls the life cycle …\n"],["CSV::Parser::UnexpectedError","","CSV/Parser/UnexpectedError.html","","<p>Raised when unexpected case is happen.\n"],["CSV::Row","","CSV/Row.html","","<p>CSV::Row\n<p>A CSV::Row instance represents a CSV table row. (see class CSV).\n<p>The instance may have:\n"],["CSV::Table","","CSV/Table.html","","<p>CSV::Table\n<p>A CSV::Table instance represents CSV data. (see class CSV).\n<p>The instance may have:\n"],["CSV::Writer","","CSV/Writer.html","","<p>Note: Don’t use this class directly. This is an internal class.\n"],["Class","","Class.html","","<p>Extends any Class to include <em>json_creatable?</em> method.\n<p>Classes in Ruby are first-class objects—each is …\n"],["ClosedQueueError","","ClosedQueueError.html","","<p>The exception class which will be raised when pushing into a closed Queue.  See Thread::Queue#close and …\n"],["Comparable","","Comparable.html","","<p>The Comparable mixin is used by classes whose objects may be ordered. The class must define the <code>&lt;=&gt;</code> …\n"],["Complex","","Complex.html","","<p>A complex number can be represented as a paired real number with imaginary unit; a+bi.  Where a is real …\n"],["Continuation","","Continuation.html","","<p>Continuation objects are generated by Kernel#callcc, after having +require+d <em>continuation</em>. They hold …\n"],["CoreExtensions","","CoreExtensions.html","",""],["CoreExtensions::TCPSocketExt","","CoreExtensions/TCPSocketExt.html","",""],["CoreExtensions::TCPSocketExt::Initializer","","CoreExtensions/TCPSocketExt/Initializer.html","",""],["Coverage","","Coverage.html","","<p>Coverage provides coverage measurement feature for Ruby. This feature is experimental, so these APIs …\n"],["DRb","","DRb.html","","<p>Overview\n<p>dRuby is a distributed object system for Ruby.  It is written in pure Ruby and uses its own protocol. …\n"],["DRb::DRbArray","","DRb/DRbArray.html","","<p>An Array wrapper that can be sent to another server via DRb.\n<p>All entries in the array will be dumped or …\n"],["DRb::DRbBadScheme","","DRb/DRbBadScheme.html","","<p>Error raised by a dRuby protocol when it doesn’t support the scheme specified in a URI.  See DRb::DRbProtocol …\n"],["DRb::DRbBadURI","","DRb/DRbBadURI.html","","<p>Error raised by the DRbProtocol module when it cannot find any protocol implementation support the scheme …\n"],["DRb::DRbConn","","DRb/DRbConn.html","","<p>Class handling the connection between a DRbObject and the server the real object lives on.\n<p>This class …\n"],["DRb::DRbConnError","","DRb/DRbConnError.html","","<p>Error raised when an error occurs on the underlying communication protocol.\n"],["DRb::DRbError","","DRb/DRbError.html","","<p>Superclass of all errors raised in the DRb module.\n"],["DRb::DRbIdConv","","DRb/DRbIdConv.html","","<p>Class responsible for converting between an object and its id.\n<p>This, the default implementation, uses …\n"],["DRb::DRbIdConv","","DRb/DRbIdConv.html","","<p>Class responsible for converting between an object and its id.\n<p>This, the default implementation, uses …\n"],["DRb::DRbMessage","","DRb/DRbMessage.html","","<p>Handler for sending and receiving drb messages.\n<p>This takes care of the low-level marshalling and unmarshalling …\n"],["DRb::DRbObject","","DRb/DRbObject.html","","<p>Object wrapping a reference to a remote drb object.\n<p>Method calls on this object are relayed to the remote …\n"],["DRb::DRbObject","","DRb/DRbObject.html","","<p>Object wrapping a reference to a remote drb object.\n<p>Method calls on this object are relayed to the remote …\n"],["DRb::DRbObservable","","DRb/DRbObservable.html","","<p>The Observable module extended to DRb.  See Observable for details.\n"],["DRb::DRbProtocol","","DRb/DRbProtocol.html","","<p>Module managing the underlying network protocol(s) used by drb.\n<p>By default, drb uses the DRbTCPSocket …\n"],["DRb::DRbRemoteError","","DRb/DRbRemoteError.html","","<p>An exception wrapping an error object\n"],["DRb::DRbSSLSocket","","DRb/DRbSSLSocket.html","","<p>The protocol for DRb over an SSL socket\n<p>The URI for a DRb socket over SSL is: <code>drbssl://&lt;host&gt;:&lt;port&gt;?&lt;option&gt;</code> …\n"],["DRb::DRbSSLSocket::SSLConfig","","DRb/DRbSSLSocket/SSLConfig.html","","<p>SSLConfig handles the needed SSL information for establishing a DRbSSLSocket connection, including generating …\n"],["DRb::DRbServer","","DRb/DRbServer.html","","<p>Class representing a drb server instance.\n<p>A DRbServer must be running in the local process before any …\n"],["DRb::DRbServer::InvokeMethod18Mixin","","DRb/DRbServer/InvokeMethod18Mixin.html","",""],["DRb::DRbServerNotFound","","DRb/DRbServerNotFound.html","","<p>Error raised by the DRb module when an attempt is made to refer to the context’s current drb server …\n"],["DRb::DRbTCPSocket","","DRb/DRbTCPSocket.html","","<p>The default drb protocol which communicates over a TCP socket.\n<p>The DRb TCP protocol URI looks like: <code>druby://&lt;host&gt;:&lt;port&gt;?&lt;option&gt;</code> …\n"],["DRb::DRbUNIXSocket","","DRb/DRbUNIXSocket.html","","<p>Implements DRb over a UNIX socket\n<p>DRb UNIX socket URIs look like <code>drbunix:&lt;path&gt;?&lt;option&gt;</code>. …\n"],["DRb::DRbUndumped","","DRb/DRbUndumped.html","","<p>Mixin module making an object undumpable or unmarshallable.\n<p>If an object which includes this module is …\n"],["DRb::DRbUndumped","","DRb/DRbUndumped.html","","<p>Mixin module making an object undumpable or unmarshallable.\n<p>If an object which includes this module is …\n"],["DRb::DRbUnknown","","DRb/DRbUnknown.html","","<p>Class wrapping a marshalled object whose type is unknown locally.\n<p>If an object is returned by a method …\n"],["DRb::DRbUnknownError","","DRb/DRbUnknownError.html","","<p>An exception wrapping a DRb::DRbUnknown object\n"],["DRb::ExtServ","","DRb/ExtServ.html","",""],["DRb::ExtServManager","","DRb/ExtServManager.html","",""],["DRb::GW","","DRb/GW.html","","<p>The GW provides a synchronized store for participants in the gateway to communicate.\n"],["DRb::GWIdConv","","DRb/GWIdConv.html","","<p>Gateway id conversion forms a gateway between different DRb protocols or networks.\n<p>The gateway needs to …\n"],["DRb::ThreadObject","","DRb/ThreadObject.html","",""],["DRb::TimerIdConv","","DRb/TimerIdConv.html","","<p>Timer id conversion keeps objects alive for a certain amount of time after their last access.  The default …\n"],["DRb::TimerIdConv::TimerHolder2","","DRb/TimerIdConv/TimerHolder2.html","",""],["DRb::TimerIdConv::TimerHolder2::InvalidIndexError","","DRb/TimerIdConv/TimerHolder2/InvalidIndexError.html","",""],["DRb::WeakIdConv","","DRb/WeakIdConv.html","","<p>To use WeakIdConv:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DRb</span>.<span class=\"ruby-identifier\">start_service</span>(<span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-keyword\">nil</span>, {<span class=\"ruby-value\">:idconv</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-constant\">DRb</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">WeakIdConv</span>.<span class=\"ruby-identifier\">new</span>})\n</pre>\n"],["DRb::WeakIdConv::WeakSet","","DRb/WeakIdConv/WeakSet.html","",""],["Data","","Data.html","","<p>Class Data provides a convenient way to define simple classes for value-alike objects.\n<p>The simplest example …\n"],["Date","","Date.html","","<p>Class Date provides methods for storing and manipulating calendar dates.\n<p>Consider using class Time instead …\n"],["Date::Error","","Date/Error.html","","<p>Exception for invalid date/time\n"],["DateTime","","DateTime.html","","<p>DateTime\n<p>A subclass of Date that easily handles date, hour, minute, second, and offset.\n<p>DateTime class …\n"],["Delegator","","Delegator.html","","<p>This library provides three different ways to delegate method calls to an object.  The easiest to use …\n"],["DidYouMean","","DidYouMean.html","","<p>The <code>DidYouMean</code> gem adds functionality to suggest possible method/class names upon errors such as <code>NameError</code> …\n"],["DidYouMean::ClassNameChecker","","DidYouMean/ClassNameChecker.html","",""],["DidYouMean::ClassNameChecker::ClassName","","DidYouMean/ClassNameChecker/ClassName.html","",""],["DidYouMean::Correctable","","DidYouMean/Correctable.html","",""],["DidYouMean::Formatter","","DidYouMean/Formatter.html","","<p>The <code>DidYouMean::Formatter</code> is the basic, default formatter for the gem. The formatter responds to the …\n"],["DidYouMean::Jaro","","DidYouMean/Jaro.html","",""],["DidYouMean::JaroWinkler","","DidYouMean/JaroWinkler.html","",""],["DidYouMean::KeyErrorChecker","","DidYouMean/KeyErrorChecker.html","",""],["DidYouMean::MethodNameChecker","","DidYouMean/MethodNameChecker.html","",""],["DidYouMean::NameErrorCheckers","","DidYouMean/NameErrorCheckers.html","",""],["DidYouMean::NullChecker","","DidYouMean/NullChecker.html","",""],["DidYouMean::PatternKeyNameChecker","","DidYouMean/PatternKeyNameChecker.html","",""],["DidYouMean::PlainFormatter","","DidYouMean/Formatter.html","","<p>The <code>DidYouMean::Formatter</code> is the basic, default formatter for the gem. The formatter responds to the …\n"],["DidYouMean::RequirePathChecker","","DidYouMean/RequirePathChecker.html","",""],["DidYouMean::SpellChecker","","DidYouMean/SpellChecker.html","",""],["DidYouMean::TreeSpellChecker","","DidYouMean/TreeSpellChecker.html","","<p>spell checker for a dictionary that has a tree structure, see doc/tree_spell_checker_api.md\n"],["DidYouMean::VariableNameChecker","","DidYouMean/VariableNameChecker.html","",""],["DidYouMean::VerboseFormatter","","DidYouMean/Formatter.html","","<p>The <code>DidYouMean::Formatter</code> is the basic, default formatter for the gem. The formatter responds to the …\n"],["Digest","","Digest.html","","<p>This module provides a framework for message digest libraries.\n<p>You may want to look at OpenSSL::Digest …\n"],["Digest::Base","","Digest/Base.html","","<p>This abstract class provides a common interface to message digest implementation classes written in  …\n"],["Digest::Class","","Digest/Class.html","","<p>This module stands as a base class for digest implementation classes.\n"],["Digest::Instance","","Digest/Instance.html","","<p>This module provides instance methods for a digest implementation object to calculate message digest …\n"],["Digest::MD5","","Digest/MD5.html","","<p>A class for calculating message digests using the MD5 Message-Digest Algorithm by RSA Data Security, …\n"],["Digest::RMD160","","Digest/RMD160.html","","<p>A class for calculating message digests using RIPEMD-160 cryptographic hash function, designed by Hans …\n"],["Digest::SHA1","","Digest/SHA1.html","","<p>A class for calculating message digests using the SHA-1 Secure Hash Algorithm by NIST (the US’ National …\n"],["Digest::SHA2","","Digest/SHA2.html","","<p>A meta digest provider class for SHA256, SHA384 and SHA512.\n<p>FIPS 180-2 describes SHA2 family of digest …\n"],["Dir","","Dir.html","","<p>Objects of class Dir are directory streams representing directories in the underlying file system. They …\n"],["ENV","","ENV.html","","<p>ENV is a hash-like accessor for environment variables.\n<p>Interaction with the Operating System\n<p>The ENV object …\n"],["EOFError","","EOFError.html","","<p>Raised by some IO operations when reaching the end of file. Many IO methods exist in two forms,\n<p>one that …\n"],["ERB","","ERB.html","","<p>ERB – Ruby Templating\n<p>Introduction\n<p>ERB provides an easy to use but powerful templating system for Ruby …\n"],["ERB::DefMethod","","ERB/DefMethod.html","",""],["ERB::Escape","","ERB/Escape.html","",""],["ERB::Util","","ERB/Util.html","",""],["Encoding","","Encoding.html","","<p>An Encoding instance represents a character encoding usable in Ruby. It is defined as a constant under …\n"],["Encoding::CompatibilityError","","Encoding/CompatibilityError.html","","<p>Raised by Encoding and String methods when the source encoding is incompatible with the target encoding. …\n"],["Encoding::Converter","","Encoding/Converter.html","","<p>Encoding conversion class.\n"],["Encoding::ConverterNotFoundError","","Encoding/ConverterNotFoundError.html","","<p>Raised by transcoding methods when a named encoding does not correspond with a known converter.\n"],["Encoding::InvalidByteSequenceError","","Encoding/InvalidByteSequenceError.html","","<p>Raised by Encoding and String methods when the string being transcoded contains a byte invalid for the …\n"],["Encoding::UndefinedConversionError","","Encoding/UndefinedConversionError.html","","<p>Raised by Encoding and String methods when a transcoding operation fails.\n"],["EncodingError","","EncodingError.html","","<p>EncodingError is the base class for encoding errors.\n"],["English","","English.html","","<p>Include the English library file in a Ruby script, and you can reference the global variables such as …\n"],["Enumerable","","Enumerable.html","","<p>What’s Here\n<p>Module Enumerable provides methods that are useful to a collection class for:\n<p>Querying …\n"],["Enumerator","","Enumerator.html","","<p>A class which allows both internal and external iteration.\n<p>An Enumerator can be created by the following …\n"],["Enumerator::ArithmeticSequence","","Enumerator/ArithmeticSequence.html","","<p>Enumerator::ArithmeticSequence is a subclass of Enumerator, that is a representation of sequences of …\n"],["Enumerator::Chain","","Enumerator/Chain.html","","<p>Enumerator::Chain is a subclass of Enumerator, which represents a chain of enumerables that works as …\n"],["Enumerator::Generator","","Enumerator/Generator.html","","<p>Generator\n"],["Enumerator::Lazy","","Enumerator/Lazy.html","","<p>Enumerator::Lazy is a special type of Enumerator, that allows constructing chains of operations without …\n"],["Enumerator::Producer","","Enumerator/Producer.html","","<p>Producer\n"],["Enumerator::Product","","Enumerator/Product.html","","<p>Enumerator::Product generates a Cartesian product of any number of enumerable objects.  Iterating over …\n"],["Enumerator::Yielder","","Enumerator/Yielder.html","","<p>Yielder\n"],["Errno","","Errno.html","","<p>Ruby exception objects are subclasses of Exception.  However, operating systems typically report errors …\n"],["ErrorHighlight","","ErrorHighlight.html","",""],["ErrorHighlight::CoreExt","","ErrorHighlight/CoreExt.html","",""],["ErrorHighlight::DefaultFormatter","","ErrorHighlight/DefaultFormatter.html","",""],["ErrorHighlight::Spotter","","ErrorHighlight/Spotter.html","",""],["ErrorHighlight::Spotter::NonAscii","","ErrorHighlight/Spotter/NonAscii.html","",""],["Etc","","Etc.html","","<p>The Etc module provides access to information typically stored in files in the <code>/etc</code> directory on Unix …\n"],["Etc::Group","","Etc/Group.html","","<p>Group is a placeholder Struct for user group database on Unix systems.\n<p>The struct contains the following …\n"],["Etc::Passwd","","Etc/Passwd.html","","<p>Passwd is a placeholder Struct for user database on Unix systems.\n<p>The struct contains the following members …\n"],["Exception","","Exception.html","","<p>Class Exception and its subclasses are used to communicate between Kernel#raise and <code>rescue</code> statements …\n"],["FalseClass","","FalseClass.html","","<p>The global value <code>false</code> is the only instance of class FalseClass and represents a logically false value …\n"],["Fcntl","","Fcntl.html","","<p>Fcntl loads the constants defined in the system’s &lt;fcntl.h&gt; C header file, and used with both …\n"],["Fiber","","Fiber.html","","<p>Fibers are primitives for implementing light weight cooperative concurrency in Ruby. Basically they are …\n"],["Fiber::Pool","","Fiber/Pool.html","",""],["Fiber::Scheduler","","Fiber/Scheduler.html","","<p>This is not an existing class, but documentation of the interface that Scheduler object should comply …\n"],["FiberError","","FiberError.html","","<p>Raised when an invalid operation is attempted on a Fiber, in particular when attempting to call/resume …\n"],["Fiddle","","Fiddle.html","","<p>A libffi wrapper for Ruby.\n<p>Description\n<p>Fiddle is an extension to translate a foreign function interface …\n"],["Fiddle::BasicTypes","","Fiddle/BasicTypes.html","","<p>Adds basic type aliases to the including class for use with Fiddle::Importer.\n<p>The aliases added are <code>uint</code> …\n"],["Fiddle::CParser","","Fiddle/CParser.html","","<p>A mixin that provides methods for parsing C struct and prototype signatures.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;fiddle/import&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Fiddle::CStruct","","Fiddle/CStruct.html","","<p>A base class for objects representing a C structure\n"],["Fiddle::CStructBuilder","","Fiddle/CStructBuilder.html","","<p>Used to construct C classes (CUnion, CStruct, etc)\n<p>Fiddle::Importer#struct and Fiddle::Importer#union …\n"],["Fiddle::CStructEntity","","Fiddle/CStructEntity.html","","<p>A pointer to a C structure\n"],["Fiddle::CUnion","","Fiddle/CUnion.html","","<p>A base class for objects representing a C union\n"],["Fiddle::CUnionEntity","","Fiddle/CUnionEntity.html","","<p>A pointer to a C union\n"],["Fiddle::ClearedReferenceError","","Fiddle/ClearedReferenceError.html","","<p>Cleared reference exception\n"],["Fiddle::Closure","","Fiddle/Closure.html","","<p>Description\n<p>An FFI closure wrapper, for handling callbacks.\n<p>Example\n"],["Fiddle::Closure::BlockCaller","","Fiddle/Closure/BlockCaller.html","","<p>Extends Fiddle::Closure to allow for building the closure in a block\n"],["Fiddle::CompositeHandler","","Fiddle/CompositeHandler.html","","<p>Used internally by Fiddle::Importer\n"],["Fiddle::DLError","","Fiddle/DLError.html","","<p>standard dynamic load exception\n"],["Fiddle::Error","","Fiddle/Error.html","","<p>Generic error class for Fiddle\n"],["Fiddle::Function","","Fiddle/Function.html","","<p>Description\n<p>A representation of a C function\n<p>Examples\n"],["Fiddle::Handle","","Fiddle/Handle.html","","<p>The Fiddle::Handle is the manner to access the dynamic library\n<p>Example\n<p>Setup\n"],["Fiddle::Importer","","Fiddle/Importer.html","","<p>A DSL that provides the means to dynamically load libraries and build modules around them including calling …\n"],["Fiddle::Pinned","","Fiddle/Pinned.html","",""],["Fiddle::Pointer","","Fiddle/Pointer.html","","<p>Fiddle::Pointer is a class to handle C pointers\n"],["Fiddle::StructArray","","Fiddle/StructArray.html","","<p>Wrapper for arrays within a struct\n"],["Fiddle::Types","","Fiddle/Types.html","",""],["Fiddle::Win32Types","","Fiddle/Win32Types.html","","<p>Adds Windows type aliases to the including class for use with Fiddle::Importer.\n<p>The aliases added are: …\n"],["File","","File.html","","<p>A File object is a representation of a file in the underlying platform.\n<p>Class File extends module FileTest …\n"],["File::Constants","","File/Constants.html","","<p>File::Constants provides file-related constants.  All possible file constants are listed in the documentation …\n"],["File::Stat","","File/Stat.html","","<p>Objects of class File::Stat encapsulate common status information for File objects. The information is …\n"],["FileTest","","FileTest.html","","<p>FileTest implements file test operations similar to those used in File::Stat. It exists as a standalone …\n"],["FileUtils","","FileUtils.html","","<p>Namespace for file utility methods for copying, moving, removing, etc.\n<p>What’s Here\n<p>First, what’s elsewhere. …\n"],["FileUtils::DryRun","","FileUtils/DryRun.html","","<p>This module has all methods of FileUtils module, but never changes files/directories, with printing message …\n"],["FileUtils::NoWrite","","FileUtils/NoWrite.html","","<p>This module has all methods of FileUtils module, but never changes files/directories.  This equates to …\n"],["FileUtils::StreamUtils_","","FileUtils/StreamUtils_.html","",""],["FileUtils::Verbose","","FileUtils/Verbose.html","","<p>This module has all methods of FileUtils module, but it outputs messages before acting.  This equates …\n"],["Find","","Find.html","","<p>The <code>Find</code> module supports the top-down traversal of a set of file paths.\n<p>For example, to total the size …\n"],["Float","","Float.html","","<p>A Float object represents a sometimes-inexact real number using the native architecture’s double-precision …\n"],["FloatDomainError","","FloatDomainError.html","","<p>Raised when attempting to convert special float values (in particular <code>Infinity</code> or <code>NaN</code>) to numerical classes …\n"],["Forwardable","","Forwardable.html","","<p>The Forwardable module provides delegation of specified methods to a designated object, using the methods …\n"],["FrozenError","","FrozenError.html","","<p>Raised when there is an attempt to modify a frozen object.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>].<span class=\"ruby-identifier\">freeze</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-value\">4</span>\n</pre>\n<p><em>raises the exception:</em> …\n"],["GC","","GC.html","","<p>The GC module provides an interface to Ruby’s mark and sweep garbage collection mechanism.\n<p>Some of …\n"],["GC::Profiler","","GC/Profiler.html","","<p>The GC profiler provides access to information on GC runs including time, length and object space size. …\n"],["Gem","","Gem.html","","<p>RubyGems is the Ruby standard for publishing and managing third party libraries.\n<p>For user documentation, …\n"],["Gem::AvailableSet","","Gem/AvailableSet.html","",""],["Gem::BasicSpecification","","Gem/BasicSpecification.html","","<p>BasicSpecification is an abstract class which implements some common code used by both Specification …\n"],["Gem::BundlerVersionFinder","","Gem/BundlerVersionFinder.html","",""],["Gem::Command","","Gem/Command.html","","<p>Base class for all Gem commands.  When creating a new gem command, define #initialize, #execute, #arguments …\n"],["Gem::CommandLineError","","Gem/CommandLineError.html","",""],["Gem::CommandManager","","Gem/CommandManager.html","","<p>The command manager registers and installs all the individual sub-commands supported by the gem command. …\n"],["Gem::Commands","","Gem/Commands.html","","<p>Commands will be placed in this namespace\n"],["Gem::Commands::BuildCommand","","Gem/Commands/BuildCommand.html","",""],["Gem::Commands::CertCommand","","Gem/Commands/CertCommand.html","",""],["Gem::Commands::CheckCommand","","Gem/Commands/CheckCommand.html","",""],["Gem::Commands::CleanupCommand","","Gem/Commands/CleanupCommand.html","",""],["Gem::Commands::ContentsCommand","","Gem/Commands/ContentsCommand.html","",""],["Gem::Commands::DependencyCommand","","Gem/Commands/DependencyCommand.html","",""],["Gem::Commands::EnvironmentCommand","","Gem/Commands/EnvironmentCommand.html","",""],["Gem::Commands::ExecCommand","","Gem/Commands/ExecCommand.html","",""],["Gem::Commands::FetchCommand","","Gem/Commands/FetchCommand.html","",""],["Gem::Commands::GenerateIndexCommand","","Gem/Commands/GenerateIndexCommand.html","","<p>Generates a index files for use as a gem server.\n<p>See ‘gem help generate_index`\n"],["Gem::Commands::HelpCommand","","Gem/Commands/HelpCommand.html","",""],["Gem::Commands::InfoCommand","","Gem/Commands/InfoCommand.html","",""],["Gem::Commands::InstallCommand","","Gem/Commands/InstallCommand.html","","<p>Gem installer command line tool\n<p>See ‘gem help install`\n"],["Gem::Commands::ListCommand","","Gem/Commands/ListCommand.html","","<p>Searches for gems starting with the supplied argument.\n"],["Gem::Commands::LockCommand","","Gem/Commands/LockCommand.html","",""],["Gem::Commands::MirrorCommand","","Gem/Commands/MirrorCommand.html","",""],["Gem::Commands::OpenCommand","","Gem/Commands/OpenCommand.html","",""],["Gem::Commands::OutdatedCommand","","Gem/Commands/OutdatedCommand.html","",""],["Gem::Commands::OwnerCommand","","Gem/Commands/OwnerCommand.html","",""],["Gem::Commands::PristineCommand","","Gem/Commands/PristineCommand.html","",""],["Gem::Commands::PushCommand","","Gem/Commands/PushCommand.html","",""],["Gem::Commands::QueryCommand","","Gem/Commands/QueryCommand.html","",""],["Gem::Commands::RdocCommand","","Gem/Commands/RdocCommand.html","",""],["Gem::Commands::SearchCommand","","Gem/Commands/SearchCommand.html","",""],["Gem::Commands::ServerCommand","","Gem/Commands/ServerCommand.html","",""],["Gem::Commands::SetupCommand","","Gem/Commands/SetupCommand.html","","<p>Installs RubyGems itself.  This command is ordinarily only available from a RubyGems checkout or tarball. …\n"],["Gem::Commands::SetupCommand::MakeDirs","","Gem/Commands/SetupCommand/MakeDirs.html","",""],["Gem::Commands::SigninCommand","","Gem/Commands/SigninCommand.html","",""],["Gem::Commands::SignoutCommand","","Gem/Commands/SignoutCommand.html","",""],["Gem::Commands::SourcesCommand","","Gem/Commands/SourcesCommand.html","",""],["Gem::Commands::SpecificationCommand","","Gem/Commands/SpecificationCommand.html","",""],["Gem::Commands::StaleCommand","","Gem/Commands/StaleCommand.html","",""],["Gem::Commands::UninstallCommand","","Gem/Commands/UninstallCommand.html","","<p>Gem uninstaller command line tool\n<p>See ‘gem help uninstall`\n"],["Gem::Commands::UnpackCommand","","Gem/Commands/UnpackCommand.html","",""],["Gem::Commands::UpdateCommand","","Gem/Commands/UpdateCommand.html","",""],["Gem::Commands::WhichCommand","","Gem/Commands/WhichCommand.html","",""],["Gem::Commands::YankCommand","","Gem/Commands/YankCommand.html","",""],["Gem::ConfigFile","","Gem/ConfigFile.html","","<p>Gem::ConfigFile RubyGems options and gem command options from gemrc.\n<p>gemrc is a YAML file that uses strings …\n"],["Gem::ConflictError","","Gem/ConflictError.html","","<p>Raised when there are conflicting gem specs loaded\n"],["Gem::ConsoleUI","","Gem/ConsoleUI.html","","<p>Subclass of StreamUI that instantiates the user interaction using STDIN, STDOUT, and STDERR.\n"],["Gem::DefaultUserInteraction","","Gem/DefaultUserInteraction.html","","<p>Module that defines the default UserInteraction.  Any class including this module will have access to …\n"],["Gem::Dependency","","Gem/Dependency.html","","<p>The Dependency class holds a Gem name and a Gem::Requirement.\n"],["Gem::DependencyError","","Gem/DependencyError.html","",""],["Gem::DependencyInstaller","","Gem/DependencyInstaller.html","","<p>Installs a gem along with all its dependencies from local and remote gems.\n"],["Gem::DependencyList","","Gem/DependencyList.html","","<p>Gem::DependencyList is used for installing and uninstalling gems in the correct order to avoid conflicts. …\n"],["Gem::DependencyRemovalException","","Gem/DependencyRemovalException.html","",""],["Gem::DependencyResolutionError","","Gem/DependencyResolutionError.html","","<p>Raised by Gem::Resolver when a Gem::Dependency::Conflict reaches the toplevel.  Indicates which dependencies …\n"],["Gem::Deprecate","","Gem/Deprecate.html","","<p>Provides 3 methods for declaring when something is going away.\n<p>+deprecate(name, repl, year, month)+:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Indicate</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Gem::Doctor","","Gem/Doctor.html","","<p>Cleans up after a partially-failed uninstall or for an invalid Gem::Specification.\n<p>If a specification …\n"],["Gem::DocumentError","","Gem/DocumentError.html","",""],["Gem::EndOfYAMLException","","Gem/EndOfYAMLException.html","","<p>Potentially raised when a specification is validated.\n"],["Gem::ErrorReason","","Gem/ErrorReason.html","",""],["Gem::Exception","","Gem/Exception.html","","<p>Base exception class for RubyGems.  All exception raised by RubyGems are a subclass of this one.\n"],["Gem::Ext","","Gem/Ext.html","","<p>Classes for building C extensions live here.\n"],["Gem::Ext::BuildError","","Gem/Ext/BuildError.html","",""],["Gem::Ext::Builder","","Gem/Ext/Builder.html","",""],["Gem::Ext::CargoBuilder","","Gem/Ext/CargoBuilder.html","","<p>This class is used by rubygems to build Rust extensions. It is a thin-wrapper over the ‘cargo rustc` …\n"],["Gem::Ext::CargoBuilder::DylibNotFoundError","","Gem/Ext/CargoBuilder/DylibNotFoundError.html","","<p>Error raised when no cdylib artifact was created\n"],["Gem::Ext::CargoBuilder::LinkFlagConverter","","Gem/Ext/CargoBuilder/LinkFlagConverter.html","","<p>Converts Ruby link flags into something cargo understands\n"],["Gem::Ext::CmakeBuilder","","Gem/Ext/CmakeBuilder.html","",""],["Gem::Ext::ConfigureBuilder","","Gem/Ext/ConfigureBuilder.html","",""],["Gem::Ext::ExtConfBuilder","","Gem/Ext/ExtConfBuilder.html","",""],["Gem::Ext::RakeBuilder","","Gem/Ext/RakeBuilder.html","",""],["Gem::FilePermissionError","","Gem/FilePermissionError.html","","<p>Signals that a file permission error is preventing the user from operating on the given directory.\n"],["Gem::FormatException","","Gem/FormatException.html","","<p>Used to raise parsing and loading errors\n"],["Gem::GemNotFoundException","","Gem/GemNotFoundException.html","",""],["Gem::GemNotInHomeException","","Gem/GemNotInHomeException.html","","<p>Raised when attempting to uninstall a gem that isn’t in GEM_HOME.\n"],["Gem::GemRunner","","Gem/GemRunner.html","","<p>Run an instance of the gem program.\n<p>Gem::GemRunner is only intended for internal use by RubyGems itself. …\n"],["Gem::GemcutterUtilities","","Gem/GemcutterUtilities.html","","<p>Utility methods for using the RubyGems API.\n"],["Gem::ImpossibleDependenciesError","","Gem/ImpossibleDependenciesError.html","","<p>Raised by Gem::Resolver when dependencies conflict and create the inability to find a valid possible …\n"],["Gem::Indexer","","Gem/Indexer.html","","<p>Top level class for building the gem repository index.\n"],["Gem::InstallError","","Gem/InstallError.html","",""],["Gem::InstallUpdateOptions","","Gem/InstallUpdateOptions.html","","<p>Mixin methods for install and update options for Gem::Commands\n"],["Gem::Installer","","Gem/Installer.html","","<p>The installer installs the files contained in the .gem into the Gem.home.\n<p>Gem::Installer does the work …\n"],["Gem::Installer::FakePackage","","Gem/Installer/FakePackage.html","",""],["Gem::InstallerUninstallerUtils","","Gem/InstallerUninstallerUtils.html","","<p>Helper methods for both Gem::Installer and Gem::Uninstaller\n"],["Gem::InvalidSpecificationException","","Gem/InvalidSpecificationException.html","","<p>Potentially raised when a specification is validated.\n"],["Gem::Licenses","","Gem/Licenses.html","",""],["Gem::List","","Gem/List.html","",""],["Gem::LoadError","","Gem/LoadError.html","","<p>Raised when RubyGems is unable to load or activate a gem.  Contains the name and version requirements …\n"],["Gem::LocalRemoteOptions","","Gem/LocalRemoteOptions.html","","<p>Mixin methods for local and remote Gem::Command options.\n"],["Gem::MissingSpecError","","Gem/MissingSpecError.html","","<p>Raised when trying to activate a gem, and that gem does not exist on the system.  Instead of rescuing …\n"],["Gem::MissingSpecVersionError","","Gem/MissingSpecVersionError.html","","<p>Raised when trying to activate a gem, and the gem exists on the system, but not the requested version. …\n"],["Gem::MockGemUi","","Gem/MockGemUi.html","","<p>This Gem::StreamUI subclass records input and output to StringIO for retrieval during tests.\n"],["Gem::MockGemUi::InputEOFError","","Gem/MockGemUi/InputEOFError.html","","<p>Raised when you haven’t provided enough input to your MockGemUi\n"],["Gem::MockGemUi::SystemExitException","","Gem/MockGemUi/SystemExitException.html","",""],["Gem::MockGemUi::TTY","","Gem/MockGemUi/TTY.html","",""],["Gem::MockGemUi::TermError","","Gem/MockGemUi/TermError.html","",""],["Gem::NameTuple","","Gem/NameTuple.html","","<p>Represents a gem of name <code>name</code> at <code>version</code> of <code>platform</code>. These wrap the data returned from the indexes. …\n"],["Gem::NoAliasYAMLTree","","Gem/NoAliasYAMLTree.html","",""],["Gem::OperationNotSupportedError","","Gem/OperationNotSupportedError.html","",""],["Gem::Package","","Gem/Package.html","","<p>Example using a Gem::Package\n<p>Builds a .gem file given a Gem::Specification. A .gem file is a tarball which …\n"],["Gem::Package::DigestIO","","Gem/Package/DigestIO.html","","<p>IO wrapper that creates digests of contents written to the IO it wraps.\n"],["Gem::Package::Error","","Gem/Package/Error.html","",""],["Gem::Package::FormatError","","Gem/Package/FormatError.html","",""],["Gem::Package::NonSeekableIO","","Gem/Package/NonSeekableIO.html","",""],["Gem::Package::Old","","Gem/Package/Old.html","","<p>The format class knows the guts of the ancient .gem file format and provides the capability to read such …\n"],["Gem::Package::PathError","","Gem/Package/PathError.html","",""],["Gem::Package::SymlinkError","","Gem/Package/SymlinkError.html","",""],["Gem::Package::TarHeader","","Gem/Package/TarHeader.html","","<p>A header for a tar file\n"],["Gem::Package::TarInvalidError","","Gem/Package/TarInvalidError.html","","<p>Raised when a tar file is corrupt\n"],["Gem::Package::TarReader","","Gem/Package/TarReader.html","","<p>TarReader reads tar files and allows iteration over their items\n"],["Gem::Package::TarReader::Entry","","Gem/Package/TarReader/Entry.html","","<p>Class for reading entries out of a tar file\n"],["Gem::Package::TarReader::UnexpectedEOF","","Gem/Package/TarReader/UnexpectedEOF.html","","<p>Raised if the tar IO is not seekable\n"],["Gem::Package::TarWriter","","Gem/Package/TarWriter.html","","<p>Allows writing of tar files\n"],["Gem::Package::TarWriter::BoundedStream","","Gem/Package/TarWriter/BoundedStream.html","","<p>IO wrapper that allows writing a limited amount of data\n"],["Gem::Package::TarWriter::FileOverflow","","Gem/Package/TarWriter/FileOverflow.html","",""],["Gem::Package::TarWriter::RestrictedStream","","Gem/Package/TarWriter/RestrictedStream.html","","<p>IO wrapper that provides only #write\n"],["Gem::Package::TooLongFileName","","Gem/Package/TooLongFileName.html","",""],["Gem::PackageTask","","Gem/PackageTask.html","","<p>Create a package based upon a Gem::Specification.  Gem packages, as well as zip files and tar/gzipped …\n"],["Gem::PathSupport","","Gem/PathSupport.html","","<p>Gem::PathSupport facilitates the GEM_HOME and GEM_PATH environment settings to the rest of RubyGems. …\n"],["Gem::Platform","","Gem/Platform.html","","<p>Available list of platforms for targeting Gem installations.\n<p>See ‘gem help platform` for information on …\n"],["Gem::PlatformMismatch","","Gem/PlatformMismatch.html","","<p>Generated when trying to lookup a gem to indicate that the gem was found, but that it isn’t usable …\n"],["Gem::QueryUtils","","Gem/QueryUtils.html","",""],["Gem::RemoteError","","Gem/RemoteError.html","","<p>Signals that a remote operation cannot be conducted, probably due to not being connected (or just not …\n"],["Gem::RemoteFetcher","","Gem/RemoteFetcher.html","","<p>RemoteFetcher handles the details of fetching gems and gem information from a remote source.\n"],["Gem::RemoteFetcher::FetchError","","Gem/RemoteFetcher/FetchError.html","","<p>A FetchError exception wraps up the various possible IO and HTTP failures that could happen while downloading …\n"],["Gem::RemoteFetcher::UnknownHostError","","Gem/RemoteFetcher/UnknownHostError.html","","<p>A FetchError that indicates that the reason for not being able to fetch data was that the host could …\n"],["Gem::RemoteInstallationCancelled","","Gem/RemoteInstallationCancelled.html","",""],["Gem::RemoteInstallationSkipped","","Gem/RemoteInstallationSkipped.html","",""],["Gem::RemoteSourceException","","Gem/RemoteSourceException.html","","<p>Represents an error communicating via HTTP.\n"],["Gem::Request","","Gem/Request.html","",""],["Gem::RequestSet","","Gem/RequestSet.html","","<p>A RequestSet groups a request to activate a set of dependencies.\n\n<pre>nokogiri = Gem::Dependency.new &#39;nokogiri&#39;, ...</pre>\n"],["Gem::RequestSet::GemDependencyAPI","","Gem/RequestSet/GemDependencyAPI.html","","<p>A semi-compatible DSL for the Bundler Gemfile and Isolate gem dependencies files.\n<p>To work with both the …\n"],["Gem::RequestSet::Lockfile","","Gem/RequestSet/Lockfile.html","","<p>Parses a gem.deps.rb.lock file and constructs a LockSet containing the dependencies found inside.  If …\n"],["Gem::RequestSet::Lockfile::ParseError","","Gem/RequestSet/Lockfile/ParseError.html","","<p>Raised when a lockfile cannot be parsed\n"],["Gem::RequestSet::Lockfile::Parser","","Gem/RequestSet/Lockfile/Parser.html","",""],["Gem::RequestSet::Lockfile::Tokenizer","","Gem/RequestSet/Lockfile/Tokenizer.html","",""],["Gem::Requirement","","Gem/Requirement.html","","<p>A Requirement is a set of one or more version restrictions. It supports a few (<code>=, !=, &gt;, &lt;, &gt;=,</code> …\n"],["Gem::Requirement::BadRequirementError","","Gem/Requirement/BadRequirementError.html","","<p>Raised when a bad requirement is encountered\n"],["Gem::Resolver","","Gem/Resolver.html","","<p>Given a set of Gem::Dependency objects as <code>needed</code> and a way to query the set of available specs via <code>set</code> …\n"],["Gem::Resolver::APISet","","Gem/Resolver/APISet.html","","<p>The global rubygems pool, available via the rubygems.org API. Returns instances of APISpecification. …\n"],["Gem::Resolver::APISet::GemParser","","Gem/Resolver/APISet/GemParser.html","",""],["Gem::Resolver::APISpecification","","Gem/Resolver/APISpecification.html","","<p>Represents a specification retrieved via the rubygems.org API.\n<p>This is used to avoid loading the full …\n"],["Gem::Resolver::ActivationRequest","","Gem/Resolver/ActivationRequest.html","","<p>Specifies a Specification object that should be activated.  Also contains a dependency that was used …\n"],["Gem::Resolver::BestSet","","Gem/Resolver/BestSet.html","","<p>The BestSet chooses the best available method to query a remote index.\n<p>It combines IndexSet and APISet …\n"],["Gem::Resolver::ComposedSet","","Gem/Resolver/ComposedSet.html","","<p>A ComposedSet allows multiple sets to be queried like a single set.\n<p>To create a composed set with any …\n"],["Gem::Resolver::Conflict","","Gem/Resolver/Conflict.html","","<p>Used internally to indicate that a dependency conflicted with a spec that would be activated.\n"],["Gem::Resolver::CurrentSet","","Gem/Resolver/CurrentSet.html","","<p>A set which represents the installed gems. Respects all the normal settings that control where to look …\n"],["Gem::Resolver::DependencyRequest","","Gem/Resolver/DependencyRequest.html","","<p>Used Internally. Wraps a Dependency object to also track which spec contained the Dependency.\n"],["Gem::Resolver::GitSet","","Gem/Resolver/GitSet.html","","<p>A GitSet represents gems that are sourced from git repositories.\n<p>This is used for gem dependency file …\n"],["Gem::Resolver::GitSpecification","","Gem/Resolver/GitSpecification.html","","<p>A GitSpecification represents a gem that is sourced from a git repository and is being loaded through …\n"],["Gem::Resolver::IndexSet","","Gem/Resolver/IndexSet.html","","<p>The global rubygems pool represented via the traditional source index.\n"],["Gem::Resolver::IndexSpecification","","Gem/Resolver/IndexSpecification.html","","<p>Represents a possible Specification object returned from IndexSet.  Used to delay needed to download …\n"],["Gem::Resolver::InstalledSpecification","","Gem/Resolver/InstalledSpecification.html","","<p>An InstalledSpecification represents a gem that is already installed locally.\n"],["Gem::Resolver::InstallerSet","","Gem/Resolver/InstallerSet.html","","<p>A set of gems for installation sourced from remote sources and local .gem files\n"],["Gem::Resolver::LocalSpecification","","Gem/Resolver/LocalSpecification.html","","<p>A LocalSpecification comes from a .gem file on the local filesystem.\n"],["Gem::Resolver::LockSet","","Gem/Resolver/LockSet.html","","<p>A set of gems from a gem dependencies lockfile.\n"],["Gem::Resolver::LockSpecification","","Gem/Resolver/LockSpecification.html","","<p>The LockSpecification comes from a lockfile (Gem::RequestSet::Lockfile).\n<p>A LockSpecification’s dependency …\n"],["Gem::Resolver::Molinillo","","Gem/Resolver/Molinillo.html","","<p>Gem::Resolver::Molinillo is a generic dependency resolution algorithm.\n"],["Gem::Resolver::Molinillo::CircularDependencyError","","Gem/Resolver/Molinillo/CircularDependencyError.html","","<p>An error caused by attempting to fulfil a dependency that was circular\n<p>@note This exception will be thrown …\n"],["Gem::Resolver::Molinillo::Delegates","","Gem/Resolver/Molinillo/Delegates.html","","<p>@!visibility private\n"],["Gem::Resolver::Molinillo::Delegates::ResolutionState","","Gem/Resolver/Molinillo/Delegates/ResolutionState.html","","<p>Delegates all {Gem::Resolver::Molinillo::ResolutionState} methods to a ‘#state` property.\n"],["Gem::Resolver::Molinillo::Delegates::SpecificationProvider","","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html","","<p>Delegates all {Gem::Resolver::Molinillo::SpecificationProvider} methods to a ‘#specification_provider` …\n"],["Gem::Resolver::Molinillo::DependencyGraph","","Gem/Resolver/Molinillo/DependencyGraph.html","","<p>A directed acyclic graph that is tuned to hold named dependencies\n"],["Gem::Resolver::Molinillo::DependencyGraph::Action","","Gem/Resolver/Molinillo/DependencyGraph/Action.html","","<p>An action that modifies a {DependencyGraph} that is reversible. @abstract\n"],["Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html","","<p>@!visibility private (see DependencyGraph#add_edge_no_circular)\n"],["Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html","","<p>@!visibility private (see DependencyGraph#delete_edge)\n"],["Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html","","<p>@!visibility private @see DependencyGraph#detach_vertex_named\n"],["Gem::Resolver::Molinillo::DependencyGraph::Log","","Gem/Resolver/Molinillo/DependencyGraph/Log.html","","<p>A log for dependency graph actions\n"],["Gem::Resolver::Molinillo::DependencyGraph::Tag","","Gem/Resolver/Molinillo/DependencyGraph/Tag.html","","<p>@!visibility private @see DependencyGraph#tag\n"],["Gem::Resolver::Molinillo::DependencyGraph::Vertex","","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html","","<p>A vertex in a {DependencyGraph} that encapsulates a {#name} and a {#payload}\n"],["Gem::Resolver::Molinillo::DependencyState","","Gem/Resolver/Molinillo/DependencyState.html","","<p>A state that encapsulates a set of {#requirements} with an {Array} of possibilities\n"],["Gem::Resolver::Molinillo::NoSuchDependencyError","","Gem/Resolver/Molinillo/NoSuchDependencyError.html","","<p>An error caused by searching for a dependency that is completely unknown, i.e. has no versions available …\n"],["Gem::Resolver::Molinillo::PossibilityState","","Gem/Resolver/Molinillo/PossibilityState.html","","<p>A state that encapsulates a single possibility to fulfill the given {#requirement}\n"],["Gem::Resolver::Molinillo::ResolutionState","","Gem/Resolver/Molinillo/ResolutionState.html","",""],["Gem::Resolver::Molinillo::Resolver","","Gem/Resolver/Molinillo/Resolver.html","","<p>This class encapsulates a dependency resolver. The resolver is responsible for determining which set …\n"],["Gem::Resolver::Molinillo::Resolver::Resolution","","Gem/Resolver/Molinillo/Resolver/Resolution.html","","<p>A specific resolution from a given {Resolver}\n"],["Gem::Resolver::Molinillo::Resolver::Resolution::Conflict","","Gem/Resolver/Molinillo/Resolver/Resolution/Conflict.html","",""],["Gem::Resolver::Molinillo::Resolver::Resolution::PossibilitySet","","Gem/Resolver/Molinillo/Resolver/Resolution/PossibilitySet.html","",""],["Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails","","Gem/Resolver/Molinillo/Resolver/Resolution/UnwindDetails.html","",""],["Gem::Resolver::Molinillo::ResolverError","","Gem/Resolver/Molinillo/ResolverError.html","","<p>An error that occurred during the resolution process\n"],["Gem::Resolver::Molinillo::SpecificationProvider","","Gem/Resolver/Molinillo/SpecificationProvider.html","","<p>Provides information about specifications and dependencies to the resolver, allowing the {Resolver} class …\n"],["Gem::Resolver::Molinillo::UI","","Gem/Resolver/Molinillo/UI.html","","<p>Conveys information about the resolution process to a user.\n"],["Gem::Resolver::Molinillo::VersionConflict","","Gem/Resolver/Molinillo/VersionConflict.html","","<p>An error caused by conflicts in version\n"],["Gem::Resolver::RequirementList","","Gem/Resolver/RequirementList.html","","<p>The RequirementList is used to hold the requirements being considered while resolving a set of gems. …\n"],["Gem::Resolver::Set","","Gem/Resolver/Set.html","","<p>Resolver sets are used to look up specifications (and their dependencies) used in resolution.  This set …\n"],["Gem::Resolver::SourceSet","","Gem/Resolver/SourceSet.html","","<p>The SourceSet chooses the best available method to query a remote index.\n<p>Kind off like BestSet but filters …\n"],["Gem::Resolver::SpecSpecification","","Gem/Resolver/SpecSpecification.html","","<p>The Resolver::SpecSpecification contains common functionality for Resolver specifications that are backed …\n"],["Gem::Resolver::Specification","","Gem/Resolver/Specification.html","","<p>A Resolver::Specification contains a subset of the information contained in a Gem::Specification.  Only …\n"],["Gem::Resolver::Stats","","Gem/Resolver/Stats.html","",""],["Gem::Resolver::VendorSet","","Gem/Resolver/VendorSet.html","","<p>A VendorSet represents gems that have been unpacked into a specific directory that contains a gemspec. …\n"],["Gem::Resolver::VendorSpecification","","Gem/Resolver/VendorSpecification.html","","<p>A VendorSpecification represents a gem that has been unpacked into a project and is being loaded through …\n"],["Gem::RubyVersionMismatch","","Gem/RubyVersionMismatch.html","","<p>Raised when a gem dependencies file specifies a ruby version that does not match the current version. …\n"],["Gem::RuntimeRequirementNotMetError","","Gem/RuntimeRequirementNotMetError.html","",""],["Gem::S3URISigner","","Gem/S3URISigner.html","","<p>S3URISigner implements AWS SigV4 for S3 Source to avoid a dependency on the aws-sdk-* gems More on AWS …\n"],["Gem::S3URISigner::ConfigurationError","","Gem/S3URISigner/ConfigurationError.html","",""],["Gem::S3URISigner::InstanceProfileError","","Gem/S3URISigner/InstanceProfileError.html","",""],["Gem::SafeYAML","","Gem/SafeYAML.html","","<p>This module is used for safely loading YAML specs from a gem.  The ‘safe_load` method defined on this …\n"],["Gem::Security","","Gem/Security.html","","<p>Signing gems\n<p>The Gem::Security implements cryptographic signatures for gems.  The section below is a step-by-step …\n"],["Gem::Security::Exception","","Gem/Security/Exception.html","","<p>Gem::Security default exception type\n"],["Gem::Security::Policy","","Gem/Security/Policy.html","","<p>A Gem::Security::Policy object encapsulates the settings for verifying signed gem files.  This is the …\n"],["Gem::Security::Signer","","Gem/Security/Signer.html","",""],["Gem::Security::TrustDir","","Gem/Security/TrustDir.html","","<p>The TrustDir manages the trusted certificates for gem signature verification.\n"],["Gem::SecurityOption","","Gem/SecurityOption.html","","<p>Mixin methods for security option for Gem::Commands\n"],["Gem::SilentUI","","Gem/SilentUI.html","","<p>SilentUI is a UI choice that is absolutely silent.\n"],["Gem::SilentUI::NullIO","","Gem/SilentUI/NullIO.html","","<p>An absolutely silent IO.\n"],["Gem::Source","","Gem/Source.html","","<p>A Source knows how to list and fetch gems from a RubyGems marshal index.\n<p>There are other Source subclasses …\n"],["Gem::Source::Git","","Gem/Source/Git.html","","<p>A git gem for use in a gem dependencies file.\n<p>Example:\n\n<pre>source =\n  Gem::Source::Git.new &#39;rake&#39;, &#39;git@example:rake.git&#39;, ...</pre>\n"],["Gem::Source::Installed","","Gem/Source/Installed.html","","<p>Represents an installed gem.  This is used for dependency resolution.\n"],["Gem::Source::Local","","Gem/Source/Local.html","","<p>The local source finds gems in the current directory for fulfilling dependencies.\n"],["Gem::Source::Lock","","Gem/Source/Lock.html","","<p>A Lock source wraps an installed gem’s source and sorts before other sources during dependency resolution. …\n"],["Gem::Source::SpecificFile","","Gem/Source/SpecificFile.html","","<p>A source representing a single .gem file.  This is used for installation of local gems.\n"],["Gem::Source::Vendor","","Gem/Source/Vendor.html","","<p>This represents a vendored source that is similar to an installed gem.\n"],["Gem::SourceFetchProblem","","Gem/SourceFetchProblem.html","","<p>An error that indicates we weren’t able to fetch some data from a source\n"],["Gem::SourceList","","Gem/SourceList.html","","<p>The SourceList represents the sources rubygems has been configured to use. A source may be created from …\n"],["Gem::SpecFetcher","","Gem/SpecFetcher.html","","<p>SpecFetcher handles metadata updates from remote gem repositories.\n"],["Gem::SpecificGemNotFoundException","","Gem/SpecificGemNotFoundException.html","","<p>Raised by the DependencyInstaller when a specific gem cannot be found\n"],["Gem::Specification","","Gem/Specification.html","","<p>The Specification class contains the information for a gem.  Typically defined in a .gemspec file or …\n"],["Gem::SpecificationPolicy","","Gem/SpecificationPolicy.html","",""],["Gem::StreamUI","","Gem/StreamUI.html","","<p>Gem::StreamUI implements a simple stream based user interface.\n"],["Gem::StreamUI::SilentDownloadReporter","","Gem/StreamUI/SilentDownloadReporter.html","","<p>An absolutely silent download reporter.\n"],["Gem::StreamUI::SilentProgressReporter","","Gem/StreamUI/SilentProgressReporter.html","","<p>An absolutely silent progress reporter.\n"],["Gem::StreamUI::SimpleProgressReporter","","Gem/StreamUI/SimpleProgressReporter.html","","<p>A basic dotted progress reporter.\n"],["Gem::StreamUI::ThreadedDownloadReporter","","Gem/StreamUI/ThreadedDownloadReporter.html","","<p>A progress reporter that behaves nicely with threaded downloading.\n"],["Gem::StreamUI::VerboseProgressReporter","","Gem/StreamUI/VerboseProgressReporter.html","","<p>A progress reporter that prints out messages about the current progress.\n"],["Gem::StubSpecification","","Gem/StubSpecification.html","","<p>Gem::StubSpecification reads the stub: line from the gemspec.  This prevents us having to eval the entire …\n"],["Gem::SystemExitException","","Gem/SystemExitException.html","","<p>Raised to indicate that a system exit should occur with the specified exit_code\n"],["Gem::Text","","Gem/Text.html","","<p>A collection of text-wrangling methods\n"],["Gem::UninstallError","","Gem/UninstallError.html","","<p>Raised when removing a gem with the uninstall command fails\n"],["Gem::Uninstaller","","Gem/Uninstaller.html","","<p>An Uninstaller.\n<p>The uninstaller fires pre and post uninstall hooks.  Hooks can be added either through …\n"],["Gem::UnknownCommandError","","Gem/UnknownCommandError.html","",""],["Gem::UnknownCommandSpellChecker","","Gem/UnknownCommandSpellChecker.html","",""],["Gem::UnsatisfiableDependencyError","","Gem/UnsatisfiableDependencyError.html","","<p>Raised by Resolver when a dependency requests a gem for which there is no spec.\n"],["Gem::UpdateSuggestion","","Gem/UpdateSuggestion.html","","<p>Mixin methods for Gem::Command to promote available RubyGems update\n"],["Gem::Uri","","Gem/Uri.html","","<p>The Uri handles rubygems source URIs.\n"],["Gem::UriFormatter","","Gem/UriFormatter.html","","<p>The UriFormatter handles URIs from user-input and escaping.\n\n<pre>uf = Gem::UriFormatter.new &#39;example.com&#39;\n ...</pre>\n"],["Gem::UserInteraction","","Gem/UserInteraction.html","","<p>UserInteraction allows RubyGems to interact with the user through standard methods that can be replaced …\n"],["Gem::Util","","Gem/Util.html","","<p>This module contains various utility methods as module methods.\n"],["Gem::Validator","","Gem/Validator.html","","<p>Validator performs various gem file and gem database validation\n"],["Gem::VerificationError","","Gem/VerificationError.html","","<p>Raised by Gem::Validator when something is not right in a gem.\n"],["Gem::Version","","Gem/Version.html","","<p>The Version class processes string versions into comparable values. A version string should normally …\n"],["Gem::VersionOption","","Gem/VersionOption.html","","<p>Mixin methods for –version and –platform Gem::Command options.\n"],["GetoptLong","","GetoptLong.html","","<p>Class GetoptLong provides parsing both for options and for regular arguments.\n<p>Using GetoptLong, you can …\n"],["GetoptLong::AmbiguousOption","","GetoptLong/AmbiguousOption.html","",""],["GetoptLong::Error","","GetoptLong/Error.html","","<p>Error types.\n"],["GetoptLong::InvalidOption","","GetoptLong/InvalidOption.html","",""],["GetoptLong::MissingArgument","","GetoptLong/MissingArgument.html","",""],["GetoptLong::NeedlessArgument","","GetoptLong/NeedlessArgument.html","",""],["Hash","","Hash.html","","<p>A Hash maps each of its unique keys to a specific value.\n<p>A Hash has certain similarities to an Array, …\n"],["IO","","IO.html","","<p>An instance of class IO (commonly called a <em>stream</em>) represents an input/output stream in the underlying …\n"],["IO::Buffer","","IO/Buffer.html","","<p>IO::Buffer is a low-level efficient buffer for input/output. There are three ways of using buffer:\n<p>Create …\n"],["IO::Buffer::AccessError","","IO/Buffer/AccessError.html","",""],["IO::Buffer::AllocationError","","IO/Buffer/AllocationError.html","",""],["IO::Buffer::InvalidatedError","","IO/Buffer/InvalidatedError.html","",""],["IO::Buffer::LockedError","","IO/Buffer/LockedError.html","",""],["IO::Buffer::MaskError","","IO/Buffer/MaskError.html","",""],["IO::EAGAINWaitReadable","","IO/EAGAINWaitReadable.html","","<p>exception to wait for reading by EAGAIN. see IO.select.\n"],["IO::EAGAINWaitWritable","","IO/EAGAINWaitWritable.html","","<p>exception to wait for writing by EAGAIN. see IO.select.\n"],["IO::EINPROGRESSWaitReadable","","IO/EINPROGRESSWaitReadable.html","","<p>exception to wait for reading by EINPROGRESS. see IO.select.\n"],["IO::EINPROGRESSWaitWritable","","IO/EINPROGRESSWaitWritable.html","","<p>exception to wait for writing by EINPROGRESS. see IO.select.\n"],["IO::EWOULDBLOCKWaitReadable","","IO/EWOULDBLOCKWaitReadable.html","","<p>exception to wait for reading by EWOULDBLOCK. see IO.select.\n"],["IO::EWOULDBLOCKWaitWritable","","IO/EWOULDBLOCKWaitWritable.html","","<p>exception to wait for writing by EWOULDBLOCK. see IO.select.\n"],["IO::TimeoutError","","IO/TimeoutError.html","",""],["IO::WaitReadable","","IO/WaitReadable.html","","<p>exception to wait for reading. see IO.select.\n"],["IO::WaitWritable","","IO/WaitWritable.html","","<p>exception to wait for writing. see IO.select.\n"],["IO::generic_readable","","IO/generic_readable.html","",""],["IO::generic_writable","","IO/generic_writable.html","",""],["IOError","","IOError.html","","<p>Raised when an IO operation fails.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;/etc/hosts&quot;</span>) {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">f</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-string\">&quot;example&quot;</span>}\n  <span class=\"ruby-comment\">#=&gt; IOError: not opened ...</span>\n</pre>\n"],["IPAddr","","IPAddr.html","","<p>IPAddr provides a set of methods to manipulate an IP address.  Both IPv4 and IPv6 are supported.\n<p>Example …\n"],["IPAddr::AddressFamilyError","","IPAddr/AddressFamilyError.html","","<p>Raised when the address family is invalid such as an address with an unsupported family, an address with …\n"],["IPAddr::Error","","IPAddr/Error.html","","<p>Generic IPAddr related error. Exceptions raised in this class should inherit from Error.\n"],["IPAddr::InvalidAddressError","","IPAddr/InvalidAddressError.html","","<p>Raised when the provided IP address is an invalid address.\n"],["IPAddr::InvalidPrefixError","","IPAddr/InvalidPrefixError.html","","<p>Raised when the address is an invalid length.\n"],["IPSocket","","IPSocket.html","","<p>IPSocket is the super class of TCPSocket and UDPSocket.\n"],["IRB","","IRB.html","","<p>IRB stands for “interactive Ruby” and is a tool to interactively execute Ruby expressions read …\n"],["IRB::Abort","","IRB/Abort.html","","<p>An exception raised by IRB.irb_abort\n"],["IRB::CantChangeBinding","","IRB/CantChangeBinding.html","",""],["IRB::CantReturnToNormalMode","","IRB/CantReturnToNormalMode.html","",""],["IRB::Canvas","","IRB/Canvas.html","",""],["IRB::Color","","IRB/Color.html","",""],["IRB::Color::SymbolState","","IRB/Color/SymbolState.html","","<p>A class to manage a state to know whether the current token is for Symbol or not.\n"],["IRB::ColorPrinter","","IRB/ColorPrinter.html","",""],["IRB::Context","","IRB/Context.html","","<p>A class that wraps the current state of the irb session, including the configuration of IRB.conf.\n"],["IRB::ContextExtender","","IRB/ContextExtender.html","","<p>Extends methods for the Context module\n"],["IRB::ExtendCommand","","IRB/ExtendCommand.html","",""],["IRB::ExtendCommand::Backtrace","","IRB/ExtendCommand/Backtrace.html","",""],["IRB::ExtendCommand::Break","","IRB/ExtendCommand/Break.html","",""],["IRB::ExtendCommand::Catch","","IRB/ExtendCommand/Catch.html","",""],["IRB::ExtendCommand::ChangeWorkspace","","IRB/ExtendCommand/ChangeWorkspace.html","",""],["IRB::ExtendCommand::CommandArgumentError","","IRB/ExtendCommand/CommandArgumentError.html","",""],["IRB::ExtendCommand::Continue","","IRB/ExtendCommand/Continue.html","",""],["IRB::ExtendCommand::CurrentWorkingWorkspace","","IRB/ExtendCommand/CurrentWorkingWorkspace.html","",""],["IRB::ExtendCommand::Debug","","IRB/ExtendCommand/Debug.html","",""],["IRB::ExtendCommand::Debug::DEBUGGER__","","IRB/ExtendCommand/Debug/DEBUGGER__.html","",""],["IRB::ExtendCommand::Debug::SkipPathHelperForIRB","","IRB/ExtendCommand/Debug/SkipPathHelperForIRB.html","",""],["IRB::ExtendCommand::DebugCommand","","IRB/ExtendCommand/DebugCommand.html","",""],["IRB::ExtendCommand::Delete","","IRB/ExtendCommand/Delete.html","",""],["IRB::ExtendCommand::Edit","","IRB/ExtendCommand/Edit.html","",""],["IRB::ExtendCommand::Finish","","IRB/ExtendCommand/Finish.html","",""],["IRB::ExtendCommand::Foreground","","IRB/ExtendCommand/Foreground.html","",""],["IRB::ExtendCommand::Fork","","IRB/ExtendCommand/Fork.html","",""],["IRB::ExtendCommand::Help","","IRB/ExtendCommand/Help.html","",""],["IRB::ExtendCommand::Info","","IRB/ExtendCommand/Info.html","",""],["IRB::ExtendCommand::IrbCommand","","IRB/ExtendCommand/IrbCommand.html","",""],["IRB::ExtendCommand::IrbInfo","","IRB/ExtendCommand/IrbInfo.html","",""],["IRB::ExtendCommand::Jobs","","IRB/ExtendCommand/Jobs.html","",""],["IRB::ExtendCommand::Kill","","IRB/ExtendCommand/Kill.html","",""],["IRB::ExtendCommand::Load","","IRB/ExtendCommand/Load.html","",""],["IRB::ExtendCommand::LoaderCommand","","IRB/ExtendCommand/LoaderCommand.html","",""],["IRB::ExtendCommand::Ls","","IRB/ExtendCommand/Ls.html","",""],["IRB::ExtendCommand::Ls::Output","","IRB/ExtendCommand/Ls/Output.html","",""],["IRB::ExtendCommand::Measure","","IRB/ExtendCommand/Measure.html","",""],["IRB::ExtendCommand::MultiIRBCommand","","IRB/ExtendCommand/MultiIRBCommand.html","",""],["IRB::ExtendCommand::Next","","IRB/ExtendCommand/Next.html","",""],["IRB::ExtendCommand::Nop","","IRB/ExtendCommand/Nop.html","",""],["IRB::ExtendCommand::PopWorkspace","","IRB/ExtendCommand/PopWorkspace.html","",""],["IRB::ExtendCommand::PushWorkspace","","IRB/ExtendCommand/PushWorkspace.html","",""],["IRB::ExtendCommand::Require","","IRB/ExtendCommand/Require.html","",""],["IRB::ExtendCommand::ShowCmds","","IRB/ExtendCommand/ShowCmds.html","",""],["IRB::ExtendCommand::ShowSource","","IRB/ExtendCommand/ShowSource.html","",""],["IRB::ExtendCommand::Source","","IRB/ExtendCommand/Source.html","",""],["IRB::ExtendCommand::Step","","IRB/ExtendCommand/Step.html","",""],["IRB::ExtendCommand::Whereami","","IRB/ExtendCommand/Whereami.html","",""],["IRB::ExtendCommand::Workspaces","","IRB/ExtendCommand/Workspaces.html","",""],["IRB::ExtendCommandBundle","","IRB/ExtendCommandBundle.html","","<p>Installs the default irb extensions command bundle.\n"],["IRB::FileInputMethod","","IRB/FileInputMethod.html","","<p>Use a File for IO with irb, see InputMethod\n"],["IRB::Frame","","IRB/Frame.html","",""],["IRB::Frame::FrameOverflow","","IRB/Frame/FrameOverflow.html","",""],["IRB::Frame::FrameUnderflow","","IRB/Frame/FrameUnderflow.html","",""],["IRB::History","","IRB/History.html","","<p>Represents history of results of previously evaluated commands.\n<p>Available via <code>__</code> variable, only if <code>IRB.conf[:EVAL_HISTORY]</code> …\n"],["IRB::IllegalParameter","","IRB/IllegalParameter.html","",""],["IRB::IllegalRCGenerator","","IRB/IllegalRCGenerator.html","",""],["IRB::InputMethod","","IRB/InputMethod.html","",""],["IRB::Inspector","","IRB/Inspector.html","","<p>An irb inspector\n<p>In order to create your own custom inspector there are two things you should be aware …\n"],["IRB::Irb","","IRB/Irb.html","",""],["IRB::IrbAlreadyDead","","IRB/IrbAlreadyDead.html","",""],["IRB::IrbLoader","","IRB/IrbLoader.html","","<p>Provides a few commands for loading files within an irb session.\n<p>See ExtendCommandBundle for more information. …\n"],["IRB::IrbSwitchedToCurrentThread","","IRB/IrbSwitchedToCurrentThread.html","",""],["IRB::JobManager","","IRB/JobManager.html","",""],["IRB::LoadAbort","","IRB/LoadAbort.html","","<p>Raised in the event of an exception in a file loaded from an Irb session\n"],["IRB::Locale","","IRB/Locale.html","",""],["IRB::MagicFile","","IRB/MagicFile.html","",""],["IRB::MethodExtender","","IRB/MethodExtender.html","","<p>A convenience module for extending Ruby methods.\n"],["IRB::NoSuchJob","","IRB/NoSuchJob.html","",""],["IRB::NotImplementedError","","IRB/NotImplementedError.html","",""],["IRB::Notifier","","IRB/Notifier.html","","<p>An output formatter used internally by the lexer.\n"],["IRB::Notifier::AbstractNotifier","","IRB/Notifier/AbstractNotifier.html","","<p>An abstract class, or superclass, for CompositeNotifier and LeveledNotifier to inherit. It provides several …\n"],["IRB::Notifier::CompositeNotifier","","IRB/Notifier/CompositeNotifier.html","","<p>A class that can be used to create a group of notifier objects with the intent of representing a leveled …\n"],["IRB::Notifier::ErrUndefinedNotifier","","IRB/Notifier/ErrUndefinedNotifier.html","",""],["IRB::Notifier::ErrUnrecognizedLevel","","IRB/Notifier/ErrUnrecognizedLevel.html","",""],["IRB::Notifier::LeveledNotifier","","IRB/Notifier/LeveledNotifier.html","","<p>A leveled notifier is comparable to the composite group from CompositeNotifier#notifiers.\n"],["IRB::Notifier::NoMsgNotifier","","IRB/Notifier/NoMsgNotifier.html","","<p>NoMsgNotifier is a LeveledNotifier that’s used as the default notifier when creating a new CompositeNotifier …\n"],["IRB::OutputMethod","","IRB/OutputMethod.html","","<p>An abstract output class for IO in irb. This is mainly used internally by IRB::Notifier. You can define …\n"],["IRB::OutputMethod::NotImplementedError","","IRB/OutputMethod/NotImplementedError.html","",""],["IRB::ReadlineInputMethod","","IRB/ReadlineInputMethod.html","",""],["IRB::ReidlineInputMethod","","IRB/ReidlineInputMethod.html","",""],["IRB::RelineInputMethod","","IRB/RelineInputMethod.html","",""],["IRB::RubyModel","","IRB/RubyModel.html","",""],["IRB::StdioInputMethod","","IRB/StdioInputMethod.html","",""],["IRB::StdioOutputMethod","","IRB/StdioOutputMethod.html","","<p>A standard output printer\n"],["IRB::UndefinedPromptMode","","IRB/UndefinedPromptMode.html","",""],["IRB::UnrecognizedSwitch","","IRB/UnrecognizedSwitch.html","",""],["IRB::Vec","","IRB/Vec.html","",""],["IRB::WorkSpace","","IRB/WorkSpace.html","",""],["IndexError","","IndexError.html","","<p>Raised when the given index is invalid.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-value\">:bar</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">fetch</span>(<span class=\"ruby-value\">0</span>)   <span class=\"ruby-comment\">#=&gt; :foo</span>\n<span class=\"ruby-identifier\">a</span>[<span class=\"ruby-value\">4</span>]         <span class=\"ruby-comment\">#=&gt; nil</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">fetch</span>(<span class=\"ruby-value\">4</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Integer","","Integer.html","","<p>An Integer object represents an integer value.\n<p>You can create an Integer object explicitly with:\n<p>An integer …\n"],["Interrupt","","Interrupt.html","","<p>Raised when the interrupt signal is received, typically because the user has pressed Control-C (on most …\n"],["JSON","","JSON.html","","<p>JavaScript Object Notation (JSON)\n<p>JSON is a lightweight data-interchange format.\n<p>A JSON value is one of …\n"],["JSON::CircularDatastructure","","JSON/CircularDatastructure.html","",""],["JSON::Ext","","JSON/Ext.html","","<p>This module holds all the modules/classes that implement JSON’s functionality as C extensions.\n"],["JSON::Ext::Generator","","JSON/Ext/Generator.html","","<p>This is the JSON generator implemented as a C extension. It can be configured to be used by setting\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">JSON</span>.<span class=\"ruby-identifier\">generator</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["JSON::Ext::Generator::State","","JSON/Ext/Generator/State.html","",""],["JSON::Ext::Parser","","JSON/Ext/Parser.html","","<p>This is the JSON parser implemented as a C extension. It can be configured to be used by setting\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">JSON</span>.<span class=\"ruby-identifier\">parser</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["JSON::GeneratorError","","JSON/GeneratorError.html","","<p>This exception is raised if a generator or unparser error occurs.\n"],["JSON::GenericObject","","JSON/GenericObject.html","",""],["JSON::JSONError","","JSON/JSONError.html","","<p>The base exception for JSON errors.\n"],["JSON::MissingUnicodeSupport","","JSON/MissingUnicodeSupport.html","","<p>This exception is raised if the required unicode support is missing on the system. Usually this means …\n"],["JSON::NestingError","","JSON/NestingError.html","","<p>This exception is raised if the nesting of parsed data structures is too deep.\n"],["JSON::ParserError","","JSON/ParserError.html","","<p>This exception is raised if a parser error occurs.\n"],["Jacobian","","Jacobian.html","","<p>require ‘bigdecimal/jacobian’\n<p>Provides methods to compute the Jacobian matrix of a set of equations …\n"],["Kconv","","Kconv.html","","<p>Kanji Converter for Ruby.\n"],["Kernel","","Kernel.html","","<p>Monkey patch kernel to ensure that all ‘require` calls call the same method\n<p>The Kernel module is included …\n"],["KeyError","","KeyError.html","","<p>Raised when the specified key is not found. It is a subclass of IndexError.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-string\">&quot;foo&quot;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-value\">:bar</span>}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">fetch</span>(<span class=\"ruby-string\">&quot;foo&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["LUSolve","","LUSolve.html","","<p>Solves a*x = b for x, using LU decomposition.\n"],["LoadError","","LoadError.html","","<p>Raised when a file required (a Ruby script, extension library, …) fails to load.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;this/file/does/not/exist&#39;</span>\n</pre>\n"],["LocalJumpError","","LocalJumpError.html","","<p>Raised when Ruby can’t yield as requested.\n<p>A typical scenario is attempting to yield when no block …\n"],["Logger","","Logger.html","","<p>Class Logger provides a simple but sophisticated logging utility that you can use to create one or more …\n"],["Logger::Formatter","","Logger/Formatter.html","","<p>Default formatter for log messages.\n"],["Logger::LogDevice","","Logger/LogDevice.html","","<p>Device used for logging messages.\n"],["Logger::Period","","Logger/Period.html","",""],["Logger::Severity","","Logger/Severity.html","","<p>Logging severity.\n"],["MakeMakefile","","MakeMakefile.html","","<p>mkmf.rb is used by Ruby C extensions to generate a Makefile which will correctly compile and link the …\n"],["MakeMakefile::Logging","","MakeMakefile/Logging.html","",""],["MakeMakefile::RbConfig","","MakeMakefile/RbConfig.html","",""],["Marshal","","Marshal.html","","<p>The marshaling library converts collections of Ruby objects into a byte stream, allowing them to be stored …\n"],["MatchData","","MatchData.html","","<p>MatchData encapsulates the result of matching a Regexp against string. It is returned by Regexp#match …\n"],["Math","","Math.html","","<p>Module Math provides methods for basic trigonometric, logarithmic, and transcendental functions, and …\n"],["Math::DomainError","","Math/DomainError.html","","<p>Raised when a mathematical function is evaluated outside of its domain of definition.\n<p>For example, since …\n"],["Method","","Method.html","","<p>Method objects are created by Object#method, and are associated with a particular object (not just with …\n"],["Module","","Module.html","","<p>A Module is a collection of methods and constants. The methods in a module may be instance methods or …\n"],["Monitor","","Monitor.html","","<p>Use the Monitor class when you want to have a lock object for blocks with mutual exclusion.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;monitor&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["MonitorMixin","","MonitorMixin.html","",""],["MonitorMixin::ConditionVariable","","MonitorMixin/ConditionVariable.html","","<p>FIXME: This isn’t documented in Nutshell.\n<p>Since MonitorMixin.new_cond returns a ConditionVariable …\n"],["Mutex_m","","Mutex_m.html","","<p>mutex_m.rb\n<p>When ‘mutex_m’ is required, any object that extends or includes Mutex_m will be treated …\n"],["NKF","","NKF.html","","<p>NKF - Ruby extension for Network Kanji Filter\n<p>Description\n<p>This is a Ruby Extension version of nkf (Network …\n"],["NameError","","NameError.html","","<p>Raised when a given name is invalid or undefined.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">foo</span>\n</pre>\n<p><em>raises the exception:</em>\n"],["Net","","Net.html","",""],["Net::HTTP","","Net/HTTP.html","","<p>Class Net::HTTP provides a rich library that implements the client in a client-server model that uses …\n"],["Net::HTTP::Copy","","Net/HTTP/Copy.html","","<p>Class for representing WebDAV method COPY:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Delete","","Net/HTTP/Delete.html","","<p>Class for representing HTTP method DELETE:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Get","","Net/HTTP/Get.html","","<p>Class for representing HTTP method GET:\n\n<pre>require &#39;net/http&#39;\nuri = URI(&#39;http://example.com&#39;)\nhostname = ...</pre>\n"],["Net::HTTP::Head","","Net/HTTP/Head.html","","<p>Class for representing HTTP method HEAD:\n\n<pre>require &#39;net/http&#39;\nuri = URI(&#39;http://example.com&#39;)\nhostname = ...</pre>\n"],["Net::HTTP::Lock","","Net/HTTP/Lock.html","","<p>Class for representing WebDAV method LOCK:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Mkcol","","Net/HTTP/Mkcol.html","","<p>Class for representing WebDAV method MKCOL:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Move","","Net/HTTP/Move.html","","<p>Class for representing WebDAV method MOVE:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Options","","Net/HTTP/Options.html","","<p>Class for representing HTTP method OPTIONS:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Patch","","Net/HTTP/Patch.html","","<p>Class for representing HTTP method PATCH:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Post","","Net/HTTP/Post.html","","<p>Class for representing HTTP method POST:\n\n<pre>require &#39;net/http&#39;\nuri = URI(&#39;http://example.com&#39;)\nhostname = ...</pre>\n"],["Net::HTTP::Propfind","","Net/HTTP/Propfind.html","","<p>Class for representing WebDAV method PROPFIND:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Proppatch","","Net/HTTP/Proppatch.html","","<p>Class for representing WebDAV method PROPPATCH:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Put","","Net/HTTP/Put.html","","<p>Class for representing HTTP method PUT:\n\n<pre>require &#39;net/http&#39;\nuri = URI(&#39;http://example.com&#39;)\nhostname = ...</pre>\n"],["Net::HTTP::Trace","","Net/HTTP/Trace.html","","<p>Class for representing HTTP method TRACE:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Unlock","","Net/HTTP/Unlock.html","","<p>Class for representing WebDAV method UNLOCK:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTPAccepted","","Net/HTTPAccepted.html","","<p>Response class for <code>Accepted</code> responses (status code 202).\n<p>The <code>Accepted</code> response indicates that the server …\n"],["Net::HTTPAlreadyReported","","Net/HTTPAlreadyReported.html","","<p>Response class for <code>Already Reported (WebDAV)</code> responses (status code 208).\n<p>The <code>Already Reported (WebDAV)</code> …\n"],["Net::HTTPBadGateway","","Net/HTTPBadGateway.html","","<p>Response class for <code>Bad Gateway</code> responses (status code 502).\n<p>The server was acting as a gateway or proxy …\n"],["Net::HTTPBadRequest","","Net/HTTPBadRequest.html","","<p>Response class for <code>Bad Request</code> responses (status code 400).\n<p>The server cannot or will not process the …\n"],["Net::HTTPBadResponse","","Net/HTTPBadResponse.html","",""],["Net::HTTPClientError","","Net/HTTPClientError.html","","<p>Parent class for client error (4xx) HTTP response classes.\n<p>A client error response indicates that the …\n"],["Net::HTTPClientException","","Net/HTTPClientException.html","",""],["Net::HTTPConflict","","Net/HTTPConflict.html","","<p>Response class for <code>Conflict</code> responses (status code 409).\n<p>The request could not be processed because of …\n"],["Net::HTTPContinue","","Net/HTTPContinue.html","","<p>Response class for <code>Continue</code> responses (status code 100).\n<p>A <code>Continue</code> response indicates that the server …\n"],["Net::HTTPCreated","","Net/HTTPCreated.html","","<p>Response class for <code>Created</code> responses (status code 201).\n<p>The <code>Created</code> response indicates that the server …\n"],["Net::HTTPEarlyHints","","Net/HTTPEarlyHints.html","","<p>Response class for <code>Early Hints</code> responses (status code 103).\n<p>The <code>Early Hints</code> indicates that the server …\n"],["Net::HTTPError","","Net/HTTPError.html","",""],["Net::HTTPExceptions","","Net/HTTPExceptions.html","","<p>Net::HTTP exception class. You cannot use Net::HTTPExceptions directly; instead, you must use its subclasses. …\n"],["Net::HTTPExpectationFailed","","Net/HTTPExpectationFailed.html","","<p>Response class for <code>Expectation Failed</code> responses (status code 417).\n<p>The server cannot meet the requirements …\n"],["Net::HTTPFailedDependency","","Net/HTTPFailedDependency.html","","<p>Response class for <code>Failed Dependency (WebDAV)</code> responses (status code 424).\n<p>The request failed because …\n"],["Net::HTTPFatalError","","Net/HTTPFatalError.html","",""],["Net::HTTPForbidden","","Net/HTTPForbidden.html","","<p>Response class for <code>Forbidden</code> responses (status code 403).\n<p>The request contained valid data and was understood …\n"],["Net::HTTPFound","","Net/HTTPFound.html","","<p>Response class for <code>Found</code> responses (status code 302).\n<p>The <code>Found</code> response indicates that the client should …\n"],["Net::HTTPGatewayTimeOut","","Net/HTTPGatewayTimeout.html","","<p>Response class for <code>Gateway Timeout</code> responses (status code 504).\n<p>The server was acting as a gateway or …\n"],["Net::HTTPGatewayTimeout","","Net/HTTPGatewayTimeout.html","","<p>Response class for <code>Gateway Timeout</code> responses (status code 504).\n<p>The server was acting as a gateway or …\n"],["Net::HTTPGenericRequest","","Net/HTTPGenericRequest.html","","<p>HTTPGenericRequest is the parent of the Net::HTTPRequest class. Do not use this directly; use a subclass …\n"],["Net::HTTPGone","","Net/HTTPGone.html","","<p>Response class for <code>Gone</code> responses (status code 410).\n<p>The resource requested was previously in use but …\n"],["Net::HTTPHeader","","Net/HTTPHeader.html","","<p>The HTTPHeader module provides access to HTTP headers.\n<p>The module is included in:\n<p>Net::HTTPGenericRequest …\n"],["Net::HTTPHeaderSyntaxError","","Net/HTTPHeaderSyntaxError.html","",""],["Net::HTTPIMUsed","","Net/HTTPIMUsed.html","","<p>Response class for <code>IM Used</code> responses (status code 226).\n<p>The <code>IM Used</code> response indicates that the server …\n"],["Net::HTTPInformation","","Net/HTTPInformation.html","","<p>Parent class for informational (1xx) HTTP response classes.\n<p>An informational response indicates that the …\n"],["Net::HTTPInsufficientStorage","","Net/HTTPInsufficientStorage.html","","<p>Response class for <code>Insufficient Storage (WebDAV)</code> responses (status code 507).\n<p>The server is unable to …\n"],["Net::HTTPInternalServerError","","Net/HTTPInternalServerError.html","","<p>Response class for <code>Internal Server Error</code> responses (status code 500).\n<p>An unexpected condition was encountered …\n"],["Net::HTTPLengthRequired","","Net/HTTPLengthRequired.html","","<p>Response class for <code>Length Required</code> responses (status code 411).\n<p>The request did not specify the length …\n"],["Net::HTTPLocked","","Net/HTTPLocked.html","","<p>Response class for <code>Locked (WebDAV)</code> responses (status code 423).\n<p>The requested resource is locked. See …\n"],["Net::HTTPLoopDetected","","Net/HTTPLoopDetected.html","","<p>Response class for <code>Loop Detected (WebDAV)</code> responses (status code 508).\n<p>The server detected an infinite …\n"],["Net::HTTPMethodNotAllowed","","Net/HTTPMethodNotAllowed.html","","<p>Response class for <code>Method Not Allowed</code> responses (status code 405).\n<p>The request method is not supported …\n"],["Net::HTTPMisdirectedRequest","","Net/HTTPMisdirectedRequest.html","","<p>Response class for <code>Misdirected Request</code> responses (status code 421).\n<p>The request was directed at a server …\n"],["Net::HTTPMovedPermanently","","Net/HTTPMovedPermanently.html","","<p>Response class for <code>Moved Permanently</code> responses (status code 301).\n<p>The <code>Moved Permanently</code> response indicates …\n"],["Net::HTTPMovedTemporarily","","Net/HTTPFound.html","","<p>Response class for <code>Found</code> responses (status code 302).\n<p>The <code>Found</code> response indicates that the client should …\n"],["Net::HTTPMultiStatus","","Net/HTTPMultiStatus.html","","<p>Response class for <code>Multi-Status (WebDAV)</code> responses (status code 207).\n<p>The <code>Multi-Status (WebDAV)</code> response …\n"],["Net::HTTPMultipleChoice","","Net/HTTPMultipleChoices.html","","<p>Response class for <code>Multiple Choices</code> responses (status code 300).\n<p>The <code>Multiple Choices</code> response indicates …\n"],["Net::HTTPMultipleChoices","","Net/HTTPMultipleChoices.html","","<p>Response class for <code>Multiple Choices</code> responses (status code 300).\n<p>The <code>Multiple Choices</code> response indicates …\n"],["Net::HTTPNetworkAuthenticationRequired","","Net/HTTPNetworkAuthenticationRequired.html","","<p>Response class for <code>Network Authentication Required</code> responses (status code 511).\n<p>The client needs to authenticate …\n"],["Net::HTTPNoContent","","Net/HTTPNoContent.html","","<p>Response class for <code>No Content</code> responses (status code 204).\n<p>The <code>No Content</code> response indicates that the …\n"],["Net::HTTPNonAuthoritativeInformation","","Net/HTTPNonAuthoritativeInformation.html","","<p>Response class for <code>Non-Authoritative Information</code> responses (status code 203).\n<p>The <code>Non-Authoritative Information</code> …\n"],["Net::HTTPNotAcceptable","","Net/HTTPNotAcceptable.html","","<p>Response class for <code>Not Acceptable</code> responses (status code 406).\n<p>The requested resource is capable of generating …\n"],["Net::HTTPNotExtended","","Net/HTTPNotExtended.html","","<p>Response class for <code>Not Extended</code> responses (status code 510).\n<p>Further extensions to the request are required …\n"],["Net::HTTPNotFound","","Net/HTTPNotFound.html","","<p>Response class for <code>Not Found</code> responses (status code 404).\n<p>The requested resource could not be found but …\n"],["Net::HTTPNotImplemented","","Net/HTTPNotImplemented.html","","<p>Response class for <code>Not Implemented</code> responses (status code 501).\n<p>The server either does not recognize the …\n"],["Net::HTTPNotModified","","Net/HTTPNotModified.html","","<p>Response class for <code>Not Modified</code> responses (status code 304).\n<p>Indicates that the resource has not been …\n"],["Net::HTTPOK","","Net/HTTPOK.html","","<p>Response class for <code>OK</code> responses (status code 200).\n<p>The <code>OK</code> response indicates that the server has received …\n"],["Net::HTTPPartialContent","","Net/HTTPPartialContent.html","","<p>Response class for <code>Partial Content</code> responses (status code 206).\n<p>The <code>Partial Content</code> response indicates …\n"],["Net::HTTPPayloadTooLarge","","Net/HTTPPayloadTooLarge.html","","<p>Response class for <code>Payload Too Large</code> responses (status code 413).\n<p>The request is larger than the server …\n"],["Net::HTTPPaymentRequired","","Net/HTTPPaymentRequired.html","","<p>Response class for <code>Payment Required</code> responses (status code 402).\n<p>Reserved for future use. See 402 Payment …\n"],["Net::HTTPPermanentRedirect","","Net/HTTPPermanentRedirect.html","","<p>Response class for <code>Permanent Redirect</code> responses (status code 308).\n<p>This and all future requests should …\n"],["Net::HTTPPreconditionFailed","","Net/HTTPPreconditionFailed.html","","<p>Response class for <code>Precondition Failed</code> responses (status code 412).\n<p>The server does not meet one of the …\n"],["Net::HTTPPreconditionRequired","","Net/HTTPPreconditionRequired.html","","<p>Response class for <code>Precondition Required</code> responses (status code 428).\n<p>The origin server requires the request …\n"],["Net::HTTPProcessing","","Net/HTTPProcessing.html","","<p>Response class for <code>Processing</code> responses (status code 102).\n<p>The <code>Processing</code> response indicates that the …\n"],["Net::HTTPProxyAuthenticationRequired","","Net/HTTPProxyAuthenticationRequired.html","","<p>Response class for <code>Proxy Authentication Required</code> responses (status code 407).\n<p>The client must first authenticate …\n"],["Net::HTTPRangeNotSatisfiable","","Net/HTTPRangeNotSatisfiable.html","","<p>Response class for <code>Range Not Satisfiable</code> responses (status code 416).\n<p>The request entity has a media type …\n"],["Net::HTTPRedirection","","Net/HTTPRedirection.html","","<p>Parent class for redirection (3xx) HTTP response classes.\n<p>A redirection response indicates the client …\n"],["Net::HTTPRequest","","Net/HTTPRequest.html","","<p>This class is the base class for Net::HTTP request classes; it wraps together the request path and the …\n"],["Net::HTTPRequestEntityTooLarge","","Net/HTTPPayloadTooLarge.html","","<p>Response class for <code>Payload Too Large</code> responses (status code 413).\n<p>The request is larger than the server …\n"],["Net::HTTPRequestHeaderFieldsTooLarge","","Net/HTTPRequestHeaderFieldsTooLarge.html","","<p>Response class for <code>Request Header Fields Too Large</code> responses (status code 431).\n<p>An individual header field …\n"],["Net::HTTPRequestTimeOut","","Net/HTTPRequestTimeout.html","","<p>Response class for <code>Request Timeout</code> responses (status code 408).\n<p>The server timed out waiting for the request. …\n"],["Net::HTTPRequestTimeout","","Net/HTTPRequestTimeout.html","","<p>Response class for <code>Request Timeout</code> responses (status code 408).\n<p>The server timed out waiting for the request. …\n"],["Net::HTTPRequestURITooLarge","","Net/HTTPRequestURITooLong.html","","<p>Response class for <code>URI Too Long</code> responses (status code 414).\n<p>The URI provided was too long for the server …\n"],["Net::HTTPRequestURITooLong","","Net/HTTPURITooLong.html","","<p>Response class for <code>URI Too Long</code> responses (status code 414).\n<p>The URI provided was too long for the server …\n"],["Net::HTTPRequestedRangeNotSatisfiable","","Net/HTTPRangeNotSatisfiable.html","","<p>Response class for <code>Range Not Satisfiable</code> responses (status code 416).\n<p>The request entity has a media type …\n"],["Net::HTTPResetContent","","Net/HTTPResetContent.html","","<p>Response class for <code>Reset Content</code> responses (status code 205).\n<p>The <code>Reset Content</code> response indicates that …\n"],["Net::HTTPResponse","","Net/HTTPResponse.html","","<p>This class is the base class for Net::HTTP request classes.\n<p>About the Examples\n<p>Examples here assume that …\n"],["Net::HTTPRetriableError","","Net/HTTPRetriableError.html","",""],["Net::HTTPSeeOther","","Net/HTTPSeeOther.html","","<p>Response class for <code>See Other</code> responses (status code 303).\n<p>The response to the request can be found under …\n"],["Net::HTTPServerError","","Net/HTTPServerError.html","","<p>Parent class for server error (5xx) HTTP response classes.\n<p>A server error response indicates that the …\n"],["Net::HTTPServiceUnavailable","","Net/HTTPServiceUnavailable.html","","<p>Response class for <code>Service Unavailable</code> responses (status code 503).\n<p>The server cannot handle the request …\n"],["Net::HTTPSuccess","","Net/HTTPSuccess.html","","<p>Parent class for success (2xx) HTTP response classes.\n<p>A success response indicates the action requested …\n"],["Net::HTTPSwitchProtocol","","Net/HTTPSwitchProtocol.html","","<p>Response class for <code>Switching Protocol</code> responses (status code 101).\n<p>The &lt;tt&gt;Switching Protocol&lt;tt&gt; …\n"],["Net::HTTPTemporaryRedirect","","Net/HTTPTemporaryRedirect.html","","<p>Response class for <code>Temporary Redirect</code> responses (status code 307).\n<p>The request should be repeated with …\n"],["Net::HTTPTooManyRequests","","Net/HTTPTooManyRequests.html","","<p>Response class for <code>Too Many Requests</code> responses (status code 429).\n<p>The user has sent too many requests …\n"],["Net::HTTPURITooLong","","Net/HTTPURITooLong.html","","<p>Response class for <code>URI Too Long</code> responses (status code 414).\n<p>The URI provided was too long for the server …\n"],["Net::HTTPUnauthorized","","Net/HTTPUnauthorized.html","","<p>Response class for <code>Unauthorized</code> responses (status code 401).\n<p>Authentication is required, but either was …\n"],["Net::HTTPUnavailableForLegalReasons","","Net/HTTPUnavailableForLegalReasons.html","","<p>Response class for <code>Unavailable For Legal Reasons</code> responses (status code 451).\n<p>A server operator has received …\n"],["Net::HTTPUnknownResponse","","Net/HTTPUnknownResponse.html","",""],["Net::HTTPUnprocessableEntity","","Net/HTTPUnprocessableEntity.html","","<p>Response class for <code>Unprocessable Entity</code> responses (status code 422).\n<p>The request was well-formed but had …\n"],["Net::HTTPUnsupportedMediaType","","Net/HTTPUnsupportedMediaType.html","","<p>Response class for <code>Unsupported Media Type</code> responses (status code 415).\n<p>The request entity has a media …\n"],["Net::HTTPUpgradeRequired","","Net/HTTPUpgradeRequired.html","","<p>Response class for <code>Upgrade Required</code> responses (status code 426).\n<p>The client should switch to the protocol …\n"],["Net::HTTPUseProxy","","Net/HTTPUseProxy.html","","<p>Response class for <code>Use Proxy</code> responses (status code 305).\n<p>The requested resource is available only through …\n"],["Net::HTTPVariantAlsoNegotiates","","Net/HTTPVariantAlsoNegotiates.html","","<p>Response class for <code>Variant Also Negotiates</code> responses (status code 506).\n<p>Transparent content negotiation …\n"],["Net::HTTPVersionNotSupported","","Net/HTTPVersionNotSupported.html","","<p>Response class for <code>HTTP Version Not Supported</code> responses (status code 505).\n<p>The server does not support …\n"],["Net::OpenTimeout","","Net/OpenTimeout.html","","<p>OpenTimeout, a subclass of Timeout::Error, is raised if a connection cannot be created within the open_timeout. …\n"],["Net::ProtoAuthError","","Net/ProtoAuthError.html","",""],["Net::ProtoCommandError","","Net/ProtoCommandError.html","",""],["Net::ProtoFatalError","","Net/ProtoFatalError.html","",""],["Net::ProtoRetriableError","","Net/ProtoRetriableError.html","",""],["Net::ProtoServerError","","Net/ProtoServerError.html","",""],["Net::ProtoSyntaxError","","Net/ProtoSyntaxError.html","",""],["Net::ProtoUnknownError","","Net/ProtoUnknownError.html","",""],["Net::ProtocRetryError","","Net/ProtocRetryError.html","",""],["Net::ProtocolError","","Net/ProtocolError.html","",""],["Net::ReadTimeout","","Net/ReadTimeout.html","","<p>ReadTimeout, a subclass of Timeout::Error, is raised if a chunk of the response cannot be read within …\n"],["Net::WriteAdapter","","Net/WriteAdapter.html","","<p>The writer adapter class\n"],["Net::WriteTimeout","","Net/WriteTimeout.html","","<p>WriteTimeout, a subclass of Timeout::Error, is raised if a chunk of the response cannot be written within …\n"],["Newton","","Newton.html","","<p>newton.rb\n<p>Solves the nonlinear algebraic equation system f = 0 by Newton’s method. This program is …\n"],["NilClass","","NilClass.html","","<p>The class of the singleton object <code>nil</code>.\n"],["NoMatchingPatternError","","NoMatchingPatternError.html","",""],["NoMatchingPatternKeyError","","NoMatchingPatternKeyError.html","",""],["NoMemoryError","","NoMemoryError.html","","<p>Raised when memory allocation fails.\n"],["NoMethodError","","NoMethodError.html","","<p>Raised when a method is called on a receiver which doesn’t have it defined and also fails to respond …\n"],["NotImplementedError","","NotImplementedError.html","","<p>Raised when a feature is not implemented on the current platform. For example, methods depending on the …\n"],["Numeric","","Numeric.html","","<p>Numeric is the class from which all higher-level numeric classes should inherit.\n<p>Numeric allows instantiation …\n"],["OLEProperty","","OLEProperty.html","","<p>OLEProperty helper class of Property with arguments.\n"],["Object","","Object.html","","<p>! –\n\n<pre>\\private\nInitializes the world of objects and classes.\n\nAt first, the function bootstraps the class ...</pre>\n"],["ObjectSpace","","ObjectSpace.html","","<p>The objspace library extends the ObjectSpace module and adds several methods to get internal statistic …\n"],["ObjectSpace::InternalObjectWrapper","","ObjectSpace/InternalObjectWrapper.html","","<p>This class is used as a return value from ObjectSpace::reachable_objects_from.\n<p>When ObjectSpace::reachable_objects_from …\n"],["ObjectSpace::WeakMap","","ObjectSpace/WeakMap.html","","<p>An ObjectSpace::WeakMap object holds references to any objects, but those objects can get garbage collected. …\n"],["Observable","","Observable.html","","<p>The Observer pattern (also known as publish/subscribe) provides a simple mechanism for one object to …\n"],["Open3","","Open3.html","",""],["OpenSSL","","OpenSSL.html","","<p>OpenSSL provides SSL, TLS and general purpose cryptography.  It wraps the OpenSSL library.\n<p>Examples\n<p>All …\n"],["OpenSSL::ASN1","","OpenSSL/ASN1.html","","<p>Abstract Syntax Notation One (or ASN.1) is a notation syntax to describe data structures and is defined …\n"],["OpenSSL::ASN1::ASN1Data","","OpenSSL/ASN1/ASN1Data.html","","<p>The top-level class representing any ASN.1 object. When parsed by ASN1.decode, tagged values are always …\n"],["OpenSSL::ASN1::ASN1Error","","OpenSSL/ASN1/ASN1Error.html","","<p>Generic error class for all errors raised in ASN1 and any of the classes defined in it.\n"],["OpenSSL::ASN1::Constructive","","OpenSSL/ASN1/Constructive.html","","<p>The parent class for all constructed encodings. The <em>value</em> attribute of a Constructive is always an Array …\n"],["OpenSSL::ASN1::ObjectId","","OpenSSL/ASN1/ObjectId.html","","<p>Represents the primitive object id for OpenSSL::ASN1\n"],["OpenSSL::ASN1::Primitive","","OpenSSL/ASN1/Primitive.html","","<p>The parent class for all primitive encodings. Attributes are the same as for ASN1Data, with the addition …\n"],["OpenSSL::BN","","OpenSSL/BN.html","",""],["OpenSSL::BNError","","OpenSSL/BNError.html","","<p>Generic Error for all of OpenSSL::BN (big num)\n"],["OpenSSL::Buffering","","OpenSSL/Buffering.html","","<p>OpenSSL IO buffering mix-in module.\n<p>This module allows an OpenSSL::SSL::SSLSocket to behave like an IO …\n"],["OpenSSL::Buffering::Buffer","","OpenSSL/Buffering/Buffer.html","","<p>A buffer which will retain binary encoding.\n"],["OpenSSL::Cipher","","OpenSSL/Cipher.html","","<p>Provides symmetric algorithms for encryption and decryption. The algorithms that are available depend …\n"],["OpenSSL::Cipher::Cipher","","OpenSSL/Cipher/Cipher.html","","<p>Deprecated.\n<p>This class is only provided for backwards compatibility. Use OpenSSL::Cipher.\n"],["OpenSSL::Cipher::CipherError","","OpenSSL/Cipher/CipherError.html","",""],["OpenSSL::Config","","OpenSSL/Config.html","","<p>Configuration for the openssl library.\n<p>Many system’s installation of openssl library will depend on …\n"],["OpenSSL::ConfigError","","OpenSSL/ConfigError.html","","<p>General error for openssl library configuration files. Including formatting, parsing errors, etc.\n"],["OpenSSL::Digest","","OpenSSL/Digest.html","","<p>OpenSSL::Digest allows you to compute message digests (sometimes interchangeably called “hashes”) …\n"],["OpenSSL::Digest::DigestError","","OpenSSL/Digest/DigestError.html","","<p>Generic Exception class that is raised if an error occurs during a Digest operation.\n"],["OpenSSL::Engine","","OpenSSL/Engine.html","","<p>This class is the access to openssl’s ENGINE cryptographic module implementation.\n<p>See also, www.openssl.org/docs/crypto/engine.html …\n"],["OpenSSL::Engine::EngineError","","OpenSSL/Engine/EngineError.html","","<p>This is the generic exception for OpenSSL::Engine related errors\n"],["OpenSSL::HMAC","","OpenSSL/HMAC.html","","<p>OpenSSL::HMAC allows computing Hash-based Message Authentication Code (HMAC). It is a type of message …\n"],["OpenSSL::HMACError","","OpenSSL/HMACError.html","","<p>Document-class: OpenSSL::HMAC\n<p>OpenSSL::HMAC allows computing Hash-based Message Authentication Code ( …\n"],["OpenSSL::KDF","","OpenSSL/KDF.html","","<p>Provides functionality of various KDFs (key derivation function).\n<p>KDF is typically used for securely deriving …\n"],["OpenSSL::KDF::KDFError","","OpenSSL/KDF/KDFError.html","","<p>Generic exception class raised if an error occurs in OpenSSL::KDF module.\n"],["OpenSSL::Marshal","","OpenSSL/Marshal.html","",""],["OpenSSL::Marshal::ClassMethods","","OpenSSL/Marshal/ClassMethods.html","",""],["OpenSSL::Netscape","","OpenSSL/Netscape.html","","<p>OpenSSL::Netscape is a namespace for SPKI (Simple Public Key Infrastructure) which implements Signed …\n"],["OpenSSL::Netscape::SPKI","","OpenSSL/Netscape/SPKI.html","","<p>A Simple Public Key Infrastructure implementation (pronounced “spooky”). The structure is defined …\n"],["OpenSSL::Netscape::SPKIError","","OpenSSL/Netscape/SPKIError.html","","<p>Generic Exception class that is raised if an error occurs during an operation on an instance of OpenSSL::Netscape::SPKI …\n"],["OpenSSL::OCSP","","OpenSSL/OCSP.html","","<p>OpenSSL::OCSP implements Online Certificate Status Protocol requests and responses.\n<p>Creating and sending …\n"],["OpenSSL::OCSP::BasicResponse","","OpenSSL/OCSP/BasicResponse.html","","<p>An OpenSSL::OCSP::BasicResponse contains the status of a certificate check which is created from an  …\n"],["OpenSSL::OCSP::CertificateId","","OpenSSL/OCSP/CertificateId.html","","<p>An OpenSSL::OCSP::CertificateId identifies a certificate to the CA so that a status check can be performed. …\n"],["OpenSSL::OCSP::OCSPError","","OpenSSL/OCSP/OCSPError.html","","<p>OCSP error class.\n"],["OpenSSL::OCSP::Request","","OpenSSL/OCSP/Request.html","","<p>An OpenSSL::OCSP::Request contains the certificate information for determining if a certificate has been …\n"],["OpenSSL::OCSP::Response","","OpenSSL/OCSP/Response.html","","<p>An OpenSSL::OCSP::Response contains the status of a certificate check which is created from an OpenSSL::OCSP::Request …\n"],["OpenSSL::OCSP::SingleResponse","","OpenSSL/OCSP/SingleResponse.html","","<p>An OpenSSL::OCSP::SingleResponse represents an OCSP SingleResponse structure, which contains the basic …\n"],["OpenSSL::OpenSSLError","","OpenSSL/OpenSSLError.html","","<p>Generic error, common for all classes under OpenSSL module\n"],["OpenSSL::PKCS12","","OpenSSL/PKCS12.html","","<p>Defines a file format commonly used to store private keys with accompanying public key certificates, …\n"],["OpenSSL::PKCS12::PKCS12Error","","OpenSSL/PKCS12/PKCS12Error.html","",""],["OpenSSL::PKCS5","","OpenSSL/PKCS5.html","",""],["OpenSSL::PKCS7","","OpenSSL/PKCS7.html","",""],["OpenSSL::PKCS7::PKCS7Error","","OpenSSL/PKCS7/PKCS7Error.html","",""],["OpenSSL::PKCS7::RecipientInfo","","OpenSSL/PKCS7/RecipientInfo.html","",""],["OpenSSL::PKCS7::SignerInfo","","OpenSSL/PKCS7/SignerInfo.html","",""],["OpenSSL::PKey","","OpenSSL/PKey.html","","<p>Asymmetric Public Key Algorithms\n<p>Asymmetric public key algorithms solve the problem of establishing and …\n"],["OpenSSL::PKey::DH","","OpenSSL/PKey/DH.html","","<p>An implementation of the Diffie-Hellman key exchange protocol based on discrete logarithms in finite …\n"],["OpenSSL::PKey::DHError","","OpenSSL/PKey/DHError.html","","<p>Generic exception that is raised if an operation on a DH PKey fails unexpectedly or in case an instantiation …\n"],["OpenSSL::PKey::DSA","","OpenSSL/PKey/DSA.html","","<p>DSA, the Digital Signature Algorithm, is specified in NIST’s FIPS 186-3. It is an asymmetric public …\n"],["OpenSSL::PKey::DSAError","","OpenSSL/PKey/DSAError.html","","<p>Generic exception that is raised if an operation on a DSA PKey fails unexpectedly or in case an instantiation …\n"],["OpenSSL::PKey::EC","","OpenSSL/PKey/EC.html","","<p>OpenSSL::PKey::EC provides access to Elliptic Curve Digital Signature Algorithm (ECDSA) and Elliptic …\n"],["OpenSSL::PKey::EC::Group","","OpenSSL/PKey/EC/Group.html","",""],["OpenSSL::PKey::EC::Group::Error","","OpenSSL/PKey/EC/Group/Error.html","",""],["OpenSSL::PKey::EC::Point","","OpenSSL/PKey/EC/Point.html","",""],["OpenSSL::PKey::EC::Point::Error","","OpenSSL/PKey/EC/Point/Error.html","",""],["OpenSSL::PKey::ECError","","OpenSSL/PKey/ECError.html","",""],["OpenSSL::PKey::PKey","","OpenSSL/PKey/PKey.html","","<p>An abstract class that bundles signature creation (PKey#sign) and validation (PKey#verify) that is common …\n"],["OpenSSL::PKey::PKeyError","","OpenSSL/PKey/PKeyError.html","","<p>Raised when errors occur during PKey#sign or PKey#verify.\n"],["OpenSSL::PKey::RSA","","OpenSSL/PKey/RSA.html","","<p>RSA is an asymmetric public key algorithm that has been formalized in RFC 3447. It is in widespread use …\n"],["OpenSSL::PKey::RSAError","","OpenSSL/PKey/RSAError.html","","<p>Generic exception that is raised if an operation on an RSA PKey fails unexpectedly or in case an instantiation …\n"],["OpenSSL::Random","","OpenSSL/Random.html","",""],["OpenSSL::Random::RandomError","","OpenSSL/Random/RandomError.html","",""],["OpenSSL::SSL","","OpenSSL/SSL.html","","<p>Use SSLContext to set up the parameters for a TLS (former SSL) connection. Both client and server TLS …\n"],["OpenSSL::SSL::SSLContext","","OpenSSL/SSL/SSLContext.html","","<p>An SSLContext is used to set various options regarding certificates, algorithms, verification, session …\n"],["OpenSSL::SSL::SSLError","","OpenSSL/SSL/SSLError.html","","<p>Generic error class raised by SSLSocket and SSLContext.\n"],["OpenSSL::SSL::SSLErrorWaitReadable","","OpenSSL/SSL/SSLErrorWaitReadable.html","",""],["OpenSSL::SSL::SSLErrorWaitWritable","","OpenSSL/SSL/SSLErrorWaitWritable.html","",""],["OpenSSL::SSL::SSLServer","","OpenSSL/SSL/SSLServer.html","","<p>SSLServer represents a TCP/IP server socket with Secure Sockets Layer.\n"],["OpenSSL::SSL::SSLSocket","","OpenSSL/SSL/SSLSocket.html","",""],["OpenSSL::SSL::Session","","OpenSSL/SSL/Session.html","",""],["OpenSSL::SSL::Session::SessionError","","OpenSSL/SSL/Session/SessionError.html","",""],["OpenSSL::SSL::SocketForwarder","","OpenSSL/SSL/SocketForwarder.html","",""],["OpenSSL::Timestamp","","OpenSSL/Timestamp.html","","<p>Provides classes and methods to request, create and validate RFC3161-compliant timestamps. Request may …\n"],["OpenSSL::Timestamp::Factory","","OpenSSL/Timestamp/Factory.html","","<p>Used to generate a Response from scratch.\n<p>Please bear in mind that the implementation will always apply …\n"],["OpenSSL::Timestamp::Request","","OpenSSL/Timestamp/Request.html","","<p>Allows to create timestamp requests or parse existing ones. A Request is also needed for creating timestamps …\n"],["OpenSSL::Timestamp::Response","","OpenSSL/Timestamp/Response.html","","<p>Immutable and read-only representation of a timestamp response returned from a timestamp server after …\n"],["OpenSSL::Timestamp::TimestampError","","OpenSSL/Timestamp/TimestampError.html","","<p>Generic exception class of the Timestamp module.\n"],["OpenSSL::Timestamp::TokenInfo","","OpenSSL/Timestamp/TokenInfo.html","","<p>Immutable and read-only representation of a timestamp token info from a Response.\n"],["OpenSSL::X509","","OpenSSL/X509.html","",""],["OpenSSL::X509::Attribute","","OpenSSL/X509/Attribute.html","",""],["OpenSSL::X509::AttributeError","","OpenSSL/X509/AttributeError.html","",""],["OpenSSL::X509::CRL","","OpenSSL/X509/CRL.html","",""],["OpenSSL::X509::CRLError","","OpenSSL/X509/CRLError.html","",""],["OpenSSL::X509::Certificate","","OpenSSL/X509/Certificate.html","","<p>Implementation of an X.509 certificate as specified in RFC 5280. Provides access to a certificate’s …\n"],["OpenSSL::X509::CertificateError","","OpenSSL/X509/CertificateError.html","",""],["OpenSSL::X509::Extension","","OpenSSL/X509/Extension.html","",""],["OpenSSL::X509::Extension::AuthorityInfoAccess","","OpenSSL/X509/Extension/AuthorityInfoAccess.html","",""],["OpenSSL::X509::Extension::AuthorityKeyIdentifier","","OpenSSL/X509/Extension/AuthorityKeyIdentifier.html","",""],["OpenSSL::X509::Extension::CRLDistributionPoints","","OpenSSL/X509/Extension/CRLDistributionPoints.html","",""],["OpenSSL::X509::Extension::Helpers","","OpenSSL/X509/Extension/Helpers.html","",""],["OpenSSL::X509::Extension::SubjectKeyIdentifier","","OpenSSL/X509/Extension/SubjectKeyIdentifier.html","",""],["OpenSSL::X509::ExtensionError","","OpenSSL/X509/ExtensionError.html","",""],["OpenSSL::X509::ExtensionFactory","","OpenSSL/X509/ExtensionFactory.html","",""],["OpenSSL::X509::Name","","OpenSSL/X509/Name.html","","<p>An X.509 name represents a hostname, email address or other entity associated with a public key.\n<p>You can …\n"],["OpenSSL::X509::Name::RFC2253DN","","OpenSSL/X509/Name/RFC2253DN.html","",""],["OpenSSL::X509::NameError","","OpenSSL/X509/NameError.html","",""],["OpenSSL::X509::Request","","OpenSSL/X509/Request.html","",""],["OpenSSL::X509::RequestError","","OpenSSL/X509/RequestError.html","",""],["OpenSSL::X509::Revoked","","OpenSSL/X509/Revoked.html","",""],["OpenSSL::X509::RevokedError","","OpenSSL/X509/RevokedError.html","",""],["OpenSSL::X509::Store","","OpenSSL/X509/Store.html","","<p>The X509 certificate store holds trusted CA certificates used to verify peer certificates.\n<p>The easiest …\n"],["OpenSSL::X509::StoreContext","","OpenSSL/X509/StoreContext.html","","<p>A StoreContext is used while validating a single certificate and holds the status involved.\n"],["OpenSSL::X509::StoreError","","OpenSSL/X509/StoreError.html","",""],["OpenStruct","","OpenStruct.html","","<p>An OpenStruct is a data structure, similar to a Hash, that allows the definition of arbitrary attributes …\n"],["OpenURI","","OpenURI.html","","<p>OpenURI is an easy-to-use wrapper for Net::HTTP, Net::HTTPS and Net::FTP.\n<p>Example\n<p>It is possible to open …\n"],["OpenURI::HTTPError","","OpenURI/HTTPError.html","",""],["OpenURI::HTTPRedirect","","OpenURI/HTTPRedirect.html","","<p>Raised on redirection, only occurs when <code>redirect</code> option for HTTP is <code>false</code>.\n"],["OpenURI::Meta","","OpenURI/Meta.html","","<p>Mixin for holding meta-information.\n"],["OpenURI::OpenRead","","OpenURI/OpenRead.html","","<p>Mixin for HTTP and FTP URIs.\n"],["OptionParser","","OptionParser.html","","<p>OptionParser\n<p>New to OptionParser?\n<p>See the Tutorial.\n"],["OptionParser::AC","","OptionParser/AC.html","",""],["OptionParser::Acceptables","","OptionParser/Acceptables.html","","<p>Acceptable argument classes. Now contains DecimalInteger, OctalInteger and DecimalNumeric. See Acceptable …\n"],["OptionParser::AmbiguousArgument","","OptionParser/AmbiguousArgument.html","","<p>Raises when the given argument word can’t be completed uniquely.\n"],["OptionParser::AmbiguousOption","","OptionParser/AmbiguousOption.html","","<p>Raises when ambiguously completable string is encountered.\n"],["OptionParser::Arguable","","OptionParser/Arguable.html","","<p>Extends command line arguments array (ARGV) to parse itself.\n"],["OptionParser::CompletingHash","","OptionParser/CompletingHash.html","","<p>Hash with completion search feature. See OptionParser::Completion.\n"],["OptionParser::Completion","","OptionParser/Completion.html","","<p>Keyword completion module.  This allows partial arguments to be specified and resolved against a list …\n"],["OptionParser::InvalidArgument","","OptionParser/InvalidArgument.html","","<p>Raises when the given argument does not match required format.\n"],["OptionParser::InvalidOption","","OptionParser/InvalidOption.html","","<p>Raises when switch is undefined.\n"],["OptionParser::List","","OptionParser/List.html","","<p>Simple option list providing mapping from short and/or long option string to OptionParser::Switch and …\n"],["OptionParser::MissingArgument","","OptionParser/MissingArgument.html","","<p>Raises when a switch with mandatory argument has no argument.\n"],["OptionParser::NeedlessArgument","","OptionParser/NeedlessArgument.html","","<p>Raises when there is an argument for a switch which takes no argument.\n"],["OptionParser::OptionMap","","OptionParser/OptionMap.html","","<p>Map from option/keyword string to object with completion.\n"],["OptionParser::ParseError","","OptionParser/ParseError.html","","<p>Base class of exceptions from OptionParser.\n"],["OptionParser::Switch","","OptionParser/Switch.html","","<p>Individual switch class.  Not important to the user.\n<p>Defined within Switch are several Switch-derived …\n"],["OptionParser::Switch::NoArgument","","OptionParser/Switch/NoArgument.html","","<p>Switch that takes no arguments.\n"],["OptionParser::Switch::OptionalArgument","","OptionParser/Switch/OptionalArgument.html","","<p>Switch that can omit argument.\n"],["OptionParser::Switch::PlacedArgument","","OptionParser/Switch/PlacedArgument.html","","<p>Switch that takes an argument, which does not begin with ‘-’ or is ‘-’.\n"],["OptionParser::Switch::RequiredArgument","","OptionParser/Switch/RequiredArgument.html","","<p>Switch that takes an argument.\n"],["PP","","PP.html","","<p>A pretty-printer for Ruby objects.\n<p>What PP Does\n<p>Standard output by #p returns this:\n"],["PP::PPMethods","","PP/PPMethods.html","",""],["PStore","","PStore.html","","<p>PStore implements a file based persistence mechanism based on a Hash. User code can store hierarchies …\n"],["PStore::Error","","PStore/Error.html","","<p>The error type thrown by all PStore methods.\n"],["PTY","","PTY.html","","<p>Creates and manages pseudo terminals (PTYs).  See also en.wikipedia.org/wiki/Pseudo_terminal\n<p>PTY allows …\n"],["PTY::ChildExited","","PTY/ChildExited.html","","<p>Thrown when PTY::check is called for a pid that represents a process that has exited.\n"],["Pathname","","Pathname.html","","<p>Pathname represents the name of a file or directory on the filesystem, but not the file itself.\n<p>The pathname …\n"],["PrettyPrint","","PrettyPrint.html","","<p>This class implements a pretty printing algorithm. It finds line breaks and nice indentations for grouped …\n"],["PrettyPrint::SingleLine","","PrettyPrint/SingleLine.html","","<p>PrettyPrint::SingleLine is used by PrettyPrint.singleline_format\n<p>It is passed to be similar to a PrettyPrint …\n"],["Proc","","Proc.html","","<p>A <code>Proc</code> object is an encapsulation of a block of code, which can be stored in a local variable, passed …\n"],["Process","","Process.html","","<p>The Process module is a collection of methods used to manipulate processes.\n"],["Process::GID","","Process/GID.html","","<p>The Process::GID module contains a collection of module functions which can be used to portably get, …\n"],["Process::Status","","Process/Status.html","","<p>Process::Status encapsulates the information on the status of a running or terminated system process. …\n"],["Process::Sys","","Process/Sys.html","","<p>The Process::Sys module contains UID and GID functions which provide direct bindings to the system calls …\n"],["Process::Tms","","Process/Tms.html","","<p>Placeholder for rusage\n"],["Process::UID","","Process/UID.html","","<p>The Process::UID module contains a collection of module functions which can be used to portably get, …\n"],["Psych","","Psych.html","","<p>Overview\n<p>Psych is a YAML parser and emitter. Psych leverages libyaml [Home page: pyyaml.org/wiki/LibYAML …\n"],["Psych::AliasesNotEnabled","","Psych/AliasesNotEnabled.html","","<p>Subclasses ‘BadAlias` for backwards compatibility\n"],["Psych::AnchorNotDefined","","Psych/AnchorNotDefined.html","","<p>Subclasses ‘BadAlias` for backwards compatibility\n"],["Psych::BadAlias","","Psych/BadAlias.html","",""],["Psych::ClassLoader","","Psych/ClassLoader.html","",""],["Psych::ClassLoader::Restricted","","Psych/ClassLoader/Restricted.html","",""],["Psych::Coder","","Psych/Coder.html","","<p>If an object defines <code>encode_with</code>, then an instance of Psych::Coder will be passed to the method when …\n"],["Psych::Config","","Psych/Config.html","",""],["Psych::DisallowedClass","","Psych/DisallowedClass.html","",""],["Psych::Emitter","","Psych/Emitter.html","",""],["Psych::Exception","","Psych/Exception.html","",""],["Psych::Handler","","Psych/Handler.html","","<p>Psych::Handler is an abstract base class that defines the events used when dealing with Psych::Parser …\n"],["Psych::Handler::DumperOptions","","Psych/Handler/DumperOptions.html","","<p>Configuration options for dumping YAML.\n"],["Psych::Handlers","","Psych/Handlers.html","",""],["Psych::Handlers::Recorder","","Psych/Handlers/Recorder.html","","<p>This handler will capture an event and record the event.  Recorder events are available vial Psych::Handlers::Recorder#events …\n"],["Psych::JSON","","Psych/JSON.html","",""],["Psych::JSON::Stream","","Psych/JSON/Stream.html","",""],["Psych::JSON::TreeBuilder","","Psych/JSON/TreeBuilder.html","","<p>Psych::JSON::TreeBuilder is an event based AST builder.  Events are sent to an instance of Psych::JSON::TreeBuilder …\n"],["Psych::Nodes","","Psych/Nodes.html","","<p>Overview\n<p>When using Psych.load to deserialize a YAML document, the document is translated to an intermediary …\n"],["Psych::Nodes::Alias","","Psych/Nodes/Alias.html","","<p>This class represents a YAML Alias. It points to an <code>anchor</code>.\n<p>A Psych::Nodes::Alias is a terminal node and …\n"],["Psych::Nodes::Document","","Psych/Nodes/Document.html","","<p>This represents a YAML Document.  This node must be a child of Psych::Nodes::Stream.  A Psych::Nodes::Document …\n"],["Psych::Nodes::Mapping","","Psych/Nodes/Mapping.html","","<p>This class represents a YAML Mapping.\n<p>A Psych::Nodes::Mapping node may have 0 or more children, but must …\n"],["Psych::Nodes::Node","","Psych/Nodes/Node.html","","<p>The base class for any Node in a YAML parse tree.  This class should never be instantiated.\n"],["Psych::Nodes::Scalar","","Psych/Nodes/Scalar.html","","<p>This class represents a YAML Scalar.\n<p>This node type is a terminal node and should not have any children. …\n"],["Psych::Nodes::Sequence","","Psych/Nodes/Sequence.html","","<p>This class represents a YAML sequence.\n<p>A YAML sequence is basically a list, and looks like this:\n\n<pre>%YAML ...</pre>\n"],["Psych::Nodes::Stream","","Psych/Nodes/Stream.html","","<p>Represents a YAML stream.  This is the root node for any YAML parse tree.  This node must have one or …\n"],["Psych::Omap","","Psych/Omap.html","",""],["Psych::Parser","","Psych/Parser.html","","<p>YAML event parser class.  This class parses a YAML document and calls events on the handler that is passed …\n"],["Psych::Parser::Mark","","Psych/Parser/Mark.html","",""],["Psych::ScalarScanner","","Psych/ScalarScanner.html","","<p>Scan scalars for built in types\n"],["Psych::Set","","Psych/Set.html","",""],["Psych::Stream","","Psych/Stream.html","","<p>Psych::Stream is a streaming YAML emitter.  It will not buffer your YAML, but send it straight to an …\n"],["Psych::Streaming","","Psych/Streaming.html","",""],["Psych::Streaming::ClassMethods","","Psych/Streaming/ClassMethods.html","",""],["Psych::SyntaxError","","Psych/SyntaxError.html","",""],["Psych::TreeBuilder","","Psych/TreeBuilder.html","","<p>This class works in conjunction with Psych::Parser to build an in-memory parse tree that represents a …\n"],["Psych::Visitors","","Psych/Visitors.html","",""],["Psych::Visitors::DepthFirst","","Psych/Visitors/DepthFirst.html","",""],["Psych::Visitors::Emitter","","Psych/Visitors/Emitter.html","",""],["Psych::Visitors::JSONTree","","Psych/Visitors/JSONTree.html","",""],["Psych::Visitors::NoAliasRuby","","Psych/Visitors/NoAliasRuby.html","",""],["Psych::Visitors::RestrictedYAMLTree","","Psych/Visitors/RestrictedYAMLTree.html","",""],["Psych::Visitors::ToRuby","","Psych/Visitors/ToRuby.html","","<p>This class walks a YAML AST, converting each node to Ruby\n"],["Psych::Visitors::Visitor","","Psych/Visitors/Visitor.html","",""],["Psych::Visitors::YAMLTree","","Psych/Visitors/YAMLTree.html","","<p>YAMLTree builds a YAML ast given a Ruby object.  For example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">builder</span> = <span class=\"ruby-constant\">Psych</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Visitors</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">YAMLTree</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["RDoc","","RDoc.html","","<p>RDoc produces documentation for Ruby source files by parsing the source and extracting the definition …\n"],["RDoc","","RDoc.html","","<p>Gem::RDoc provides methods to generate RDoc and ri data for installed gems upon gem installation.\n<p>This …\n"],["RDoc::Alias","","RDoc/Alias.html","","<p>Represent an alias, which is an old_name/new_name pair associated with a particular context\n"],["RDoc::AnonClass","","RDoc/AnonClass.html","","<p>An anonymous class like:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-constant\">Class</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-keyword\">end</span>\n</pre>\n<p>AnonClass is currently not used.\n"],["RDoc::AnyMethod","","RDoc/AnyMethod.html","","<p>AnyMethod is the base class for objects representing methods\n"],["RDoc::Attr","","RDoc/Attr.html","","<p>An attribute created by #attr, #attr_reader, #attr_writer or #attr_accessor\n"],["RDoc::ClassModule","","RDoc/ClassModule.html","","<p>ClassModule is the base class for objects representing either a class or a module.\n"],["RDoc::CodeObject","","RDoc/CodeObject.html","","<p>Base class for the RDoc code tree.\n<p>We contain the common stuff for contexts (which are containers) and …\n"],["RDoc::Comment","","RDoc/Comment.html","","<p>A comment holds the text comment for a RDoc::CodeObject and provides a unified way of cleaning it up …\n"],["RDoc::Constant","","RDoc/Constant.html","","<p>A constant\n"],["RDoc::Context","","RDoc/Context.html","","<p>A Context is something that can hold modules, classes, methods, attributes, aliases, requires, and includes. …\n"],["RDoc::CrossReference","","RDoc/CrossReference.html","","<p>RDoc::CrossReference is a reusable way to create cross references for names.\n"],["RDoc::ERBIO","","RDoc/ERBIO.html","","<p>A subclass of ERB that writes directly to an IO.  Credit to Aaron Patterson and Masatoshi SEKI.\n<p>To use: …\n"],["RDoc::ERBPartial","","RDoc/ERBPartial.html","","<p>Allows an ERB template to be rendered in the context (binding) of an existing ERB template evaluation. …\n"],["RDoc::Encoding","","RDoc/Encoding.html","","<p>This class is a wrapper around File IO and Encoding that helps RDoc load files and convert them to the …\n"],["RDoc::Error","","RDoc/Error.html","","<p>Exception thrown by any rdoc error.\n"],["RDoc::Extend","","RDoc/Extend.html","","<p>A Module extension to a class with #extend\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RDoc</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Extend</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&#39;Enumerable&#39;</span>, <span class=\"ruby-string\">&#39;comment ...&#39;</span>\n</pre>\n"],["RDoc::Generator","","RDoc/Generator.html","","<p>RDoc uses generators to turn parsed source code in the form of an RDoc::CodeObject tree into some form …\n"],["RDoc::GhostMethod","","RDoc/GhostMethod.html","","<p>GhostMethod represents a method referenced only by a comment\n"],["RDoc::I18n","","RDoc/I18n.html","","<p>This module provides i18n related features.\n"],["RDoc::Include","","RDoc/Include.html","","<p>A Module included in a class with #include\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RDoc</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Include</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&#39;Enumerable&#39;</span>, <span class=\"ruby-string\">&#39;comment ...&#39;</span>\n</pre>\n"],["RDoc::Markdown","","RDoc/Markdown.html","","<p>RDoc::Markdown as described by the markdown syntax.\n<p>To choose Markdown as your only default format see …\n"],["RDoc::Markdown::MemoEntry","","RDoc/Markdown/MemoEntry.html","",""],["RDoc::Markdown::ParseError","","RDoc/Markdown/ParseError.html","",""],["RDoc::Markdown::RuleInfo","","RDoc/Markdown/RuleInfo.html","",""],["RDoc::Markup","","RDoc/Markup.html","","<p>RDoc::Markup parses plain text documents and attempts to decompose them into their constituent parts. …\n"],["RDoc::MarkupReference","","RDoc/MarkupReference.html","","<p>Class RDoc::MarkupReference exists only to provide a suitable home for a reference document for RDoc …\n"],["RDoc::MarkupReference::DummyClass","","RDoc/MarkupReference/DummyClass.html","",""],["RDoc::MarkupReference::DummyModule","","RDoc/MarkupReference/DummyModule.html","",""],["RDoc::MetaMethod","","RDoc/MetaMethod.html","","<p>MetaMethod represents a meta-programmed method\n"],["RDoc::MethodAttr","","RDoc/MethodAttr.html","","<p>Abstract class representing either a method or an attribute.\n"],["RDoc::Mixin","","RDoc/Mixin.html","","<p>A Mixin adds features from a module into another context.  RDoc::Include and RDoc::Extend are both mixins. …\n"],["RDoc::NormalClass","","RDoc/NormalClass.html","","<p>A normal class, neither singleton nor anonymous\n"],["RDoc::NormalModule","","RDoc/NormalModule.html","","<p>A normal module, like NormalClass\n"],["RDoc::Options","","RDoc/Options.html","","<p>RDoc::Options handles the parsing and storage of options\n<p>Saved Options\n<p>You can save some options like the …\n"],["RDoc::Parser","","RDoc/Parser.html","","<p>A parser is simple a class that subclasses RDoc::Parser and implements #scan to fill in an RDoc::TopLevel …\n"],["RDoc::Parser::C","","RDoc/Parser/C.html","","<p>RDoc::Parser::C attempts to parse C extension files.  It looks for the standard patterns that you find …\n"],["RDoc::Parser::ChangeLog","","RDoc/Parser/ChangeLog.html","","<p>A ChangeLog file parser.\n<p>This parser converts a ChangeLog into an RDoc::Markup::Document.  When viewed …\n"],["RDoc::Parser::ChangeLog::Git","","RDoc/Parser/ChangeLog/Git.html","",""],["RDoc::Parser::Markdown","","RDoc/Parser/Markdown.html","","<p>Parse a Markdown format file.  The parsed RDoc::Markup::Document is attached as a file comment.\n"],["RDoc::Parser::RD","","RDoc/Parser/RD.html","","<p>Parse a RD format file.  The parsed RDoc::Markup::Document is attached as a file comment.\n"],["RDoc::Parser::RipperStateLex","","RDoc/Parser/RipperStateLex.html","",""],["RDoc::Parser::RipperStateLex::InnerStateLex","","RDoc/Parser/RipperStateLex/InnerStateLex.html","",""],["RDoc::Parser::Ruby","","RDoc/Parser/Ruby.html","",""],["RDoc::Parser::RubyTools","","RDoc/Parser/RubyTools.html","","<p>Collection of methods for writing parsers\n"],["RDoc::Parser::Simple","","RDoc/Parser/Simple.html","","<p>Parse a non-source file. We basically take the whole thing as one big comment.\n"],["RDoc::Parser::Text","","RDoc/Parser/Text.html","","<p>Indicates this parser is text and doesn’t contain code constructs.\n<p>Include this module in a RDoc::Parser …\n"],["RDoc::RD","","RDoc/RD.html","","<p>RDoc::RD implements the RD format from the rdtool gem.\n<p>To choose RD as your only default format see RDoc::Options@Saved+Options …\n"],["RDoc::RDoc","","RDoc/RDoc.html","","<p>This is the driver for generating RDoc output.  It handles file parsing and generation of output.\n<p>To use …\n"],["RDoc::RI","","RDoc/RI.html","","<p>Namespace for the ri command line tool’s implementation.\n<p>See <code>ri --help</code> for details.\n"],["RDoc::RI::Error","","RDoc/RI/Error.html","","<p>Base RI error class\n"],["RDoc::Require","","RDoc/Require.html","","<p>A file loaded by #require\n"],["RDoc::RubygemsHook","","RDoc/RubygemsHook.html","","<p>Gem::RDoc provides methods to generate RDoc and ri data for installed gems upon gem installation.\n<p>This …\n"],["RDoc::Servlet","","RDoc/Servlet.html","","<p>This is a WEBrick servlet that allows you to browse ri documentation.\n<p>You can show documentation through …\n"],["RDoc::SingleClass","","RDoc/SingleClass.html","","<p>A singleton class\n"],["RDoc::Stats","","RDoc/Stats.html","","<p>RDoc statistics collector which prints a summary and report of a project’s documentation totals. …\n"],["RDoc::Store","","RDoc/Store.html","","<p>A set of rdoc data for a single project (gem, path, etc.).\n<p>The store manages reading and writing ri data …\n"],["RDoc::Store::Error","","RDoc/Store/Error.html","","<p>Errors raised from loading or saving the store\n"],["RDoc::Store::MissingFileError","","RDoc/Store/MissingFileError.html","","<p>Raised when a stored file for a class, module, page or method is missing.\n"],["RDoc::Task","","RDoc/Task.html","","<p>RDoc::Task creates the following rake tasks to generate and clean up RDoc output:\n<p>rdoc &mdash; Main task for this …\n"],["RDoc::Text","","RDoc/Text.html","","<p>Methods for manipulating comment text\n"],["RDoc::TokenStream","","RDoc/TokenStream.html","","<p>A TokenStream is a list of tokens, gathered during the parse of some entity (say a method). Entities …\n"],["RDoc::TomDoc","","RDoc/TomDoc.html","","<p>A parser for TomDoc based on TomDoc 1.0.0-rc1 (02adef9b5a)\n<p>The TomDoc specification can be found at:\n<p>tomdoc.org …\n"],["RDoc::TopLevel","","RDoc/TopLevel.html","","<p>A TopLevel context is a representation of the contents of a single file\n"],["Racc","","Racc.html","","<p>Racc is a LALR(1) parser generator. It is written in Ruby itself, and generates Ruby programs.\n<p>Command-line …\n"],["Racc::Accept","","Racc/Accept.html","",""],["Racc::ActionTable","","Racc/ActionTable.html","","<p>The table of LALR actions. Actions are either of Shift, Reduce, Accept and Error.\n"],["Racc::CompileError","","Racc/CompileError.html","",""],["Racc::CparseParams","","Racc/CparseParams.html","",""],["Racc::DebugFlags","","Racc/DebugFlags.html","",""],["Racc::Error","","Racc/Error.html","",""],["Racc::Goto","","Racc/Goto.html","","<p>Represents a transition on the grammar. “Real goto” means a transition by nonterminal, but …\n"],["Racc::Grammar","","Racc/Grammar.html","",""],["Racc::Grammar::DefinitionEnv","","Racc/Grammar/DefinitionEnv.html","",""],["Racc::Grammar::PrecedenceDefinitionEnv","","Racc/Grammar/PrecedenceDefinitionEnv.html","",""],["Racc::GrammarFileParser","","Racc/GrammarFileParser.html","",""],["Racc::GrammarFileParser::Result","","Racc/GrammarFileParser/Result.html","",""],["Racc::GrammarFileScanner","","Racc/GrammarFileScanner.html","",""],["Racc::ISet","","Racc/ISet.html","","<p>An “indexed” set.  All items must respond to :ident.\n"],["Racc::Item","","Racc/Item.html","","<p>LALR item.  A set of rule and its lookahead tokens.\n"],["Racc::LocationPointer","","Racc/LocationPointer.html","","<p>A set of rule and position in it’s RHS. Note that the number of pointers is more than rule’s …\n"],["Racc::LogFileGenerator","","Racc/LogFileGenerator.html","",""],["Racc::OrMark","","Racc/OrMark.html","",""],["Racc::ParseError","","Racc/ParseError.html","",""],["Racc::Parser","","Racc/Parser.html","",""],["Racc::ParserClassGenerator","","Racc/ParserClassGenerator.html","",""],["Racc::ParserFileGenerator","","Racc/ParserFileGenerator.html","",""],["Racc::ParserFileGenerator::Params","","Racc/ParserFileGenerator/Params.html","",""],["Racc::Prec","","Racc/Prec.html","",""],["Racc::RRconflict","","Racc/RRconflict.html","",""],["Racc::Reduce","","Racc/Reduce.html","",""],["Racc::Rule","","Racc/Rule.html","",""],["Racc::SRconflict","","Racc/SRconflict.html","",""],["Racc::Shift","","Racc/Shift.html","",""],["Racc::SourceText","","Racc/SourceText.html","",""],["Racc::State","","Racc/State.html","","<p>A LALR state.\n"],["Racc::StateTransitionTable","","Racc/StateTransitionTable.html","",""],["Racc::StateTransitionTableGenerator","","Racc/StateTransitionTableGenerator.html","",""],["Racc::States","","Racc/States.html","","<p>A table of LALR states.\n"],["Racc::Sym","","Racc/Sym.html","","<p>Stands terminal and nonterminal symbols.\n"],["Racc::SymbolTable","","Racc/SymbolTable.html","",""],["Racc::UserAction","","Racc/UserAction.html","",""],["Ractor","","Ractor.html","","<p>Ractor is an Actor-model abstraction for Ruby that provides thread-safe parallel execution.\n<p>Ractor.new …\n"],["Ractor::ClosedError","","Ractor/ClosedError.html","","<p>Raised when an attempt is made to send a message to a closed port, or to retrieve a message from a closed …\n"],["Ractor::Error","","Ractor/Error.html","",""],["Ractor::IsolationError","","Ractor/IsolationError.html","",""],["Ractor::MovedError","","Ractor/MovedError.html","","<p>Raised on an attempt to access an object which was moved in Ractor#send or Ractor.yield.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">r</span> = <span class=\"ruby-constant\">Ractor</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Ractor::MovedObject","","Ractor/MovedObject.html","","<p>A special object which replaces any value that was moved to another ractor in Ractor#send or Ractor.yield …\n"],["Ractor::RemoteError","","Ractor/RemoteError.html","","<p>Raised on attempt to Ractor#take if there was an uncaught exception in the Ractor. Its <code>cause</code> will contain …\n"],["Ractor::UnsafeError","","Ractor/UnsafeError.html","",""],["Rake","","Rake.html","",""],["Random","","Random.html","","<p>Random provides an interface to Ruby’s pseudo-random number generator, or PRNG.  The PRNG produces …\n"],["Random::Formatter","","Random/Formatter.html","","<p>Random number formatter.\n<p>Formats generated random numbers in many manners. When <code>&#39;random/formatter&#39;</code> …\n"],["Range","","Range.html","","<p>A Range object represents a collection of values that are between given begin and end values.\n<p>You can …\n"],["RangeError","","RangeError.html","","<p>Raised when a given numerical value is out of range.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>].<span class=\"ruby-identifier\">drop</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-value\">100</span>)\n</pre>\n<p><em>raises the exception:</em>\n"],["Rational","","Rational.html","","<p>A rational number can be represented as a pair of integer numbers: a/b (b&gt;0), where a is the numerator …\n"],["Readline","","Readline.html","","<p>The Readline module provides interface for GNU Readline. This module defines a number of methods to facilitate …\n"],["Refinement","","Refinement.html","",""],["Regexp","","Regexp.html","","<p>Regular expressions (<em>regexp</em>s) are patterns which describe the contents of a string. They’re used …\n"],["Regexp::TimeoutError","","Regexp/TimeoutError.html","",""],["RegexpError","","RegexpError.html","","<p>Raised when given an invalid regexp expression.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Regexp</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;?&quot;</span>)\n</pre>\n<p><em>raises the exception:</em>\n"],["Reline","","Reline.html","",""],["Reline::ANSI","","Reline/ANSI.html","",""],["Reline::Config","","Reline/Config.html","",""],["Reline::Config::InvalidInputrc","","Reline/Config/InvalidInputrc.html","",""],["Reline::ConfigEncodingConversionError","","Reline/ConfigEncodingConversionError.html","",""],["Reline::Core","","Reline/Core.html","",""],["Reline::GeneralIO","","Reline/GeneralIO.html","",""],["Reline::History","","Reline/History.html","",""],["Reline::KeyActor","","Reline/KeyActor.html","",""],["Reline::KeyActor::Base","","Reline/KeyActor/Base.html","",""],["Reline::KeyActor::Emacs","","Reline/KeyActor/Emacs.html","",""],["Reline::KeyActor::ViCommand","","Reline/KeyActor/ViCommand.html","",""],["Reline::KeyActor::ViInsert","","Reline/KeyActor/ViInsert.html","",""],["Reline::KeyStroke","","Reline/KeyStroke.html","",""],["Reline::KillRing","","Reline/KillRing.html","",""],["Reline::KillRing::RingBuffer","","Reline/KillRing/RingBuffer.html","",""],["Reline::KillRing::State","","Reline/KillRing/State.html","",""],["Reline::LineEditor","","Reline/LineEditor.html","",""],["Reline::LineEditor::CompletionState","","Reline/LineEditor/CompletionState.html","",""],["Reline::LineEditor::Dialog","","Reline/LineEditor/Dialog.html","",""],["Reline::LineEditor::DialogProcScope","","Reline/LineEditor/DialogProcScope.html","",""],["Reline::Terminfo","","Reline/Terminfo.html","",""],["Reline::Terminfo::StringWithTiparm","","Reline/Terminfo/StringWithTiparm.html","",""],["Reline::Terminfo::TerminfoError","","Reline/Terminfo/TerminfoError.html","",""],["Reline::Unicode","","Reline/Unicode.html","",""],["Reline::Unicode::EastAsianWidth","","Reline/Unicode/EastAsianWidth.html","",""],["Reline::Windows","","Reline/Windows.html","",""],["Reline::Windows::KeyEventRecord","","Reline/Windows/KeyEventRecord.html","",""],["Reline::Windows::Win32API","","Reline/Windows/Win32API.html","",""],["Resolv","","Resolv.html","","<p>Resolv is a thread-aware DNS resolver library written in Ruby.  Resolv can handle multiple DNS requests …\n"],["Resolv","","Resolv.html","","<p>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Windows</span> <span class=\"ruby-constant\">NT</span>\n</pre>\n<p>\n"],["Resolv::DNS","","Resolv/DNS.html","","<p>Resolv::DNS is a DNS stub resolver.\n<p>Information taken from the following places:\n<p>STD0013\n"],["Resolv::DNS::Config","","Resolv/DNS/Config.html","",""],["Resolv::DNS::Config::NXDomain","","Resolv/DNS/Config/NXDomain.html","","<p>Indicates no such domain was found.\n"],["Resolv::DNS::Config::OtherResolvError","","Resolv/DNS/Config/OtherResolvError.html","","<p>Indicates some other unhandled resolver error was encountered.\n"],["Resolv::DNS::DecodeError","","Resolv/DNS/DecodeError.html","","<p>Indicates that the DNS response was unable to be decoded.\n"],["Resolv::DNS::EncodeError","","Resolv/DNS/EncodeError.html","","<p>Indicates that the DNS request was unable to be encoded.\n"],["Resolv::DNS::Name","","Resolv/DNS/Name.html","","<p>A representation of a DNS name.\n"],["Resolv::DNS::Query","","Resolv/DNS/Query.html","","<p>A DNS query abstract class.\n"],["Resolv::DNS::Requester","","Resolv/DNS/Requester.html","",""],["Resolv::DNS::Requester::RequestError","","Resolv/DNS/Requester/RequestError.html","","<p>Indicates a problem with the DNS request.\n"],["Resolv::DNS::Resource","","Resolv/DNS/Resource.html","","<p>A DNS resource abstract class.\n"],["Resolv::DNS::Resource::ANY","","Resolv/DNS/Resource/ANY.html","","<p>A Query type requesting any RR.\n"],["Resolv::DNS::Resource::CNAME","","Resolv/DNS/Resource/CNAME.html","","<p>The canonical name for an alias.\n"],["Resolv::DNS::Resource::DomainName","","Resolv/DNS/Resource/DomainName.html","","<p>Domain Name resource abstract class.\n"],["Resolv::DNS::Resource::Generic","","Resolv/DNS/Resource/Generic.html","","<p>A generic resource abstract class.\n"],["Resolv::DNS::Resource::HINFO","","Resolv/DNS/Resource/HINFO.html","","<p>Host Information resource.\n"],["Resolv::DNS::Resource::IN","","Resolv/DNS/Resource/IN.html","","<p>module IN contains ARPA Internet specific RRs.\n"],["Resolv::DNS::Resource::IN::A","","Resolv/DNS/Resource/IN/A.html","","<p>IPv4 Address resource\n"],["Resolv::DNS::Resource::IN::AAAA","","Resolv/DNS/Resource/IN/AAAA.html","","<p>An IPv6 address record.\n"],["Resolv::DNS::Resource::IN::SRV","","Resolv/DNS/Resource/IN/SRV.html","","<p>SRV resource record defined in RFC 2782\n<p>These records identify the hostname and port that a service is …\n"],["Resolv::DNS::Resource::IN::WKS","","Resolv/DNS/Resource/IN/WKS.html","","<p>Well Known Service resource.\n"],["Resolv::DNS::Resource::LOC","","Resolv/DNS/Resource/LOC.html","","<p>Location resource\n"],["Resolv::DNS::Resource::MINFO","","Resolv/DNS/Resource/MINFO.html","","<p>Mailing list or mailbox information.\n"],["Resolv::DNS::Resource::MX","","Resolv/DNS/Resource/MX.html","","<p>Mail Exchanger resource.\n"],["Resolv::DNS::Resource::NS","","Resolv/DNS/Resource/NS.html","","<p>An authoritative name server.\n"],["Resolv::DNS::Resource::PTR","","Resolv/DNS/Resource/PTR.html","","<p>A Pointer to another DNS name.\n"],["Resolv::DNS::Resource::SOA","","Resolv/DNS/Resource/SOA.html","","<p>Start Of Authority resource.\n"],["Resolv::DNS::Resource::TXT","","Resolv/DNS/Resource/TXT.html","","<p>Unstructured text resource.\n"],["Resolv::Hosts","","Resolv/Hosts.html","","<p>Resolv::Hosts is a hostname resolver that uses the system hosts file.\n"],["Resolv::IPv4","","Resolv/IPv4.html","","<p>A Resolv::DNS IPv4 address.\n"],["Resolv::IPv6","","Resolv/IPv6.html","","<p>A Resolv::DNS IPv6 address.\n"],["Resolv::LOC","","Resolv/LOC.html","",""],["Resolv::LOC::Alt","","Resolv/LOC/Alt.html","","<p>A Resolv::LOC::Alt\n"],["Resolv::LOC::Coord","","Resolv/LOC/Coord.html","","<p>A Resolv::LOC::Coord\n"],["Resolv::LOC::Size","","Resolv/LOC/Size.html","","<p>A Resolv::LOC::Size\n"],["Resolv::MDNS","","Resolv/MDNS.html","","<p>Resolv::MDNS is a one-shot Multicast DNS (mDNS) resolver.  It blindly makes queries to the mDNS addresses …\n"],["Resolv::ResolvError","","Resolv/ResolvError.html","","<p>Indicates a failure to resolve a name or address.\n"],["Resolv::ResolvTimeout","","Resolv/ResolvTimeout.html","","<p>Indicates a timeout resolving a name or address.\n"],["Resolv::SZ","","Resolv/SZ.html","",""],["Rinda","","Rinda.html","","<p>A module to implement the Linda distributed computing paradigm in Ruby.\n<p>Rinda is part of DRb (dRuby). …\n"],["Rinda::DRbObjectTemplate","","Rinda/DRbObjectTemplate.html","","<p><em>Documentation?</em>\n"],["Rinda::InvalidHashTupleKey","","Rinda/InvalidHashTupleKey.html","","<p>Raised when a hash-based tuple has an invalid key.\n"],["Rinda::NotifyTemplateEntry","","Rinda/NotifyTemplateEntry.html","","<p>A NotifyTemplateEntry is returned by TupleSpace#notify and is notified of TupleSpace changes.  You may …\n"],["Rinda::RequestCanceledError","","Rinda/RequestCanceledError.html","","<p>Raised when trying to use a canceled tuple.\n"],["Rinda::RequestExpiredError","","Rinda/RequestExpiredError.html","","<p>Raised when trying to use an expired tuple.\n"],["Rinda::RindaError","","Rinda/RindaError.html","","<p>Rinda error base class\n"],["Rinda::RingFinger","","Rinda/RingFinger.html","","<p>RingFinger is used by RingServer clients to discover the RingServer’s TupleSpace.  Typically, all …\n"],["Rinda::RingProvider","","Rinda/RingProvider.html","","<p>RingProvider uses a RingServer advertised TupleSpace as a name service. TupleSpace clients can register …\n"],["Rinda::RingServer","","Rinda/RingServer.html","","<p>A RingServer allows a Rinda::TupleSpace to be located via UDP broadcasts. Default service location uses …\n"],["Rinda::SimpleRenewer","","Rinda/SimpleRenewer.html","","<p>An SimpleRenewer allows a TupleSpace to check if a TupleEntry is still alive.\n"],["Rinda::Template","","Rinda/Template.html","","<p>Templates are used to match tuples in Rinda.\n"],["Rinda::TemplateEntry","","Rinda/TemplateEntry.html","","<p>A TemplateEntry is a Template together with expiry and cancellation data.\n"],["Rinda::Tuple","","Rinda/Tuple.html","","<p>A tuple is the elementary object in Rinda programming. Tuples may be matched against templates if the …\n"],["Rinda::TupleBag","","Rinda/TupleBag.html","","<p>TupleBag is an unordered collection of tuples. It is the basis of Tuplespace.\n"],["Rinda::TupleBag::TupleBin","","Rinda/TupleBag/TupleBin.html","",""],["Rinda::TupleEntry","","Rinda/TupleEntry.html","","<p>A TupleEntry is a Tuple (i.e. a possible entry in some Tuplespace) together with expiry and cancellation …\n"],["Rinda::TupleSpace","","Rinda/TupleSpace.html","","<p>The Tuplespace manages access to the tuples it contains, ensuring mutual exclusion requirements are met. …\n"],["Rinda::TupleSpaceProxy","","Rinda/TupleSpaceProxy.html","","<p>TupleSpaceProxy allows a remote Tuplespace to appear as local.\n"],["Rinda::WaitTemplateEntry","","Rinda/WaitTemplateEntry.html","","<p><em>Documentation?</em>\n"],["Ripper","","Ripper.html","","<p>Ripper is a Ruby script parser.\n<p>You can get information from the parser with event-based style. Information …\n"],["Ripper::Filter","","Ripper/Filter.html","","<p>This class handles only scanner events, which are dispatched in the ‘right’ order (same with …\n"],["Ripper::Lexer","","Ripper/Lexer.html","",""],["Ripper::Lexer::Elem","","Ripper/Lexer/Elem.html","",""],["Ripper::Lexer::State","","Ripper/Lexer/State.html","",""],["RubyLex","","RubyLex.html","",""],["RubyLex::TerminateLineInput","","RubyLex/TerminateLineInput.html","",""],["RubyVM","","RubyVM.html","","<p>The RubyVM module only exists on MRI. <code>RubyVM</code> is not defined in other Ruby implementations such as JRuby …\n"],["RubyVM::AbstractSyntaxTree","","RubyVM/AbstractSyntaxTree.html","","<p>AbstractSyntaxTree provides methods to parse Ruby code into abstract syntax trees. The nodes in the tree …\n"],["RubyVM::AbstractSyntaxTree::Node","","RubyVM/AbstractSyntaxTree/Node.html","","<p>RubyVM::AbstractSyntaxTree::Node instances are created by parse methods in RubyVM::AbstractSyntaxTree …\n"],["RubyVM::InstructionSequence","","RubyVM/InstructionSequence.html","","<p>The InstructionSequence class represents a compiled sequence of instructions for the Virtual Machine …\n"],["RubyVM::MJIT","","RubyVM/MJIT.html","",""],["RubyVM::MJIT::CPointer","","RubyVM/MJIT/CPointer.html","",""],["RubyVM::MJIT::CPointer::BitField","","RubyVM/MJIT/CPointer/BitField.html","",""],["RubyVM::MJIT::CPointer::Bool","","RubyVM/MJIT/CPointer/Bool.html","",""],["RubyVM::MJIT::CPointer::Immediate","","RubyVM/MJIT/CPointer/Immediate.html","",""],["RubyVM::MJIT::CPointer::Pointer","","RubyVM/MJIT/CPointer/Pointer.html","",""],["RubyVM::MJIT::CPointer::Struct","","RubyVM/MJIT/CPointer/Struct.html","",""],["RubyVM::MJIT::CPointer::Union","","RubyVM/MJIT/CPointer/Union.html","",""],["RubyVM::MJIT::CType","","RubyVM/MJIT/CType.html","",""],["RubyVM::MJIT::CType::BitField","","RubyVM/MJIT/CType/BitField.html","",""],["RubyVM::MJIT::CType::Bool","","RubyVM/MJIT/CType/Bool.html","",""],["RubyVM::MJIT::CType::Immediate","","RubyVM/MJIT/CType/Immediate.html","",""],["RubyVM::MJIT::CType::Pointer","","RubyVM/MJIT/CType/Pointer.html","",""],["RubyVM::MJIT::CType::Struct","","RubyVM/MJIT/CType/Struct.html","",""],["RubyVM::MJIT::CType::Union","","RubyVM/MJIT/CType/Union.html","",""],["RubyVM::Shape","","RubyVM/Shape.html","",""],["RubyVM::YJIT","","RubyVM/YJIT.html","","<p>This module allows for introspection of YJIT, CRuby’s in-process just-in-time compiler. This module …\n"],["RuntimeError","","RuntimeError.html","","<p>A generic error class raised when an invalid operation is attempted. Kernel#raise will raise a RuntimeError …\n"],["SOCKSSocket","","SOCKSSocket.html","","<p>SOCKS is an Internet protocol that routes packets between a client and a server through a proxy server. …\n"],["ScriptError","","ScriptError.html","","<p>ScriptError is the superclass for errors raised when a script can not be executed because of a <code>LoadError</code> …\n"],["SecureRandom","","SecureRandom.html","","<p>Secure random number generator interface.\n<p>This library is an interface to secure random number generators …\n"],["SecurityError","","SecurityError.html","","<p>No longer used by internal code.\n"],["Set","","Set.html","","<p>This library provides the Set class, which deals with a collection\nof unordered values with no duplicates. ...\n"],["Shellwords","","Shellwords.html","","<p>Manipulates strings like the UNIX Bourne shell\n<p>This module manipulates strings according to the word parsing …\n"],["Signal","","Signal.html","","<p>Many operating systems allow signals to be sent to running processes. Some signals have a defined effect …\n"],["SignalException","","SignalException.html","","<p>Raised when a signal is received.\n\n<pre>begin\n  Process.kill(&#39;HUP&#39;,Process.pid)\n  sleep # wait for receiver ...</pre>\n"],["SimpleDelegator","","SimpleDelegator.html","","<p>A concrete implementation of Delegator, this class provides the means to delegate all supported method …\n"],["SingleForwardable","","SingleForwardable.html","","<p>SingleForwardable can be used to setup delegation at the object level as well.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">printer</span> = <span class=\"ruby-constant\">String</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">printer</span>.<span class=\"ruby-identifier\">extend</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Singleton","","Singleton.html","","<p>The Singleton module implements the Singleton pattern.\n<p>Usage\n<p>To use Singleton, include the module in your …\n"],["Socket","","Socket.html","","<p>Class <code>Socket</code> provides access to the underlying operating system socket implementations.  It can be used …\n"],["Socket::AncillaryData","","Socket/AncillaryData.html","","<p>Socket::AncillaryData represents the ancillary data (control information) used by sendmsg and recvmsg …\n"],["Socket::Constants","","Socket/Constants.html","","<p>Socket::Constants provides socket-related constants.  All possible socket constants are listed in the …\n"],["Socket::Ifaddr","","Socket/Ifaddr.html","","<p>Socket::Ifaddr represents a result of getifaddrs() function.\n"],["Socket::Option","","Socket/Option.html","","<p>Socket::Option represents a socket option used by BasicSocket#getsockopt and BasicSocket#setsockopt. …\n"],["Socket::UDPSource","","Socket/UDPSource.html","","<p>UDP/IP address information used by Socket.udp_server_loop.\n"],["SocketError","","SocketError.html","","<p>SocketError is the error class for socket.\n"],["StandardError","","StandardError.html","","<p>The most standard error types are subclasses of StandardError. A rescue clause without an explicit Exception …\n"],["StopIteration","","StopIteration.html","","<p>Raised to stop the iteration, in particular by Enumerator#next. It is rescued by Kernel#loop.\n\n<pre>loop do ...</pre>\n"],["String","","String.html","","<p>A String object has an arbitrary sequence of bytes, typically representing text or binary data. A String …\n"],["StringIO","","StringIO.html","","<p>IO streams for strings, with access similar to IO; see IO.\n<p>About the Examples\n<p>Examples on this page assume …\n"],["StringScanner","","StringScanner.html","","<p>StringScanner provides for lexical scanning operations on a String.  Here is an example of its usage: …\n"],["StringScanner::Error","","StringScanner/Error.html","",""],["Struct","","Struct.html","","<p>Class Struct provides a convenient way to create a simple class that can store and fetch values.\n<p>This …\n"],["Symbol","","Symbol.html","","<p>Symbol objects represent named identifiers inside the Ruby interpreter.\n<p>You can create a Symbol object …\n"],["SyntaxError","","SyntaxError.html","","<p>Raised when encountering Ruby code with an invalid syntax.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">eval</span>(<span class=\"ruby-string\">&quot;1+1=2&quot;</span>)\n</pre>\n<p><em>raises the exception:</em>\n"],["SyntaxSuggest","","SyntaxSuggest.html","",""],["SyntaxSuggest::AroundBlockScan","","SyntaxSuggest/AroundBlockScan.html","","<p>This class is useful for exploring contents before and after a block\n<p>It searches above and below the passed …\n"],["SyntaxSuggest::BlockExpand","","SyntaxSuggest/BlockExpand.html","","<p>This class is responsible for taking a code block that exists at a far indentaion and then iteratively …\n"],["SyntaxSuggest::CaptureCodeContext","","SyntaxSuggest/CaptureCodeContext.html","","<p>Turns a “invalid block(s)” into useful context\n<p>There are three main phases in the algorithm: …\n"],["SyntaxSuggest::CleanDocument","","SyntaxSuggest/CleanDocument.html","","<p>Parses and sanitizes source into a lexically aware document\n<p>Internally the document is represented by …\n"],["SyntaxSuggest::Cli","","SyntaxSuggest/Cli.html","","<p>All the logic of the exe/syntax_suggest CLI in one handy spot\n\n<pre>Cli.new(argv: [&quot;--help&quot;]).call\nCli.new(argv: ...</pre>\n"],["SyntaxSuggest::CodeBlock","","SyntaxSuggest/CodeBlock.html","","<p>Multiple lines form a singular CodeBlock\n<p>Source code is made of multiple CodeBlocks.\n<p>Example:\n"],["SyntaxSuggest::CodeFrontier","","SyntaxSuggest/CodeFrontier.html","","<p>There are three main phases in the algorithm:\n<p>Sanitize/format input source\n<p>Search for invalid blocks\n"],["SyntaxSuggest::CodeLine","","SyntaxSuggest/CodeLine.html","","<p>Represents a single line of code of a given source file\n<p>This object contains metadata about the line such …\n"],["SyntaxSuggest::CodeSearch","","SyntaxSuggest/CodeSearch.html","","<p>Searches code for a syntax error\n<p>There are three main phases in the algorithm:\n<p>Sanitize/format input source …\n"],["SyntaxSuggest::DisplayCodeWithLineNumbers","","SyntaxSuggest/DisplayCodeWithLineNumbers.html","","<p>Outputs code with highlighted lines\n<p>Whatever is passed to this class will be rendered even if it is “marked …\n"],["SyntaxSuggest::DisplayInvalidBlocks","","SyntaxSuggest/DisplayInvalidBlocks.html","","<p>Used for formatting invalid blocks\n"],["SyntaxSuggest::Error","","SyntaxSuggest/Error.html","",""],["SyntaxSuggest::ExplainSyntax","","SyntaxSuggest/ExplainSyntax.html","","<p>Explains syntax errors based on their source\n<p>example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;def foo; puts &#39;lol&#39;&quot;</span> <span class=\"ruby-comment\"># Note missing end ...</span>\n</pre>\n"],["SyntaxSuggest::LeftRightLexCount","","SyntaxSuggest/LeftRightLexCount.html","","<p>Find mis-matched syntax based on lexical count\n<p>Used for detecting missing pairs of elements each keyword …\n"],["SyntaxSuggest::LexAll","","SyntaxSuggest/LexAll.html","","<p>Ripper.lex is not guaranteed to lex the entire source document\n<p>lex = LexAll.new(source: source) lex.each …\n"],["SyntaxSuggest::LexValue","","SyntaxSuggest/LexValue.html","","<p>Value object for accessing lex values\n<p>This lex:\n\n<pre>[1, 0], :on_ident, &quot;describe&quot;, CMDARG</pre>\n"],["SyntaxSuggest::MiniStringIO","","SyntaxSuggest/MiniStringIO.html","","<p>Mini String IO [Private]\n<p>Acts like a StringIO with reduced API, but without having to require that class. …\n"],["SyntaxSuggest::ParseBlocksFromIndentLine","","SyntaxSuggest/ParseBlocksFromIndentLine.html","","<p>This class is responsible for generating initial code blocks that will then later be expanded.\n<p>The biggest …\n"],["SyntaxSuggest::PathnameFromMessage","","SyntaxSuggest/PathnameFromMessage.html","","<p>Converts a SyntaxError message to a path\n<p>Handles the case where the filename has a colon in it such as …\n"],["SyntaxSuggest::PriorityEngulfQueue","","SyntaxSuggest/PriorityEngulfQueue.html","","<p>Keeps track of what elements are in the queue in priority and also ensures that when one element engulfs/covers/eats …\n"],["SyntaxSuggest::PriorityQueue","","SyntaxSuggest/PriorityQueue.html","","<p>Holds elements in a priority heap on insert\n<p>Instead of constantly calling ‘sort!`, put the element where …\n"],["SyntaxSuggest::RipperErrors","","SyntaxSuggest/RipperErrors.html","","<p>Capture parse errors from ripper\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-constant\">RipperErrors</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot; def foo&quot;</span>).<span class=\"ruby-identifier\">call</span>.<span class=\"ruby-identifier\">errors</span>\n<span class=\"ruby-comment\"># =&gt; [&quot;syntax error, ...</span>\n</pre>\n"],["SyntaxSuggest::UnvisitedLines","","SyntaxSuggest/UnvisitedLines.html","","<p>Tracks which lines various code blocks have expanded to and which are still unexplored\n"],["Syslog","","Syslog.html","","<p>The syslog package provides a Ruby interface to the POSIX system logging facility.\n<p>Syslog messages are …\n"],["Syslog::Constants","","Syslog/Constants.html","",""],["Syslog::Facility","","Syslog/Facility.html","",""],["Syslog::Level","","Syslog/Level.html","",""],["Syslog::Logger","","Syslog/Logger.html","","<p>Syslog::Logger is a Logger work-alike that logs via syslog instead of to a file.  You can use Syslog::Logger …\n"],["Syslog::Logger::Formatter","","Syslog/Logger/Formatter.html","","<p>Default formatter for log messages.\n"],["Syslog::Macros","","Syslog/Macros.html","",""],["Syslog::Option","","Syslog/Option.html","",""],["SystemCallError","","SystemCallError.html","","<p>SystemCallError is the base class for all low-level platform-dependent errors.\n<p>The errors available on …\n"],["SystemExit","","SystemExit.html","","<p>Raised by <code>exit</code> to initiate the termination of the script.\n"],["SystemStackError","","SystemStackError.html","","<p>Raised in case of a stack overflow.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">me_myself_and_i</span>\n  <span class=\"ruby-identifier\">me_myself_and_i</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">me_myself_and_i</span>\n</pre>\n<p><em>raises the</em> …\n"],["TCPServer","","TCPServer.html","","<p>TCPServer represents a TCP/IP server socket.\n<p>A simple TCP server may look like:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;socket&#39;</span>\n\n<span class=\"ruby-identifier\">server</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["TCPSocket","","TCPSocket.html","","<p>TCPSocket represents a TCP/IP client socket.\n<p>A simple client may look like:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;socket&#39;</span>\n\n<span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">TCPSocket</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["TSort","","TSort.html","","<p>TSort implements topological sorting using Tarjan’s algorithm for strongly connected components. …\n"],["TSort::Cyclic","","TSort/Cyclic.html","",""],["Tempfile","","Tempfile.html","","<p>A utility class for managing temporary files. When you create a Tempfile object, it will create a temporary …\n"],["Thread","","Thread.html","","<p>Threads are the Ruby implementation for a concurrent programming model.\n<p>Programs that require multiple …\n"],["Thread::Backtrace","","Thread/Backtrace.html","","<p>An internal representation of the backtrace. The user will never interact with objects of this class …\n"],["Thread::Backtrace::Location","","Thread/Backtrace/Location.html","","<p>An object representation of a stack frame, initialized by Kernel#caller_locations.\n<p>For example:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># caller_locations.rb ...</span>\n</pre>\n"],["Thread::ConditionVariable","","Thread/ConditionVariable.html","","<p>ConditionVariable objects augment class Mutex. Using condition variables, it is possible to suspend while …\n"],["Thread::Mutex","","Thread/Mutex.html","","<p>Thread::Mutex implements a simple semaphore that can be used to coordinate access to shared data from …\n"],["Thread::Queue","","Thread/Queue.html","","<p>The Thread::Queue class implements multi-producer, multi-consumer queues.  It is especially useful in …\n"],["Thread::SizedQueue","","Thread/SizedQueue.html","","<p>This class represents queues of specified size capacity.  The push operation may be blocked if the capacity …\n"],["ThreadError","","ThreadError.html","","<p>Raised when an invalid operation is attempted on a thread.\n<p>For example, when no other thread has been …\n"],["ThreadGroup","","ThreadGroup.html","","<p>ThreadGroup provides a means of keeping track of a number of threads as a group.\n<p>A given Thread object …\n"],["Time","","Time.html","","<p>A Time object represents a date and time:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">0</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-01 00:00:00 -0600</span>\n</pre>\n"],["Timeout","","Timeout.html","","<p>Timeout long-running blocks\n<p>Synopsis\n\n<pre>require &#39;timeout&#39;\nstatus = Timeout::timeout(5) {\n  # Something that ...</pre>\n"],["Timeout::Error","","Timeout/Error.html","","<p>Raised by Timeout.timeout when the block times out.\n"],["Timeout::Request","","Timeout/Request.html","",""],["TracePoint","","TracePoint.html","","<p>Document-class: TracePoint\n<p>A class that provides the functionality of Kernel#set_trace_func in a nice …\n"],["TrueClass","","TrueClass.html","","<p>The global value <code>true</code> is the only instance of class TrueClass and represents a logically true value in …\n"],["TypeError","","TypeError.html","","<p>Raised when encountering an object that is not of the expected type.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>].<span class=\"ruby-identifier\">first</span>(<span class=\"ruby-string\">&quot;two&quot;</span>)\n</pre>\n<p><em>raises the</em> …\n"],["UDPSocket","","UDPSocket.html","","<p>UDPSocket represents a UDP/IP socket.\n"],["UNIXServer","","UNIXServer.html","","<p>UNIXServer represents a UNIX domain stream server socket.\n"],["UNIXSocket","","UNIXSocket.html","","<p>UNIXSocket represents a UNIX domain stream client socket.\n"],["URI","","URI.html","","<p>URI is a module providing classes to handle Uniform Resource Identifiers (RFC2396).\n<p>Features\n<p>Uniform way …\n"],["URI::BadURIError","","URI/BadURIError.html","","<p>URI is valid, bad usage is not.\n"],["URI::Error","","URI/Error.html","","<p>Base class for all URI exceptions.\n"],["URI::FTP","","URI/FTP.html","","<p>FTP URI syntax is defined by RFC1738 section 3.2.\n<p>This class will be redesigned because of difference …\n"],["URI::File","","URI/File.html","","<p>The “file” URI is defined by RFC8089.\n"],["URI::Generic","","URI/Generic.html","","<p>Base class for all URI classes. Implements generic URI syntax as per RFC 2396.\n"],["URI::HTTP","","URI/HTTP.html","","<p>The syntax of HTTP URIs is defined in RFC1738 section 3.3.\n<p>Note that the Ruby URI library allows HTTP …\n"],["URI::HTTPS","","URI/HTTPS.html","","<p>The default port for HTTPS URIs is 443, and the scheme is ‘https:’ rather than ‘http:’. …\n"],["URI::InvalidComponentError","","URI/InvalidComponentError.html","","<p>Not a URI component.\n"],["URI::InvalidURIError","","URI/InvalidURIError.html","","<p>Not a URI.\n"],["URI::LDAP","","URI/LDAP.html","","<p>LDAP URI SCHEMA (described in RFC2255).\n"],["URI::LDAPS","","URI/LDAPS.html","","<p>The default port for LDAPS URIs is 636, and the scheme is ‘ldaps:’ rather than ‘ldap:’. …\n"],["URI::MailTo","","URI/MailTo.html","","<p>RFC6068, the mailto URL scheme.\n"],["URI::Parser","","URI/RFC2396_Parser.html","","<p>Class that parses String’s into URI’s.\n<p>It contains a Hash set of patterns and Regexp’s that …\n"],["URI::REGEXP","","URI/RFC2396_REGEXP.html","","<p>Includes URI::REGEXP::PATTERN\n"],["URI::RFC2396_Parser","","URI/RFC2396_Parser.html","","<p>Class that parses String’s into URI’s.\n<p>It contains a Hash set of patterns and Regexp’s that …\n"],["URI::RFC2396_REGEXP","","URI/RFC2396_REGEXP.html","","<p>Includes URI::REGEXP::PATTERN\n"],["URI::RFC2396_REGEXP::PATTERN","","URI/RFC2396_REGEXP/PATTERN.html","","<p>Patterns used to parse URI’s\n"],["URI::Schemes","","URI/Schemes.html","",""],["URI::WS","","URI/WS.html","","<p>The syntax of WS URIs is defined in RFC6455 section 3.\n<p>Note that the Ruby URI library allows WS URLs containing …\n"],["URI::WSS","","URI/WSS.html","","<p>The default port for WSS URIs is 443, and the scheme is ‘wss:’ rather than ‘ws:’. Other …\n"],["UnboundMethod","","UnboundMethod.html","","<p>Ruby supports two forms of objectified methods. Class Method is used to represent methods that are associated …\n"],["UncaughtThrowError","","UncaughtThrowError.html","","<p>Raised when <code>throw</code> is called with a <em>tag</em> which does not have corresponding <code>catch</code> block.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">throw</span> <span class=\"ruby-string\">&quot;foo&quot;</span>, <span class=\"ruby-string\">&quot;bar&quot;</span>\n</pre>\n"],["UnicodeNormalize","","UnicodeNormalize.html","","<p>define UnicodeNormalize module here so that we don’t have to look it up\n"],["WIN32OLE","","WIN32OLE.html","","<p>WIN32OLE\n<p><code>WIN32OLE</code> objects represent OLE Automation object in Ruby.\n<p>By using WIN32OLE, you can access OLE …\n"],["WIN32OLE::Event","","WIN32OLE/Event.html","",""],["WIN32OLE::Method","","WIN32OLE/Method.html","",""],["WIN32OLE::Param","","WIN32OLE/Param.html","",""],["WIN32OLE::Record","","WIN32OLE/Record.html","",""],["WIN32OLE::Type","","WIN32OLE/Type.html","",""],["WIN32OLE::Typelib","","WIN32OLE/Typelib.html","",""],["WIN32OLE::VARIANT","","WIN32OLE/VARIANT.html","","<p>The WIN32OLE::VARIANT module includes constants of VARIANT type constants. The constants is used when …\n"],["WIN32OLE::Variable","","WIN32OLE/Variable.html","",""],["WIN32OLE::Variant","","WIN32OLE/Variant.html","",""],["WIN32OLEQueryInterfaceError","","WIN32OLEQueryInterfaceError.html","",""],["WIN32OLERuntimeError","","WIN32OLERuntimeError.html","","<p>Raised when OLE processing failed.\n<p>EX:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">obj</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;NonExistProgID&quot;</span>)\n</pre>\n"],["Warning","","Warning.html","","<p>The Warning module contains a single method named #warn, and the module extends itself, making Warning.warn …\n"],["WeakRef","","WeakRef.html","","<p>Weak Reference class that allows a referenced object to be garbage-collected.\n<p>A WeakRef may be used exactly …\n"],["WeakRef::RefError","","WeakRef/RefError.html","","<p>RefError is raised when a referenced object has been recycled by the garbage collector\n"],["Win32","","Win32.html","","<p>Implements bindings to Win32 SSPI functions, focused on authentication to a proxy server over HTTP.\n"],["Win32::Registry","","Win32/Registry.html","",""],["Win32::Registry::API","","Win32/Registry/API.html","","<p>Win32 APIs\n"],["Win32::Registry::Constants","","Win32/Registry/Constants.html","","<p>For detail, see the MSDN.\n<p>— HKEY_*\n\n<pre>Predefined key ((*handle*)).\nThese are Integer, not Win32::Registry.</pre>\n"],["Win32::Registry::Error","","Win32/Registry/Error.html","","<p>Error\n"],["Win32::Registry::Error::Kernel32","","Win32/Registry/Error/Kernel32.html","",""],["Win32::Registry::PredefinedKey","","Win32/Registry/PredefinedKey.html","","<p>Predefined Keys\n"],["Win32::SSPI","","Win32/SSPI.html","",""],["Win32::SSPI::API","","Win32/SSPI/API.html","","<p>Win32 API Functions. Uses Win32API to bind methods to constants contained in class.\n"],["Win32::SSPI::Identity","","Win32/SSPI/Identity.html","","<p>SEC_WINNT_AUTH_IDENTITY structure\n"],["Win32::SSPI::NegotiateAuth","","Win32/SSPI/NegotiateAuth.html","","<p>Handles “Negotiate” type authentication. Geared towards authenticating with a proxy server …\n"],["Win32::SSPI::SSPIResult","","Win32/SSPI/SSPIResult.html","","<p>Takes a return result from an SSPI function and interprets the value.\n"],["Win32::SSPI::SecurityBuffer","","Win32/SSPI/SecurityBuffer.html","","<p>Creates binary representations of a SecBufferDesc structure, including the SecBuffer contained inside. …\n"],["Win32::SSPI::SecurityHandle","","Win32/SSPI/SecurityHandle.html","","<p>SecHandle struct\n"],["Win32::SSPI::TimeStamp","","Win32/SSPI/TimeStamp.html","","<p>TimeStamp struct\n"],["XMP","","XMP.html","","<p>An example printer for irb.\n<p>It’s much like the standard library PrettyPrint, that shows the value …\n"],["XMP::StringInputMethod","","XMP/StringInputMethod.html","","<p>A custom InputMethod class used by XMP for evaluating string io.\n"],["YAML","","YAML.html","","<p>YAML Ain’t Markup Language\n<p>This module provides a Ruby interface for data serialization in YAML format. …\n"],["YAML::DBM","","YAML/DBM.html","","<p>YAML + DBM = YDBM\n<p>YAML::DBM provides the same interface as ::DBM.\n<p>However, while DBM only allows strings …\n"],["YAML::Store","","YAML/Store.html","","<p>YAML::Store provides the same functionality as PStore, except it uses YAML to dump objects instead of …\n"],["ZeroDivisionError","","ZeroDivisionError.html","","<p>Raised when attempting to divide an integer by 0.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">42</span> <span class=\"ruby-operator\">/</span> <span class=\"ruby-value\">0</span>   <span class=\"ruby-comment\">#=&gt; ZeroDivisionError: divided by 0</span>\n</pre>\n<p>Note that …\n"],["Zlib","","Zlib.html","","<p>This module provides access to the zlib library. Zlib is designed to be a portable, free, general-purpose, …\n"],["Zlib::BufError","","Zlib/BufError.html","","<p>Subclass of Zlib::Error when zlib returns a Z_BUF_ERROR.\n<p>Usually if no progress is possible.\n"],["Zlib::DataError","","Zlib/DataError.html","","<p>Subclass of Zlib::Error when zlib returns a Z_DATA_ERROR.\n<p>Usually if a stream was prematurely freed.\n"],["Zlib::Deflate","","Zlib/Deflate.html","","<p>Zlib::Deflate is the class for compressing data.  See Zlib::ZStream for more information.\n"],["Zlib::Error","","Zlib/Error.html","","<p>The superclass for all exceptions raised by Ruby/zlib.\n<p>The following exceptions are defined as subclasses …\n"],["Zlib::GzipFile","","Zlib/GzipFile.html","","<p>Zlib::GzipFile is an abstract class for handling a gzip formatted compressed file. The operations are …\n"],["Zlib::GzipFile::CRCError","","Zlib/GzipFile/CRCError.html","","<p>Raised when the CRC checksum recorded in gzip file footer is not equivalent to the CRC checksum of the …\n"],["Zlib::GzipFile::Error","","Zlib/GzipFile/Error.html","","<p>Base class of errors that occur when processing GZIP files.\n"],["Zlib::GzipFile::LengthError","","Zlib/GzipFile/LengthError.html","","<p>Raised when the data length recorded in the gzip file footer is not equivalent to the length of the actual …\n"],["Zlib::GzipFile::NoFooter","","Zlib/GzipFile/NoFooter.html","","<p>Raised when gzip file footer is not found.\n"],["Zlib::GzipReader","","Zlib/GzipReader.html","","<p>Zlib::GzipReader is the class for reading a gzipped file.  GzipReader should be used as an IO, or -IO-like, …\n"],["Zlib::GzipWriter","","Zlib/GzipWriter.html","","<p>Zlib::GzipWriter is a class for writing gzipped files.  GzipWriter should be used with an instance of …\n"],["Zlib::InProgressError","","Zlib/InProgressError.html","","<p>Subclass of Zlib::Error. This error is raised when the zlib stream is currently in progress.\n<p>For example: …\n"],["Zlib::Inflate","","Zlib/Inflate.html","","<p>Zlib:Inflate is the class for decompressing compressed data.  Unlike Zlib::Deflate, an instance of this …\n"],["Zlib::MemError","","Zlib/MemError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_MEM_ERROR, usually if there was not enough memory.\n"],["Zlib::NeedDict","","Zlib/NeedDict.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_NEED_DICT if a preset dictionary is needed at this point. …\n"],["Zlib::StreamEnd","","Zlib/StreamEnd.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_STREAM_END is return if the end of the compressed data has …\n"],["Zlib::StreamError","","Zlib/StreamError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_STREAM_ERROR, usually if the stream state was inconsistent. …\n"],["Zlib::VersionError","","Zlib/VersionError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_VERSION_ERROR, usually if the zlib library version is incompatible …\n"],["Zlib::ZStream","","Zlib/ZStream.html","","<p>Zlib::ZStream is the abstract class for the stream which handles the compressed data. The operations …\n"],["fatal","","fatal.html","","<p>fatal is an Exception that is raised when Ruby has encountered a fatal error and must exit.\n"],["!","BasicObject","BasicObject.html#method-i-21","()","<p>Boolean negate.\n"],["!","Delegator","Delegator.html#method-i-21","()","<p>Delegates ! to the _<em>getobj</em>_\n"],["!","Ractor::MovedObject","Ractor/MovedObject.html#method-i-21","(*args)",""],["!=","BasicObject","BasicObject.html#method-i-21-3D","(p1)","<p>Returns true if two objects are not-equal, otherwise false.\n"],["!=","Delegator","Delegator.html#method-i-21-3D","(obj)","<p>Returns true if two objects are not considered of equal value.\n"],["!=","Ractor::MovedObject","Ractor/MovedObject.html#method-i-21-3D","(*args)",""],["!~","Object","Object.html#method-i-21~","(p1)","<p>Returns true if two objects do not match (using the <em>=~</em> method), otherwise false.\n"],["%","BigDecimal","BigDecimal.html#method-i-25","(p1)","<p>Returns the modulus from dividing by b.\n<p>See BigDecimal#divmod.\n"],["%","Float","Float.html#method-i-25","(p1)","<p>Returns <code>self</code> modulo <code>other</code> as a float.\n<p>For float <code>f</code> and real number <code>r</code>, these expressions are equivalent: …\n"],["%","Integer","Integer.html#method-i-25","(p1)","<p>Returns <code>self</code> modulo <code>other</code> as a real number.\n<p>For integer <code>n</code> and real number <code>r</code>, these expressions are equivalent: …\n"],["%","Numeric","Numeric.html#method-i-25","(p1)","<p>Returns <code>self</code> modulo <code>other</code> as a real number.\n<p>Of the Core and Standard Library classes, only Rational uses …\n"],["%","OpenSSL::BN","OpenSSL/BN.html#method-i-25","(p1)",""],["%","Range","Range.html#method-i-25","(p1)","<p>Iterates over the elements of <code>self</code>.\n<p>With a block given, calls the block with selected elements of the …\n"],["%","String","String.html#method-i-25","(p1)","<p>Returns the result of formatting <code>object</code> into the format specification <code>self</code> (see Kernel#sprintf for formatting …\n"],["&","Array","Array.html#method-i-26","(p1)","<p>Returns a new Array containing each element found in both <code>array</code> and Array <code>other_array</code>; duplicates are …\n"],["&","FalseClass","FalseClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is the argument to a method call—there is no short-circuit …\n"],["&","IO::Buffer","IO/Buffer.html#method-i-26","(p1)","<p>Generate a new buffer the same size as the source by applying the binary AND operation to the source, …\n"],["&","IPAddr","IPAddr.html#method-i-26","(other)","<p>Returns a new ipaddr built by bitwise AND.\n"],["&","Integer","Integer.html#method-i-26","(p1)","<p>Bitwise AND; each bit in the result is 1 if both corresponding bits in <code>self</code> and <code>other</code> are 1, 0 otherwise: …\n"],["&","NilClass","NilClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is the argument to a method call—there is no short-circuit …\n"],["&","Process::Status","Process/Status.html#method-i-26","(p1)","<p>Logical AND of the bits in <em>stat</em> with <em>num</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fork</span> { <span class=\"ruby-identifier\">exit</span> <span class=\"ruby-value\">0x37</span> }\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span>\n<span class=\"ruby-identifier\">sprintf</span>(<span class=\"ruby-string\">&#39;%04x&#39;</span>, <span class=\"ruby-identifier\">$?</span>.<span class=\"ruby-identifier\">to_i</span>)    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["&","Ripper::Lexer::State","Ripper/Lexer/State.html#method-i-26","(i)",""],["&","Set","Set.html#method-i-26","(enum)","<p>Returns a new set containing elements common to the set and the\ngiven enumerable object.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Set</span>[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">5</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["&","TrueClass","TrueClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or <code>false</code>, <code>true</code> otherwise.\n"],["*","Array","Array.html#method-i-2A","(p1)","<p>When non-negative argument Integer <code>n</code> is given, returns a new Array built by concatenating the <code>n</code> copies …\n"],["*","Benchmark::Tms","Benchmark/Tms.html#method-i-2A","(x)","<p>Returns a new Tms object obtained by memberwise multiplication of the individual times for this Tms object …\n"],["*","BigDecimal","BigDecimal.html#method-i-2A","(p1)",""],["*","Complex","Complex.html#method-i-2A","(p1)","<p>Performs multiplication.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (-5+12i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["*","Float","Float.html#method-i-2A","(p1)","<p>Returns a new Float which is the product of <code>self</code> and <code>other</code>:\n\n<pre>f = 3.14\nf * 2              # =&gt; 6.28\nf * ...</pre>\n"],["*","Integer","Integer.html#method-i-2A","(p1)","<p>Performs multiplication:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">4</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\"># =&gt; 8</span>\n<span class=\"ruby-value\">4</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">-2</span>             <span class=\"ruby-comment\"># =&gt; -8</span>\n<span class=\"ruby-value\">-4</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">2</span>             <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["*","OpenSSL::BN","OpenSSL/BN.html#method-i-2A","(p1)",""],["*","Rational","Rational.html#method-i-2A","(p1)","<p>Performs multiplication.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (4/9)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["*","String","String.html#method-i-2A","(p1)","<p>Returns a new String containing <code>integer</code> copies of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;Ho! &quot;</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">3</span> <span class=\"ruby-comment\"># =&gt; &quot;Ho! Ho! Ho! &quot;</span>\n<span class=\"ruby-string\">&quot;Ho! &quot;</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">0</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["**","BigDecimal","BigDecimal.html#method-i-2A-2A","(p1)","<p>Returns the BigDecimal value of <code>self</code> raised to power <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;3.14&#39;</span>)\n<span class=\"ruby-identifier\">b</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">2</span>             <span class=\"ruby-operator\">...</span>\n</pre>\n"],["**","Complex","Complex.html#method-i-2A-2A","(p1)","<p>Performs exponentiation.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-string\">&#39;i&#39;</span>) <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\">#=&gt; (-1+0i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-8</span>) <span class=\"ruby-operator\">**</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["**","Float","Float.html#method-i-2A-2A","(p1)","<p>Raises <code>self</code> to the power of <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>\n<span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\"># =&gt; 9.8596</span>\n<span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">-2</span>             <span class=\"ruby-comment\"># =&gt; 0.1014239928597509 ...</span>\n</pre>\n"],["**","Integer","Integer.html#method-i-2A-2A","(p1)","<p>Raises <code>self</code> to the power of <code>numeric</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">3</span>              <span class=\"ruby-comment\"># =&gt; 8</span>\n<span class=\"ruby-value\">2</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">-3</span>             <span class=\"ruby-comment\"># =&gt; (1/8)</span>\n<span class=\"ruby-value\">-2</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">3</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["**","OpenSSL::BN","OpenSSL/BN.html#method-i-2A-2A","(p1)",""],["**","Rational","Rational.html#method-i-2A-2A","(p1)","<p>Performs exponentiation.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>)    <span class=\"ruby-operator\">**</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">3</span>)     <span class=\"ruby-comment\">#=&gt; (8/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">10</span>)   <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">-2</span>             <span class=\"ruby-operator\">...</span>\n</pre>\n"],["+","Array","Array.html#method-i-2B","(p1)","<p>Returns a new Array containing all elements of <code>array</code> followed by all elements of <code>other_array</code>:\n\n<pre>a = [0, ...</pre>\n"],["+","Benchmark::Tms","Benchmark/Tms.html#method-i-2B","(other)","<p>Returns a new Tms object obtained by memberwise summation of the individual times for this Tms object …\n"],["+","BigDecimal","BigDecimal.html#method-i-2B","(p1)","<p>Returns the BigDecimal sum of <code>self</code> and <code>value</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;111111.111&#39;</span>) <span class=\"ruby-comment\"># =&gt; 0.111111111e6</span>\n<span class=\"ruby-identifier\">b</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">2</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["+","Complex","Complex.html#method-i-2B","(p1)","<p>Performs addition.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (4+6i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; (901+0i) ...</span>\n</pre>\n"],["+","Date","Date.html#method-i-2B","(p1)","<p>Returns a date object pointing <code>other</code> days after self.  The other should be a numeric value.  If the other …\n"],["+","Enumerator","Enumerator.html#method-i-2B","(p1)","<p>Returns an enumerator object generated from this enumerator and a given enumerable.\n\n<pre>e = (1..3).each + ...</pre>\n"],["+","Fiddle::Pointer","Fiddle/Pointer.html#method-i-2B","(p1)","<p>Returns a new pointer instance that has been advanced <code>n</code> bytes.\n"],["+","Float","Float.html#method-i-2B","(p1)","<p>Returns a new Float which is the sum of <code>self</code> and <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>\n<span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span>                 <span class=\"ruby-comment\"># =&gt; 4.140000000000001 ...</span>\n</pre>\n"],["+","Integer","Integer.html#method-i-2B","(p1)","<p>Performs addition:\n\n<pre>2 + 2              # =&gt; 4\n-2 + 2             # =&gt; 0\n-2 + -2            # =&gt; -4\n2 + ...</pre>\n"],["+","OpenSSL::BN","OpenSSL/BN.html#method-i-2B","(p1)",""],["+","Pathname","Pathname.html#method-i-2B","(other)","<p>Appends a pathname fragment to <code>self</code> to produce a new Pathname object. Since <code>other</code> is considered as a …\n"],["+","Rational","Rational.html#method-i-2B","(p1)","<p>Performs addition.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (4/3)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["+","Set","Set.html#method-i-2B","(enum)",""],["+","String","String.html#method-i-2B","(p1)","<p>Returns a new String containing <code>other_string</code> concatenated to <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;Hello from &quot;</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;Hello ...</span>\n</pre>\n"],["+","Time","Time.html#method-i-2B","(p1)","<p>Returns a new Time object whose value is the sum of the numeric value of <code>self</code> and the given <code>numeric</code>: …\n"],["+","URI::Generic","URI/Generic.html#method-i-2B","(oth)",""],["+@","BigDecimal","BigDecimal.html#method-i-2B-40","()","<p>Returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">+</span><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-value\">5</span>)  <span class=\"ruby-comment\"># =&gt; 0.5e1</span>\n<span class=\"ruby-operator\">+</span><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-value\">-5</span>) <span class=\"ruby-comment\"># =&gt; -0.5e1</span>\n</pre>\n"],["+@","Fiddle::Pointer","Fiddle/Pointer.html#method-i-2B-40","()","<p>Returns a new Fiddle::Pointer instance that is a dereferenced pointer for this pointer.\n<p>Analogous to the …\n"],["+@","Numeric","Numeric.html#method-i-2B-40","()","<p>Returns <code>self</code>.\n"],["+@","OpenSSL::BN","OpenSSL/BN.html#method-i-2B-40","()",""],["+@","String","String.html#method-i-2B-40","()","<p>Returns <code>self</code> if <code>self</code> is not frozen.\n<p>Otherwise returns <code>self.dup</code>, which is not frozen.\n"],["-","Array","Array.html#method-i-2D","(p1)","<p>Returns a new Array containing only those elements from <code>array</code> that are not found in Array <code>other_array</code> …\n"],["-","Benchmark::Tms","Benchmark/Tms.html#method-i-2D","(other)","<p>Returns a new Tms object obtained by memberwise subtraction of the individual times for the <code>other</code> Tms …\n"],["-","BigDecimal","BigDecimal.html#method-i-2D","(p1)","<p>Returns the BigDecimal difference of <code>self</code> and <code>value</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;333333.333&#39;</span>) <span class=\"ruby-comment\"># =&gt; 0.333333333e6</span>\n<span class=\"ruby-identifier\">b</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["-","Complex","Complex.html#method-i-2D","(p1)","<p>Performs subtraction.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (0+0i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["-","Date","Date.html#method-i-2D","(p1)","<p>Returns the difference between the two dates if the other is a date object.  If the other is a numeric …\n"],["-","Fiddle::Pointer","Fiddle/Pointer.html#method-i-2D","(p1)","<p>Returns a new pointer instance that has been moved back <code>n</code> bytes.\n"],["-","Float","Float.html#method-i-2D","(p1)","<p>Returns a new Float which is the difference of <code>self</code> and <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>\n<span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">-</span> <span class=\"ruby-value\">1</span>                 <span class=\"ruby-comment\"># =&gt; 2.14 ...</span>\n</pre>\n"],["-","Integer","Integer.html#method-i-2D","(p1)","<p>Performs subtraction:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">4</span> <span class=\"ruby-operator\">-</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\"># =&gt; 2</span>\n<span class=\"ruby-value\">-4</span> <span class=\"ruby-operator\">-</span> <span class=\"ruby-value\">2</span>             <span class=\"ruby-comment\"># =&gt; -6</span>\n<span class=\"ruby-value\">-4</span> <span class=\"ruby-operator\">-</span> <span class=\"ruby-value\">-2</span>            <span class=\"ruby-comment\"># =&gt; -2 ...</span>\n</pre>\n"],["-","OpenSSL::BN","OpenSSL/BN.html#method-i-2D","(p1)",""],["-","Rational","Rational.html#method-i-2D","(p1)","<p>Performs subtraction.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (0/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-operator\">...</span>\n</pre>\n"],["-","Set","Set.html#method-i-2D","(enum)","<p>Returns a new set built by duplicating the set, removing every\nelement that appears in the given enumerable ...\n"],["-","Time","Time.html#method-i-2D","(p1)","<p>When <code>numeric</code> is given, returns a new Time object whose value is the difference of the numeric value of …\n"],["-","URI::Generic","URI/Generic.html#method-i-2D","(oth)",""],["-@","BigDecimal","BigDecimal.html#method-i-2D-40","()","<p>Returns the BigDecimal negation of self:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b0</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;1.5&#39;</span>)\n<span class=\"ruby-identifier\">b1</span> = <span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">b0</span> <span class=\"ruby-comment\"># =&gt; -0.15e1</span>\n<span class=\"ruby-identifier\">b2</span> = <span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">b1</span> <span class=\"ruby-comment\"># =&gt; 0.15e1</span>\n</pre>\n"],["-@","Complex","Complex.html#method-i-2D-40","()","<p>Returns negation of the value.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-</span><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (-1-2i)</span>\n</pre>\n"],["-@","Fiddle::Pointer","Fiddle/Pointer.html#method-i-2D-40","()","<p>Returns a new Fiddle::Pointer instance that is a reference pointer for this pointer.\n<p>Analogous to the …\n"],["-@","Float","Float.html#method-i-2D-40","()","<p>Returns <code>float</code>, negated.\n"],["-@","Integer","Integer.html#method-i-2D-40","()","<p>Returns <code>int</code>, negated.\n"],["-@","Numeric","Numeric.html#method-i-2D-40","()","<p>Unary Minus—Returns the receiver, negated.\n"],["-@","OpenSSL::BN","OpenSSL/BN.html#method-i-2D-40","()",""],["-@","Rational","Rational.html#method-i-2D-40","()","<p>Negates <code>rat</code>.\n"],["-@","String","String.html#method-i-2D-40","()","<p>Returns a frozen, possibly pre-existing copy of the string.\n<p>The returned String will be deduplicated as …\n"],["/","Benchmark::Tms","Benchmark/Tms.html#method-i-2F","(x)","<p>Returns a new Tms object obtained by memberwise division of the individual times for this Tms object …\n"],["/","BigDecimal","BigDecimal.html#method-i-2F","(p1)","<p>Divide by the specified value.\n<p>The result precision will be the precision of the larger operand, but its …\n"],["/","Complex","Complex.html#method-i-2F","(p1)","<p>Performs division.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; ((1/1)+(0/1)*i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["/","Float","Float.html#method-i-2F","(p1)","<p>Returns a new Float which is the result of dividing <code>self</code> by <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>\n<span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">/</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\"># =&gt; 1.57 ...</span>\n</pre>\n"],["/","Integer","Integer.html#method-i-2F","(p1)","<p>Performs division; for integer <code>numeric</code>, truncates the result to an integer:\n\n<pre class=\"ruby\"> <span class=\"ruby-value\">4</span> <span class=\"ruby-operator\">/</span> <span class=\"ruby-value\">3</span>              <span class=\"ruby-comment\"># =&gt; 1 ...</span>\n</pre>\n"],["/","OpenSSL::BN","OpenSSL/BN.html#method-i-2F","(p1)","<p>Division of OpenSSL::BN instances\n"],["/","Pathname","Pathname.html#method-i-2F","(other)",""],["/","Rational","Rational.html#method-i-2F","(p1)","<p>Performs division.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (1/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["<","BigDecimal","BigDecimal.html#method-i-3C","(p1)","<p>Returns <code>true</code> if <code>self</code> is less than <code>other</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;1.5&#39;</span>) <span class=\"ruby-comment\"># =&gt; 0.15e1</span>\n<span class=\"ruby-identifier\">b</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-value\">2</span>     <span class=\"ruby-operator\">...</span>\n</pre>\n"],["<","Comparable","Comparable.html#method-i-3C","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method, returning true if it returns a value …\n"],["<","Float","Float.html#method-i-3C","(p1)","<p>Returns <code>true</code> if <code>self</code> is numerically less than <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-value\">3</span>              <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-value\">3.0</span>         <span class=\"ruby-operator\">...</span>\n</pre>\n"],["<","Hash","Hash.html#method-i-3C","(p1)","<p>Returns <code>true</code> if <code>hash</code> is a proper subset of <code>other_hash</code>, <code>false</code> otherwise:\n\n<pre>h1 = {foo: 0, bar: 1}\nh2 = {foo: ...</pre>\n"],["<","Integer","Integer.html#method-i-3C","(p1)","<p>Returns <code>true</code> if the value of <code>self</code> is less than that of <code>other</code>:\n\n<pre class=\"ruby\">  <span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-value\">0</span>              <span class=\"ruby-comment\"># =&gt; false</span>\n  <span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["<","Module","Module.html#method-i-3C","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em>. Returns <code>false</code> if <em>mod</em> is the same as <em>other</em> or <em>mod</em> is an ancestor …\n"],["<","Set","Set.html#method-i-3C","(set)",""],["<<","Array","Array.html#method-i-3C-3C","(p1)","<p>Appends <code>object</code> to <code>self</code>; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-value\">:baz</span> <span class=\"ruby-comment\"># =&gt; [:foo, &quot;bar&quot;, 2, :baz]</span>\n</pre>\n<p>Appends …\n"],["<<","CSV","CSV.html#method-i-3C-3C","(row)","<p>Appends a row to <code>self</code>.\n<p>Argument <code>row</code> must be an Array object or a CSV::Row object.\n<p>The output stream must …\n"],["<<","CSV::Row","CSV/Row.html#method-i-3C-3C","(arg)","<p>Adds a field to <code>self</code>; returns <code>self</code>:\n<p>If the argument is a 2-element Array <code>[header, value]</code>, a field is added …\n"],["<<","CSV::Table","CSV/Table.html#method-i-3C-3C","(row_or_array)","<p>If <code>row_or_array</code> is a CSV::Row object, it is appended to the table:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;Name,Value\\nfoo,0\\nbar,1\\nbaz,2\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["<<","CSV::Writer","CSV/Writer.html#method-i-3C-3C","(row)","<p>Adds a new row\n"],["<<","Date","Date.html#method-i-3C-3C","(p1)","<p>Returns a new Date object representing the date <code>n</code> months earlier; <code>n</code> should be a numeric:\n\n<pre>(Date.new(2001, ...</pre>\n"],["<<","Digest::Base","Digest/Base.html#method-i-3C-3C","(p1)","<p>Update the digest using given <em>string</em> and return <code>self</code>.\n"],["<<","Digest::Instance","Digest/Instance.html#method-i-3C-3C","(p1)","<p>Updates the digest using a given <em>string</em> and returns self.\n<p>The update() method and the left-shift operator …\n"],["<<","Digest::SHA2","Digest/SHA2.html#method-i-3C-3C","(str)",""],["<<","Gem::AvailableSet","Gem/AvailableSet.html#method-i-3C-3C","(o)",""],["<<","Gem::SourceList","Gem/SourceList.html#method-i-3C-3C","(obj)","<p>Appends <code>obj</code> to the source list which may be a Gem::Source, URI or URI String.\n"],["<<","IO","IO.html#method-i-3C-3C","(p1)","<p>Writes the given <code>object</code> to <code>self</code>, which must be opened for writing (see Access Modes); returns <code>self</code>; if …\n"],["<<","IO::generic_writable","IO/generic_writable.html#method-i-3C-3C","(p1)","<p>See IO#<<.\n"],["<<","IPAddr","IPAddr.html#method-i-3C-3C","(num)","<p>Returns a new ipaddr built by bitwise left shift.\n"],["<<","Integer","Integer.html#method-i-3C-3C","(p1)","<p>Returns <code>self</code> with bits shifted <code>count</code> positions to the left, or to the right if <code>count</code> is negative:\n\n<pre>n = ...</pre>\n"],["<<","Logger","Logger.html#method-i-3C-3C","(msg)","<p>Writes the given <code>msg</code> to the log with no formatting; returns the number of characters written, or <code>nil</code> …\n"],["<<","Method","Method.html#method-i-3C-3C","(p1)","<p>Returns a proc that is the composition of this method and the given <em>g</em>. The returned proc takes a variable …\n"],["<<","Net::WriteAdapter","Net/WriteAdapter.html#method-i-3C-3C","(str)",""],["<<","OpenSSL::BN","OpenSSL/BN.html#method-i-3C-3C","(p1)",""],["<<","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-3C-3C","(s)","<p>Writes <em>s</em> to the stream.  <em>s</em> will be converted to a String using <code>.to_s</code> method.\n"],["<<","OpenSSL::Buffering::Buffer","OpenSSL/Buffering/Buffer.html#method-i-3C-3C","(string)",""],["<<","OpenSSL::Digest","OpenSSL/Digest.html#method-i-3C-3C","(p1)","<p>Not every message digest can be computed in one single pass. If a message digest is to be computed from …\n"],["<<","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-3C-3C","(p1)","<p>Returns <em>hmac</em> updated with the message to be authenticated. Can be called repeatedly with chunks of the …\n"],["<<","Proc","Proc.html#method-i-3C-3C","(p1)","<p>Returns a proc that is the composition of this proc and the given <em>g</em>. The returned proc takes a variable …\n"],["<<","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-3C-3C","(object)",""],["<<","Ractor","Ractor.html#method-i-3C-3C","(obj, move: false)",""],["<<","Reline::History","Reline/History.html#method-i-3C-3C","(val)",""],["<<","Reline::KillRing::RingBuffer","Reline/KillRing/RingBuffer.html#method-i-3C-3C","(point)",""],["<<","Set","Set.html#method-i-3C-3C","(o)",""],["<<","String","String.html#method-i-3C-3C","(p1)","<p>Concatenates <code>object</code> to <code>self</code> and returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-comment\"># =&gt; &quot;foobar&quot;</span>\n<span class=\"ruby-identifier\">s</span>          <span class=\"ruby-comment\"># =&gt; &quot;foobar&quot;</span>\n</pre>\n"],["<<","StringScanner","StringScanner.html#method-i-3C-3C","(p1)","<p>Appends <code>str</code> to the string being scanned. This method does not affect scan pointer.\n\n<pre>s = StringScanner.new(&quot;Fri ...</pre>\n"],["<<","SyntaxSuggest::CodeFrontier","SyntaxSuggest/CodeFrontier.html#method-i-3C-3C","(block)","<p>Add a block to the frontier\n<p>This method ensures the frontier always remains sorted (in indentation order) …\n"],["<<","SyntaxSuggest::PriorityQueue","SyntaxSuggest/PriorityQueue.html#method-i-3C-3C","(element)",""],["<<","Thread::Queue","Thread/Queue.html#method-i-3C-3C","(p1)","<p>Pushes the given <code>object</code> to the queue.\n"],["<<","Thread::SizedQueue","Thread/SizedQueue.html#method-i-3C-3C","(object, non_block = false, timeout: nil)",""],["<<","Zlib::Deflate","Zlib/Deflate.html#method-i-3C-3C","(p1)","<p>Inputs <code>string</code> into the deflate stream just like Zlib::Deflate#deflate, but returns the Zlib::Deflate …\n"],["<<","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-3C-3C","(p1)","<p>Same as IO.\n"],["<<","Zlib::Inflate","Zlib/Inflate.html#method-i-3C-3C","(p1)","<p>Same as IO.\n"],["<=","BigDecimal","BigDecimal.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> is less or equal to than <code>other</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;1.5&#39;</span>) <span class=\"ruby-comment\"># =&gt; 0.15e1 ...</span>\n</pre>\n"],["<=","Comparable","Comparable.html#method-i-3C-3D","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method, returning true if it returns a value …\n"],["<=","Float","Float.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> is numerically less than or equal to <code>other</code>:\n\n<pre>2.0 &lt;= 3              # =&gt; true\n2.0 &lt;= ...</pre>\n"],["<=","Hash","Hash.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if <code>hash</code> is a subset of <code>other_hash</code>, <code>false</code> otherwise:\n\n<pre>h1 = {foo: 0, bar: 1}\nh2 = {foo: 0, bar: ...</pre>\n"],["<=","Integer","Integer.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if the value of <code>self</code> is less than or equal to that of <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">&lt;=</span> <span class=\"ruby-value\">0</span>              <span class=\"ruby-comment\"># =&gt; false ...</span>\n</pre>\n"],["<=","Module","Module.html#method-i-3C-3D","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em> or is the same as <em>other</em>. Returns <code>nil</code> if there’s no relationship …\n"],["<=","Set","Set.html#method-i-3C-3D","(set)",""],["<=>","Array","Array.html#method-i-3C-3D-3E","(p1)","<p>Returns -1, 0, or 1 as <code>self</code> is less than, equal to, or greater than <code>other_array</code>. For each index <code>i</code> in …\n"],["<=>","BigDecimal","BigDecimal.html#method-i-3C-3D-3E","(p1)","<p>The comparison operator. a &lt;=&gt; b is 0 if a == b, 1 if a &gt; b, -1 if a &lt; b.\n"],["<=>","Complex","Complex.html#method-i-3C-3D-3E","(p1)","<p>If <code>cmp</code>‘s imaginary part is zero, and <code>object</code> is also a real number (or a Complex number where the …\n"],["<=>","Date","Date.html#method-i-3C-3D-3E","(p1)","<p>Compares <code>self</code> and <code>other</code>, returning:\n<p><code>-1</code> if <code>other</code> is larger.\n<p><code>0</code> if the two are equal.\n"],["<=>","Fiddle::Pointer","Fiddle/Pointer.html#method-i-3C-3D-3E","(p1)","<p>Returns -1 if less than, 0 if equal to, 1 if greater than <code>other</code>.\n<p>Returns nil if <code>ptr</code> cannot be compared …\n"],["<=>","File::Stat","File/Stat.html#method-i-3C-3D-3E","(p1)","<p>Compares File::Stat objects by comparing their respective modification times.\n<p><code>nil</code> is returned if <code>other_stat</code> …\n"],["<=>","Float","Float.html#method-i-3C-3D-3E","(p1)","<p>Returns a value that depends on the numeric relation between <code>self</code> and <code>other</code>:\n<p>-1, if <code>self</code> is less than …\n"],["<=>","Gem::Dependency","Gem/Dependency.html#method-i-3C-3D-3E","(other)","<p>Dependencies are ordered by name.\n"],["<=>","Gem::NameTuple","Gem/NameTuple.html#method-i-3C-3D-3E","(other)",""],["<=>","Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails","Gem/Resolver/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-3C-3D-3E","(other)","<p>We compare UnwindDetails when choosing which state to unwind to. If two options have the same state_index …\n"],["<=>","Gem::Source","Gem/Source.html#method-i-3C-3D-3E","(other)","<p>Sources are ordered by installation preference.\n"],["<=>","Gem::Source::Git","Gem/Source/Git.html#method-i-3C-3D-3E","(other)",""],["<=>","Gem::Source::Installed","Gem/Source/Installed.html#method-i-3C-3D-3E","(other)","<p>Installed sources sort before all other sources\n"],["<=>","Gem::Source::Local","Gem/Source/Local.html#method-i-3C-3D-3E","(other)","<p>Local sorts before Gem::Source and after Gem::Source::Installed\n"],["<=>","Gem::Source::SpecificFile","Gem/Source/SpecificFile.html#method-i-3C-3D-3E","(other)","<p>Orders this source against <code>other</code>.\n<p>If <code>other</code> is a SpecificFile from a different gem name <code>nil</code> is returned. …\n"],["<=>","Gem::Source::Vendor","Gem/Source/Vendor.html#method-i-3C-3D-3E","(other)",""],["<=>","Gem::Version","Gem/Version.html#method-i-3C-3D-3E","(other)","<p>Compares this version with <code>other</code> returning -1, 0, or 1 if the other version is larger, the same, or smaller …\n"],["<=>","IO::Buffer","IO/Buffer.html#method-i-3C-3D-3E","(p1)","<p>Buffers are compared by size and exact contents of the memory they are referencing using <code>memcmp</code>.\n"],["<=>","IPAddr","IPAddr.html#method-i-3C-3D-3E","(other)","<p>Compares the ipaddr with another.\n"],["<=>","IRB::Notifier::LeveledNotifier","IRB/Notifier/LeveledNotifier.html#method-i-3C-3D-3E","(other)","<p>Compares the level of this notifier object with the given <code>other</code> notifier.\n<p>See the Comparable module for …\n"],["<=>","Integer","Integer.html#method-i-3C-3D-3E","(p1)","<p>Returns:\n<p>-1, if <code>self</code> is less than <code>other</code>.\n<p>0, if <code>self</code> is equal to <code>other</code>.\n"],["<=>","Module","Module.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, +1 or nil depending on whether <code>module</code> includes <code>other_module</code>, they are the …\n"],["<=>","Numeric","Numeric.html#method-i-3C-3D-3E","(p1)","<p>Returns zero if <code>self</code> is the same as <code>other</code>, <code>nil</code> otherwise.\n<p>No subclass in the Ruby Core or Standard Library …\n"],["<=>","Object","Object.html#method-i-3C-3D-3E","(p1)","<p>Returns 0 if <code>obj</code> and <code>other</code> are the same object or <code>obj == other</code>, otherwise nil.\n<p>The #<=> is used by various …\n"],["<=>","OpenSSL::BN","OpenSSL/BN.html#method-i-3C-3D-3E","(p1)",""],["<=>","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-3C-3D-3E","(p1)","<p>Compares this Name with <em>other</em> and returns <code>0</code> if they are the same and <code>-1</code> or <code>+1</code> if they are greater or …\n"],["<=>","Pathname","Pathname.html#method-i-3C-3D-3E","(p1)","<p>Provides a case-sensitive comparison operator for pathnames.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Pathname</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;/usr&#39;</span>) <span class=\"ruby-operator\">&lt;=&gt;</span> <span class=\"ruby-constant\">Pathname</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;/usr/bin&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["<=>","RDoc::Alias","RDoc/Alias.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #new_name\n"],["<=>","RDoc::Constant","RDoc/Constant.html#method-i-3C-3D-3E","(other)","<p>Constants are ordered by name\n"],["<=>","RDoc::Context","RDoc/Context.html#method-i-3C-3D-3E","(other)","<p>Contexts are sorted by full_name\n"],["<=>","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #name\n"],["<=>","RDoc::Mixin","RDoc/Mixin.html#method-i-3C-3D-3E","(other)","<p>Mixins are sorted by name\n"],["<=>","Rational","Rational.html#method-i-3C-3D-3E","(p1)","<p>Returns -1, 0, or +1 depending on whether <code>rational</code> is less than, equal to, or greater than <code>numeric</code>.\n<p><code>nil</code> …\n"],["<=>","Set","Set.html#method-i-3C-3D-3E","(set)","<p>Returns 0 if the set are equal,\n-1 / +1 if the set is a proper subset / superset of the given set,\nor ...\n"],["<=>","String","String.html#method-i-3C-3D-3E","(p1)","<p>Compares <code>self</code> and <code>other_string</code>, returning:\n<p>-1 if <code>other_string</code> is larger.\n<p>0 if the two are equal.\n"],["<=>","Symbol","Symbol.html#method-i-3C-3D-3E","(p1)","<p>If <code>object</code> is a symbol, returns the equivalent of <code>symbol.to_s &lt;=&gt; object.to_s</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:bar</span> <span class=\"ruby-operator\">&lt;=&gt;</span> <span class=\"ruby-value\">:foo</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["<=>","SyntaxSuggest::CodeBlock","SyntaxSuggest/CodeBlock.html#method-i-3C-3D-3E","(other)","<p>This is used for frontier ordering, we are searching from the largest indentation to the smallest. This …\n"],["<=>","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-i-3C-3D-3E","(other)","<p>Comparison operator, needed for equality and sorting\n"],["<=>","Time","Time.html#method-i-3C-3D-3E","(p1)","<p>Compares <code>self</code> with <code>other_time</code>; returns:\n<p><code>-1</code>, if <code>self</code> is less than <code>other_time</code>.\n<p><code>0</code>, if <code>self</code> is equal to <code>other_time</code> …\n"],["==","Array","Array.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if both <code>array.size == other_array.size</code> and for each index <code>i</code> in <code>array</code>, <code>array[i] == other_array[i]</code> …\n"],["==","BasicObject","BasicObject.html#method-i-3D-3D","(p1)","<p>Equality — At the Object level, #== returns <code>true</code> only if <code>obj</code> and <code>other</code> are the same object.  Typically …\n"],["==","BigDecimal","BigDecimal.html#method-i-3D-3D","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["==","CSV::Row","CSV/Row.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if <code>other</code> is a /CSV::Row that has the same fields (headers and values) in the same order …\n"],["==","CSV::Table","CSV/Table.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if all each row of <code>self</code> <code>==</code> the corresponding row of <code>other_table</code>, otherwise, <code>false</code>.\n<p>The access …\n"],["==","Comparable","Comparable.html#method-i-3D-3D","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method, returning true if it returns 0. Also …\n"],["==","Complex","Complex.html#method-i-3D-3D","(p1)","<p>Returns true if cmp equals object numerically.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; true</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">5</span>)  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["==","Data","Data.html#method-i-3D-3D","(p1)","<p>Returns  <code>true</code> if <code>other</code> is the same class as <code>self</code>, and all members are equal.\n<p>Examples:\n\n<pre>Measure = Data.define(:amount, ...</pre>\n"],["==","Delegator","Delegator.html#method-i-3D-3D","(obj)","<p>Returns true if two objects are considered of equal value.\n"],["==","Digest::Instance","Digest/Instance.html#method-i-3D-3D","(p1)","<p>If a string is given, checks whether it is equal to the hex-encoded hash value of the digest object. …\n"],["==","Encoding::Converter","Encoding/Converter.html#method-i-3D-3D","(p1)",""],["==","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is an Enumerator::ArithmeticSequence, has equivalent begin, end, step, and  …\n"],["==","Exception","Exception.html#method-i-3D-3D","(p1)","<p>Equality—If <em>obj</em> is not an Exception, returns <code>false</code>. Otherwise, returns <code>true</code> if <em>exc</em> and <em>obj</em> share same …\n"],["==","Fiddle::Pointer","Fiddle/Pointer.html#method-i-3D-3D","(p1)","<p>Returns true if <code>other</code> wraps the same pointer, otherwise returns false.\n"],["==","Float","Float.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>other</code> has the same value as <code>self</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["==","Gem::NameTuple","Gem/NameTuple.html#method-i-3D-3D","(other)","<p>Compare with <code>other</code>. Supports another NameTuple or an Array in the [name, version, platform] format.\n"],["==","Gem::Platform","Gem/Platform.html#method-i-3D-3D","(other)","<p>Is <code>other</code> equal to this platform?  Two platforms are equal if they have the same CPU, OS and version. …\n"],["==","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-i-3D-3D","(other)",""],["==","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-3D-3D","(other)","<p>@param [DependencyGraph] other @return [Boolean] whether the two dependency graphs are equal, determined …\n"],["==","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-3D-3D","(other)","<p>@return [Boolean] whether the two vertices are equal, determined\n\n<pre>by a recursive traversal of each {Vertex#successors}</pre>\n"],["==","Hash","Hash.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if all of the following are true:\n<p><code>object</code> is a Hash object.\n<p><code>hash</code> and <code>object</code> have the same keys …\n"],["==","IPAddr","IPAddr.html#method-i-3D-3D","(other)","<p>Returns true if two ipaddrs are equal.\n"],["==","Integer","Integer.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> is numerically equal to <code>other</code>; <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">2</span>     <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">1.0</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["==","MatchData","MatchData.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> is another MatchData object whose target string, regexp, match, and captures are …\n"],["==","Method","Method.html#method-i-3D-3D","(p1)","<p>Two method objects are equal if they are bound to the same object and refer to the same method definition …\n"],["==","Module","Module.html#method-i-3D-3D","(p1)","<p>Equality — At the Object level, #== returns <code>true</code> only if <code>obj</code> and <code>other</code> are the same object.  Typically …\n"],["==","OpenSSL::ASN1::ObjectId","OpenSSL/ASN1/ObjectId.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <em>other_oid</em> is the same as <em>oid</em>\n"],["==","OpenSSL::BN","OpenSSL/BN.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <em>obj</em> has the same value as <em>bn</em>. Contrast this with OpenSSL::BN#eql?, which requires …\n"],["==","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-3D-3D","(other)","<p>Securely compare with another HMAC instance in constant time.\n"],["==","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if the two groups use the same curve and have the same parameters, <code>false</code> otherwise.\n"],["==","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-3D-3D","(p1)",""],["==","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if the two Session is the same, <code>false</code> if not.\n"],["==","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-i-3D-3D","(other)",""],["==","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-3D-3D","(other)",""],["==","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-3D-3D","(p1)","<p>Compares the two certificates. Note that this takes into account all fields, not just the issuer name …\n"],["==","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-3D-3D","(other)",""],["==","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-3D-3D","(other)",""],["==","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-3D-3D","(other)",""],["==","OpenStruct","OpenStruct.html#method-i-3D-3D","(other)","<p>Compares this object and <code>other</code> for equality.  An OpenStruct is equal to <code>other</code> when <code>other</code> is an OpenStruct …\n"],["==","Pathname","Pathname.html#method-i-3D-3D","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is string-based. Be aware that two different paths …\n"],["==","Proc","Proc.html#method-i-3D-3D","(p1)","<p>Two procs are the same if, and only if, they were created from the same code block.\n\n<pre>def return_block(&amp;block) ...</pre>\n"],["==","Process::Status","Process/Status.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if the integer value of <em>stat</em> equals <em>other</em>.\n"],["==","RDoc::Attr","RDoc/Attr.html#method-i-3D-3D","(other)","<p>Attributes are equal when their names, singleton and rw are identical\n"],["==","RDoc::Constant","RDoc/Constant.html#method-i-3D-3D","(other)","<p>Constants are equal when their #parent and #name is the same\n"],["==","RDoc::TopLevel","RDoc/TopLevel.html#method-i-3D-3D","(other)","<p>An RDoc::TopLevel is equal to another with the same relative_name\n"],["==","Racc::LocationPointer","Racc/LocationPointer.html#method-i-3D-3D","(ot)",""],["==","Racc::Rule","Racc/Rule.html#method-i-3D-3D","(other)",""],["==","Racc::State","Racc/State.html#method-i-3D-3D","(oth)",""],["==","Ractor::MovedObject","Ractor/MovedObject.html#method-i-3D-3D","(*args)",""],["==","Random","Random.html#method-i-3D-3D","(p1)","<p>Returns true if the two generators have the same internal state, otherwise false.  Equivalent generators …\n"],["==","Range","Range.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if and only if:\n<p><code>other</code> is a range.\n<p><code>other.begin == self.begin</code>.\n"],["==","Rational","Rational.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>rat</code> equals <code>object</code> numerically.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; true</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["==","Regexp","Regexp.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> is another Regexp whose pattern, flags, and encoding are the same as <code>self</code>, <code>false</code> …\n"],["==","Ripper::Lexer::State","Ripper/Lexer/State.html#method-i-3D-3D","(i)",""],["==","Set","Set.html#method-i-3D-3D","(other)","<p>Returns true if two sets are equal. The equality of each couple\nof elements is defined according to  ...\n"],["==","String","String.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> has the same length and content; as <code>self</code>; <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["==","Struct","Struct.html#method-i-3D-3D","(p1)","<p>Returns  <code>true</code> if and only if the following are true; otherwise returns <code>false</code>:\n<p><code>other.class == self.class</code> …\n"],["==","Symbol","Symbol.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> is the same object as <code>self</code>, <code>false</code> otherwise.\n<p>Symbol#=== is an alias for Symbol#== …\n"],["==","URI::Generic","URI/Generic.html#method-i-3D-3D","(oth)","<p>Compares two URIs.\n"],["==","UnboundMethod","UnboundMethod.html#method-i-3D-3D","(p1)","<p>Two unbound method objects are equal if they refer to the same method definition.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Array</span>.<span class=\"ruby-identifier\">instance_method</span>(<span class=\"ruby-value\">:each_slice</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["==","Win32::SSPI::SSPIResult","Win32/SSPI/SSPIResult.html#method-i-3D-3D","(other)",""],["===","BigDecimal","BigDecimal.html#method-i-3D-3D-3D","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["===","Date","Date.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>other</code> represent the same date, <code>false</code> if not, <code>nil</code> if the two are not comparable. …\n"],["===","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is an Enumerator::ArithmeticSequence, has equivalent begin, end, step, and  …\n"],["===","FalseClass","FalseClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling <code>#==</code>, but typically overridden by descendants …\n"],["===","Float","Float.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>other</code> has the same value as <code>self</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["===","Gem::Dependency","Gem/Dependency.html#method-i-3D-3D-3D","(other)",""],["===","Gem::Platform","Gem/Platform.html#method-i-3D-3D-3D","(other)","<p>Does <code>other</code> match this platform?  Two platforms match if they have the same CPU, or either has a CPU of …\n"],["===","Gem::Requirement","Gem/Requirement.html#method-i-3D-3D-3D","(version)",""],["===","IPAddr","IPAddr.html#method-i-3D-3D-3D","(other)",""],["===","Integer","Integer.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> is numerically equal to <code>other</code>; <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">2</span>     <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">1.0</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["===","Method","Method.html#method-i-3D-3D-3D","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the method’s return value.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-string\">&quot;+&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["===","Module","Module.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—Returns <code>true</code> if <em>obj</em> is an instance of <em>mod</em> or an instance of one of <em>mod</em>’s descendants. …\n"],["===","NilClass","NilClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling <code>#==</code>, but typically overridden by descendants …\n"],["===","Object","Object.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling <code>#==</code>, but typically overridden by descendants …\n"],["===","OpenSSL::BN","OpenSSL/BN.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> only if <em>obj</em> has the same value as <em>bn</em>. Contrast this with OpenSSL::BN#eql?, which requires …\n"],["===","Pathname","Pathname.html#method-i-3D-3D-3D","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is string-based. Be aware that two different paths …\n"],["===","Proc","Proc.html#method-i-3D-3D-3D","(*args)","<p>Invokes the block, setting the block’s parameters to the values in <em>params</em> using something close to …\n"],["===","Range","Range.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> is between <code>self.begin</code> and <code>self.end</code>. <code>false</code> otherwise:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>) <span class=\"ruby-operator\">===</span> <span class=\"ruby-value\">2</span>       <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["===","Regexp","Regexp.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> finds a match in <code>string</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/^[a-z]*$/</span> <span class=\"ruby-operator\">===</span> <span class=\"ruby-string\">&#39;HELLO&#39;</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-regexp\">/^[A-Z]*$/</span> <span class=\"ruby-operator\">===</span> <span class=\"ruby-string\">&#39;HELLO&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["===","Rinda::DRbObjectTemplate","Rinda/DRbObjectTemplate.html#method-i-3D-3D-3D","(ro)","<p>This DRbObjectTemplate matches <code>ro</code> if the remote object’s drburi and drbref are the same.  <code>nil</code> is …\n"],["===","Rinda::Template","Rinda/Template.html#method-i-3D-3D-3D","(tuple)","<p>Alias for #match.\n"],["===","Rinda::TemplateEntry","Rinda/TemplateEntry.html#method-i-3D-3D-3D","(tuple)",""],["===","Set","Set.html#method-i-3D-3D-3D","(o)","<p>Returns true if the given object is a member of the set,\nand false otherwise.\n<p>Used in case statements: …\n"],["===","String","String.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> has the same length and content; as <code>self</code>; <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["===","Symbol","Symbol.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> is the same object as <code>self</code>, <code>false</code> otherwise.\n<p>Symbol#=== is an alias for Symbol#== …\n"],["===","SystemCallError","SystemCallError.html#method-c-3D-3D-3D","(p1)","<p>Return <code>true</code> if the receiver is a generic <code>SystemCallError</code>, or if the error numbers <code>self</code> and <em>other</em> are …\n"],["===","TrueClass","TrueClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling <code>#==</code>, but typically overridden by descendants …\n"],["=~","Gem::Dependency","Gem/Dependency.html#method-i-3D~","(other)","<p>Uses this dependency as a pattern to compare to <code>other</code>. This dependency will match if the name matches …\n"],["=~","Gem::Platform","Gem/Platform.html#method-i-3D~","(other)","<p>Does <code>other</code> match this platform?  If <code>other</code> is a String it will be converted to a Gem::Platform first. …\n"],["=~","Gem::Requirement","Gem/Requirement.html#method-i-3D~","(version)",""],["=~","NilClass","NilClass.html#method-i-3D~","(p1)","<p>Dummy pattern matching – always returns nil.\n<p>This method makes it possible to ‘while gets =~ /re/ do`. …\n"],["=~","Regexp","Regexp.html#method-i-3D~","(p1)","<p>Returns the integer index (in characters) of the first match for <code>self</code> and <code>string</code>, or <code>nil</code> if none; also …\n"],["=~","String","String.html#method-i-3D~","(p1)","<p>Returns the Integer index of the first substring that matches the given <code>regexp</code>, or <code>nil</code> if no match found: …\n"],["=~","Symbol","Symbol.html#method-i-3D~","(p1)","<p>Equivalent to <code>symbol.to_s =~ object</code>, including possible updates to global variables; see String#=~.\n"],[">","BigDecimal","BigDecimal.html#method-i-3E","(p1)","<p>Returns <code>true</code> if <code>self</code> is greater than <code>other</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;1.5&#39;</span>)\n<span class=\"ruby-identifier\">b</span> <span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>              <span class=\"ruby-operator\">...</span>\n</pre>\n"],[">","Comparable","Comparable.html#method-i-3E","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method, returning true if it returns a value …\n"],[">","Float","Float.html#method-i-3E","(p1)","<p>Returns <code>true</code> if <code>self</code> is numerically greater than <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>              <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1.0</span>      <span class=\"ruby-operator\">...</span>\n</pre>\n"],[">","Hash","Hash.html#method-i-3E","(p1)","<p>Returns <code>true</code> if <code>hash</code> is a proper superset of <code>other_hash</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h1</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>} <span class=\"ruby-operator\">...</span>\n</pre>\n"],[">","Integer","Integer.html#method-i-3E","(p1)","<p>Returns <code>true</code> if the value of <code>self</code> is greater than that of <code>other</code>:\n\n<pre>  1 &gt; 0              # =&gt; true\n  1 &gt; ...</pre>\n"],[">","Module","Module.html#method-i-3E","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>. Returns <code>false</code> if <em>mod</em> is the same as <em>other</em> or <em>mod</em> is a descendant …\n"],[">","Set","Set.html#method-i-3E","(set)",""],[">=","BigDecimal","BigDecimal.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> is greater than or equal to <code>other</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;1.5&#39;</span>)\n<span class=\"ruby-identifier\">b</span> <span class=\"ruby-operator\">&gt;=</span> <span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],[">=","Comparable","Comparable.html#method-i-3E-3D","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method, returning true if it returns a value …\n"],[">=","Float","Float.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> is numerically greater than or equal to <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">&gt;=</span> <span class=\"ruby-value\">1</span>              <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],[">=","Hash","Hash.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if <code>hash</code> is a superset of <code>other_hash</code>, <code>false</code> otherwise:\n\n<pre>h1 = {foo: 0, bar: 1, baz: 2}\nh2 = ...</pre>\n"],[">=","Integer","Integer.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if the value of <code>self</code> is greater than or equal to that of <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">&gt;=</span> <span class=\"ruby-value\">0</span>              <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],[">=","Module","Module.html#method-i-3E-3D","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>, or the two modules are the same. Returns <code>nil</code> if there’s …\n"],[">=","Set","Set.html#method-i-3E-3D","(set)",""],[">>","Date","Date.html#method-i-3E-3E","(p1)","<p>Returns a new Date object representing the date <code>n</code> months later; <code>n</code> should be a numeric:\n\n<pre>(Date.new(2001, ...</pre>\n"],[">>","IPAddr","IPAddr.html#method-i-3E-3E","(num)","<p>Returns a new ipaddr built by bitwise right-shift.\n"],[">>","Integer","Integer.html#method-i-3E-3E","(p1)","<p>Returns <code>self</code> with bits shifted <code>count</code> positions to the right, or to the left if <code>count</code> is negative:\n\n<pre>n = ...</pre>\n"],[">>","Method","Method.html#method-i-3E-3E","(p1)","<p>Returns a proc that is the composition of this method and the given <em>g</em>. The returned proc takes a variable …\n"],[">>","OpenSSL::BN","OpenSSL/BN.html#method-i-3E-3E","(p1)",""],[">>","Proc","Proc.html#method-i-3E-3E","(p1)","<p>Returns a proc that is the composition of this proc and the given <em>g</em>. The returned proc takes a variable …\n"],[">>","Process::Status","Process/Status.html#method-i-3E-3E","(p1)","<p>Shift the bits in <em>stat</em> right <em>num</em> places.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fork</span> { <span class=\"ruby-identifier\">exit</span> <span class=\"ruby-value\">99</span> }   <span class=\"ruby-comment\">#=&gt; 26563</span>\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span>       <span class=\"ruby-comment\">#=&gt; 26563</span>\n<span class=\"ruby-identifier\">$?</span>.<span class=\"ruby-identifier\">to_i</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Array","Kernel","Kernel.html#method-i-Array","(p1)","<p>Returns an array converted from <code>object</code>.\n<p>Tries to convert <code>object</code> to an array using <code>to_ary</code> first and <code>to_a</code> …\n"],["BigDecimal","Kernel","Kernel.html#method-i-BigDecimal","(p1, p2 = v2, p3 = {})","<p>Returns the BigDecimal converted from <code>value</code> with a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> is …\n"],["CSV","Object","Object.html#method-i-CSV","(*args, **options, &block)","<p>Passes <code>args</code> to CSV::instance.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CSV</span>(<span class=\"ruby-string\">&quot;CSV,data&quot;</span>).<span class=\"ruby-identifier\">read</span>\n  <span class=\"ruby-comment\">#=&gt; [[&quot;CSV&quot;, &quot;data&quot;]]</span>\n</pre>\n<p>If a block is given, the instance …\n"],["CloseKey","Win32::Registry::API","Win32/Registry/API.html#method-i-CloseKey","(hkey)",""],["Complex","Kernel","Kernel.html#method-i-Complex","(p1, p2 = v2, p3 = {})","<p>Returns x+i*y;\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)    <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-string\">&#39;1+2i&#39;</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-keyword\">nil</span>)     <span class=\"ruby-comment\">#=&gt; TypeError ...</span>\n</pre>\n"],["CreateKey","Win32::Registry::API","Win32/Registry/API.html#method-i-CreateKey","(hkey, name, opt, desired)",""],["CurrentContext","IRB","IRB.html#method-c-CurrentContext","()","<p>The current IRB::Context of the session, see IRB.conf\n\n<pre>irb\nirb(main):001:0&gt; IRB.CurrentContext.irb_name ...</pre>\n"],["D","Net::HTTP","Net/HTTP.html#method-i-D","(msg)",""],["DelegateClass","Object","Object.html#method-i-DelegateClass","(superclass, &block)","<p>The primary interface to this library.  Use to setup delegation when defining your class.\n\n<pre>class MyClass ...</pre>\n"],["DeleteKey","Win32::Registry::API","Win32/Registry/API.html#method-i-DeleteKey","(hkey, name)",""],["DeleteValue","Win32::Registry::API","Win32/Registry/API.html#method-i-DeleteValue","(hkey, name)",""],["Digest","Object","Object.html#method-i-Digest","(name)","<p>Returns a Digest subclass by <code>name</code> in a thread-safe manner even when on-demand loading is involved.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Digest","OpenSSL","OpenSSL.html#method-i-Digest","(name)","<p>Returns a Digest subclass by <em>name</em>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;openssl&#39;</span>\n\n<span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Digest</span>(<span class=\"ruby-string\">&quot;MD5&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; OpenSSL::Digest::MD5 ...</span>\n</pre>\n"],["Digest","OpenSSL","OpenSSL.html#method-c-Digest","(name)","<p>Returns a Digest subclass by <em>name</em>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;openssl&#39;</span>\n\n<span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Digest</span>(<span class=\"ruby-string\">&quot;MD5&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; OpenSSL::Digest::MD5 ...</span>\n</pre>\n"],["E","BigMath","BigMath.html#method-i-E","(prec)","<p>Computes e (the base of natural logarithms) to the specified number of digits of precision, <code>numeric</code>. …\n"],["EnumKey","Win32::Registry::API","Win32/Registry/API.html#method-i-EnumKey","(hkey, index)",""],["EnumValue","Win32::Registry::API","Win32/Registry/API.html#method-i-EnumValue","(hkey, index)",""],["Float","Kernel","Kernel.html#method-i-Float","(arg, exception: true)","<p>Returns <em>arg</em> converted to a float. Numeric types are converted directly, and with exception to String …\n"],["FlushKey","Win32::Registry::API","Win32/Registry/API.html#method-i-FlushKey","(hkey)",""],["Hash","Kernel","Kernel.html#method-i-Hash","(p1)","<p>Returns a hash converted from <code>object</code>.\n<p>If <code>object</code> is:\n<p>A hash, returns <code>object</code>.\n"],["Integer","Kernel","Kernel.html#method-i-Integer","(*args)","<p>Returns an integer converted from <code>object</code>.\n<p>Tries to convert <code>object</code> to an integer using <code>to_int</code> first and …\n"],["JSON","Kernel","Kernel.html#method-i-JSON","(object, *args)","<p>If <em>object</em> is string-like, parse the string and return the parsed result as a Ruby data structure. Otherwise …\n"],["JobManager","IRB","IRB.html#method-c-JobManager","()","<p>The current JobManager in the session\n"],["LOG_MASK","Syslog::Macros","Syslog/Macros.html#method-i-LOG_MASK","(p1)","<p>Generates a mask bit for a priority level. See #mask=\n"],["LOG_UPTO","Syslog::Macros","Syslog/Macros.html#method-i-LOG_UPTO","(p1)","<p>Generates a mask value for priority levels at or below the level specified. See #mask=\n"],["OpenKey","Win32::Registry::API","Win32/Registry/API.html#method-i-OpenKey","(hkey, name, opt, desired)",""],["PI","BigMath","BigMath.html#method-i-PI","(prec)","<p>Computes the value of pi to the specified number of digits of precision, <code>numeric</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigMath</span>.<span class=\"ruby-constant\">PI</span>(<span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Pathname","Kernel","Kernel.html#method-i-Pathname","(p1)","<p>Creates a new Pathname object from the given string, <code>path</code>, and returns pathname object.\n<p>In order to use …\n"],["QueryInfoKey","Win32::Registry::API","Win32/Registry/API.html#method-i-QueryInfoKey","(hkey)",""],["QueryValue","Win32::Registry::API","Win32/Registry/API.html#method-i-QueryValue","(hkey, name)",""],["Rational","Kernel","Kernel.html#method-i-Rational","(p1, p2 = v2, p3 = {})","<p>Returns <code>x/y</code> or <code>arg</code> as a Rational.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (2/3)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">5</span>)      <span class=\"ruby-comment\">#=&gt; (5/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">0.5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["SetValue","Win32::Registry::API","Win32/Registry/API.html#method-i-SetValue","(hkey, name, type, data, size)",""],["String","IRB::Locale","IRB/Locale.html#method-i-String","(mes)",""],["String","Kernel","Kernel.html#method-i-String","(p1)","<p>Returns a string converted from <code>object</code>.\n<p>Tries to convert <code>object</code> to a string using <code>to_str</code> first and <code>to_s</code> …\n"],["URI","Kernel","Kernel.html#method-i-URI","(uri)","<p>Returns <code>uri</code> converted to an URI object.\n"],["URI","Kernel","Kernel.html#method-c-URI","(uri)","<p>Returns <code>uri</code> converted to an URI object.\n"],["[]","Array","Array.html#method-i-5B-5D","(*args)","<p>Returns elements from <code>self</code>; does not modify <code>self</code>.\n<p>When a single Integer argument <code>index</code> is given, returns …\n"],["[]","Array","Array.html#method-c-5B-5D","(*args)","<p>Returns a new array populated with the given objects.\n\n<pre>Array.[]( 1, &#39;a&#39;, /^A/)  # =&gt; [1, &quot;a&quot;, /^A/]\nArray[ ...</pre>\n"],["[]","CGI::QueryExtension","CGI/QueryExtension.html#method-i-5B-5D","(key)","<p>Get the value for the parameter with a given key.\n<p>If the parameter has multiple values, only the first …\n"],["[]","CGI::Session","CGI/Session.html#method-i-5B-5D","(key)","<p>Retrieve the session data for key <code>key</code>.\n"],["[]","CSV::Row","CSV/Row.html#method-i-5B-5D","(header_or_index, minimum_index = 0)",""],["[]","CSV::Table","CSV/Table.html#method-i-5B-5D","(index_or_header)","<p>Returns data from the table;  does not modify the table.\n<p>Fetch a Row by Its Integer Index &mdash; \n<p>Form: <code>table[n]</code> …\n"],["[]","Continuation","Continuation.html#method-i-5B-5D","(*args)","<p>Invokes the continuation. The program continues from the end of the #callcc block. If no arguments are …\n"],["[]","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-5B-5D","(key)","<p>A convenience method to access the values like a Hash\n"],["[]","DRb::GW","DRb/GW.html#method-i-5B-5D","(key)","<p>Retrieves <code>key</code> from the GW\n"],["[]","Dir","Dir.html#method-c-5B-5D","(*args, base: nil, sort: true)","<p>Equivalent to calling <code>Dir.glob([</code><em>string,…</em><code>], 0)</code>.\n"],["[]","ENV","ENV.html#method-c-5B-5D","(p1)","<p>Returns the value for the environment variable <code>name</code> if it exists:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>[<span class=\"ruby-string\">&#39;foo&#39;</span>] = <span class=\"ruby-string\">&#39;0&#39;</span>\n<span class=\"ruby-constant\">ENV</span>[<span class=\"ruby-string\">&#39;foo&#39;</span>] <span class=\"ruby-comment\"># =&gt; &quot;0&quot;</span>\n</pre>\n"],["[]","Fiber","Fiber.html#method-c-5B-5D","(p1)","<p>Returns the value of the fiber storage variable identified by <code>key</code>.\n<p>The <code>key</code> must be a symbol, and the value …\n"],["[]","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-i-5B-5D","(*args)","<p>Fetch struct member <code>name</code> if only one argument is specified. If two arguments are specified, the first …\n"],["[]","Fiddle::CompositeHandler","Fiddle/CompositeHandler.html#method-i-5B-5D","(symbol)","<p>See Fiddle::CompositeHandler.sym\n"],["[]","Fiddle::Handle","Fiddle/Handle.html#method-i-5B-5D","(p1)","<p>Get the address as an Integer for the function named <code>name</code>.\n"],["[]","Fiddle::Handle","Fiddle/Handle.html#method-c-5B-5D","(p1)","<p>Get the address as an Integer for the function named <code>name</code>.  The function is searched via dlsym on RTLD_NEXT …\n"],["[]","Fiddle::Importer","Fiddle/Importer.html#method-i-5B-5D","(name)","<p>Returns the function mapped to <code>name</code>, that was created by either Fiddle::Importer.extern or Fiddle::Importer.bind …\n"],["[]","Fiddle::Pointer","Fiddle/Pointer.html#method-c-5B-5D","(p1)","<p>Get the underlying pointer for ruby object <code>val</code> and return it as a Fiddle::Pointer object.\n"],["[]","Fiddle::Pointer","Fiddle/Pointer.html#method-i-5B-5D","(p1, p2 = v2)","<p>Returns integer stored at <em>index</em>.\n<p>If <em>start</em> and <em>length</em> are given, a string containing the bytes from <em>start</em> …\n"],["[]","Gem::CommandManager","Gem/CommandManager.html#method-i-5B-5D","(command_name)","<p>Returns a Command instance for <code>command_name</code>\n"],["[]","Gem::ConfigFile","Gem/ConfigFile.html#method-i-5B-5D","(key)","<p>Return the configuration information for <code>key</code>.\n"],["[]","Hash","Hash.html#method-c-5B-5D","(*args)","<p>Returns a new Hash object populated with the given objects, if any. See Hash::new.\n<p>With no argument, returns …\n"],["[]","Hash","Hash.html#method-i-5B-5D","(p1)","<p>Returns the value associated with the given <code>key</code>, if found:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h</span>[<span class=\"ruby-value\">:foo</span>] <span class=\"ruby-comment\"># =&gt; 0</span>\n</pre>\n"],["[]","IRB::History","IRB/History.html#method-i-5B-5D","(idx)","<p>Get one item of the content (both positive and negative indexes work).\n"],["[]","Integer","Integer.html#method-i-5B-5D","(*args)","<p>Returns a slice of bits from <code>self</code>.\n<p>With argument <code>offset</code>, returns the bit at the given offset, where offset …\n"],["[]","JSON","JSON.html#method-c-5B-5D","(object, opts = {})","<p>If <code>object</code> is a String, calls JSON.parse with <code>object</code> and <code>opts</code> (see method #parse):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json</span> = <span class=\"ruby-string\">&#39;[0, 1, null]&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["[]","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-5B-5D","(p1)","<p>Returns the value returned by method <code>name</code>.\n"],["[]","JSON::GenericObject","JSON/GenericObject.html#method-i-5B-5D","(name)",""],["[]","MakeMakefile","MakeMakefile.html#method-c-5B-5D","(name)",""],["[]","MatchData","MatchData.html#method-i-5B-5D","(p1, p2 = v2)","<p>When arguments <code>index</code>, +start and <code>length</code>, or <code>range</code> are given, returns match and captures in the style …\n"],["[]","Method","Method.html#method-i-5B-5D","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the method’s return value.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-string\">&quot;+&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["[]","Net::HTTPHeader","Net/HTTPHeader.html#method-i-5B-5D","(key)","<p>Returns the string field value for the case-insensitive field <code>key</code>, or <code>nil</code> if there is no such key; see …\n"],["[]","OLEProperty","OLEProperty.html#method-i-5B-5D","(*args)",""],["[]","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-5B-5D","(p1)","<p>Retrieves a weakly referenced object with the given key\n"],["[]","OpenSSL::Config","OpenSSL/Config.html#method-i-5B-5D","(p1)","<p>Gets all key-value pairs in a specific <em>section</em> from the current configuration.\n<p>Given the following configurating …\n"],["[]","OpenStruct","OpenStruct.html#method-i-5B-5D","(name)","<p>Returns the value of an attribute, or <code>nil</code> if there is no such attribute.\n\n<pre>require &quot;ostruct&quot;\nperson = OpenStruct.new(&quot;name&quot; ...</pre>\n"],["[]","PStore","PStore.html#method-i-5B-5D","(key)","<p>Returns the value for the given <code>key</code> if the key exists. <code>nil</code> otherwise; if not <code>nil</code>, the returned value …\n"],["[]","Proc","Proc.html#method-i-5B-5D","(*args)","<p>Invokes the block, setting the block’s parameters to the values in <em>params</em> using something close to …\n"],["[]","Psych::Coder","Psych/Coder.html#method-i-5B-5D","(k)",""],["[]","Racc::Grammar","Racc/Grammar.html#method-i-5B-5D","(x)",""],["[]","Racc::ISet","Racc/ISet.html#method-i-5B-5D","(key)",""],["[]","Racc::Rule","Racc/Rule.html#method-i-5B-5D","(idx)",""],["[]","Racc::States","Racc/States.html#method-i-5B-5D","(i)",""],["[]","Racc::SymbolTable","Racc/SymbolTable.html#method-i-5B-5D","(id)",""],["[]","Ractor","Ractor.html#method-i-5B-5D","(sym)","<p>get a value from ractor-local storage\n"],["[]","Reline::History","Reline/History.html#method-i-5B-5D","(index)",""],["[]","Rinda::Tuple","Rinda/Tuple.html#method-i-5B-5D","(k)","<p>Accessor method for elements of the tuple.\n"],["[]","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-5B-5D","(key)","<p>Retrieves <code>key</code> from the tuple.\n"],["[]","Ripper::Lexer::Elem","Ripper/Lexer/Elem.html#method-i-5B-5D","(index)",""],["[]","Ripper::Lexer::State","Ripper/Lexer/State.html#method-i-5B-5D","(index)",""],["[]","Set","Set.html#method-c-5B-5D","(*ary)","<p>Creates a new set containing the given objects.\n\n<pre>Set[1, 2]                   # =&gt; #&lt;Set: {1, 2}&gt;\nSet[1, ...</pre>\n"],["[]","String","String.html#method-i-5B-5D","(*args)","<p>Returns the substring of <code>self</code> specified by the arguments. See examples at String Slices.\n"],["[]","StringScanner","StringScanner.html#method-i-5B-5D","(p1)","<p>Returns the n-th subgroup in the most recent match.\n\n<pre>s = StringScanner.new(&quot;Fri Dec 12 1975 14:39&quot;)\ns.scan(/(\\w+) ...</pre>\n"],["[]","Struct","Struct.html#method-i-5B-5D","(p1)","<p>Returns a value from <code>self</code>.\n<p>With symbol or string argument <code>name</code> given, returns the value for the named …\n"],["[]","Symbol","Symbol.html#method-i-5B-5D","(*args)","<p>Equivalent to <code>symbol.to_s[]</code>; see String#[].\n"],["[]","SyntaxSuggest::LexAll","SyntaxSuggest/LexAll.html#method-i-5B-5D","(index)",""],["[]","Thread","Thread.html#method-i-5B-5D","(p1)","<p>Attribute Reference—Returns the value of a fiber-local variable (current thread’s root fiber if …\n"],["[]","WIN32OLE","WIN32OLE.html#method-i-5B-5D","(*args)","<p>Returns the value of Collection specified by a1, a2,.…\n\n<pre>dict = WIN32OLE.new(&#39;Scripting.Dictionary&#39;)\ndict.add(&#39;ruby&#39;, ...</pre>\n"],["[]","WIN32OLE::Variant","WIN32OLE/Variant.html#method-i-5B-5D","(*args)","<p>Returns the element of WIN32OLE_VARIANT object(OLE array). This method is available only when the variant …\n"],["[]","Warning","Warning.html#method-c-5B-5D","(p1)","<p>Returns the flag to show the warning messages for <code>category</code>. Supported categories are:\n<p><code>:deprecated</code>  &mdash; deprecation …\n\n"],["[]","Win32::Registry","Win32/Registry.html#method-i-5B-5D","(name, *rtype)","<p>Read a registry value named name and return its value data. The class of the value is the same as the …\n"],["[]","YAML::DBM","YAML/DBM.html#method-i-5B-5D","( key )","<p>Return value associated with <code>key</code> from database.\n<p>Returns <code>nil</code> if there is no such <code>key</code>.\n<p>See #fetch for more …\n"],["[]=","Array","Array.html#method-i-5B-5D-3D","(*args)","<p>Assigns elements in <code>self</code>; returns the given <code>object</code>.\n<p>When Integer argument <code>index</code> is given, assigns <code>object</code> …\n"],["[]=","CGI::Session","CGI/Session.html#method-i-5B-5D-3D","(key, val)","<p>Set the session data for key <code>key</code>.\n"],["[]=","CSV::Row","CSV/Row.html#method-i-5B-5D-3D","(*args)","<p>Assigns the field value for the given <code>index</code> or <code>header</code>; returns <code>value</code>.\n<p>Assign field value by Integer index: …\n"],["[]=","CSV::Table","CSV/Table.html#method-i-5B-5D-3D","(index_or_header, value)","<p>Puts data onto the table.\n<p>Set a Row by Its Integer Index &mdash; \n<p>Form: <code>table[n] = row</code>, <code>n</code> an Integer, <code>row</code> a CSV::Row …\n"],["[]=","DRb::GW","DRb/GW.html#method-i-5B-5D-3D","(key, v)","<p>Stores value <code>v</code> at <code>key</code> in the GW\n"],["[]=","ENV","ENV.html#method-c-5B-5D-3D","(p1, p2)","<p>ENV.store is an alias for ENV.[]=.\n<p>Creates, updates, or deletes the named environment variable, returning …\n"],["[]=","Fiber","Fiber.html#method-c-5B-5D-3D","(p1, p2)","<p>Assign <code>value</code> to the fiber storage variable identified by <code>key</code>. The variable is created if it doesn’t …\n"],["[]=","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-i-5B-5D-3D","(*args)","<p>Set struct member <code>name</code>, to value <code>val</code>. If more arguments are specified, writes the string of bytes to …\n"],["[]=","Fiddle::Pointer","Fiddle/Pointer.html#method-i-5B-5D-3D","(p1, p2, p3 = v3)","<p>Set the value at <code>index</code> to <code>int</code>.\n<p>Or, set the memory at <code>start</code> until <code>length</code> with the contents of <code>string</code>, the …\n"],["[]=","Fiddle::StructArray","Fiddle/StructArray.html#method-i-5B-5D-3D","(index, value)",""],["[]=","Gem::ConfigFile","Gem/ConfigFile.html#method-i-5B-5D-3D","(key, value)","<p>Set configuration option <code>key</code> to <code>value</code>.\n"],["[]=","Hash","Hash.html#method-i-5B-5D-3D","(p1, p2)","<p>Hash#store is an alias for Hash#[]=.\n<p>Associates the given <code>value</code> with the given <code>key</code>; returns <code>value</code>.\n<p>If the …\n"],["[]=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-5B-5D-3D","(p1, p2)","<p>Sets the attribute name to value.\n"],["[]=","JSON::GenericObject","JSON/GenericObject.html#method-i-5B-5D-3D","(name, value)",""],["[]=","MakeMakefile","MakeMakefile.html#method-c-5B-5D-3D","(name, mod)",""],["[]=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-5B-5D-3D","(key, val)","<p>Sets the value for the case-insensitive <code>key</code> to <code>val</code>, overwriting the previous value if the field exists; …\n"],["[]=","OLEProperty","OLEProperty.html#method-i-5B-5D-3D","(*args)",""],["[]=","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-5B-5D-3D","(p1, p2)","<p>Creates a weak reference from the given key to the given value\n"],["[]=","OpenStruct","OpenStruct.html#method-i-5B-5D-3D","(name, value)","<p>Sets the value of an attribute.\n\n<pre>require &quot;ostruct&quot;\nperson = OpenStruct.new(&quot;name&quot; =&gt; &quot;John Smith&quot;, &quot;age&quot; ...</pre>\n"],["[]=","PStore","PStore.html#method-i-5B-5D-3D","(key, value)","<p>Creates or replaces the value for the given <code>key</code>:\n\n<pre>example_store do |store|\n  temp.transaction do\n    temp[:bat] ...</pre>\n"],["[]=","Psych::Coder","Psych/Coder.html#method-i-5B-5D-3D","(k, v)",""],["[]=","Racc::ISet","Racc/ISet.html#method-i-5B-5D-3D","(key, val)",""],["[]=","Ractor","Ractor.html#method-i-5B-5D-3D","(sym, val)","<p>set a value in ractor-local storage\n"],["[]=","Reline::History","Reline/History.html#method-i-5B-5D-3D","(index, val)",""],["[]=","String","String.html#method-i-5B-5D-3D","(*args)","<p>Replaces all, some, or none of the contents of <code>self</code>; returns <code>new_string</code>. See String Slices.\n<p>A few examples: …\n"],["[]=","Struct","Struct.html#method-i-5B-5D-3D","(p1, p2)","<p>Assigns a value to a member.\n<p>With symbol or string argument <code>name</code> given, assigns the given <code>value</code> to the …\n"],["[]=","Thread","Thread.html#method-i-5B-5D-3D","(p1, p2)","<p>Attribute Assignment—Sets or creates the value of a fiber-local variable, using either a symbol or …\n"],["[]=","WIN32OLE","WIN32OLE.html#method-i-5B-5D-3D","(*args)","<p>Sets the value to WIN32OLE object specified by a1, a2, …\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">dict</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Scripting.Dictionary&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["[]=","WIN32OLE::Variant","WIN32OLE/Variant.html#method-i-5B-5D-3D","(*args)","<p>Set the element of WIN32OLE_VARIANT object(OLE array) to val. This method is available only when the …\n"],["[]=","Warning","Warning.html#method-c-5B-5D-3D","(p1, p2)","<p>Sets the warning flags for <code>category</code>. See Warning.[] for the categories.\n"],["[]=","Win32::Registry","Win32/Registry.html#method-i-5B-5D-3D","(name, rtype, value = nil)","<p>Write value to a registry value named name.\n<p>If wtype is specified, the value type is it. Otherwise, the …\n"],["[]=","YAML::DBM","YAML/DBM.html#method-i-5B-5D-3D","( key, val )","<p>Set <code>key</code> to <code>value</code> in database.\n<p><code>value</code> will be converted to YAML before storage.\n<p>See #store for more information. …\n"],["^","FalseClass","FalseClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>, returns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","IO::Buffer","IO/Buffer.html#method-i-5E","(p1)","<p>Generate a new buffer the same size as the source by applying the binary XOR operation to the source, …\n"],["^","Integer","Integer.html#method-i-5E","(p1)","<p>Bitwise EXCLUSIVE OR; each bit in the result is 1 if the corresponding bits in <code>self</code> and <code>other</code> are different, …\n"],["^","NilClass","NilClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>, returns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","Set","Set.html#method-i-5E","(enum)","<p>Returns a new set containing elements exclusive between the set\nand the given enumerable object. <code>(set</code> ...\n"],["^","TrueClass","TrueClass.html#method-i-5E","(p1)","<p>Exclusive Or—Returns <code>true</code> if <em>obj</em> is <code>nil</code> or <code>false</code>, <code>false</code> otherwise.\n"],["_","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-_","(&block)",""],["__callee__","Kernel","Kernel.html#method-i-__callee__","()","<p>Returns the called name of the current method as a Symbol. If called outside of a method, it returns …\n"],["__dir__","Kernel","Kernel.html#method-i-__dir__","()","<p>Returns the canonicalized absolute path of the directory of the file from which this method is called. …\n"],["__drbref","DRb::DRbObject","DRb/DRbObject.html#method-i-__drbref","()","<p>Get the reference of the object, if local.\n"],["__drbref","DRb::DRbObject","DRb/DRbObject.html#method-i-__drbref","()","<p>Get the reference of the object, if local.\n"],["__drburi","DRb::DRbObject","DRb/DRbObject.html#method-i-__drburi","()","<p>Get the URI of the remote object.\n"],["__drburi","DRb::DRbObject","DRb/DRbObject.html#method-i-__drburi","()","<p>Get the URI of the remote object.\n"],["__evaluate__","IRB::WorkSpace","IRB/WorkSpace.html#method-i-__evaluate__","(context, statements, file = nil, line = nil)",""],["__exit__","IRB::Context","IRB/Context.html#method-i-__exit__","(ret = 0)",""],["__getobj__","Delegator","Delegator.html#method-i-__getobj__","()","<p>This method must be overridden by subclasses and should return the object method calls are being delegated …\n"],["__getobj__","SimpleDelegator","SimpleDelegator.html#method-i-__getobj__","()","<p>Returns the current object method calls are being delegated to.\n"],["__id__","BasicObject","BasicObject.html#method-i-__id__","()","<p>Returns an integer identifier for <code>obj</code>.\n<p>The same number will be returned on all calls to <code>object_id</code> for …\n"],["__id__","Ractor::MovedObject","Ractor/MovedObject.html#method-i-__id__","(*args)",""],["__method__","Kernel","Kernel.html#method-i-__method__","()","<p>Returns the name at the definition of the current method as a Symbol. If called outside of a method, …\n"],["__raise__","Delegator","Delegator.html#method-i-__raise__","",""],["__send__","BasicObject","BasicObject.html#method-i-__send__","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments specified. When the method is identified …\n"],["__send__","Ractor::MovedObject","Ractor/MovedObject.html#method-i-__send__","(*args)",""],["__setobj__","Delegator","Delegator.html#method-i-__setobj__","(obj)","<p>This method must be overridden by subclasses and change the object delegate to <em>obj</em>.\n"],["__setobj__","SimpleDelegator","SimpleDelegator.html#method-i-__setobj__","(obj)","<p>Changes the delegate object to <em>obj</em>.\n<p>It’s important to note that this does <strong>not</strong> cause SimpleDelegator’s …\n"],["_ac_arg_enable","OptionParser::AC","OptionParser/AC.html#method-i-_ac_arg_enable","(prefix, name, help_string, block)",""],["_add","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-_add","(target, x)",""],["_added?","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-_added-3F","(sym)",""],["_call_seq","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-_call_seq","()","<p>call_seq without deduplication and alias lookup.\n"],["_check_ac_args","OptionParser::AC","OptionParser/AC.html#method-i-_check_ac_args","(name, block)",""],["_compute_expand","Racc::Grammar","Racc/Grammar.html#method-i-_compute_expand","(t, set, lock)",""],["_decode_uri_component","URI","URI.html#method-c-_decode_uri_component","(regexp, str, enc)",""],["_defmetasyntax","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-_defmetasyntax","(type, id, action, &block)",""],["_delayed_add","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-_delayed_add","(rule)",""],["_dump","BigDecimal","BigDecimal.html#method-i-_dump","(p1 = v1)","<p>Returns a string representing the marshalling of <code>self</code>. See module Marshal.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">inf</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;Infinity&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["_dump","DRb::DRbObject","DRb/DRbObject.html#method-i-_dump","(lv)","<p>Marshall this object.\n<p>The URI and ref of the object are marshalled.\n"],["_dump","DRb::DRbObject","DRb/DRbObject.html#method-i-_dump","(lv)","<p>Marshall this object.\n<p>The URI and ref of the object are marshalled.\n"],["_dump","Gem::Specification","Gem/Specification.html#method-i-_dump","(limit)","<p>Dump only crucial instance variables.\n"],["_dump","OpenSSL::Marshal","OpenSSL/Marshal.html#method-i-_dump","(_level)",""],["_dump","Singleton","Singleton.html#method-i-_dump","(depth = -1)","<p>By default, do not retain any state when marshalling.\n"],["_dump","Win32::Registry","Win32/Registry.html#method-i-_dump","(depth)","<p>marshalling is not allowed\n"],["_encode_uri_component","URI","URI.html#method-c-_encode_uri_component","(regexp, table, str, enc)",""],["_enumerable_collect","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_collect","()","<p>Like Enumerable#map, but chains operation to be lazy-evaluated.\n\n<pre>(1..Float::INFINITY).lazy.map {|i| i**2 ...</pre>\n"],["_enumerable_collect_concat","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_collect_concat","()","<p>Returns a new lazy enumerator with the concatenated results of running <code>block</code> once for every element in …\n"],["_enumerable_drop","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_drop","(p1)","<p>Like Enumerable#drop, but chains operation to be lazy-evaluated.\n"],["_enumerable_drop_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_drop_while","()","<p>Like Enumerable#drop_while, but chains operation to be lazy-evaluated.\n"],["_enumerable_filter","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_filter","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["_enumerable_filter_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_filter_map","()","<p>Like Enumerable#filter_map, but chains operation to be lazy-evaluated.\n\n<pre>(1..).lazy.filter_map { |i| i * ...</pre>\n"],["_enumerable_find_all","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_find_all","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["_enumerable_flat_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_flat_map","()","<p>Returns a new lazy enumerator with the concatenated results of running <code>block</code> once for every element in …\n"],["_enumerable_grep","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_grep","(p1)","<p>Like Enumerable#grep, but chains operation to be lazy-evaluated.\n"],["_enumerable_grep_v","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_grep_v","(p1)","<p>Like Enumerable#grep_v, but chains operation to be lazy-evaluated.\n"],["_enumerable_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_map","()","<p>Like Enumerable#map, but chains operation to be lazy-evaluated.\n\n<pre>(1..Float::INFINITY).lazy.map {|i| i**2 ...</pre>\n"],["_enumerable_reject","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_reject","()","<p>Like Enumerable#reject, but chains operation to be lazy-evaluated.\n"],["_enumerable_select","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_select","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["_enumerable_take","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_take","(p1)","<p>Like Enumerable#take, but chains operation to be lazy-evaluated.\n"],["_enumerable_take_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_take_while","()","<p>Like Enumerable#take_while, but chains operation to be lazy-evaluated.\n"],["_enumerable_uniq","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_uniq","()","<p>Like Enumerable#uniq, but chains operation to be lazy-evaluated.\n"],["_enumerable_with_index","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_with_index","(*args)","<p>Iterates the given block for each element with an index, which starts from <code>offset</code>.  If no block is given, …\n"],["_enumerable_zip","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_zip","(*args)","<p>Like Enumerable#zip, but chains operation to be lazy-evaluated. However, if a block is given to zip, …\n"],["_execute","DRb::ThreadObject","DRb/ThreadObject.html#method-i-_execute","()",""],["_fork","Process","Process.html#method-c-_fork","()","<p>An internal API for fork. Do not call this method directly. Currently, this is called via Kernel#fork …\n"],["_getproperty","WIN32OLE","WIN32OLE.html#method-i-_getproperty","(p1, p2, p3)","<p>Runs the early binding method to get property. The 1st argument specifies dispatch ID, the 2nd argument …\n"],["_gets_noecho","Gem::StreamUI","Gem/StreamUI.html#method-i-_gets_noecho","()",""],["_httpdate","Date","Date.html#method-c-_httpdate","(p1, p2 = {})","<p>Returns a hash of values parsed from <code>string</code>, which should be a valid HTTP date format:\n\n<pre>d = Date.new(2001, ...</pre>\n"],["_intern","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-_intern","(x)",""],["_invoke","WIN32OLE","WIN32OLE.html#method-i-_invoke","(p1, p2, p3)","<p>Runs the early binding method. The 1st argument specifies dispatch ID, the 2nd argument specifies the …\n"],["_ipv4_compat?","IPAddr","IPAddr.html#method-i-_ipv4_compat-3F","()",""],["_iso8601","Date","Date.html#method-c-_iso8601","(p1, p2 = {})","<p>Returns a hash of values parsed from <code>string</code>, which should contain an ISO 8601 formatted date:\n\n<pre>d = Date.new(2001, ...</pre>\n"],["_jisx0301","Date","Date.html#method-c-_jisx0301","(p1, p2 = {})","<p>Returns a hash of values parsed from <code>string</code>, which should be a valid JIS X 0301 date format:\n\n<pre>d = Date.new(2001, ...</pre>\n"],["_load","BigDecimal","BigDecimal.html#method-c-_load","(p1)","<p>Internal method used to provide marshalling support. See the Marshal module.\n"],["_load","DRb::DRbObject","DRb/DRbObject.html#method-c-_load","(s)","<p>Unmarshall a marshalled DRbObject.\n<p>If the referenced object is located within the local server, then the …\n"],["_load","DRb::DRbObject","DRb/DRbObject.html#method-c-_load","(s)","<p>Unmarshall a marshalled DRbObject.\n<p>If the referenced object is located within the local server, then the …\n"],["_load","Gem::Specification","Gem/Specification.html#method-c-_load","(str)","<p>Load custom marshal format, re-initializing defaults as needed\n"],["_load","OpenSSL::Marshal::ClassMethods","OpenSSL/Marshal/ClassMethods.html#method-i-_load","(string)",""],["_load","Singleton","Singleton.html#method-c-_load","","<p>By default calls instance(). Override to retain singleton state.\n"],["_native_parse","Psych::Parser","Psych/Parser.html#method-i-_native_parse","(p1, p2, p3)",""],["_no_crlf_check","CGI","CGI.html#method-i-_no_crlf_check","(str)",""],["_parse","Date","Date.html#method-c-_parse","(*args)","<p><strong>Note</strong>: This method recognizes many forms in <code>string</code>, but it is not a validator. For formats, see “Specialized …\n"],["_path_to?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-_path_to-3F","(other, visited = new_vertex_set)","<p>@param [Vertex] other the vertex to check if there’s a path to @param [Set&lt;Vertex&gt;] visited …\n"],["_racc_do_parse_c","Racc::Parser","Racc/Parser.html#method-i-_racc_do_parse_c","(p1, p2)",""],["_racc_do_parse_rb","Racc::Parser","Racc/Parser.html#method-i-_racc_do_parse_rb","(arg, in_debug)",""],["_racc_do_reduce","Racc::Parser","Racc/Parser.html#method-i-_racc_do_reduce","(arg, act)",""],["_racc_evalact","Racc::Parser","Racc/Parser.html#method-i-_racc_evalact","(act, arg)","<p>common\n"],["_racc_init_sysvars","Racc::Parser","Racc/Parser.html#method-i-_racc_init_sysvars","()",""],["_racc_setup","Racc::Parser","Racc/Parser.html#method-i-_racc_setup","()",""],["_racc_yyparse_c","Racc::Parser","Racc/Parser.html#method-i-_racc_yyparse_c","(p1, p2, p3, p4)",""],["_racc_yyparse_rb","Racc::Parser","Racc/Parser.html#method-i-_racc_yyparse_rb","(recv, mid, arg, c_debug)",""],["_recursive_predecessors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-_recursive_predecessors","(vertices = new_vertex_set)","<p>@param [Set&lt;Vertex&gt;] vertices the set to add the predecessors to @return [Set&lt;Vertex&gt;] the …\n"],["_recursive_successors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-_recursive_successors","(vertices = new_vertex_set)","<p>@param [Set&lt;Vertex&gt;] vertices the set to add the successors to @return [Set&lt;Vertex&gt;] the …\n"],["_register","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-_register","(target_name)",""],["_reverse","IPAddr","IPAddr.html#method-i-_reverse","()",""],["_rfc2822","Date","Date.html#method-c-_rfc2822","(p1, p2 = {})","<p>Returns a hash of values parsed from <code>string</code>, which should be a valid RFC 2822 date format:\n\n<pre>d = Date.new(2001, ...</pre>\n"],["_rfc3339","Date","Date.html#method-c-_rfc3339","(p1, p2 = {})","<p>Returns a hash of values parsed from <code>string</code>, which should be a valid RFC 3339 format:\n\n<pre>d = Date.new(2001, ...</pre>\n"],["_rfc822","Date","Date.html#method-c-_rfc822","(p1, p2 = {})","<p>Returns a hash of values parsed from <code>string</code>, which should be a valid RFC 2822 date format:\n\n<pre>d = Date.new(2001, ...</pre>\n"],["_segments","Gem::Version","Gem/Version.html#method-i-_segments","()",""],["_set_last_value","IRB::Context","IRB/Context.html#method-i-_set_last_value","(value)","<p>See #set_last_value\n"],["_setproperty","WIN32OLE","WIN32OLE.html#method-i-_setproperty","(p1, p2, p3)","<p>Runs the early binding method to set property. The 1st argument specifies dispatch ID, the 2nd argument …\n"],["_sorted_requirements","Gem::Requirement","Gem/Requirement.html#method-i-_sorted_requirements","()",""],["_split_segments","Gem::Version","Gem/Version.html#method-i-_split_segments","()",""],["_strptime","Date","Date.html#method-c-_strptime","(*args)","<p>Returns a hash of values parsed from <code>string</code> according to the given <code>format</code>:\n\n<pre>Date._strptime(&#39;2001-02-03&#39;, ...</pre>\n"],["_strptime","DateTime","DateTime.html#method-c-_strptime","(*args)","<p>Parses the given representation of date and time with the given template, and returns a hash of parsed …\n"],["_tilde_requirements","Gem::Requirement","Gem/Requirement.html#method-i-_tilde_requirements","()",""],["_to_string","IPAddr","IPAddr.html#method-i-_to_string","(addr)",""],["_version","Gem::Version","Gem/Version.html#method-i-_version","()",""],["_wrap","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-_wrap","(target_name, sym, block)",""],["_xmlschema","Date","Date.html#method-c-_xmlschema","(p1, p2 = {})","<p>Returns a hash of values parsed from <code>string</code>, which should be a valid XML date format:\n\n<pre>d = Date.new(2001, ...</pre>\n"],["`","Kernel","Kernel.html#method-i-60","(p1)","<p>Returns the <code>$stdout</code> output from running <code>command</code> in a subshell; sets global variable <code>$?</code> to the process …\n"],["a","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-a","(href = \"\")","<p>Generate an Anchor element as a string.\n<p><code>href</code> can either be a string, giving the URL for the HREF attribute, …\n"],["abbrev","Abbrev","Abbrev.html#method-c-abbrev","(words, pattern = nil)","<p>Given a set of strings, calculate the set of unambiguous abbreviations for those strings, and return …\n"],["abbrev","Abbrev","Abbrev.html#method-i-abbrev","(words, pattern = nil)","<p>Given a set of strings, calculate the set of unambiguous abbreviations for those strings, and return …\n"],["abbrev","Array","Array.html#method-i-abbrev","(pattern = nil)","<p>Calculates the set of unambiguous abbreviations for the strings in <code>self</code>.\n\n<pre>require &#39;abbrev&#39;\n%w{ car cone ...</pre>\n"],["abbreviate","Gem::Specification","Gem/Specification.html#method-i-abbreviate","()","<p>Abbreviate the spec for downloading.  Abbreviated specs are only used for searching, downloading and …\n"],["abort","Kernel","Kernel.html#method-i-abort","(*args)","<p>Terminate execution immediately, effectively by calling <code>Kernel.exit(false)</code>. If <em>msg</em> is given, it is written …\n"],["abort","OptionParser","OptionParser.html#method-i-abort","(mesg = $!)",""],["abort","PStore","PStore.html#method-i-abort","()","<p>Exits the current transaction block, discarding any changes specified in the transaction block. See  …\n"],["abort","Process","Process.html#method-c-abort","(*args)","<p>Terminate execution immediately, effectively by calling <code>Kernel.exit(false)</code>. If <em>msg</em> is given, it is written …\n"],["abort_on_exception","Thread","Thread.html#method-c-abort_on_exception","()","<p>Returns the status of the global “abort on exception” condition.\n<p>The default is <code>false</code>.\n<p>When set …\n"],["abort_on_exception","Thread","Thread.html#method-i-abort_on_exception","()","<p>Returns the status of the thread-local “abort on exception” condition for this <code>thr</code>.\n<p>The default …\n"],["abort_on_exception=","Thread","Thread.html#method-c-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, if any thread is aborted by an exception, the raised exception will be re-raised in …\n"],["abort_on_exception=","Thread","Thread.html#method-i-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, if this <code>thr</code> is aborted by an exception, the raised exception will be re-raised in the …\n"],["abs","BigDecimal","BigDecimal.html#method-i-abs","()","<p>Returns the BigDecimal absolute value of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;5&#39;</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\"># =&gt; 0.5e1</span>\n<span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;-3&#39;</span>).<span class=\"ruby-identifier\">abs</span> <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["abs","Complex","Complex.html#method-i-abs","()","<p>Returns the absolute part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">abs</span>         <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">3.0</span>, <span class=\"ruby-value\">-4.0</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["abs","Float","Float.html#method-i-abs","()","<p>Returns the absolute value of <code>float</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">-34.56</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">-34.56</span>.<span class=\"ruby-identifier\">abs</span>     <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">34.56</span>.<span class=\"ruby-identifier\">abs</span>      <span class=\"ruby-operator\">...</span>\n</pre>\n"],["abs","Integer","Integer.html#method-i-abs","()","<p>Returns the absolute value of <code>int</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">-12345</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 12345</span>\n<span class=\"ruby-value\">-12345</span>.<span class=\"ruby-identifier\">abs</span>     <span class=\"ruby-comment\">#=&gt; 12345</span>\n<span class=\"ruby-value\">12345</span>.<span class=\"ruby-identifier\">abs</span>      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["abs","Numeric","Numeric.html#method-i-abs","()","<p>Returns the absolute value of <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">abs</span>        <span class=\"ruby-comment\">#=&gt; 12</span>\n(<span class=\"ruby-value\">-34.56</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">-34.56</span>.<span class=\"ruby-identifier\">abs</span>    <span class=\"ruby-comment\">#=&gt; 34.56</span>\n</pre>\n"],["abs","OpenSSL::BN","OpenSSL/BN.html#method-i-abs","()",""],["abs","Rational","Rational.html#method-i-abs","()","<p>Returns the absolute value of <code>rat</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2r</span>).<span class=\"ruby-identifier\">abs</span>    <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n(<span class=\"ruby-value\">-1</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2r</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n</pre>\n<p>Rational#magnitude is …\n"],["abs2","Complex","Complex.html#method-i-abs2","()","<p>Returns square of the absolute value.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">abs2</span>         <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">3.0</span>, <span class=\"ruby-value\">-4.0</span>).<span class=\"ruby-identifier\">abs2</span>  <span class=\"ruby-comment\">#=&gt; 25.0</span>\n</pre>\n"],["abs2","Numeric","Numeric.html#method-i-abs2","()","<p>Returns square of self.\n"],["absolute","URI::Generic","URI/Generic.html#method-i-absolute","()",""],["absolute?","Pathname","Pathname.html#method-i-absolute-3F","()","<p>Predicate method for testing whether a path is absolute.\n<p>It returns <code>true</code> if the pathname begins with a …\n"],["absolute?","Resolv::DNS::Name","Resolv/DNS/Name.html#method-i-absolute-3F","()","<p>True if this name is absolute.\n"],["absolute?","URI::Generic","URI/Generic.html#method-i-absolute-3F","()","<p>Returns true if URI has a scheme (e.g. http:// or https://) specified.\n"],["absolute_path","File","File.html#method-c-absolute_path","(*args)","<p>Converts a pathname to an absolute pathname. Relative paths are referenced from the current working directory …\n"],["absolute_path","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-absolute_path","()","<p>Returns the absolute path of this instruction sequence.\n<p><code>nil</code> if the iseq was evaluated from a string.\n<p>For …\n"],["absolute_path","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-absolute_path","()","<p>Returns the full file path of this frame.\n<p>Same as #path, except that it will return absolute path even …\n"],["absolute_path?","File","File.html#method-c-absolute_path-3F","(p1)","<p>Returns <code>true</code> if <code>file_name</code> is an absolute path, and <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">absolute_path?</span>(<span class=\"ruby-string\">&quot;c:/foo&quot;</span>)     <span class=\"ruby-operator\">...</span>\n</pre>\n"],["absolute_path?","IRB::IrbLoader","IRB/IrbLoader.html#method-i-absolute_path-3F","(path)",""],["ac_arg_disable","OptionParser::AC","OptionParser/AC.html#method-i-ac_arg_disable","(name, help_string, &block)",""],["ac_arg_enable","OptionParser::AC","OptionParser/AC.html#method-i-ac_arg_enable","(name, help_string, &block)",""],["ac_arg_with","OptionParser::AC","OptionParser/AC.html#method-i-ac_arg_with","(name, help_string, &block)",""],["accept","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-accept","(tcp)","<p>Accept connection to IO <code>tcp</code>, with context of the current certificate configuration\n"],["accept","OpenSSL::SSL::SSLServer","OpenSSL/SSL/SSLServer.html#method-i-accept","()","<p>Works similar to TCPServer#accept.\n"],["accept","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-accept","()","<p>Waits for a SSL/TLS client to initiate a handshake.\n"],["accept","OptionParser","OptionParser.html#method-i-accept","(*args, &blk)","<p>Directs to accept specified class <code>t</code>. The argument string is passed to the block in which it should be …\n"],["accept","OptionParser","OptionParser.html#method-c-accept","(*args, &blk)","<p>See #accept.\n"],["accept","OptionParser::List","OptionParser/List.html#method-i-accept","(t, pat = /.*/m, &block)","<p>See OptionParser.accept.\n"],["accept","Psych::Visitors::JSONTree","Psych/Visitors/JSONTree.html#method-i-accept","(target)",""],["accept","Psych::Visitors::RestrictedYAMLTree","Psych/Visitors/RestrictedYAMLTree.html#method-i-accept","(target)",""],["accept","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-accept","(target)",""],["accept","Psych::Visitors::Visitor","Psych/Visitors/Visitor.html#method-i-accept","(target)",""],["accept","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-accept","(target)",""],["accept","Socket","Socket.html#method-i-accept","()","<p>Accepts a next connection. Returns a new Socket object and Addrinfo object.\n\n<pre>serv = Socket.new(:INET, :STREAM, ...</pre>\n"],["accept","TCPServer","TCPServer.html#method-i-accept","()","<p>Accepts an incoming connection. It returns a new TCPSocket object.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">TCPServer</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;127.0.0.1&quot;</span>, <span class=\"ruby-value\">14641</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["accept","UNIXServer","UNIXServer.html#method-i-accept","()","<p>Accepts an incoming connection. It returns a new UNIXSocket object.\n\n<pre>UNIXServer.open(&quot;/tmp/sock&quot;) {|serv| ...</pre>\n"],["accept?","Racc::Rule","Racc/Rule.html#method-i-accept-3F","()",""],["accept_charset","CGI","CGI.html#method-c-accept_charset","()","<p>Return the accept character set for all new CGI instances.\n"],["accept_charset=","CGI","CGI.html#method-c-accept_charset-3D","(accept_charset)","<p>Set the accept character set for all new CGI instances.\n"],["accept_loop","Socket","Socket.html#method-c-accept_loop","(*sockets)","<p>yield socket and client address for each a connection accepted via given sockets.\n<p>The arguments are a …\n"],["accept_nonblock","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-accept_nonblock","(p1 = {})","<p>Initiates the SSL/TLS handshake as a server in non-blocking manner.\n\n<pre># emulates blocking accept\nbegin\n ...</pre>\n"],["accept_nonblock","Socket","Socket.html#method-i-accept_nonblock","(exception: true)","<p>Accepts an incoming connection using accept(2) after O_NONBLOCK is set for the underlying file descriptor. …\n"],["accept_nonblock","TCPServer","TCPServer.html#method-i-accept_nonblock","(exception: true)","<p>Accepts an incoming connection using accept(2) after O_NONBLOCK is set for the underlying file descriptor. …\n"],["accept_nonblock","UNIXServer","UNIXServer.html#method-i-accept_nonblock","(exception: true)","<p>Accepts an incoming connection using accept(2) after O_NONBLOCK is set for the underlying file descriptor. …\n"],["accept_uri_http","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-accept_uri_http","()","<p>Allows Gem::OptionParser to handle HTTP URIs.\n"],["acos","Math","Math.html#method-c-acos","(p1)","<p>Returns the arc cosine of <code>x</code>.\n<p>Domain: <code>[-1, 1]</code>.\n<p>Range: <code>[0, PI]</code>.\n"],["acosh","Math","Math.html#method-c-acosh","(p1)","<p>Returns the inverse hyperbolic cosine of <code>x</code>.\n<p>Domain: <code>[1, INFINITY]</code>.\n<p>Range: <code>[0, INFINITY]</code>.\n"],["act2actid","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-act2actid","(act)",""],["action","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-action","(&block)",""],["action_name","Gem::Resolver::Molinillo::DependencyGraph::Action","Gem/Resolver/Molinillo/DependencyGraph/Action.html#method-c-action_name","()","<p>@return [Symbol] The name of the action.\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-c-action_name","()","<p>(see Action.action_name)\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-c-action_name","()","<p>(see Action.action_name)\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html#method-c-action_name","()","<p>(see Action#name)\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::Tag","Gem/Resolver/Molinillo/DependencyGraph/Tag.html#method-c-action_name","()","<p>(see Action.action_name)\n"],["action_out","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-action_out","(f, state)",""],["actions","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-actions","()",""],["activate","Gem::Specification","Gem/Specification.html#method-i-activate","()","<p>Activate this spec, registering it as a loaded spec and adding it’s lib paths to $LOAD_PATH. Returns …\n"],["activate!","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-activate-21","()",""],["activate_dependencies","Gem::Specification","Gem/Specification.html#method-i-activate_dependencies","()","<p>Activate all unambiguously resolved runtime dependencies of this spec. Add any ambiguous dependencies …\n"],["activate_new_spec","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-activate_new_spec","()","<p>Add the current {#possibility} to the dependency graph of the current {#state} @return [void]\n"],["activated","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-activated","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#activated)\n"],["activated?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-activated-3F","()","<p>True when the gem has been activated\n"],["activated_gem_paths","Gem","Gem.html#method-c-activated_gem_paths","()","<p>The number of paths in the +$LOAD_PATH+ from activated gems. Used to prioritize <code>-I</code> and +ENV+ entries …\n"],["active?","Net::HTTP","Net/HTTP.html#method-i-active-3F","()",""],["active_count","Gem::DependencyList","Gem/DependencyList.html#method-i-active_count","(specs, ignored)","<p>Count the number of gemspecs in the list <code>specs</code> that are not in <code>ignored</code>.\n"],["add","ACL::ACLList","ACL/ACLList.html#method-i-add","(str)","<p>Adds <code>str</code> as an ACLEntry in this list\n"],["add","Benchmark::Tms","Benchmark/Tms.html#method-i-add","()","<p>Returns a new Tms object whose times are the sum of the times for this Tms object, plus the time required …\n"],["add","BigDecimal","BigDecimal.html#method-i-add","(p1, p2)","<p>Returns the BigDecimal sum of <code>self</code> and <code>value</code> with a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> …\n"],["add","DRb::WeakIdConv::WeakSet","DRb/WeakIdConv/WeakSet.html#method-i-add","(obj)",""],["add","Gem::AvailableSet","Gem/AvailableSet.html#method-i-add","(spec, source)",""],["add","Gem::DependencyList","Gem/DependencyList.html#method-i-add","(*gemspecs)","<p>Adds <code>gemspecs</code> to the dependency list.\n"],["add","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-add","(req)","<p>Adds Resolver::DependencyRequest <code>req</code> to this requirements list.\n"],["add","Logger","Logger.html#method-i-add","(severity, message = nil, progname = nil)","<p>Creates a log entry, which may or may not be written to the log, depending on the entry’s severity …\n"],["add","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-add","(p1)","<p>Performs elliptic curve point addition.\n"],["add","Psych::Coder","Psych/Coder.html#method-i-add","(k, v)",""],["add","RDoc::Context","RDoc/Context.html#method-i-add","(klass, name, comment)","<p>Adds an item of type <code>klass</code> with the given <code>name</code> and <code>comment</code> to the context.\n<p>Currently only RDoc::Extend …\n"],["add","Racc::Grammar","Racc/Grammar.html#method-i-add","(rule)","<p>Grammar Definition Interface\n"],["add","Racc::ISet","Racc/ISet.html#method-i-add","(i)",""],["add","Rinda::TupleBag::TupleBin","Rinda/TupleBag/TupleBin.html#method-i-add","(tuple)",""],["add","Set","Set.html#method-i-add","(o)","<p>Adds the given object to the set and returns self. Use <code>merge</code> to\nadd many elements at once.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Set</span>[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>].<span class=\"ruby-identifier\">add</span>(<span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["add","Syslog::Logger","Syslog/Logger.html#method-i-add","(severity, message = nil, progname = nil, &block)","<p>Almost duplicates Logger#add.  <code>progname</code> is ignored.\n"],["add","ThreadGroup","ThreadGroup.html#method-i-add","(p1)","<p>Adds the given <code>thread</code> to this group, removing it from any other group to which it may have previously …\n"],["add!","Benchmark::Tms","Benchmark/Tms.html#method-i-add-21","(&blk)","<p>An in-place version of #add. Changes the times of this Tms object by making it the sum of the times for …\n"],["add?","Set","Set.html#method-i-add-3F","(o)","<p>Adds the given object to the set and returns self. If the\nobject is already in the set, returns nil. ...\n"],["add_GIT","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-add_GIT","(out, git_requests)",""],["add_alias","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-add_alias","(an_alias, context = nil)","<p>Adds <code>an_alias</code> as an alias for this method in <code>context</code>.\n"],["add_alias","RDoc::Attr","RDoc/Attr.html#method-i-add_alias","(an_alias, context)","<p>Add <code>an_alias</code> as an attribute in <code>context</code>.\n"],["add_alias","RDoc::Context","RDoc/Context.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> that is automatically resolved\n"],["add_alias","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-add_alias","(an_alias, context)","<p>Abstract method. Contexts in their building phase call this to register a new alias for this known method/attribute. …\n"],["add_alias","RDoc::Parser::C","RDoc/Parser/C.html#method-i-add_alias","(var_name, class_obj, old_name, new_name, comment)","<p>Add alias, either from a direct alias definition, or from two method that reference the same function. …\n"],["add_alias","RDoc::Stats","RDoc/Stats.html#method-i-add_alias","(as)","<p>Records the parsing of an alias <code>as</code>.\n"],["add_alias","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> to <code>Object</code> instead of <code>self</code>.\n"],["add_always_install","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-add_always_install","(dependency)","<p>Looks up the latest specification for <code>dependency</code> and adds it to the always_install list.\n"],["add_attribute","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-add_attribute","(p1)",""],["add_attribute","RDoc::Context","RDoc/Context.html#method-i-add_attribute","(attribute)","<p>Adds <code>attribute</code> if not already there. If it is (as method(s) or attribute), updates the comment if it …\n"],["add_attribute","RDoc::Stats","RDoc/Stats.html#method-i-add_attribute","(attribute)","<p>Records the parsing of an attribute <code>attribute</code>\n"],["add_bindir","Gem::Specification","Gem/Specification.html#method-i-add_bindir","(executables)","<p>Returns an array with bindir attached to each executable in the <code>executables</code> list\n"],["add_bulk_threshold_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_bulk_threshold_option","()","<p>Add the –bulk-threshold option\n"],["add_c_enclosure","RDoc::Store","RDoc/Store.html#method-i-add_c_enclosure","(variable, namespace)","<p>Adds <code>module</code> as an enclosure (namespace) for the given <code>variable</code> for C files.\n"],["add_c_variables","RDoc::Store","RDoc/Store.html#method-i-add_c_variables","(c_parser)","<p>Adds C variables from an RDoc::Parser::C\n"],["add_cert","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-add_cert","(p1)","<p>Adds the OpenSSL::X509::Certificate <em>cert</em> to the certificate store.\n<p>See also the man page X509_STORE_add_cert …\n"],["add_certid","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-add_certid","(p1)","<p>Adds <em>certificate_id</em> to the request.\n"],["add_certificate","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-add_certificate","(p1)",""],["add_certificate","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-add_certificate","(p1, p2, p3 = v3)","<p>Adds a certificate to the context. <em>pkey</em> must be a corresponding private key with <em>certificate</em>.\n<p>Multiple …\n"],["add_checksums","Gem::Package","Gem/Package.html#method-i-add_checksums","(tar)","<p>Adds a checksum for each entry in the gem to checksums.yaml.gz.\n"],["add_child_vertex","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-add_child_vertex","(name, payload, parent_names, requirement)","<p>@param [String] name @param [Object] payload @param [Array&lt;String&gt;] parent_names @param [Object] …\n"],["add_class","RDoc::Context","RDoc/Context.html#method-i-add_class","(class_type, given_name, superclass = '::Object')","<p>Adds a class named <code>given_name</code> with <code>superclass</code>.\n<p>Both <code>given_name</code> and <code>superclass</code> may contain ‘::’, …\n"],["add_class","RDoc::Stats","RDoc/Stats.html#method-i-add_class","(klass)","<p>Records the parsing of a class <code>klass</code>\n"],["add_class_or_module","RDoc::Context","RDoc/Context.html#method-i-add_class_or_module","(mod, self_hash, all_hash)","<p>Adds the class or module <code>mod</code> to the modules or classes Hash <code>self_hash</code>, and to <code>all_hash</code> (either <code>TopLevel::modules_hash</code> …\n"],["add_clear_sources_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_clear_sources_option","()","<p>Add the –clear-sources option\n"],["add_comment","RDoc::ClassModule","RDoc/ClassModule.html#method-i-add_comment","(comment, location)","<p>Adds <code>comment</code> to this ClassModule’s list of comments at <code>location</code>.  This method is preferred over  …\n"],["add_common_option","Gem::Command","Gem/Command.html#method-c-add_common_option","(*args, &handler)",""],["add_constant","RDoc::Context","RDoc/Context.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> if not already there. If it is, updates the comment, value and/or is_alias_for of the known …\n"],["add_constant","RDoc::Stats","RDoc/Stats.html#method-i-add_constant","(constant)","<p>Records the parsing of <code>constant</code>\n"],["add_constant","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> to <code>Object</code> instead of <code>self</code>.\n"],["add_converter","CSV::FieldsConverter","CSV/FieldsConverter.html#method-i-add_converter","(name=nil, &converter)",""],["add_crl","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-add_crl","(p1)",""],["add_crl","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-add_crl","(p1)","<p>Adds the OpenSSL::X509::CRL <em>crl</em> to the store.\n<p>See also the man page X509_STORE_add_crl(3).\n"],["add_data","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-add_data","(p1)",""],["add_default_key_binding","Reline::Config","Reline/Config.html#method-i-add_default_key_binding","(keystroke, target)",""],["add_default_key_binding_by_keymap","Reline::Config","Reline/Config.html#method-i-add_default_key_binding_by_keymap","(keymap, keystroke, target)",""],["add_dependency","Gem::Specification","Gem/Specification.html#method-i-add_dependency","(gem, *requirements)",""],["add_dependency_with_type","Gem::Specification","Gem/Specification.html#method-i-add_dependency_with_type","(dependency, type, requirements)","<p>Adds a dependency on gem <code>dependency</code> with type <code>type</code> that requires <code>requirements</code>.  Valid types are currently …\n"],["add_development_dependency","Gem::Specification","Gem/Specification.html#method-i-add_development_dependency","(gem, *requirements)","<p>Adds a development dependency named <code>gem</code> with <code>requirements</code> to this gem.\n<p>Usage:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">add_development_dependency</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["add_dialog_proc","Reline::Core","Reline/Core.html#method-i-add_dialog_proc","(name_sym, p, context = nil)",""],["add_dialog_proc","Reline::LineEditor","Reline/LineEditor.html#method-i-add_dialog_proc","(name, p, context = nil)",""],["add_dictionary","Zlib::Inflate","Zlib/Inflate.html#method-i-add_dictionary","(p1)","<p>Provide the inflate stream with a dictionary that may be required in the future.  Multiple dictionaries …\n"],["add_edge","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-add_edge","(origin, destination, requirement)","<p>Adds a new {Edge} to the dependency graph @param [Vertex] origin @param [Vertex] destination @param [Object] …\n"],["add_edge_no_circular","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-add_edge_no_circular","(origin, destination, requirement)","<p>Adds a new {Edge} to the dependency graph without checking for circularity. @param (see #add_edge) @return …\n"],["add_edge_no_circular","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-add_edge_no_circular","(graph, origin, destination, requirement)","<p>@macro action\n"],["add_entry","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-add_entry","(p1, p2, p3 = v3, p4 = {})","<p>Adds a new entry with the given <em>oid</em> and <em>value</em> to this name.  The <em>oid</em> is an object identifier defined …\n"],["add_extend","RDoc::Context","RDoc/Context.html#method-i-add_extend","(ext)","<p>Adds extension module <code>ext</code> which should be an RDoc::Extend\n"],["add_extension","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-add_extension","(p1)",""],["add_extension","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-add_extension","(p1)",""],["add_extension","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-add_extension","(p1)",""],["add_extra_args","Gem::Command","Gem/Command.html#method-i-add_extra_args","(args)","<p>Adds extra args from ~/.gemrc\n"],["add_field","Net::HTTPHeader","Net/HTTPHeader.html#method-i-add_field","(key, val)","<p>Adds value <code>val</code> to the value array for field <code>key</code> if the field exists; creates the field with the given …\n"],["add_file","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file","(name, mode)","<p>Adds file <code>name</code> with permissions <code>mode</code>, and yields an IO for writing the file to\n"],["add_file","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-add_file","(p1)","<p>Adds the certificates in <em>file</em> to the certificate store. <em>file</em> is the path to the file, and the file contains …\n"],["add_file","RDoc::Stats","RDoc/Stats.html#method-i-add_file","(file)","<p>Records the parsing of <code>file</code>\n"],["add_file","RDoc::Store","RDoc/Store.html#method-i-add_file","(absolute_name, relative_name: absolute_name, parser: nil)","<p>Adds the file with <code>name</code> as an RDoc::TopLevel to the store.  Returns the created RDoc::TopLevel.\n"],["add_file_digest","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file_digest","(name, mode, digest_algorithms)","<p>Adds <code>name</code> with permissions <code>mode</code> to the tar, yielding <code>io</code> for writing the file.  The <code>digest_algorithm</code> is …\n"],["add_file_signed","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file_signed","(name, mode, signer)","<p>Adds <code>name</code> with permissions <code>mode</code> to the tar, yielding <code>io</code> for writing the file.  The <code>signer</code> is used to …\n"],["add_file_simple","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file_simple","(name, mode, size)","<p>Add file <code>name</code> with permissions <code>mode</code> <code>size</code> bytes long.  Yields an IO to write the file to.\n"],["add_generator","RDoc::RDoc","RDoc/RDoc.html#method-c-add_generator","(klass)","<p>Add <code>klass</code> that can generate output after parsing\n"],["add_html","RDoc::Markup","RDoc/Markup.html#method-i-add_html","(tag, name)","<p>Add to the sequences recognized as general markup.\n"],["add_include","RDoc::Context","RDoc/Context.html#method-i-add_include","(include)","<p>Adds included module <code>include</code> which should be an RDoc::Include\n"],["add_include","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_include","(include)","<p>Adds <code>include</code> to <code>Object</code> instead of <code>self</code>.\n"],["add_install_update_options","Gem::InstallUpdateOptions","Gem/InstallUpdateOptions.html#method-i-add_install_update_options","()","<p>Add the install/update options to the option parser.\n"],["add_key_option","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-add_key_option","()","<p>Add the –key option\n"],["add_local","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-add_local","(dep_name, spec, source)","<p>Adds a local gem requested using <code>dep_name</code> with the given <code>spec</code> that can be loaded and installed using …\n"],["add_local_remote_options","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_local_remote_options","()","<p>Add local/remote options to the command line parser.\n"],["add_log_header","Logger::LogDevice","Logger/LogDevice.html#method-i-add_log_header","(file)",""],["add_method","RDoc::Context","RDoc/Context.html#method-i-add_method","(method)","<p>Adds <code>method</code> if not already there. If it is (as method or attribute), updates the comment if it was empty. …\n"],["add_method","RDoc::Stats","RDoc/Stats.html#method-i-add_method","(method)","<p>Records the parsing of <code>method</code>\n"],["add_method","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_method","(method)","<p>Adds <code>method</code> to <code>Object</code> instead of <code>self</code>.\n"],["add_module","RDoc::Context","RDoc/Context.html#method-i-add_module","(class_type, name)","<p>Adds a module named <code>name</code>.  If RDoc already knows <code>name</code> is a class then that class is returned instead. …\n"],["add_module","RDoc::Stats","RDoc/Stats.html#method-i-add_module","(mod)","<p>Records the parsing of a module <code>mod</code>\n"],["add_module_alias","RDoc::Context","RDoc/Context.html#method-i-add_module_alias","(from, from_name, to, file)","<p>Adds an alias from <code>from</code> (a class or module) to <code>name</code> which was defined in <code>file</code>.\n"],["add_module_by_normal_module","RDoc::Context","RDoc/Context.html#method-i-add_module_by_normal_module","(mod)","<p>Adds a module by <code>RDoc::NormalModule</code> instance. See also #add_module.\n"],["add_nonce","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-add_nonce","(p1 = v1)","<p>Adds <em>nonce</em> to this response.  If no nonce was provided a random nonce will be added.\n"],["add_nonce","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-add_nonce","(p1 = v1)","<p>Adds a <em>nonce</em> to the OCSP request.  If no nonce is given a random one will be generated.\n<p>The nonce is used …\n"],["add_observer","Observable","Observable.html#method-i-add_observer","(observer, func=:update)","<p>Add <code>observer</code> as an observer on this object. So that it will receive notifications.\n<p><code>observer</code> &mdash; the object …\n"],["add_oneshot_key_binding","Reline::Config","Reline/Config.html#method-i-add_oneshot_key_binding","(keystroke, target)",""],["add_option","Gem::Command","Gem/Command.html#method-i-add_option","(*opts)","<p>Add a command-line option and handler to the command.\n<p>See Gem::OptionParser#make_switch for an explanation …\n"],["add_otp_option","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-add_otp_option","()","<p>Add the –otp option\n"],["add_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-add_owners","(name, owners)",""],["add_parser_run_info","Gem::Command","Gem/Command.html#method-i-add_parser_run_info","(title, content)","<p>Adds a section with <code>title</code> and <code>content</code> to the parser help view.  Used for adding command arguments and …\n"],["add_path","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-i-add_path","(out, path)",""],["add_path","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-add_path","(p1)","<p>Adds <em>path</em> as the hash dir to be looked up by the store.\n<p>See also the man page X509_LOOKUP_hash_dir(3). …\n"],["add_platform","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-i-add_platform","(platform)","<p>append a platform to the list of mismatched platforms.\n<p>Platforms are added via this instead of injected …\n"],["add_platform_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_platform_option","(task = command, *wrap)","<p>Add the –platform option to the option parser.\n"],["add_prerelease_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_prerelease_option","(*wrap)","<p>Add the –prerelease option to the option parser.\n"],["add_protocol","DRb::DRbProtocol","DRb/DRbProtocol.html#method-i-add_protocol","(prot)","<p>Add a new protocol to the DRbProtocol module.\n"],["add_protocol","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-add_protocol","(prot)","<p>Add a new protocol to the DRbProtocol module.\n"],["add_proxy_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_proxy_option","()","<p>Add the –http-proxy option\n"],["add_query_options","Gem::QueryUtils","Gem/QueryUtils.html#method-i-add_query_options","()",""],["add_recipient","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-add_recipient","(p1)",""],["add_regexp_handling","RDoc::Markup","RDoc/Markup.html#method-i-add_regexp_handling","(pattern, name)","<p>Add to other inline sequences.  For example, we could add WikiWords using something like:\n\n<pre>parser.add_regexp_handling(/\\b([A-Z][a-z]+[A-Z]\\w+)/, ...</pre>\n"],["add_require","RDoc::Context","RDoc/Context.html#method-i-add_require","(require)","<p>Adds <code>require</code> to this context’s top level\n"],["add_revoked","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-add_revoked","(p1)",""],["add_row","CSV","CSV.html#method-i-add_row","(row)",""],["add_rule","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-i-add_rule","(target, list, sprec)",""],["add_rule_block","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-i-add_rule_block","(list)",""],["add_runtime_dependency","Gem::Specification","Gem/Specification.html#method-i-add_runtime_dependency","(gem, *requirements)","<p>Adds a runtime dependency named <code>gem</code> with <code>requirements</code> to this gem.\n<p>Usage:\n\n<pre>spec.add_runtime_dependency &#39;example&#39;, ...</pre>\n"],["add_section","RDoc::Context","RDoc/Context.html#method-i-add_section","(title, comment = nil)","<p>Returns a section with <code>title</code>, creating it if it doesn’t already exist. <code>comment</code> will be appended to …\n"],["add_security_option","Gem::SecurityOption","Gem/SecurityOption.html#method-i-add_security_option","()",""],["add_self_to_load_path","Gem::Specification","Gem/Specification.html#method-i-add_self_to_load_path","()","<p>Adds this spec’s require paths to LOAD_PATH, in the proper location.\n"],["add_signer","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-add_signer","(p1)",""],["add_source_gem","Gem::Resolver::SourceSet","Gem/Resolver/SourceSet.html#method-i-add_source_gem","(name, source)",""],["add_source_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_source_option","()","<p>Add the –source option\n"],["add_spec","Gem::Specification","Gem/Specification.html#method-c-add_spec","(spec)","<p>Adds <code>spec</code> to the known specifications, keeping the collection properly sorted.\n"],["add_specific_extra_args","Gem::Command","Gem/Command.html#method-c-add_specific_extra_args","(cmd,args)","<p>Add a list of extra arguments for the given command.  <code>args</code> may be an array or a string to be split on …\n"],["add_start_rule","Racc::Grammar","Racc/Grammar.html#method-i-add_start_rule","()",""],["add_status","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-add_status","(p1, p2, p3, p4, p5, p6, p7)","<p>Adds a certificate status for <em>certificate_id</em>. <em>status</em> is the status, and must be one of these:\n<p>OpenSSL::OCSP::V_CERTSTATUS_GOOD …\n"],["add_stress_to_class","GC","GC.html#method-c-add_stress_to_class","(*args)","<p>Raises NoMemoryError when allocating an instance of the given classes.\n"],["add_symlink","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_symlink","(name, target, mode)","<p>Adds symlink <code>name</code> with permissions <code>mode</code>, linking to <code>target</code>.\n"],["add_to","RDoc::Context","RDoc/Context.html#method-i-add_to","(array, thing)","<p>Adds <code>thing</code> to the collection <code>array</code>\n"],["add_to_classes_or_modules","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_to_classes_or_modules","(mod)","<p>Adds class or module <code>mod</code>. Used in the building phase by the Ruby parser.\n"],["add_to_load_path","Gem","Gem.html#method-c-add_to_load_path","(*paths)","<p>Add a list of paths to the $LOAD_PATH at the proper place.\n"],["add_token","RDoc::TokenStream","RDoc/TokenStream.html#method-i-add_token","(token)","<p>Adds one <code>token</code> to the collected tokens\n"],["add_token_listener","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-add_token_listener","(obj)","<p>Adds a token listener <code>obj</code>, but you should probably use token_listener\n"],["add_tokens","RDoc::TokenStream","RDoc/TokenStream.html#method-i-add_tokens","(tokens)","<p>Adds <code>tokens</code> to the collected tokens\n"],["add_trace_func","Thread","Thread.html#method-i-add_trace_func","(p1)","<p>Adds <em>proc</em> as a handler for tracing.\n<p>See Thread#set_trace_func and Kernel#set_trace_func.\n"],["add_unconverted_fields","CSV::Parser","CSV/Parser.html#method-i-add_unconverted_fields","(row, fields)","<p>This method injects an instance variable <code>unconverted_fields</code> into <code>row</code> and an accessor method for <code>row</code> called …\n"],["add_update_sources_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_update_sources_option","()","<p>Add the –update-sources option\n"],["add_user_code","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-i-add_user_code","(label, src)",""],["add_version_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_version_option","(task = command, *wrap)","<p>Add the –version option to the option parser.\n"],["add_vertex","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-add_vertex","(name, payload, root = false)","<p>Adds a vertex with the given name, or updates the existing one. @param [String] name @param [Object] …\n"],["add_vertex","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-add_vertex","(graph, name, payload, root)","<p>@macro action\n"],["add_word_pair","RDoc::Markup","RDoc/Markup.html#method-i-add_word_pair","(start, stop, name)","<p>Add to the sequences used to add formatting to an individual word (such as <strong>bold</strong>).  Matching entries will …\n"],["added?","Racc::Grammar","Racc/Grammar.html#method-i-added-3F","(sym)",""],["addent","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-addent","(all, arr, chkval, ptr)",""],["additional_message","OptionParser","OptionParser.html#method-i-additional_message","(typ, opt)","<p>Returns additional info.\n"],["addr","IPSocket","IPSocket.html#method-i-addr","(*args)","<p>Returns the local address as an array which contains address_family, port, hostname and numeric_address. …\n"],["addr","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-addr","()",""],["addr","Socket::Ifaddr","Socket/Ifaddr.html#method-i-addr","()","<p>Returns the address of <em>ifaddr</em>. nil is returned if address is not available in <em>ifaddr</em>.\n"],["addr","UNIXSocket","UNIXSocket.html#method-i-addr","()","<p>Returns the local address as an array which contains address_family and unix_path.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">serv</span> = <span class=\"ruby-constant\">UNIXServer</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["addr_mask","IPAddr","IPAddr.html#method-i-addr_mask","(addr)",""],["addr_port","Net::HTTP","Net/HTTP.html#method-i-addr_port","()","<p>utils\n"],["addrel","Racc::States","Racc/States.html#method-i-addrel","(tbl, i, item)",""],["address_resolve","Fiber::Scheduler","Fiber/Scheduler.html#method-i-address_resolve","(p1)","<p>Invoked by any method that performs a non-reverse DNS lookup. The most notable method is Addrinfo.getaddrinfo …\n"],["addsym","Racc::States","Racc/States.html#method-i-addsym","(table, sym, ptr)",""],["adjust_headers","CSV::Parser","CSV/Parser.html#method-i-adjust_headers","(headers, quoted_fields)",""],["adjust_last_keep","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-i-adjust_last_keep","()",""],["adler","Zlib::ZStream","Zlib/ZStream.html#method-i-adler","()","<p>Returns the adler-32 checksum.\n"],["adler32","Zlib","Zlib.html#method-c-adler32","(*args)","<p>Calculates Adler-32 checksum for <code>string</code>, and returns updated value of <code>adler</code>. If <code>string</code> is omitted, it …\n"],["adler32_combine","Zlib","Zlib.html#method-c-adler32_combine","(p1, p2, p3)","<p>Combine two Adler-32 check values in to one.  <code>adler1</code> is the first Adler-32 value, <code>adler2</code> is the second …\n"],["advise","IO","IO.html#method-i-advise","(p1, p2 = v2, p3 = v3)","<p>Invokes Posix system call posix_fadvise(2), which announces an intention to access data from the current …\n"],["afamily","Addrinfo","Addrinfo.html#method-i-afamily","()","<p>returns the address family as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">afamily</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AF_INET</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["after_index","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-after_index","()",""],["after_lines","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-after_lines","()",""],["after_resolution","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-after_resolution","()","<p>Called after resolution ends (either successfully or with an error). By default, prints a newline.\n<p>@return …\n"],["ajd","Date","Date.html#method-i-ajd","()","<p>Returns the astronomical Julian day number.  This is a fractional number, which is not adjusted by the …\n"],["alert","Gem::StreamUI","Gem/StreamUI.html#method-i-alert","(statement, question=nil)","<p>Display an informational alert.  Will ask <code>question</code> if it is not nil.\n"],["alert","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert","(statement, question = nil)","<p>Displays an alert <code>statement</code>.  Asks a <code>question</code> if given.\n"],["alert_error","Gem::StreamUI","Gem/StreamUI.html#method-i-alert_error","(statement, question=nil)","<p>Display an error message in a location expected to get error messages. Will ask <code>question</code> if it is not …\n"],["alert_error","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert_error","(statement, question = nil)","<p>Displays an error <code>statement</code> to the error output location.  Asks a <code>question</code> if given.\n"],["alert_warning","Gem::StreamUI","Gem/StreamUI.html#method-i-alert_warning","(statement, question=nil)","<p>Display a warning on stderr.  Will ask <code>question</code> if it is not nil.\n"],["alert_warning","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert_warning","(statement, question = nil)","<p>Displays a warning <code>statement</code> to the warning output location.  Asks a <code>question</code> if given.\n"],["algorithm","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-i-algorithm","()","<p>Returns the ‘short name’ of the object identifier that represents the algorithm that was used …\n"],["algorithm","OpenSSL::Timestamp::TokenInfo","OpenSSL/Timestamp/TokenInfo.html#method-i-algorithm","()","<p>Returns the ‘short name’ of the object identifier representing the algorithm that was used to …\n"],["algorithm=","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-i-algorithm-3D","(p1)","<p>Allows to set the object identifier  or the ‘short name’ of the algorithm that was used to create …\n"],["alias","Psych::Emitter","Psych/Emitter.html#method-i-alias","(p1)","<p>Emit an alias with <code>anchor</code>.\n<p>See Psych::Handler#alias\n"],["alias","Psych::Handler","Psych/Handler.html#method-i-alias","(anchor)","<p>Called when an alias is found to <code>anchor</code>.  <code>anchor</code> will be the name of the anchor found.\n<p>Example\n<p>Here we …\n"],["alias","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-alias","(anchor)",""],["alias?","Psych::Nodes::Alias","Psych/Nodes/Alias.html#method-i-alias-3F","()",""],["alias?","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-alias-3F","()",""],["alias_extension","RDoc::Parser","RDoc/Parser.html#method-c-alias_extension","(old_ext, new_ext)","<p>Alias an extension to another extension. After this call, files ending “new_ext” will be parsed …\n"],["alias_method","Module","Module.html#method-i-alias_method","(p1, p2)","<p>Makes <em>new_name</em> a new copy of the method <em>old_name</em>. This can be used to retain access to methods that are …\n"],["aliases","Encoding","Encoding.html#method-c-aliases","()","<p>Returns the hash of available encoding alias and original encoding name.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span>.<span class=\"ruby-identifier\">aliases</span>\n<span class=\"ruby-comment\">#=&gt; {&quot;BINARY&quot;=&gt;&quot;ASCII-8BIT&quot;, ...</span>\n</pre>\n"],["alien","Gem::Validator","Gem/Validator.html#method-i-alien","(gems=[])","<p>Checks the gem directory for the following potential inconsistencies/problems:\n<p>Checksum gem itself\n<p>For …\n"],["alignment","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-c-alignment","(types)",""],["alive?","DRb::DRbServer","DRb/DRbServer.html#method-i-alive-3F","()","<p>Is this server alive?\n"],["alive?","DRb::ExtServ","DRb/ExtServ.html#method-i-alive-3F","()",""],["alive?","DRb::ThreadObject","DRb/ThreadObject.html#method-i-alive-3F","()",""],["alive?","Fiber","Fiber.html#method-i-alive-3F","()","<p>Returns true if the fiber can still be resumed (or transferred to). After finishing execution of the …\n"],["alive?","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-alive-3F","()","<p>A TupleEntry is dead when it is canceled or expired.\n"],["alive?","Thread","Thread.html#method-i-alive-3F","()","<p>Returns <code>true</code> if <code>thr</code> is running or sleeping.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">thr</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">new</span> { }\n<span class=\"ruby-identifier\">thr</span>.<span class=\"ruby-identifier\">join</span>                <span class=\"ruby-comment\">#=&gt; #&lt;Thread:0x401b3fb0 ...</span>\n</pre>\n"],["all","Gem::Specification","Gem/Specification.html#method-c-all","()","<p>Returns all specifications. This method is discouraged from use. You probably want to use one of the …\n"],["all=","Gem::Specification","Gem/Specification.html#method-c-all-3D","(specs)","<p>Sets the known specs to <code>specs</code>. Not guaranteed to work for you in the future. Use at your own risk. Caveat …\n"],["all?","Array","Array.html#method-i-all-3F","(*args)","<p>Returns <code>true</code> if all elements of <code>self</code> meet a given criterion.\n<p>With no block given and no argument, returns …\n"],["all?","Enumerable","Enumerable.html#method-i-all-3F","(*args)","<p>Returns whether every element meets a given criterion.\n<p>With no argument and no block, returns whether …\n"],["all_classes","RDoc::Store","RDoc/Store.html#method-i-all_classes","()","<p>Returns all classes discovered by RDoc\n"],["all_classes_and_modules","RDoc::Store","RDoc/Store.html#method-i-all_classes_and_modules","()","<p>Returns all classes and modules discovered by RDoc\n"],["all_commands_info","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-all_commands_info","()",""],["all_files","RDoc::Store","RDoc/Store.html#method-i-all_files","()","<p>All TopLevels known to RDoc\n"],["all_modules","RDoc::Store","RDoc/Store.html#method-i-all_modules","()","<p>Returns all modules discovered by RDoc\n"],["all_names","Gem::Specification","Gem/Specification.html#method-c-all_names","()","<p>Return full names of all specs in sorted order.\n"],["all_requirements","Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails","Gem/Resolver/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-all_requirements","()","<p>@return [Array] array of all the requirements that led to the need for\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">this</span> <span class=\"ruby-identifier\">unwind</span>\n</pre>\n"],["all_specs","Gem::AvailableSet","Gem/AvailableSet.html#method-i-all_specs","()",""],["all_symbols","Symbol","Symbol.html#method-c-all_symbols","()","<p>Returns an array of all symbols currently in Ruby’s symbol table:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Symbol</span>.<span class=\"ruby-identifier\">all_symbols</span>.<span class=\"ruby-identifier\">size</span>    <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["all_tokens","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-all_tokens","()","<p>Returns all tokens for the input script regardless the receiver node. Returns <code>nil</code> if <code>keep_tokens</code> is not …\n"],["allbits?","Integer","Integer.html#method-i-allbits-3F","(p1)","<p>Returns <code>true</code> if all bits that are set (=1) in <code>mask</code> are also set in <code>self</code>; returns <code>false</code> otherwise.\n<p>Example …\n"],["allbits?","Ripper::Lexer::State","Ripper/Lexer/State.html#method-i-allbits-3F","(i)",""],["allocate","Class","Class.html#method-i-allocate","()","<p>Allocates space for a new object of <em>class</em>’s class and does not call initialize on the new instance. …\n"],["allocation_class_path","ObjectSpace","ObjectSpace.html#method-c-allocation_class_path","(p1)","<p>Returns the class for the given <code>object</code>.\n\n<pre>class A\n  def foo\n    ObjectSpace::trace_object_allocations do ...</pre>\n"],["allocation_generation","ObjectSpace","ObjectSpace.html#method-c-allocation_generation","(p1)","<p>Returns garbage collector generation for the given <code>object</code>.\n\n<pre>class B\n  include ObjectSpace\n\n  def foo\n  ...</pre>\n"],["allocation_method_id","ObjectSpace","ObjectSpace.html#method-c-allocation_method_id","(p1)","<p>Returns the method identifier for the given <code>object</code>.\n\n<pre>class A\n  include ObjectSpace\n\n  def foo\n    trace_object_allocations ...</pre>\n"],["allocation_sourcefile","ObjectSpace","ObjectSpace.html#method-c-allocation_sourcefile","(p1)","<p>Returns the source file origin from the given <code>object</code>.\n<p>See ::trace_object_allocations for more information …\n"],["allocation_sourceline","ObjectSpace","ObjectSpace.html#method-c-allocation_sourceline","(p1)","<p>Returns the original line from source for from the given <code>object</code>.\n<p>See ::trace_object_allocations for more …\n"],["allow_addr?","ACL","ACL.html#method-i-allow_addr-3F","(addr)","<p>Allow connections from addrinfo <code>addr</code>?  It must be formatted like Socket#peeraddr:\n\n<pre>[&quot;AF_INET&quot;, 10, &quot;lc630&quot;, ...</pre>\n"],["allow_missing?","Gem::Resolver","Gem/Resolver.html#method-i-allow_missing-3F","(dependency)",""],["allow_missing?","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-allow_missing-3F","(dependency)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#allow_missing?)\n"],["allow_missing?","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-allow_missing-3F","(dependency)","<p>Returns whether this dependency, which has no possible matching specifications, can safely be ignored. …\n"],["allow_nan?","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-allow_nan-3F","()","<p>Returns true, if NaN, Infinity, and -Infinity should be generated, otherwise returns false.\n"],["allow_reentry","TracePoint","TracePoint.html#method-c-allow_reentry","()","<p>In general, while a TracePoint callback is running, other registered callbacks are not called to avoid …\n"],["allow_socket?","ACL","ACL.html#method-i-allow_socket-3F","(soc)","<p>Allow connections from Socket <code>soc</code>?\n"],["alphanumeric","Random::Formatter","Random/Formatter.html#method-i-alphanumeric","(n=nil)","<p>Generate a random alphanumeric string.\n<p>The argument <em>n</em> specifies the length, in characters, of the alphanumeric …\n"],["alpn_protocol","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-alpn_protocol","()","<p>Returns the ALPN protocol string that was finally selected by the server during the handshake.\n"],["already_loaded?","Gem","Gem.html#method-c-already_loaded-3F","(file)",""],["alt_name_or_x509_entry","Gem::Security","Gem/Security.html#method-c-alt_name_or_x509_entry","(certificate, x509_entry)",""],["ambiguous_width","Reline::Core","Reline/Core.html#method-i-ambiguous_width","()",""],["amjd","Date","Date.html#method-i-amjd","()","<p>Returns the astronomical modified Julian day number.  This is a fractional number, which is not adjusted …\n"],["amount_constrained","Gem::Resolver","Gem/Resolver.html#method-i-amount_constrained","(dependency)","<p>returns an integer in (-infty, 0] a number closer to 0 means the dependency is less constraining\n<p>dependencies …\n"],["ancestor?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-ancestor-3F","(other)","<p>Is there a path from ‘other` to `self` following edges in the dependency graph? @return whether there …\n"],["ancestors","Module","Module.html#method-i-ancestors","()","<p>Returns a list of modules included/prepended in <em>mod</em> (including <em>mod</em> itself).\n\n<pre>module Mod\n  include Math ...</pre>\n"],["ancestors","RDoc::ClassModule","RDoc/ClassModule.html#method-i-ancestors","()","<p>Ancestors list for this ClassModule: the list of included modules (classes will add their superclass …\n"],["ancestors","RDoc::NormalClass","RDoc/NormalClass.html#method-i-ancestors","()","<p>The ancestors of this class including modules.  Unlike Module#ancestors, this class is not included in …\n"],["ancestors","RDoc::SingleClass","RDoc/SingleClass.html#method-i-ancestors","()","<p>Adds the superclass to the included modules.\n"],["ancestors","RDoc::Store","RDoc/Store.html#method-i-ancestors","()","<p>Ancestors cache accessor.  Maps a klass name to an Array of its ancestors in this store.  If Foo in this …\n"],["and!","IO::Buffer","IO/Buffer.html#method-i-and-21","(p1)","<p>Modify the source buffer in place by applying the binary AND operation to the source, using the mask, …\n"],["angle","Complex","Complex.html#method-i-angle","()","<p>Returns the angle part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">arg</span>  <span class=\"ruby-comment\">#=&gt; 1.5707963267948966</span>\n</pre>\n"],["angle","Float","Float.html#method-i-angle","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["angle","Numeric","Numeric.html#method-i-angle","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["announce_deletion_of","Gem::Uninstaller","Gem/Uninstaller.html#method-i-announce_deletion_of","(spec)",""],["any?","Array","Array.html#method-i-any-3F","(*args)","<p>Returns <code>true</code> if any element of <code>self</code> meets a given criterion.\n<p>With no block given and no argument, returns …\n"],["any?","Enumerable","Enumerable.html#method-i-any-3F","(*args)","<p>Returns whether any element meets a given criterion.\n<p>With no argument and no block, returns whether any …\n"],["any?","Hash","Hash.html#method-i-any-3F","(*args)","<p>Returns <code>true</code> if any element satisfies a given criterion; <code>false</code> otherwise.\n<p>With no argument and no block, …\n"],["any?","Racc::DebugFlags","Racc/DebugFlags.html#method-i-any-3F","()",""],["any_content","RDoc::Context","RDoc/Context.html#method-i-any_content","(includes = true)","<p>Is there any content?\n<p>This means any of: comment, aliases, methods, attributes, external aliases, require, …\n"],["any_to_s","DRb::DRbServer","DRb/DRbServer.html#method-i-any_to_s","(obj)","<p>Coerce an object to a string, providing our own representation if to_s is not defined for the object. …\n"],["anybits?","Integer","Integer.html#method-i-anybits-3F","(p1)","<p>Returns <code>true</code> if any bit that is set (=1) in <code>mask</code> is also set in <code>self</code>; returns <code>false</code> otherwise.\n<p>Example …\n"],["anybits?","Ripper::Lexer::State","Ripper/Lexer/State.html#method-i-anybits-3F","(i)",""],["api_key","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-api_key","()","<p>The API key from the command options or from the user’s configuration.\n"],["api_key_forbidden?","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-api_key_forbidden-3F","(response)",""],["api_keys","Gem::ConfigFile","Gem/ConfigFile.html#method-i-api_keys","()","<p>Hash of RubyGems.org and alternate API keys\n"],["app_cache","Bundler","Bundler.html#method-c-app_cache","(custom_path = nil)",""],["app_config_path","Bundler","Bundler.html#method-c-app_config_path","()",""],["app_script_text","Gem::Installer","Gem/Installer.html#method-i-app_script_text","(bin_file_name)","<p>Return the text for an application file.\n"],["append","Array","Array.html#method-i-append","(*args)","<p>Appends trailing elements.\n<p>Appends each argument in <code>objects</code> to <code>self</code>;  returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["append","OptionParser::List","OptionParser/List.html#method-i-append","(*args)","<p>Appends <code>switch</code> at the tail of the list, and associates short, long and negated long options. Arguments …\n"],["append","Reline::KillRing","Reline/KillRing.html#method-i-append","(string, before_p = false)",""],["append_cflags","MakeMakefile","MakeMakefile.html#method-i-append_cflags","(flags, *opts)","<p>Check whether each given C compiler flag is acceptable and append it to <code>$CFLAGS</code> if so.\n<p><code>flags</code> &mdash; a C compiler …\n\n"],["append_features","Module","Module.html#method-i-append_features","(p1)","<p>When this module is included in another, Ruby calls #append_features in this module, passing it the receiving …\n"],["append_features","Singleton","Singleton.html#method-c-append_features","(mod)",""],["append_field_value","Net::HTTPHeader","Net/HTTPHeader.html#method-i-append_field_value","(ary, val)",""],["approximate_recommendation","Gem::Version","Gem/Version.html#method-i-approximate_recommendation","()","<p>A recommended version for use with a ~&gt; Requirement.\n"],["aref","RDoc::Alias","RDoc/Alias.html#method-i-aref","()","<p>HTML fragment reference for this alias\n"],["aref","RDoc::ClassModule","RDoc/ClassModule.html#method-i-aref","()","<p>HTML fragment reference for this module or class.  See RDoc::NormalClass#aref and RDoc::NormalModule#aref …\n"],["aref","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-aref","()","<p>HTML fragment reference for this method\n"],["aref_prefix","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code> is ‘method’.\n"],["aref_prefix","RDoc::Attr","RDoc/Attr.html#method-i-aref_prefix","()","<p>The #aref prefix for attributes\n"],["aref_prefix","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code>, defined by subclasses.\n"],["arg","Complex","Complex.html#method-i-arg","()","<p>Returns the angle part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">arg</span>  <span class=\"ruby-comment\">#=&gt; 1.5707963267948966</span>\n</pre>\n"],["arg","Float","Float.html#method-i-arg","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["arg","Numeric","Numeric.html#method-i-arg","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["arglists","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-arglists","()","<p>The call_seq or the param_seq with method name, if there is no call_seq.\n<p>Use this for displaying a method’s …\n"],["args","Gem::QueryUtils","Gem/QueryUtils.html#method-i-args","()",""],["args","NoMethodError","NoMethodError.html#method-i-args","()","<p>Return the arguments passed in as the third parameter to the constructor.\n"],["args_directive","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-args_directive","baz","<p>The <code>:args:</code> directive overrides the actual arguments found in the Ruby code.\n<p>Click on the calling sequence …\n"],["argumentable?","Reline::LineEditor","Reline/LineEditor.html#method-i-argumentable-3F","(method_obj)",""],["arguments","Gem::Command","Gem/Command.html#method-i-arguments","()","<p>Override to provide details of the arguments a command takes.  It should return a left-justified string, …\n"],["argv","ARGF","ARGF.html#method-i-argv","()","<p>Returns the <code>ARGV</code> array, which contains the arguments passed to your script, one per element.\n<p>For example: …\n"],["argv0","Process","Process.html#method-c-argv0","()","<p>Returns the name of the script being executed.  The value is not affected by assigning a new value to …\n"],["arity","Method","Method.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method. Returns a nonnegative integer …\n"],["arity","Proc","Proc.html#method-i-arity","()","<p>Returns the number of mandatory arguments. If the block is declared to take no arguments, returns 0. …\n"],["arity","UnboundMethod","UnboundMethod.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method. Returns a nonnegative integer …\n"],["array","WIN32OLE::Variant","WIN32OLE/Variant.html#method-c-array","(p1, p2)","<p>Returns Ruby object wrapping OLE variant whose variant type is VT_ARRAY. The first argument should be …\n"],["array_attributes","Gem::Specification","Gem/Specification.html#method-c-array_attributes","()","<p>Return the list of all array-oriented instance variables.\n"],["array_nl","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-array_nl","()","<p>This string is put at the end of a line that holds a JSON array.\n"],["array_nl=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-array_nl-3D","(p1)","<p>This string is put at the end of a line that holds a JSON array.\n"],["as_json","BigDecimal","BigDecimal.html#method-i-as_json","(*)","<p>Marshal the object to JSON.\n<p>method used for JSON marshalling support.\n"],["as_json","Complex","Complex.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this object.\n"],["as_json","Date","Date.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this object.\n"],["as_json","DateTime","DateTime.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this object.\n"],["as_json","Exception","Exception.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this object.\n"],["as_json","JSON::GenericObject","JSON/GenericObject.html#method-i-as_json","(*)",""],["as_json","OpenStruct","OpenStruct.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this object.\n"],["as_json","Range","Range.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this object.\n"],["as_json","Rational","Rational.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this object.\n"],["as_json","Regexp","Regexp.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this object.\n"],["as_json","Set","Set.html#method-i-as_json","(*)","<p>Marshal the object to JSON.\n<p>method used for JSON marshalling support.\n"],["as_json","Struct","Struct.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this object.\n"],["as_json","Symbol","Symbol.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this object.\n"],["as_json","Time","Time.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this object.\n"],["ascend","Pathname","Pathname.html#method-i-ascend","()","<p>Iterates over and yields a new Pathname object for each element in the given path in ascending order. …\n"],["ascii_compatible?","Encoding","Encoding.html#method-i-ascii_compatible-3F","()","<p>Returns whether ASCII-compatible or not.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">ascii_compatible?</span>     <span class=\"ruby-comment\">#=&gt; true</span>\n<span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_16BE</span>.<span class=\"ruby-identifier\">ascii_compatible?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ascii_only?","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-ascii_only-3F","()","<p>Returns true, if only ASCII characters should be generated. Otherwise returns false.\n"],["ascii_only?","String","String.html#method-i-ascii_only-3F","()","<p>Returns <code>true</code> if <code>self</code> contains only ASCII characters, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;abc&#39;</span>.<span class=\"ruby-identifier\">ascii_only?</span>         <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["asciicompat_encoding","Encoding::Converter","Encoding/Converter.html#method-c-asciicompat_encoding","(p1)","<p>Returns the corresponding ASCII compatible encoding.\n<p>Returns nil if the argument is an ASCII compatible …\n"],["asctime","Date","Date.html#method-i-asctime","()","<p>Equivalent to #strftime with argument <code>&#39;%a %b %e %T %Y&#39;</code> (or its shorthand form <code>&#39;%c&#39;</code>): …\n"],["asctime","Time","Time.html#method-i-asctime","()","<p>Returns a string representation of <code>self</code>, formatted by <code>strftime(&#39;%a %b %e %T %Y&#39;)</code> or its shorthand …\n"],["asin","Math","Math.html#method-c-asin","(p1)","<p>Returns the arc sine of <code>x</code>.\n<p>Domain: <code>[-1, -1]</code>.\n<p>Range: <code>[-PI/2, PI/2]</code>.\n"],["asinh","Math","Math.html#method-c-asinh","(p1)","<p>Returns the inverse hyperbolic sine of <code>x</code>.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[-INFINITY, INFINITY]</code>. …\n"],["ask","Gem::MockGemUi","Gem/MockGemUi.html#method-i-ask","(question)",""],["ask","Gem::StreamUI","Gem/StreamUI.html#method-i-ask","(question)","<p>Ask a question.  Returns an answer if connected to a tty, nil otherwise.\n"],["ask","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask","(question)","<p>Asks a <code>question</code> and returns the answer.\n"],["ask_for_password","Gem::StreamUI","Gem/StreamUI.html#method-i-ask_for_password","(question)","<p>Ask for a password. Does not echo response to terminal.\n"],["ask_for_password","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask_for_password","(prompt)","<p>Asks for a password with a <code>prompt</code>\n"],["ask_otp","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-ask_otp","()",""],["ask_yes_no","Gem::StreamUI","Gem/StreamUI.html#method-i-ask_yes_no","(question, default=nil)","<p>Ask a question.  Returns a true for yes, false for no.  If not connected to a tty, raises an exception …\n"],["ask_yes_no","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask_yes_no","(question, default = nil)","<p>Asks a yes or no <code>question</code>.  Returns true for yes, false for no.\n"],["asn1_flag","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-asn1_flag","()","<p>Returns the flags set on the group.\n<p>See also #asn1_flag=.\n"],["asn1_flag=","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-asn1_flag-3D","(p1)","<p>Sets flags on the group. The flag value is used to determine how to encode the group: encode explicit …\n"],["asset","RDoc::Servlet","RDoc/Servlet.html#method-i-asset","(generator_name, req, res)","<p>Serves the asset at the path in <code>req</code> for <code>generator_name</code> via <code>res</code>.\n"],["assign_names","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-i-assign_names","(members)","<p>Set the names of the <code>members</code> in this C struct\n"],["assignment_expression?","IRB::Irb","IRB/Irb.html#method-i-assignment_expression-3F","(line)",""],["assoc","Array","Array.html#method-i-assoc","(p1)","<p>Returns the first element in <code>self</code> that is an Array whose first element <code>==</code> <code>obj</code>:\n\n<pre>a = [{foo: 0}, [2, 4], ...</pre>\n"],["assoc","ENV","ENV.html#method-c-assoc","(p1)","<p>Returns a 2-element Array containing the name and value of the environment variable for <code>name</code> if it exists: …\n"],["assoc","Hash","Hash.html#method-i-assoc","(p1)","<p>If the given <code>key</code> is found, returns a 2-element Array containing that key and its value:\n\n<pre>h = {foo: 0, bar: ...</pre>\n"],["at","Array","Array.html#method-i-at","(p1)","<p>Returns the element at Integer offset <code>index</code>; does not modify <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">at</span>(<span class=\"ruby-value\">0</span>) <span class=\"ruby-comment\"># =&gt; :foo ...</span>\n</pre>\n"],["at","Gem::Installer","Gem/Installer.html#method-c-at","(path, options = {})","<p>Construct an installer object for the gem file located at <code>path</code>\n"],["at","Time","Time.html#method-c-at","(time, subsec = false, unit = :microsecond, in: nil)","<p>Returns a new Time object based on the given arguments.\n<p>Required argument <code>time</code> may be either of:\n<p>A Time …\n"],["at_exit","Kernel","Kernel.html#method-i-at_exit","()","<p>Converts <em>block</em> to a <code>Proc</code> object (and therefore binds it at the point of call) and registers it for execution …\n"],["atan","BigMath","BigMath.html#method-i-atan","(x, prec)","<p>Computes the arctangent of <code>decimal</code> to the specified number of digits of precision, <code>numeric</code>.\n<p>If <code>decimal</code> …\n"],["atan","Math","Math.html#method-c-atan","(p1)","<p>Returns the arc tangent of <code>x</code>.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[-PI/2, PI/2]  </code>.\n"],["atan2","Math","Math.html#method-c-atan2","(p1, p2)","<p>Returns the arc tangent of <code>y</code> and <code>x</code> in radians.\n<p>Domain of <code>y</code>: <code>[-INFINITY, INFINITY]</code>.\n<p>Domain of <code>x</code>: <code>[-INFINITY,</code> …\n"],["atanh","Math","Math.html#method-c-atanh","(p1)","<p>Returns the inverse hyperbolic tangent of <code>x</code>.\n<p>Domain: <code>[-1, 1]</code>.\n<p>Range: <code>[-INFINITY, INFINITY]</code>.\n"],["atime","File","File.html#method-c-atime","(p1)","<p>Returns the last access time for the named file as a Time object.\n<p><em>file_name</em> can be an IO object.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">atime</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["atime","File","File.html#method-i-atime","()","<p>Returns the last access time (a Time object) for <em>file</em>, or epoch if <em>file</em> has not been accessed.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">atime</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["atime","File::Stat","File/Stat.html#method-i-atime","()","<p>Returns the last access time for this file as an object of class Time.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">atime</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["atime","Pathname","Pathname.html#method-i-atime","()","<p>Returns the last access time for the file.\n<p>See File.atime.\n"],["atom_symbol","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-atom_symbol","(token)",""],["attach_correctable","Gem::UnknownCommandError","Gem/UnknownCommandError.html#method-c-attach_correctable","()",""],["attached_object","Class","Class.html#method-i-attached_object","()","<p>Returns the object for which the receiver is the singleton class.\n<p>Raises an TypeError if the class is …\n"],["attempt_to_activate","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-attempt_to_activate","()","<p>Attempts to activate the current {#possibility} @return [void]\n"],["attempt_to_filter_existing_spec","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-attempt_to_filter_existing_spec","(vertex)","<p>Attempts to update the existing vertex’s ‘PossibilitySet` with a filtered version @return [void] …\n"],["attr","Module","Module.html#method-i-attr","(*args)","<p>The first form is equivalent to #attr_reader. The second form is equivalent to <code>attr_accessor(name)</code> but …\n"],["attr_accessor","Module","Module.html#method-i-attr_accessor","(*args)","<p>Defines a named attribute for this module, where the name is <em>symbol.</em><code>id2name</code>, creating an instance variable …\n"],["attr_reader","Module","Module.html#method-i-attr_reader","(*args)","<p>Creates instance variables and corresponding methods that return the value of each instance variable. …\n"],["attr_writer","Module","Module.html#method-i-attr_writer","(*args)","<p>Creates an accessor method to allow assignment to the attribute <em>symbol</em><code>.id2name</code>. String arguments are …\n"],["attribute_names","Gem::Specification","Gem/Specification.html#method-c-attribute_names","()","<p>Return the list of all instance variables.\n"],["attributes","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-attributes","()",""],["attributes","RDoc::Store","RDoc/Store.html#method-i-attributes","()","<p>Attributes cache accessor.  Maps a class to an Array of its attributes.\n"],["attributes","URI::LDAP","URI/LDAP.html#method-i-attributes","()","<p>Returns attributes.\n"],["attributes=","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-attributes-3D","(p1)",""],["attributes=","URI::LDAP","URI/LDAP.html#method-i-attributes-3D","(val)","<p>Setter for attributes <code>val</code>.\n"],["auth_data=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-auth_data-3D","(p1)","<p>Sets the cipher’s additional authenticated data. This field must be set when using AEAD cipher modes …\n"],["auth_tag","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-auth_tag","(p1 = v1)","<p>Gets the authentication tag generated by Authenticated Encryption Cipher modes (GCM for example). This …\n"],["auth_tag=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-auth_tag-3D","(p1)","<p>Sets the authentication tag to verify the integrity of the ciphertext. This can be called only when the …\n"],["auth_tag_len=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-auth_tag_len-3D","(p1)","<p>Sets the length of the authentication tag to be generated or to be given for AEAD ciphers that requires …\n"],["authenticated?","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-authenticated-3F","()","<p>Indicated whether this Cipher instance uses an Authenticated Encryption mode.\n"],["author","Gem::Specification","Gem/Specification.html#method-i-author","()","<p>Singular reader for #authors.  Returns the first author in the list\n"],["author=","Gem::Specification","Gem/Specification.html#method-i-author-3D","(o)","<p>Singular (alternative) writer for #authors\n<p>Usage:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">author</span> = <span class=\"ruby-string\">&#39;John Jones&#39;</span>\n</pre>\n"],["authority","URI::HTTP","URI/HTTP.html#method-i-authority","()","<p>Description\n<p>Returns the authority for an HTTP uri, as defined in datatracker.ietf.org/doc/html/rfc3986/#section-3.2 …\n"],["authority_key_identifier","OpenSSL::X509::Extension::AuthorityKeyIdentifier","OpenSSL/X509/Extension/AuthorityKeyIdentifier.html#method-i-authority_key_identifier","()","<p>Get the issuing certificate’s key identifier from the authorityKeyIdentifier extension, as described …\n"],["authors","Gem::Specification","Gem/Specification.html#method-i-authors","()","<p>The list of author names who wrote this gem.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">authors</span> = [<span class=\"ruby-string\">&#39;Chad Fowler&#39;</span>, <span class=\"ruby-string\">&#39;Jim Weirich&#39;</span>, <span class=\"ruby-string\">&#39;Rich Kilmer&#39;</span>]\n</pre>\n"],["authors=","Gem::Specification","Gem/Specification.html#method-i-authors-3D","(value)","<p>A list of authors for this gem.\n<p>Alternatively, a single author can be specified by assigning a string …\n"],["auto_compact","GC","GC.html#method-c-auto_compact","()","<p>Returns whether or not automatic compaction has been enabled.\n"],["auto_compact=","GC","GC.html#method-c-auto_compact-3D","(p1)","<p>Updates automatic compaction mode.\n<p>When enabled, the compactor will execute on every major collection. …\n"],["auto_indent","IRB::RelineInputMethod","IRB/RelineInputMethod.html#method-i-auto_indent","(&block)",""],["auto_indent_proc=","Reline::Core","Reline/Core.html#method-i-auto_indent_proc-3D","(p)",""],["autoclose=","IO","IO.html#method-i-autoclose-3D","(p1)","<p>Sets auto-close flag.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;/dev/null&quot;</span>)\n<span class=\"ruby-constant\">IO</span>.<span class=\"ruby-identifier\">for_fd</span>(<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">fileno</span>)\n<span class=\"ruby-comment\"># ...</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span> <span class=\"ruby-comment\"># may cause Errno::EBADF ...</span>\n</pre>\n"],["autoclose?","IO","IO.html#method-i-autoclose-3F","()","<p>Returns <code>true</code> if the underlying file descriptor of <em>ios</em> will be closed automatically at its finalization, …\n"],["autoload","Kernel","Kernel.html#method-i-autoload","(p1, p2)","\n<pre>Registers _filename_ to be loaded (using Kernel::require)\nthe first time that _const_ (which may be a ...</pre>\n"],["autoload","Module","Module.html#method-i-autoload","(p1, p2)","\n<pre>Registers _filename_ to be loaded (using Kernel::require)\nthe first time that _const_ (which may be a ...</pre>\n"],["autoload?","Kernel","Kernel.html#method-i-autoload-3F","(*args)","<p>Returns <em>filename</em> to be loaded if <em>name</em> is registered as <code>autoload</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">autoload</span>(<span class=\"ruby-value\">:B</span>, <span class=\"ruby-string\">&quot;b&quot;</span>)\n<span class=\"ruby-identifier\">autoload?</span>(<span class=\"ruby-value\">:B</span>)      <span class=\"ruby-operator\">...</span>\n</pre>\n"],["autoload?","Module","Module.html#method-i-autoload-3F","(*args)","<p>Returns <em>filename</em> to be loaded if <em>name</em> is registered as <code>autoload</code> in the namespace of <em>mod</em> or one of its …\n"],["avail_in","Zlib::ZStream","Zlib/ZStream.html#method-i-avail_in","()","<p>Returns bytes of data in the input buffer. Normally, returns 0.\n"],["avail_out","Zlib::ZStream","Zlib/ZStream.html#method-i-avail_out","()","<p>Returns number of bytes of free spaces in output buffer.  Because the free space is allocated automatically, …\n"],["avail_out=","Zlib::ZStream","Zlib/ZStream.html#method-i-avail_out-3D","(p1)","<p>Allocates <code>size</code> bytes of free space in the output buffer. If there are more than <code>size</code> bytes already in …\n"],["available_specs","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-available_specs","(type)","<p>Returns a list of gems available for each source in Gem::sources.\n<p><code>type</code> can be one of 3 values: :released …\n"],["b","String","String.html#method-i-b","()","<p>Returns a copy of <code>self</code> that has ASCII-8BIT encoding; the underlying bytes are not modified:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&quot;\\x99&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["backtrace","Exception","Exception.html#method-i-backtrace","()","<p>Returns any backtrace associated with the exception. The backtrace is an array of strings, each containing …\n"],["backtrace","Fiber","Fiber.html#method-i-backtrace","(*args)","<p>Returns the current execution stack of the fiber. <code>start</code>, <code>count</code> and <code>end</code> allow to select only parts of …\n"],["backtrace","Gem::ConfigFile","Gem/ConfigFile.html#method-i-backtrace","()","<p>True if the backtrace option has been specified, or debug is on.\n"],["backtrace","Gem::StreamUI","Gem/StreamUI.html#method-i-backtrace","(exception)","<p>Prints a formatted backtrace to the errors stream if backtraces are enabled.\n"],["backtrace","Thread","Thread.html#method-i-backtrace","(*args)","<p>Returns the current backtrace of the target thread.\n"],["backtrace_locations","Exception","Exception.html#method-i-backtrace_locations","()","<p>Returns any backtrace associated with the exception. This method is similar to Exception#backtrace, but …\n"],["backtrace_locations","Fiber","Fiber.html#method-i-backtrace_locations","(*args)","<p>Like #backtrace, but returns each line of the execution stack as a Thread::Backtrace::Location. Accepts …\n"],["backtrace_locations","Thread","Thread.html#method-i-backtrace_locations","(*args)","<p>Returns the execution stack for the target thread—an array containing backtrace location objects.\n<p>See …\n"],["backtracking!","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-backtracking-21","()",""],["backward_char","Reline::LineEditor","Reline/LineEditor.html#method-i-backward_char","(key, arg: 1)",""],["backward_delete_char","Reline::LineEditor","Reline/LineEditor.html#method-i-backward_delete_char","(key, arg: 1)",""],["backward_word","Reline::LineEditor","Reline/LineEditor.html#method-i-backward_word","(key)",""],["banner","OptionParser","OptionParser.html#method-i-banner","()","<p>Heading banner preceding summary.\n"],["base","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-base","(href = \"\")","<p>Generate a Document Base URI element as a String.\n<p><code>href</code> can either by a string, giving the base URL for …\n"],["base","OptionParser","OptionParser.html#method-i-base","()","<p>Subject of #on_tail.\n"],["base64","Random::Formatter","Random/Formatter.html#method-i-base64","(n=nil)","<p>Generate a random base64 string.\n<p>The argument <em>n</em> specifies the length, in bytes, of the random number to …\n"],["base64_uri_escape","Gem::S3URISigner","Gem/S3URISigner.html#method-i-base64_uri_escape","(str)",""],["base64digest","Digest::Class","Digest/Class.html#method-c-base64digest","(str, *args)","<p>Returns the base64 encoded hash value of a given <em>string</em>.  The return value is properly padded with ‘=’ …\n"],["base64digest","Digest::Instance","Digest/Instance.html#method-i-base64digest","(str = nil)","<p>If none is given, returns the resulting hash value of the digest in a base64 encoded form, keeping the …\n"],["base64digest","OpenSSL::HMAC","OpenSSL/HMAC.html#method-c-base64digest","(digest, key, data)","<p>Returns the authentication code as a Base64-encoded string. The <em>digest</em> parameter specifies the digest …\n"],["base64digest","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-base64digest","()","<p>Returns the authentication code an a Base64-encoded string.\n"],["base64digest!","Digest::Instance","Digest/Instance.html#method-i-base64digest-21","()","<p>Returns the resulting hash value and resets the digest to the initial state.\n"],["base_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-base_dir","()","<p>Returns the full path to the base gem directory.\n<p>eg: /usr/local/lib/ruby/gems/1.8\n"],["base_dir","Gem::Specification","Gem/Specification.html#method-i-base_dir","()",""],["base_label","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-base_label","()","<p>Returns the base label of this instruction sequence.\n<p>For example, using irb:\n\n<pre>iseq = RubyVM::InstructionSequence.compile(&#39;num ...</pre>\n"],["base_label","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-base_label","()","<p>Returns the base label of this frame.\n<p>Usually same as #label, without decoration.\n"],["base_name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-base_name","()","<p>Base name of this file\n"],["basename","File","File.html#method-c-basename","(*args)","<p>Returns the last component of the filename given in <em>file_name</em> (after first stripping trailing separators), …\n"],["basename","Pathname","Pathname.html#method-i-basename","(p1 = v1)","<p>Returns the last component of the path.\n<p>See File.basename.\n"],["bash_prolog_script","Gem::Installer","Gem/Installer.html#method-i-bash_prolog_script","()",""],["basic","OpenSSL::OCSP::Response","OpenSSL/OCSP/Response.html#method-i-basic","()","<p>Returns a BasicResponse for this response\n"],["basic_auth","Net::HTTPHeader","Net/HTTPHeader.html#method-i-basic_auth","(account, password)","<p>Set the Authorization: header for “Basic” authorization.\n"],["basic_encode","Net::HTTPHeader","Net/HTTPHeader.html#method-i-basic_encode","(account, password)",""],["basic_quote_characters","Readline","Readline.html#method-c-basic_quote_characters","()","<p>Gets a list of quote characters which can cause a word break.\n<p>Raises NotImplementedError if the using …\n"],["basic_quote_characters=","Readline","Readline.html#method-c-basic_quote_characters-3D","(p1)","<p>Sets a list of quote characters which can cause a word break.\n<p>Raises NotImplementedError if the using …\n"],["basic_quote_characters=","Reline::Core","Reline/Core.html#method-i-basic_quote_characters-3D","(v)",""],["basic_word_break_characters","Readline","Readline.html#method-c-basic_word_break_characters","()","<p>Gets the basic list of characters that signal a break between words for the completer routine.\n<p>Raises …\n"],["basic_word_break_characters=","Readline","Readline.html#method-c-basic_word_break_characters-3D","(p1)","<p>Sets the basic list of characters that signal a break between words for the completer routine. The default …\n"],["basic_word_break_characters=","Reline::Core","Reline/Core.html#method-i-basic_word_break_characters-3D","(v)",""],["beep","IO","IO.html#method-i-beep","()",""],["before","Racc::LocationPointer","Racc/LocationPointer.html#method-i-before","(len)",""],["before_index","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-before_index","()",""],["before_lines","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-before_lines","()",""],["before_resolution","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-before_resolution","()","<p>Called before resolution begins.\n<p>@return [void]\n"],["before_running_rdoc","RDoc::Task","RDoc/Task.html#method-i-before_running_rdoc","(&block)","<p>The block passed to this method will be called just before running the RDoc generator. It is allowed …\n"],["begin","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-begin","()",""],["begin","MatchData","MatchData.html#method-i-begin","(p1)","<p>Returns the offset (in characters) of the beginning of the specified match.\n<p>When non-negative integer …\n"],["begin","Range","Range.html#method-i-begin","()","<p>Returns the object that defines the beginning of <code>self</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">begin</span> <span class=\"ruby-comment\"># =&gt; 1</span>\n(<span class=\"ruby-operator\">..</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">begin</span>  <span class=\"ruby-comment\"># =&gt; nil</span>\n</pre>\n<p>Related: …\n"],["begin_adding","RDoc::Stats","RDoc/Stats.html#method-i-begin_adding","()","<p>Call this to mark the beginning of parsing for display purposes\n"],["begin_transport","Net::HTTP","Net/HTTP.html#method-i-begin_transport","(req)",""],["beginning_of_line","Reline::LineEditor","Reline/LineEditor.html#method-i-beginning_of_line","(key)",""],["beginning_of_line?","StringScanner","StringScanner.html#method-i-beginning_of_line-3F","()","<p>Returns <code>true</code> if and only if the scan pointer is at the beginning of the line.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">StringScanner</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;test\\ntest\\n&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["begins?","Gem::Command","Gem/Command.html#method-i-begins-3F","(long, short)","<p>True if <code>long</code> begins with the characters from <code>short</code>.\n"],["benchmark","Benchmark","Benchmark.html#method-i-benchmark","(caption = \"\", label_width = nil, format = nil, *labels)","<p>Invokes the block with a Benchmark::Report object, which may be used to collect and report on the results …\n"],["benchmark","Benchmark","Benchmark.html#method-c-benchmark","(caption = \"\", label_width = nil, format = nil, *labels)","<p>Invokes the block with a Benchmark::Report object, which may be used to collect and report on the results …\n"],["between?","Comparable","Comparable.html#method-i-between-3F","(p1, p2)","<p>Returns <code>false</code> if <em>obj</em> <code>&lt;=&gt;</code> <em>min</em> is less than zero or if <em>obj</em> <code>&lt;=&gt;</code> <em>max</em> is greater than zero, <code>true</code> …\n"],["bin_dir","Gem::Specification","Gem/Specification.html#method-i-bin_dir","()","<p>Returns the full path to installed gem’s bin directory.\n<p>NOTE: do not confuse this with <code>bindir</code>, which …\n"],["bin_file","Gem::Specification","Gem/Specification.html#method-i-bin_file","(name)","<p>Returns the full path to an executable named <code>name</code> in this gem.\n"],["bin_file_names","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-bin_file_names","()",""],["bin_for_find","Rinda::TupleBag","Rinda/TupleBag.html#method-i-bin_for_find","(template)",""],["bin_key","Rinda::TupleBag","Rinda/TupleBag.html#method-i-bin_key","(tuple)",""],["bin_path","Bundler","Bundler.html#method-c-bin_path","()","<p>Returns absolute location of where binstubs are installed to.\n"],["bin_path","Gem","Gem.html#method-c-bin_path","(name, exec_name = nil, *requirements)","<p>Find the full path to the executable for gem <code>name</code>.  If the <code>exec_name</code> is not given, an exception will …\n"],["binary?","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-binary-3F","(string)",""],["binary?","RDoc::Parser","RDoc/Parser.html#method-c-binary-3F","(file)","<p>Determines if the file is a “binary” file which basically means it has content that an RDoc …\n"],["binary_mode","Gem","Gem.html#method-c-binary_mode","()","<p>The mode needed to read a file as straight binary.\n"],["bind","Addrinfo","Addrinfo.html#method-i-bind","()","<p>creates a socket bound to self.\n<p>If a block is given, it is called with the socket and the value of the …\n"],["bind","Fiddle::Importer","Fiddle/Importer.html#method-i-bind","(signature, *opts, &blk)","<p>Creates a global method from the given C <code>signature</code> using the given <code>opts</code> as bind parameters with the given …\n"],["bind","Socket","Socket.html#method-i-bind","(p1)","<p>Binds to the given local address.\n<p>Parameter\n<p><code>local_sockaddr</code> - the <code>struct</code> sockaddr contained in a string …\n"],["bind","UDPSocket","UDPSocket.html#method-i-bind","(p1, p2)","<p>Binds <em>udpsocket</em> to <em>host</em>:<em>port</em>.\n\n<pre>u1 = UDPSocket.new\nu1.bind(&quot;127.0.0.1&quot;, 4913)\nu1.send &quot;message-to-self&quot;, ...</pre>\n"],["bind","UnboundMethod","UnboundMethod.html#method-i-bind","(p1)","<p>Bind <em>umeth</em> to <em>obj</em>. If Klass was the class from which <em>umeth</em> was obtained, <code>obj.kind_of?(Klass)</code> must be …\n"],["bind_call","UnboundMethod","UnboundMethod.html#method-i-bind_call","(*args)","<p>Bind <em>umeth</em> to <em>recv</em> and then invokes the method with the specified arguments. This is semantically equivalent …\n"],["bind_function","Fiddle::Importer","Fiddle/Importer.html#method-i-bind_function","(name, ctype, argtype, call_type = nil, &block)","<p>Returns a new closure wrapper for the <code>name</code> function.\n<p><code>ctype</code> is the return type of the function\n<p><code>argtype</code> is …\n"],["bind_key","Reline::Config","Reline/Config.html#method-i-bind_key","(key, func_name)",""],["bind_variable","Reline::Config","Reline/Config.html#method-i-bind_variable","(name, value)",""],["binding","Kernel","Kernel.html#method-i-binding","()","<p>Returns a <code>Binding</code> object, describing the variable and method bindings at the point of call. This object …\n"],["binding","Proc","Proc.html#method-i-binding","()","<p>Returns the binding associated with <em>prc</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">fred</span>(<span class=\"ruby-identifier\">param</span>)\n  <span class=\"ruby-identifier\">proc</span> {}\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">b</span> = <span class=\"ruby-identifier\">fred</span>(<span class=\"ruby-value\">99</span>)\n<span class=\"ruby-identifier\">eval</span>(<span class=\"ruby-string\">&quot;param&quot;</span>, <span class=\"ruby-identifier\">b</span>.<span class=\"ruby-identifier\">binding</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["binding","TracePoint","TracePoint.html#method-i-binding","()","<p>Return the generated binding object from event.\n<p>Note that for <code>c_call</code> and <code>c_return</code> events, the binding …\n"],["binding_requirement_in_set?","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-binding_requirement_in_set-3F","(requirement, possible_binding_requirements, possibilities)","<p>@param [Object] requirement we wish to check @param [Array] possible_binding_requirements array of requirements …\n"],["binding_requirements_for_conflict","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-binding_requirements_for_conflict","(conflict)","<p>@param [Conflict] conflict @return [Array] minimal array of requirements that would cause the passed …\n"],["bindir","Gem","Gem.html#method-c-bindir","(install_dir=Gem.dir)","<p>The path where gem executables are to be installed.\n"],["binmode","ARGF","ARGF.html#method-i-binmode","()","<p>Puts ARGF into binary mode. Once a stream is in binary mode, it cannot be reset to non-binary mode.  …\n"],["binmode","IO","IO.html#method-i-binmode","()","<p>Sets the stream’s data mode as binary (see Data Mode).\n<p>A stream’s data mode may not be changed …\n"],["binmode","StringIO","StringIO.html#method-i-binmode","()","<p>Sets the data mode in <code>self</code> to binary mode; see Data Mode.\n"],["binmode?","ARGF","ARGF.html#method-i-binmode-3F","()","<p>Returns true if ARGF is being read in binary mode; false otherwise. To enable binary mode use ARGF.binmode …\n"],["binmode?","CSV","CSV.html#method-i-binmode-3F","()",""],["binmode?","IO","IO.html#method-i-binmode-3F","()","<p>Returns <code>true</code> if the stream is on binary mode, <code>false</code> otherwise. See Data Mode.\n"],["binread","IO","IO.html#method-c-binread","(p1, p2 = v2, p3 = v3)","<p>Behaves like IO.read, except that the stream is opened in binary mode with ASCII-8BIT encoding.\n<p>When called …\n"],["binread","Pathname","Pathname.html#method-i-binread","(p1 = v1, p2 = v2)","<p>Returns all the bytes from the file, or the first <code>N</code> if specified.\n<p>See File.binread.\n"],["binwrite","IO","IO.html#method-c-binwrite","(*args)","<p>Behaves like IO.write, except that the stream is opened in binary mode with ASCII-8BIT encoding.\n<p>When …\n"],["binwrite","Pathname","Pathname.html#method-i-binwrite","(p1 = v1, p2 = v2, p3 = v3)","<p>Writes <code>contents</code> to the file, opening it in binary mode.\n<p>See File.binwrite.\n"],["birthtime","File","File.html#method-i-birthtime","()","<p>Returns the birth time for <em>file</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">birthtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n<p>If the …\n"],["birthtime","File","File.html#method-c-birthtime","(p1)",""],["birthtime","File::Stat","File/Stat.html#method-i-birthtime","()","<p>Returns the birth time for <em>stat</em>.\n<p>If the platform doesn’t have birthtime, raises NotImplementedError …\n"],["birthtime","Pathname","Pathname.html#method-i-birthtime","()","<p>Returns the birth time for the file. If the platform doesn’t have birthtime, raises NotImplementedError …\n"],["bit_length","Integer","Integer.html#method-i-bit_length","()","<p>Returns the number of bits of the value of <code>int</code>.\n<p>“Number of bits” means the bit position of the …\n"],["bit_set?","OpenSSL::BN","OpenSSL/BN.html#method-i-bit_set-3F","(p1)","<p>Tests bit <em>bit</em> in <em>bn</em> and returns <code>true</code> if set, <code>false</code> if not set.\n"],["blksize","File::Stat","File/Stat.html#method-i-blksize","()","<p>Returns the native file system’s block size. Will return <code>nil</code> on platforms that don’t support …\n"],["block","Fiber::Scheduler","Fiber/Scheduler.html#method-i-block","(p1, p2)","<p>Invoked by methods like Thread.join, and by Mutex, to signify that current Fiber is blocked until further …\n"],["block_given?","Kernel","Kernel.html#method-i-block_given-3F","()","<p>Returns <code>true</code> if <code>yield</code> would execute a block in the current context. The <code>iterator?</code> form is mildly deprecated. …\n"],["block_length","Digest::Base","Digest/Base.html#method-i-block_length","()","<p>Return the block length of the digest in bytes.\n"],["block_length","Digest::Instance","Digest/Instance.html#method-i-block_length","()","<p>Returns the block length of the digest.\n<p>This method is overridden by each implementation subclass.\n"],["block_length","Digest::SHA2","Digest/SHA2.html#method-i-block_length","()","<p>Return the block length of the digest in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Digest</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SHA256</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">block_length</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">8</span>\n<span class=\"ruby-comment\"># =&gt; 512</span>\n<span class=\"ruby-constant\">Digest</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SHA384</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">block_length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["block_length","OpenSSL::Digest","OpenSSL/Digest.html#method-i-block_length","()","<p>Returns the block length of the digest algorithm, i.e. the length in bytes of an individual block. Most …\n"],["block_params=","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-block_params-3D","(value)","<p>Attempts to sanitize the content passed by the Ruby parser: remove outer parentheses, etc.\n"],["block_size","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-block_size","()","<p>Returns the size in bytes of the blocks on which this Cipher operates on.\n"],["blockdev?","File","File.html#method-c-blockdev-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a block device, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">blockdev?</span>(<span class=\"ruby-string\">&#39;/dev/sda1&#39;</span>)       <span class=\"ruby-operator\">...</span>\n</pre>\n"],["blockdev?","File::Stat","File/Stat.html#method-i-blockdev-3F","()","<p>Returns <code>true</code> if the file is a block device, <code>false</code> if it isn’t or if the operating system doesn’t …\n"],["blockdev?","FileTest","FileTest.html#method-i-blockdev-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a block device, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">blockdev?</span>(<span class=\"ruby-string\">&#39;/dev/sda1&#39;</span>)       <span class=\"ruby-operator\">...</span>\n</pre>\n"],["blockdev?","Pathname","Pathname.html#method-i-blockdev-3F","()","<p>See FileTest.blockdev?.\n"],["blocking","Fiber","Fiber.html#method-c-blocking","()","<p>Forces the fiber to be blocking for the duration of the block. Returns the result of the block.\n<p>See the …\n"],["blocking?","Fiber","Fiber.html#method-c-blocking-3F","()","<p>Returns <code>false</code> if the current fiber is non-blocking. Fiber is non-blocking if it was created via passing …\n"],["blocking?","Fiber","Fiber.html#method-i-blocking-3F","()","<p>Returns <code>true</code> if <code>fiber</code> is blocking and <code>false</code> otherwise. Fiber is non-blocking if it was created via passing …\n"],["blockquote","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-blockquote","(cite = {})","<p>Generate a BlockQuote element as a string.\n<p><code>cite</code> can either be a string, give the URI for the source of …\n"],["blocks","File::Stat","File/Stat.html#method-i-blocks","()","<p>Returns the number of native file system blocks allocated for this file, or <code>nil</code> if the operating system …\n"],["bm","Benchmark","Benchmark.html#method-i-bm","(label_width = 0, *labels)","<p>A simple interface to the #benchmark method, #bm generates sequential reports with labels. <code>label_width</code> …\n"],["bm","Benchmark","Benchmark.html#method-c-bm","(label_width = 0, *labels)","<p>A simple interface to the #benchmark method, #bm generates sequential reports with labels. <code>label_width</code> …\n"],["bmbm","Benchmark","Benchmark.html#method-i-bmbm","(width = 0)","<p>Sometimes benchmark results are skewed because code executed earlier encounters different garbage collection …\n"],["bmbm","Benchmark","Benchmark.html#method-c-bmbm","(width = 0)","<p>Sometimes benchmark results are skewed because code executed earlier encounters different garbage collection …\n"],["body","Net::HTTPResponse","Net/HTTPResponse.html#method-i-body","()","<p>Returns the full entity body.\n<p>Calling this method a second or subsequent time will return the string already …\n"],["body=","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body-3D","(str)",""],["body=","Net::HTTPResponse","Net/HTTPResponse.html#method-i-body-3D","(value)","<p>Because it may be necessary to modify the body, Eg, decompression this method facilitates that.\n"],["body_encoding=","Net::HTTPResponse","Net/HTTPResponse.html#method-i-body_encoding-3D","(value)","<p>Set the encoding to use for the response body.  If given a String, find the related Encoding.\n"],["body_exist?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body_exist-3F","()",""],["body_permitted?","Net::HTTPResponse","Net/HTTPResponse.html#method-c-body_permitted-3F","()","<p>true if the response has a body.\n"],["body_stream=","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body_stream-3D","(input)",""],["bool","Socket::Option","Socket/Option.html#method-c-bool","(p1, p2, p3, p4)","<p>Creates a new Socket::Option object which contains boolean as data. Actually 0 or 1 as int is used.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["bool","Socket::Option","Socket/Option.html#method-i-bool","()","<p>Returns the data in <em>sockopt</em> as an boolean value.\n\n<pre>sockopt = Socket::Option.int(:INET, :SOCKET, :KEEPALIVE, ...</pre>\n"],["bool_attr","Racc::ParserFileGenerator::Params","Racc/ParserFileGenerator/Params.html#method-c-bool_attr","(name)",""],["both?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-both-3F","()","<p>Is fetching of local and remote information enabled?\n"],["bottom","IRB::Frame","IRB/Frame.html#method-c-bottom","(n = 0)","<p>Convenience method for Frame#bottom\n"],["bottom","IRB::Frame","IRB/Frame.html#method-i-bottom","(n = 0)","<p>Returns the <code>n</code> number of frames on the call stack from the first frame initialized.\n<p>Raises FrameOverflow …\n"],["break_on_newline","RDoc::Markdown","RDoc/Markdown.html#method-i-break_on_newline","","<p>Converts all newlines into hard breaks\n"],["break_outmost_groups","PrettyPrint","PrettyPrint.html#method-i-break_outmost_groups","()","<p>Breaks the buffer into lines that are shorter than #maxwidth\n"],["breakable","PrettyPrint","PrettyPrint.html#method-i-breakable","(sep=' ', width=sep.length)","<p>This says “you can break a line here if necessary”, and a <code>width</code>-column text <code>sep</code> is inserted …\n"],["breakable","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-breakable","(sep=' ', width=nil)","<p>Appends <code>sep</code> to the text to be output. By default <code>sep</code> is ‘ ’\n<p><code>width</code> argument is here for compatibility. …\n"],["broadaddr","Socket::Ifaddr","Socket/Ifaddr.html#method-i-broadaddr","()","<p>Returns the broadcast address of <em>ifaddr</em>. nil is returned if the flags doesn’t have IFF_BROADCAST …\n"],["broadcast","MonitorMixin::ConditionVariable","MonitorMixin/ConditionVariable.html#method-i-broadcast","()","<p>Wakes up all threads waiting for this lock.\n"],["broadcast","Thread::ConditionVariable","Thread/ConditionVariable.html#method-i-broadcast","()","<p>Wakes up all threads waiting for this lock.\n"],["bsearch","Array","Array.html#method-i-bsearch","()","<p>Returns an element from <code>self</code> selected by a binary search.\n<p>See Binary Searching.\n"],["bsearch","Range","Range.html#method-i-bsearch","()","<p>Returns an element from <code>self</code> selected by a binary search.\n<p>See Binary Searching.\n"],["bsearch_index","Array","Array.html#method-i-bsearch_index","()","<p>Searches <code>self</code> as described at method #bsearch, but returns the <em>index</em> of the found element instead of …\n"],["bubble_down","SyntaxSuggest::PriorityQueue","SyntaxSuggest/PriorityQueue.html#method-i-bubble_down","(index)",""],["bubble_up","SyntaxSuggest::PriorityQueue","SyntaxSuggest/PriorityQueue.html#method-i-bubble_up","(index, element)",""],["bubblebabble","Digest","Digest.html#method-c-bubblebabble","(p1)","<p>Returns a BubbleBabble encoded version of a given <em>string</em>.\n"],["bubblebabble","Digest::Class","Digest/Class.html#method-c-bubblebabble","(*args)","<p>Returns the BubbleBabble encoded hash value of a given <em>string</em>.\n"],["bubblebabble","Digest::Instance","Digest/Instance.html#method-i-bubblebabble","()","<p>Returns the resulting hash value in a Bubblebabble encoded form.\n"],["bufferSize","Win32::SSPI::SecurityBuffer","Win32/SSPI/SecurityBuffer.html#method-i-bufferSize","()",""],["bufferType","Win32::SSPI::SecurityBuffer","Win32/SSPI/SecurityBuffer.html#method-i-bufferType","()",""],["buffer_initial_length","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-buffer_initial_length","()","<p>This integer returns the current initial length of the buffer.\n"],["buffer_initial_length=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-buffer_initial_length-3D","(p1)","<p>This sets the initial length of the buffer to <code>length</code>, if <code>length</code> &gt; 0, otherwise its value isn’t …\n"],["build","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-build","(email)",""],["build","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-build","(extension, dest_path, results, args = [], lib_dir = nil, cargo_dir = Dir.pwd)",""],["build","Gem::Ext::CmakeBuilder","Gem/Ext/CmakeBuilder.html#method-c-build","(extension, dest_path, results, args=[], lib_dir=nil, cmake_dir=Dir.pwd)",""],["build","Gem::Ext::ConfigureBuilder","Gem/Ext/ConfigureBuilder.html#method-c-build","(extension, dest_path, results, args=[], lib_dir=nil, configure_dir=Dir.pwd)",""],["build","Gem::Ext::ExtConfBuilder","Gem/Ext/ExtConfBuilder.html#method-c-build","(extension, dest_path, results, args=[], lib_dir=nil, extension_dir=Dir.pwd)",""],["build","Gem::Ext::RakeBuilder","Gem/Ext/RakeBuilder.html#method-c-build","(extension, dest_path, results, args=[], lib_dir=nil, extension_dir=Dir.pwd)",""],["build","Gem::Package","Gem/Package.html#method-c-build","(spec, skip_validation = false, strict_validation = false, file_name = nil)",""],["build","Gem::Package","Gem/Package.html#method-i-build","(skip_validation = false, strict_validation = false)","<p>Builds this package based on the specification set by #spec=\n"],["build","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-c-build","(request_set, gem_deps_file, dependencies = nil)","<p>Creates a new Lockfile for the given <code>request_set</code> and <code>gem_deps_file</code> location.\n"],["build","URI::FTP","URI/FTP.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::FTP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::File","URI/File.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::File object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::Generic","URI/Generic.html#method-c-build","(args)","<p>Synopsis\n<p>See ::new.\n<p>Description\n"],["build","URI::HTTP","URI/HTTP.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::HTTP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::LDAP","URI/LDAP.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::LDAP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::MailTo","URI/MailTo.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::MailTo object from components, with syntax checking.\n<p>Components can be provided …\n"],["build","URI::WS","URI/WS.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::WS object from components, with syntax checking.\n<p>The components accepted …\n"],["build2","URI::Generic","URI/Generic.html#method-c-build2","(args)","<p>Synopsis\n<p>See ::new.\n<p>Description\n"],["build_args","Gem::Command","Gem/Command.html#method-c-build_args","()","<p>Arguments used when building gems\n"],["build_args","Gem::Installer","Gem/Installer.html#method-i-build_args","()",""],["build_args","Gem::Specification","Gem/Specification.html#method-i-build_args","()","<p>Returns the build_args used to install the gem\n"],["build_args=","Gem::Command","Gem/Command.html#method-c-build_args-3D","(value)",""],["build_details_for_unwind","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-build_details_for_unwind","()","<p>@return [UnwindDetails] Details of the nearest index to which we could unwind\n"],["build_env","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-build_env","()",""],["build_exception","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-build_exception","(p1, p2)","<p>Create an exception with class <code>klass</code> and <code>message</code>\n"],["build_extensions","Gem::Ext::Builder","Gem/Ext/Builder.html#method-i-build_extensions","()","<p>Builds extensions.  Valid types of extensions are extconf.rb files, configure scripts and rakefiles or …\n"],["build_extensions","Gem::Installer","Gem/Installer.html#method-i-build_extensions","()","<p>Builds extensions.  Valid types of extensions are extconf.rb files, configure scripts and rakefiles or …\n"],["build_fields_converter","CSV","CSV.html#method-i-build_fields_converter","(initial_converters, options)",""],["build_gem","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-build_gem","()",""],["build_header_fields_converter","CSV","CSV.html#method-i-build_header_fields_converter","()",""],["build_heading","RDoc::TomDoc","RDoc/TomDoc.html#method-i-build_heading","(level)","<p>Builds a heading from the token stream\n<p>level &mdash; The level of heading to create\n\n<p>Returns\n"],["build_indices","Gem::Indexer","Gem/Indexer.html#method-i-build_indices","()","<p>Build various indices\n"],["build_info_dir","Gem::Specification","Gem/Specification.html#method-i-build_info_dir","()","<p>Returns the full path to the build info directory\n"],["build_info_file","Gem::Specification","Gem/Specification.html#method-i-build_info_file","()","<p>Returns the full path to the file containing the build information generated when the gem was installed …\n"],["build_marshal_gemspecs","Gem::Indexer","Gem/Indexer.html#method-i-build_marshal_gemspecs","(specs)","<p>Builds Marshal quick index gemspecs.\n"],["build_message","Gem::MissingSpecError","Gem/MissingSpecError.html#method-i-build_message","()",""],["build_message","Gem::MissingSpecVersionError","Gem/MissingSpecVersionError.html#method-i-build_message","()",""],["build_modern_index","Gem::Indexer","Gem/Indexer.html#method-i-build_modern_index","(index, file, name)","<p>Build a single index for RubyGems 1.2 and newer\n"],["build_modern_indices","Gem::Indexer","Gem/Indexer.html#method-i-build_modern_indices","(specs)","<p>Builds indices for RubyGems 1.2 and newer. Handles full, latest, prerelease\n"],["build_package","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-build_package","(gemspec)",""],["build_paragraph","RDoc::TomDoc","RDoc/TomDoc.html#method-i-build_paragraph","(margin)","<p>Builds a paragraph from the token stream\n<p>margin &mdash; Unused\n\n<p>Returns\n"],["build_parser_fields_converter","CSV","CSV.html#method-i-build_parser_fields_converter","()",""],["build_path_query","URI::LDAP","URI/LDAP.html#method-i-build_path_query","()","<p>Private method to assemble <code>query</code> from <code>attributes</code>, <code>scope</code>, <code>filter</code>, and <code>extensions</code>.\n"],["build_scanner","CSV::Parser","CSV/Parser.html#method-i-build_scanner","()",""],["build_verbatim","RDoc::TomDoc","RDoc/TomDoc.html#method-i-build_verbatim","(margin)","<p>Builds a verbatim from the token stream.  A verbatim in the Examples section will be marked as in Ruby …\n"],["build_writer_fields_converter","CSV","CSV.html#method-i-build_writer_fields_converter","()",""],["builtin_converters","CSV::FieldsConverter","CSV/FieldsConverter.html#method-i-builtin_converters","()",""],["builtin_curves","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-c-builtin_curves","()","<p>Obtains a list of all predefined curves by the OpenSSL. Curve names are returned as sn.\n<p>See the OpenSSL …\n"],["bump","Gem::Version","Gem/Version.html#method-i-bump","()","<p>Return a new version object where the next to the last revision number is one greater (e.g., 5.3.1 =&gt; …\n"],["bundle_path","Bundler","Bundler.html#method-c-bundle_path","()","<p>Returns absolute path of where gems are installed on the filesystem.\n"],["bundle_update_bundler_version","Gem::BundlerVersionFinder","Gem/BundlerVersionFinder.html#method-c-bundle_update_bundler_version","()",""],["bundler_version","Gem::BundlerVersionFinder","Gem/BundlerVersionFinder.html#method-c-bundler_version","()",""],["by_col","CSV::Table","CSV/Table.html#method-i-by_col","()","<p>Returns a duplicate of <code>self</code>, in column mode (see Column Mode):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;Name,Value\\nfoo,0\\nbar,1\\nbaz,2\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["by_col!","CSV::Table","CSV/Table.html#method-i-by_col-21","()","<p>Sets the mode for <code>self</code> to column mode (see Column Mode); returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;Name,Value\\nfoo,0\\nbar,1\\nbaz,2\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["by_col_or_row","CSV::Table","CSV/Table.html#method-i-by_col_or_row","()","<p>Returns a duplicate of <code>self</code>, in mixed mode (see Mixed Mode):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;Name,Value\\nfoo,0\\nbar,1\\nbaz,2\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["by_col_or_row!","CSV::Table","CSV/Table.html#method-i-by_col_or_row-21","()","<p>Sets the mode for <code>self</code> to mixed mode (see Mixed Mode); returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;Name,Value\\nfoo,0\\nbar,1\\nbaz,2\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["by_id","OpenSSL::Engine","OpenSSL/Engine.html#method-c-by_id","(p1)","<p>Fetches the engine as specified by the <em>id</em> String.\n\n<pre>OpenSSL::Engine.by_id(&quot;openssl&quot;)\n =&gt; #&lt;OpenSSL::Engine ...</pre>\n"],["by_row","CSV::Table","CSV/Table.html#method-i-by_row","()","<p>Returns a duplicate of <code>self</code>, in row mode (see Row Mode):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;Name,Value\\nfoo,0\\nbar,1\\nbaz,2\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["by_row!","CSV::Table","CSV/Table.html#method-i-by_row-21","()","<p>Sets the mode for <code>self</code> to row mode (see Row Mode); returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;Name,Value\\nfoo,0\\nbar,1\\nbaz,2\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["byte","Socket::Option","Socket/Option.html#method-i-byte","()","<p>Returns the data in <em>sockopt</em> as an byte.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">sockopt</span> = <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Option</span>.<span class=\"ruby-identifier\">byte</span>(<span class=\"ruby-value\">:INET</span>, <span class=\"ruby-value\">:SOCKET</span>, <span class=\"ruby-value\">:KEEPALIVE</span>, <span class=\"ruby-value\">1</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["byte","Socket::Option","Socket/Option.html#method-c-byte","(p1, p2, p3, p4)","<p>Creates a new Socket::Option object which contains a byte as data.\n\n<pre>p Socket::Option.byte(:INET, :SOCKET, ...</pre>\n"],["byte_pointer=","Reline::LineEditor","Reline/LineEditor.html#method-i-byte_pointer-3D","(val)",""],["byteindex","String","String.html#method-i-byteindex","(p1, p2 = v2)","<p>Returns the Integer byte-based index of the first occurrence of the given <code>substring</code>, or <code>nil</code> if none found: …\n"],["byteinsert","Reline::LineEditor","Reline/LineEditor.html#method-i-byteinsert","(str, byte_pointer, other)",""],["byteoffset","MatchData","MatchData.html#method-i-byteoffset","(p1)","<p>Returns a two-element array containing the beginning and ending byte-based offsets of the <em>n</em>th match. …\n"],["byterindex","String","String.html#method-i-byterindex","(p1, p2 = v2)","<p>Returns the Integer byte-based index of the <em>last</em> occurrence of the given <code>substring</code>, or <code>nil</code> if none found: …\n"],["bytes","Random","Random.html#method-i-bytes","(p1)","<p>Returns a random binary string containing <code>size</code> bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">random_string</span> = <span class=\"ruby-constant\">Random</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">bytes</span>(<span class=\"ruby-value\">10</span>) <span class=\"ruby-comment\"># =&gt; &quot;\\xD7:R\\xAB?\\x83\\xCE\\xFAkO&quot; ...</span>\n</pre>\n"],["bytes","Random","Random.html#method-c-bytes","(p1)","<p>Returns a random binary string. The argument <code>size</code> specifies the length of the returned string.\n"],["bytes","SecureRandom","SecureRandom.html#method-c-bytes","(n)",""],["bytes","String","String.html#method-i-bytes","()","<p>Returns an array of the bytes in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;hello&#39;</span>.<span class=\"ruby-identifier\">bytes</span> <span class=\"ruby-comment\"># =&gt; [104, 101, 108, 108, 111]</span>\n<span class=\"ruby-string\">&#39;тест&#39;</span>.<span class=\"ruby-identifier\">bytes</span>  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["bytes_read","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-bytes_read","()","<p>Number of bytes read out of the tar entry\n"],["bytesize","String","String.html#method-i-bytesize","()","<p>Returns the count of bytes (not characters) in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;foo&#39;</span>.<span class=\"ruby-identifier\">bytesize</span>        <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-string\">&#39;тест&#39;</span>.<span class=\"ruby-identifier\">bytesize</span>     <span class=\"ruby-operator\">...</span>\n</pre>\n"],["byteslice","String","String.html#method-i-byteslice","(*args)","<p>Returns a substring of <code>self</code>, or <code>nil</code> if the substring cannot be constructed.\n<p>With integer arguments <code>index</code> …\n"],["byteslice!","Reline::LineEditor","Reline/LineEditor.html#method-i-byteslice-21","(str, byte_pointer, size)",""],["bytesplice","String","String.html#method-i-bytesplice","(*args)","<p>Replaces some or all of the content of <code>self</code> with <code>str</code>, and returns <code>self</code>. The portion of the string affected …\n"],["ca_issuer_uris","OpenSSL::X509::Extension::AuthorityInfoAccess","OpenSSL/X509/Extension/AuthorityInfoAccess.html#method-i-ca_issuer_uris","()","<p>Get the information and services for the issuer from the certificate’s authority information access …\n"],["cache_dir","Gem::Source","Gem/Source.html#method-i-cache_dir","(uri)","<p>Returns the local directory to write <code>uri</code> to.\n"],["cache_dir","Gem::Specification","Gem/Specification.html#method-i-cache_dir","()","<p>Returns the full path to the cache directory containing this spec’s cached gem.\n"],["cache_file","Gem::Specification","Gem/Specification.html#method-i-cache_file","()","<p>Returns the full path to the cached gem for this spec.\n"],["cache_home","Gem","Gem.html#method-c-cache_home","()","<p>The path to standard location of the user’s cache directory.\n"],["cache_path","RDoc::Store","RDoc/Store.html#method-i-cache_path","()","<p>Path to the cache file\n"],["cache_update_path","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-cache_update_path","(uri, path = nil, update = true)","<p>Downloads <code>uri</code> to <code>path</code> if necessary. If no path is given, it just passes the data.\n"],["calculate","RDoc::Stats","RDoc/Stats.html#method-i-calculate","()","<p>Calculates documentation totals and percentages for classes, modules, constants, attributes and methods. …\n"],["calculate_checksum","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-calculate_checksum","(header)",""],["calculate_height_by_lines","Reline::LineEditor","Reline/LineEditor.html#method-i-calculate_height_by_lines","(lines, prompt)",""],["calculate_height_by_width","Reline::LineEditor","Reline/LineEditor.html#method-i-calculate_height_by_width","(width)",""],["calculate_nearest_cursor","Reline::LineEditor","Reline/LineEditor.html#method-i-calculate_nearest_cursor","(line_to_calc = @line, cursor = @cursor, started_from = @started_from, byte_pointer = @byte_pointer, update = true)",""],["calculate_scroll_partial_screen","Reline::LineEditor","Reline/LineEditor.html#method-i-calculate_scroll_partial_screen","(highest_in_all, cursor_y)",""],["calculate_width","Reline::LineEditor","Reline/LineEditor.html#method-i-calculate_width","(str, allow_escape_code = false)",""],["calculate_width","Reline::Unicode","Reline/Unicode.html#method-c-calculate_width","(str, allow_escape_code = false)",""],["call","Continuation","Continuation.html#method-i-call","(*args)","<p>Invokes the continuation. The program continues from the end of the #callcc block. If no arguments are …\n"],["call","Fiddle::Closure::BlockCaller","Fiddle/Closure/BlockCaller.html#method-i-call","(*args)","<p>Calls the constructed BlockCaller, with <code>args</code>\n<p>For an example see Fiddle::Closure::BlockCaller.new\n"],["call","Fiddle::Function","Fiddle/Function.html#method-i-call","(*args)","<p>Calls the constructed Function, with <code>args</code>. Caller must ensure the underlying function is called in a …\n"],["call","Logger::Formatter","Logger/Formatter.html#method-i-call","(severity, time, progname, msg)",""],["call","Method","Method.html#method-i-call","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the method’s return value.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-string\">&quot;+&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["call","Proc","Proc.html#method-i-call","(*args)","<p>Invokes the block, setting the block’s parameters to the values in <em>params</em> using something close to …\n"],["call","Reline::LineEditor::Dialog","Reline/LineEditor/Dialog.html#method-i-call","(key)",""],["call","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-call","()",""],["call","Reline::Windows::Win32API","Reline/Windows/Win32API.html#method-i-call","(*args)",""],["call","SyntaxSuggest","SyntaxSuggest.html#method-c-call","(source:, filename: DEFAULT_VALUE, terminal: DEFAULT_VALUE, record_dir: DEFAULT_VALUE, timeout: TIMEOUT_DEFAULT, io: $stderr)","<p>SyntaxSuggest.call [Private]\n<p>Main private interface\n"],["call","SyntaxSuggest::BlockExpand","SyntaxSuggest/BlockExpand.html#method-i-call","(block)",""],["call","SyntaxSuggest::CaptureCodeContext","SyntaxSuggest/CaptureCodeContext.html#method-i-call","()",""],["call","SyntaxSuggest::CleanDocument","SyntaxSuggest/CleanDocument.html#method-i-call","()","<p>Call all of the document “cleaners” and return self\n"],["call","SyntaxSuggest::Cli","SyntaxSuggest/Cli.html#method-i-call","()",""],["call","SyntaxSuggest::CodeSearch","SyntaxSuggest/CodeSearch.html#method-i-call","()","<p>Main search loop\n"],["call","SyntaxSuggest::DisplayCodeWithLineNumbers","SyntaxSuggest/DisplayCodeWithLineNumbers.html#method-i-call","()",""],["call","SyntaxSuggest::DisplayInvalidBlocks","SyntaxSuggest/DisplayInvalidBlocks.html#method-i-call","()",""],["call","SyntaxSuggest::ExplainSyntax","SyntaxSuggest/ExplainSyntax.html#method-i-call","()",""],["call","SyntaxSuggest::PathnameFromMessage","SyntaxSuggest/PathnameFromMessage.html#method-i-call","()",""],["call","SyntaxSuggest::RipperErrors","SyntaxSuggest/RipperErrors.html#method-i-call","()",""],["call","Syslog::Logger::Formatter","Syslog/Logger/Formatter.html#method-i-call","(severity, time, progname, msg)",""],["call_completion_proc","Reline::LineEditor","Reline/LineEditor.html#method-i-call_completion_proc","()",""],["call_completion_proc_with_checking_args","Reline::LineEditor","Reline/LineEditor.html#method-i-call_completion_proc_with_checking_args","(pre, target, post)",""],["call_completion_proc_with_checking_args","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-call_completion_proc_with_checking_args","(pre, target, post)",""],["call_free","Fiddle::Pointer","Fiddle/Pointer.html#method-i-call_free","()","<p>Call the free function for this pointer. Calling more than once will do nothing. Does nothing if there …\n"],["call_seq","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-call_seq","()","<p>Different ways to call this method\n"],["call_seq=","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-call_seq-3D","(call_seq)","<p>Sets the different ways you can call this method.  If an empty <code>call_seq</code> is given nil is assumed.\n<p>See also …\n"],["call_seq_directive","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-call_seq_directive","()","<p>The <code>:call-seq:</code> directive overrides the actual calling sequence found in the Ruby code.\n<p>It can specify …\n"],["callcc","Kernel","Kernel.html#method-i-callcc","()","<p>Generates a Continuation object, which it passes to the associated block. You need to <code>require &#39;continuation&#39;</code> …\n"],["callee_id","TracePoint","TracePoint.html#method-i-callee_id","()","<p>Return the called name of the method being called\n"],["caller","Kernel","Kernel.html#method-i-caller","(*args)","<p>Returns the current execution stack—an array containing strings in the form <code>file:line</code> or <code>file:line:</code> …\n"],["caller_locations","Kernel","Kernel.html#method-i-caller_locations","(*args)","<p>Returns the current execution stack—an array containing backtrace location objects.\n<p>See Thread::Backtrace::Location …\n"],["can_parse","RDoc::Parser","RDoc/Parser.html#method-c-can_parse","(file_name)","<p>Return a parser that can handle a particular extension\n"],["can_parse_by_name","RDoc::Parser","RDoc/Parser.html#method-c-can_parse_by_name","(file_name)","<p>Returns a parser that can handle the extension for <code>file_name</code>.  This does not depend upon the file being …\n"],["can_skip_check?","SyntaxSuggest::CodeFrontier","SyntaxSuggest/CodeFrontier.html#method-i-can_skip_check-3F","()","<p>Performance optimization\n<p>Parsing with ripper is expensive If we know we don’t have any blocks with …\n"],["cancel","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-cancel","()","<p>Marks this TupleEntry as canceled.\n"],["cancel","Rinda::WaitTemplateEntry","Rinda/WaitTemplateEntry.html#method-i-cancel","()",""],["canceled?","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-canceled-3F","()","<p>Returns the canceled status.\n"],["candidate","OptionParser","OptionParser.html#method-i-candidate","(word)",""],["candidate","OptionParser::Completion","OptionParser/Completion.html#method-c-candidate","(key, icase = false, pat = nil, &block)",""],["candidate","OptionParser::Completion","OptionParser/Completion.html#method-i-candidate","(key, icase = false, pat = nil)",""],["canonical","Psych::Emitter","Psych/Emitter.html#method-i-canonical","()","<p>Get the output style, canonical or not.\n"],["canonical=","Psych::Emitter","Psych/Emitter.html#method-i-canonical-3D","(p1)","<p>Set the output style to canonical, or not.\n"],["canonical_each","Net::HTTPHeader","Net/HTTPHeader.html#method-i-canonical_each","()",""],["canonical_label","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-i-canonical_label","(src)",""],["canonical_segments","Gem::Version","Gem/Version.html#method-i-canonical_segments","()",""],["canonname","Addrinfo","Addrinfo.html#method-i-canonname","()","<p>returns the canonical name as a string.\n<p>nil is returned if no canonical name.\n<p>The canonical name is set …\n"],["capitalize","Net::HTTPHeader","Net/HTTPHeader.html#method-i-capitalize","(name)",""],["capitalize","String","String.html#method-i-capitalize","(*args)","<p>Returns a string containing the characters in <code>self</code>; the first character is upcased; the remaining characters …\n"],["capitalize","Symbol","Symbol.html#method-i-capitalize","(*args)","<p>Equivalent to <code>sym.to_s.capitalize.to_sym</code>.\n<p>See String#capitalize.\n"],["capitalize!","String","String.html#method-i-capitalize-21","(*args)","<p>Upcases the first character in <code>self</code>; downcases the remaining characters; returns <code>self</code> if any changes …\n"],["capitalize_word","Reline::LineEditor","Reline/LineEditor.html#method-i-capitalize_word","(key)",""],["caption","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-caption","(align = {})","<p>Generate a Table Caption element as a string.\n<p><code>align</code> can be a string, giving the alignment of the caption …\n"],["capture2","Open3","Open3.html#method-c-capture2","(*cmd)","<p>Open3.capture2 captures the standard output of a command.\n\n<pre>stdout_str, status = Open3.capture2([env,] cmd... ...</pre>\n"],["capture2","Open3","Open3.html#method-i-capture2","(*cmd)","<p>Open3.capture2 captures the standard output of a command.\n\n<pre>stdout_str, status = Open3.capture2([env,] cmd... ...</pre>\n"],["capture2e","Open3","Open3.html#method-c-capture2e","(*cmd)","<p>Open3.capture2e captures the standard output and the standard error of a command.\n\n<pre>stdout_and_stderr_str, ...</pre>\n"],["capture2e","Open3","Open3.html#method-i-capture2e","(*cmd)","<p>Open3.capture2e captures the standard output and the standard error of a command.\n\n<pre>stdout_and_stderr_str, ...</pre>\n"],["capture3","Open3","Open3.html#method-i-capture3","(*cmd)","<p>Open3.capture3 captures the standard output and the standard error of a command.\n\n<pre>stdout_str, stderr_str, ...</pre>\n"],["capture3","Open3","Open3.html#method-c-capture3","(*cmd)","<p>Open3.capture3 captures the standard output and the standard error of a command.\n\n<pre>stdout_str, stderr_str, ...</pre>\n"],["capture_before_after_kws","SyntaxSuggest::CaptureCodeContext","SyntaxSuggest/CaptureCodeContext.html#method-i-capture_before_after_kws","(block)","<p>Shows surrounding kw/end pairs\n<p>The purpose of showing these extra pairs is due to cases of ambiguity when …\n"],["capture_falling_indent","SyntaxSuggest::CaptureCodeContext","SyntaxSuggest/CaptureCodeContext.html#method-i-capture_falling_indent","(block)","<p>Shows the context around code provided by “falling” indentation\n<p>Converts:\n\n<pre>it &quot;foo&quot; do</pre>\n"],["capture_first_kw_end_same_indent","SyntaxSuggest::CaptureCodeContext","SyntaxSuggest/CaptureCodeContext.html#method-i-capture_first_kw_end_same_indent","(block)","<p>The logical inverse of ‘capture_last_end_same_indent`\n<p>When there is an invalid block with an ‘end` missing …\n"],["capture_frames","IRB::ExtendCommand::Debug::DEBUGGER__","IRB/ExtendCommand/Debug/DEBUGGER__.html#method-c-capture_frames","(*args)",""],["capture_last_end_same_indent","SyntaxSuggest::CaptureCodeContext","SyntaxSuggest/CaptureCodeContext.html#method-i-capture_last_end_same_indent","(block)","<p>When there is an invalid block with a keyword missing an end right before another end, it is unclear …\n"],["capture_neighbor_context","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-capture_neighbor_context","()",""],["captures","MatchData","MatchData.html#method-i-captures","()","<p>Returns the array of captures, which are all matches except <code>m[0]</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["captures","StringScanner","StringScanner.html#method-i-captures","()","<p>Returns the subgroups in the most recent match (not including the full match). If nothing was priorly …\n"],["cargo","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-cargo","()",""],["cargo_command","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-cargo_command","(cargo_toml, dest_path, args = [], crate_name = nil)",""],["cargo_crate_name","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-cargo_crate_name","(cargo_dir, manifest_path, results)",""],["cargo_dylib_path","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-cargo_dylib_path","(dest_path, crate_name)",""],["cargo_rustc_args","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-cargo_rustc_args","(dest_dir, crate_name)",""],["casecmp","String","String.html#method-i-casecmp","(p1)","<p>Compares <code>self.downcase</code> and <code>other_string.downcase</code>; returns:\n<p>-1 if <code>other_string.downcase</code> is larger.\n<p>0 if …\n"],["casecmp","Symbol","Symbol.html#method-i-casecmp","(p1)","<p>Like Symbol#<=>, but case-insensitive; equivalent to <code>self.to_s.casecmp(object.to_s)</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">lower</span> = <span class=\"ruby-value\">:abc</span>\n<span class=\"ruby-identifier\">upper</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["casecmp?","String","String.html#method-i-casecmp-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>other_string</code> are equal after Unicode case folding, otherwise <code>false</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;foo&#39;</span>.<span class=\"ruby-identifier\">casecmp?</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["casecmp?","Symbol","Symbol.html#method-i-casecmp-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>object</code> are equal after Unicode case folding, otherwise <code>false</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">lower</span> = <span class=\"ruby-value\">:abc</span>\n<span class=\"ruby-identifier\">upper</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["casefold?","Regexp","Regexp.html#method-i-casefold-3F","()","<p>Returns <code>true</code> if the case-insensitivity flag in <code>self</code> is set, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/a/</span>.<span class=\"ruby-identifier\">casefold?</span>           <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["catch","Kernel","Kernel.html#method-i-catch","(*args)","<p><code>catch</code> executes its block. If <code>throw</code> is not called, the block executes normally, and <code>catch</code> returns the …\n"],["catch","Timeout::Error","Timeout/Error.html#method-c-catch","(*args)",""],["cause","Exception","Exception.html#method-i-cause","()","<p>Returns the previous exception ($!) at the time this exception was raised. This is useful for wrapping …\n"],["cbrt","Math","Math.html#method-c-cbrt","(p1)","<p>Returns the cube root of <code>x</code>.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[-INFINITY, INFINITY]</code>.\n"],["cc_command","MakeMakefile","MakeMakefile.html#method-i-cc_command","(opt=\"\")",""],["ccm_data_len=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-ccm_data_len-3D","(p1)","<p>Sets the length of the plaintext / ciphertext message that will be processed in CCM mode. Make sure to …\n"],["cd","FileUtils","FileUtils.html#method-c-cd","(dir, verbose: nil)","<p>Changes the working directory to the given <code>dir</code>, which should be interpretable as a path:\n<p>With no block …\n"],["cd","FileUtils","FileUtils.html#method-i-cd","(dir, verbose: nil)","<p>Changes the working directory to the given <code>dir</code>, which should be interpretable as a path:\n<p>With no block …\n"],["ceil","BigDecimal","BigDecimal.html#method-i-ceil","(p1 = v1)","<p>Return the smallest integer greater than or equal to the value, as a BigDecimal.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;3.14159&#39;</span>).<span class=\"ruby-identifier\">ceil</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ceil","Float","Float.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>self</code> with a precision of <code>ndigits</code> decimal digits. …\n"],["ceil","Integer","Integer.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>self</code> with a precision of <code>ndigits</code> decimal digits. …\n"],["ceil","Numeric","Numeric.html#method-i-ceil","(*args)","<p>Returns the smallest number that is greater than or equal to <code>self</code> with a precision of <code>digits</code> decimal …\n"],["ceil","Rational","Rational.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>rat</code> with a precision of <code>ndigits</code> decimal digits (default: …\n"],["ceil","Time","Time.html#method-i-ceil","(*args)","<p>Returns a new Time object whose numerical value is greater than or equal to <code>self</code> with its seconds truncated …\n"],["ceildiv","Integer","Integer.html#method-i-ceildiv","(other)","<p>Returns the result of division <code>self</code> by <code>other</code>. The result is rounded up to the nearest integer.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">ceildiv</span>(<span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["center","String","String.html#method-i-center","(*args)","<p>Returns a centered copy of <code>self</code>.\n<p>If integer argument <code>size</code> is greater than the size (in characters) of …\n"],["cert","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-cert","()","<p>The X509 certificate for this socket endpoint.\n"],["cert_files","Gem::Request","Gem/Request.html#method-i-cert_files","()",""],["cert_path","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-cert_path","(certificate)","<p>Returns the path to the trusted <code>certificate</code>\n"],["cert_requested=","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-i-cert_requested-3D","(p1)","<p>Specify whether the response shall contain the timestamp authority’s certificate or not. The default …\n"],["cert_requested?","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-i-cert_requested-3F","()","<p>Indicates whether the response shall contain the timestamp authority’s certificate or not.\n"],["cert_status","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-cert_status","()","<p>Returns the status of the certificate identified by the certid. The return value may be one of these …\n"],["certid","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-certid","()","<p>Returns all certificate IDs in this request.\n"],["certid","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-certid","()","<p>Returns the CertificateId for which this SingleResponse is.\n"],["certificates","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-certificates","()",""],["certificates=","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-certificates-3D","(p1)",""],["certificates_matching","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-certificates_matching","(filter)",""],["chain","Enumerable","Enumerable.html#method-i-chain","(*args)","<p>Returns an enumerator object generated from this enumerator and given enumerables.\n\n<pre>e = (1..3).chain([4, ...</pre>\n"],["chain","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-chain","()","<p>Returns the verified chain.\n<p>See also the man page X509_STORE_CTX_set0_verified_chain(3).\n"],["challenge","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-challenge","()","<p>Returns the challenge string associated with this SPKI.\n"],["challenge=","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-challenge-3D","(p1)","<p>Parameters\n<p><em>str</em> - the challenge string to be set for this instance\n\n<p>Sets the challenge to be associated with …\n"],["change_encoding","RDoc::Encoding","RDoc/Encoding.html#method-c-change_encoding","(text, encoding)","<p>Changes encoding based on <code>encoding</code> without converting and returns new string\n"],["change_privilege","Process::GID","Process/GID.html#method-c-change_privilege","(p1)","<p>Change the current process’s real and effective group ID to that specified by <em>group</em>. Returns the …\n"],["change_privilege","Process::UID","Process/UID.html#method-c-change_privilege","(p1)","<p>Change the current process’s real and effective user ID to that specified by <em>user</em>. Returns the new …\n"],["change_workspace","IRB::Context","IRB/Context.html#method-i-change_workspace","(*_main)","<p>Changes the current workspace to given object or binding.\n<p>If the optional argument is omitted, the workspace …\n"],["changed","Observable","Observable.html#method-i-changed","(state=true)","<p>Set the changed state of this object.  Notifications will be sent only if the changed <code>state</code> is <code>true</code>. …\n"],["changed?","Observable","Observable.html#method-i-changed-3F","()","<p>Returns true if this object’s state has been changed since the last #notify_observers call.\n"],["char","Reline::Windows::KeyEventRecord","Reline/Windows/KeyEventRecord.html#method-i-char","()",""],["chardev?","File","File.html#method-c-chardev-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a character device, <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">chardev?</span>(<span class=\"ruby-identifier\">$stdin</span>)     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["chardev?","File::Stat","File/Stat.html#method-i-chardev-3F","()","<p>Returns <code>true</code> if the file is a character device, <code>false</code> if it isn’t or if the operating system doesn’t …\n"],["chardev?","FileTest","FileTest.html#method-i-chardev-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a character device, <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">chardev?</span>(<span class=\"ruby-identifier\">$stdin</span>)     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["chardev?","Pathname","Pathname.html#method-i-chardev-3F","()","<p>See FileTest.chardev?.\n"],["charpos","StringScanner","StringScanner.html#method-i-charpos","()","<p>Returns the character position of the scan pointer.  In the ‘reset’ position, this value is zero. …\n"],["chars","String","String.html#method-i-chars","()","<p>Returns an array of the characters in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;hello&#39;</span>.<span class=\"ruby-identifier\">chars</span>     <span class=\"ruby-comment\"># =&gt; [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span>\n<span class=\"ruby-string\">&#39;тест&#39;</span>.<span class=\"ruby-identifier\">chars</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["charset","OpenURI::Meta","OpenURI/Meta.html#method-i-charset","()","<p>returns a charset parameter in Content-Type field. It is downcased for canonicalization.\n<p>If charset parameter …\n"],["chdir","Dir","Dir.html#method-c-chdir","(*args)","<p>Changes the current working directory of the process to the given string. When called without an argument, …\n"],["chdir","FileUtils","FileUtils.html#method-i-chdir","(dir, verbose: nil)",""],["chdir","FileUtils","FileUtils.html#method-c-chdir","(dir, verbose: nil)",""],["check","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-i-check","(pattern)",""],["check","PTY","PTY.html#method-c-check","(p1, p2 = v2)","<p>Checks the status of the child process specified by <code>pid</code>. Returns <code>nil</code> if the process is still alive.\n<p>If …\n"],["check","StringScanner","StringScanner.html#method-i-check","(p1)","<p>This returns the value that #scan would return, without advancing the scan pointer.  The match register …\n"],["check","Win32::Registry::API","Win32/Registry/API.html#method-i-check","(result)",""],["check_cert","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_cert","(signer, issuer, time)","<p>Ensures that <code>signer</code> is valid for <code>time</code> and was signed by the <code>issuer</code>. If the <code>issuer</code> is <code>nil</code> no verification …\n"],["check_chain","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_chain","(chain, time)","<p>Verifies each certificate in <code>chain</code> has signed the following certificate and is valid for the given <code>time</code> …\n"],["check_circular?","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-check_circular-3F","()","<p>Returns true, if circular data structures should be checked, otherwise returns false.\n"],["check_closed","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-check_closed","()","<p>Raises IOError if the TarWriter is closed\n"],["check_credentials_permissions","Gem::ConfigFile","Gem/ConfigFile.html#method-i-check_credentials_permissions","()","<p>Checks the permissions of the credentials file.  If they are not 0600 an error message is displayed and …\n"],["check_data","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_data","(public_key, digest, signature, data)","<p>Verifies that <code>data</code> matches the <code>signature</code> created by <code>public_key</code> and the <code>digest</code> algorithm.\n"],["check_deprecated_options","Gem::Command","Gem/Command.html#method-i-check_deprecated_options","(options)",""],["check_executable","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-check_executable","()",""],["check_files","RDoc::Options","RDoc/Options.html#method-i-check_files","()","<p>Check that the files on the command line exist\n"],["check_gems","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-i-check_gems","()",""],["check_generator","RDoc::Options","RDoc/Options.html#method-i-check_generator","()","<p>Ensure only one generator is loaded\n"],["check_headers","URI::MailTo","URI/MailTo.html#method-i-check_headers","(v)","<p>Checks the headers <code>v</code> component against either\n<p>HEADER_REGEXP\n\n"],["check_host","URI::Generic","URI/Generic.html#method-i-check_host","(v)","<p>Checks the host <code>v</code> component for RFC2396 compliance and against the URI::Parser Regexp for :HOST.\n<p>Can not …\n"],["check_index","Reline::History","Reline/History.html#method-i-check_index","(index)",""],["check_input_event","Reline::Windows","Reline/Windows.html#method-c-check_input_event","()",""],["check_insecure_method","DRb::DRbServer","DRb/DRbServer.html#method-i-check_insecure_method","(obj, msg_id)","<p>Check that a method is callable via dRuby.\n<p><code>obj</code> is the object we want to invoke the method on. <code>msg_id</code> is …\n"],["check_inspect_key","PP::PPMethods","PP/PPMethods.html#method-i-check_inspect_key","(id)","<p>Check whether the object_id <code>id</code> is in the current buffer of objects to be pretty printed. Used to break …\n"],["check_installed_gems","Gem::QueryUtils","Gem/QueryUtils.html#method-i-check_installed_gems","(gem_names)",""],["check_installed_gems?","Gem::QueryUtils","Gem/QueryUtils.html#method-i-check_installed_gems-3F","()",""],["check_key","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_key","(signer, key)","<p>Ensures the public key of <code>key</code> matches the public key in <code>signer</code>\n"],["check_key","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-check_key","()","<p>Raises an exception if the key is invalid.\n<p>See also the man page EVP_PKEY_public_check(3).\n"],["check_la","Racc::State","Racc/State.html#method-i-check_la","(la_rules)",""],["check_mode_string","Reline::LineEditor","Reline/LineEditor.html#method-i-check_mode_string","()",""],["check_modeline","RDoc::Parser","RDoc/Parser.html#method-c-check_modeline","(file_name)","<p>Returns the file type from the modeline in <code>file_name</code>\n"],["check_multiline_prompt","Reline::LineEditor","Reline/LineEditor.html#method-i-check_multiline_prompt","(buffer)",""],["check_names","RDoc::Task","RDoc/Task.html#method-i-check_names","(names)","<p>Ensures that <code>names</code> only includes names for the :rdoc, :clobber_rdoc and :rerdoc.  If other names are …\n"],["check_nonce","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-check_nonce","(p1)","<p>Checks the nonce validity for this request and <em>response</em>.\n<p>The return value is one of the following:\n<p>-1  … &mdash; "],["check_opaque","URI::Generic","URI/Generic.html#method-i-check_opaque","(v)","<p>Checks the opaque <code>v</code> component for RFC2396 compliance and against the URI::Parser Regexp for :OPAQUE. …\n"],["check_openssl","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-check_openssl","()",""],["check_password","URI::File","URI/File.html#method-i-check_password","(user)","<p>raise InvalidURIError\n"],["check_password","URI::Generic","URI/Generic.html#method-i-check_password","(v, user = @user)","<p>Checks the password <code>v</code> component for RFC2396 compliance and against the URI::Parser Regexp for :USERINFO. …\n"],["check_path","URI::Generic","URI/Generic.html#method-i-check_path","(v)","<p>Checks the path <code>v</code> component for RFC2396 compliance and against the URI::Parser Regexp for :ABS_PATH and …\n"],["check_port","URI::Generic","URI/Generic.html#method-i-check_port","(v)","<p>Checks the port <code>v</code> component for RFC2396 compliance and against the URI::Parser Regexp for :PORT.\n<p>Can not …\n"],["check_private_key","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-check_private_key","(p1)","<p>Returns <code>true</code> if <em>key</em> is the corresponding private key to the Subject Public Key Information, <code>false</code> otherwise. …\n"],["check_root","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_root","(chain, time)","<p>Ensures the root certificate in <code>chain</code> is self-signed and valid for <code>time</code>.\n"],["check_ruby_version","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-check_ruby_version","()",""],["check_rules_nullable","Racc::Grammar","Racc/Grammar.html#method-i-check_rules_nullable","(rules)",""],["check_rules_useless","Racc::Grammar","Racc/Grammar.html#method-i-check_rules_useless","(rules)",""],["check_scheme","URI::Generic","URI/Generic.html#method-i-check_scheme","(v)","<p>Checks the scheme <code>v</code> component against the URI::Parser Regexp for :SCHEME.\n"],["check_shift_log","Logger::LogDevice","Logger/LogDevice.html#method-i-check_shift_log","()",""],["check_signedness","MakeMakefile","MakeMakefile.html#method-i-check_signedness","(type, headers = nil, opts = nil, &b)","<p>Returns the signedness of the given <code>type</code>.  You may optionally specify additional <code>headers</code> to search in …\n"],["check_sizeof","MakeMakefile","MakeMakefile.html#method-i-check_sizeof","(type, headers = nil, opts = \"\", &b)","<p>Returns the size of the given <code>type</code>.  You may optionally specify additional <code>headers</code> to search in for the …\n"],["check_symbols_nullable","Racc::Grammar","Racc/Grammar.html#method-i-check_symbols_nullable","(symbols)",""],["check_symbols_useless","Racc::Grammar","Racc/Grammar.html#method-i-check_symbols_useless","(s)",""],["check_terminals","Racc::SymbolTable","Racc/SymbolTable.html#method-i-check_terminals","()",""],["check_termination","IRB::RelineInputMethod","IRB/RelineInputMethod.html#method-i-check_termination","(&block)",""],["check_to","URI::MailTo","URI/MailTo.html#method-i-check_to","(v)","<p>Checks the to <code>v</code> component.\n"],["check_trust","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_trust","(chain, digester, trust_dir)","<p>Ensures the root of <code>chain</code> has a trusted certificate in <code>trust_dir</code> and the digests of the two certificates …\n"],["check_typecode","URI::FTP","URI/FTP.html#method-i-check_typecode","(v)","<p>Validates typecode <code>v</code>, returns <code>true</code> or <code>false</code>.\n"],["check_typo_squatting","Gem::Commands::SourcesCommand","Gem/Commands/SourcesCommand.html#method-i-check_typo_squatting","(source)",""],["check_until","StringScanner","StringScanner.html#method-i-check_until","(p1)","<p>This returns the value that #scan_until would return, without advancing the scan pointer.  The match …\n"],["check_useless","Racc::States","Racc/States.html#method-i-check_useless","()",""],["check_user","URI::File","URI/File.html#method-i-check_user","(user)","<p>raise InvalidURIError\n"],["check_user","URI::Generic","URI/Generic.html#method-i-check_user","(v)","<p>Checks the user <code>v</code> component for RFC2396 compliance and against the URI::Parser Regexp for :USERINFO. …\n"],["check_userinfo","URI::File","URI/File.html#method-i-check_userinfo","(user)","<p>raise InvalidURIError\n"],["check_userinfo","URI::Generic","URI/Generic.html#method-i-check_userinfo","(user, password = nil)","<p>Checks the <code>user</code> and <code>password</code>.\n<p>If <code>password</code> is not provided, then <code>user</code> is split, using URI::Generic.split_userinfo …\n"],["check_validity","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-check_validity","(p1 = v1, p2 = v2)","<p>Checks the validity of thisUpdate and nextUpdate fields of this SingleResponse. This checks the current …\n"],["check_winsize_changed","IO","IO.html#method-i-check_winsize_changed","()",""],["checkbox","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-checkbox","(name = \"\", value = nil, checked = nil)","<p>Generate a Checkbox Input element as a string.\n<p>The attributes of the element can be specified as three …\n"],["checkbox_group","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-checkbox_group","(name = \"\", *values)","<p>Generate a sequence of checkbox elements, as a String.\n<p>The checkboxes will all have the same <code>name</code> attribute. …\n"],["child_name","RDoc::Context","RDoc/Context.html#method-i-child_name","(name)","<p>Creates the full name for a child with <code>name</code>\n"],["children","Dir","Dir.html#method-c-children","(*args)","<p>Returns an array containing all of the filenames except for “.” and “..” in the given …\n"],["children","Dir","Dir.html#method-i-children","()","<p>Returns an array containing all of the filenames except for “.” and “..” in this …\n"],["children","Pathname","Pathname.html#method-i-children","(with_directory=true)","<p>Returns the children of the directory (files and subdirectories, not recursive) as an array of Pathname …\n"],["children","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-children","()","<p>Returns AST nodes under this one.  Each kind of node has different children, depending on what kind of …\n"],["chmod","File","File.html#method-i-chmod","(p1)","<p>Changes permission bits on <em>file</em> to the bit pattern represented by <em>mode_int</em>. Actual effects are platform …\n"],["chmod","File","File.html#method-c-chmod","(*args)","<p>Changes permission bits on the named file(s) to the bit pattern represented by <em>mode_int</em>. Actual effects …\n"],["chmod","FileUtils","FileUtils.html#method-c-chmod","(mode, list, noop: nil, verbose: nil)","<p>Changes permissions on the entries at the paths given in <code>list</code> (a single path or an array of paths) to …\n"],["chmod","FileUtils","FileUtils.html#method-i-chmod","(mode, list, noop: nil, verbose: nil)","<p>Changes permissions on the entries at the paths given in <code>list</code> (a single path or an array of paths) to …\n"],["chmod","Pathname","Pathname.html#method-i-chmod","(p1)","<p>Changes file permissions.\n<p>See File.chmod.\n"],["chmod_R","FileUtils","FileUtils.html#method-i-chmod_R","(mode, list, noop: nil, verbose: nil, force: nil)","<p>Like FileUtils.chmod, but changes permissions recursively.\n"],["chmod_R","FileUtils","FileUtils.html#method-c-chmod_R","(mode, list, noop: nil, verbose: nil, force: nil)","<p>Like FileUtils.chmod, but changes permissions recursively.\n"],["chomp","Kernel","Kernel.html#method-i-chomp","(*args)","<p>Equivalent to <code>$_ = $_.chomp(<em>string</em>)</code>. See String#chomp. Available only when -p/-n command line option …\n"],["chomp","String","String.html#method-i-chomp","(*args)","<p>Returns a new string copied from <code>self</code>, with trailing characters possibly removed:\n<p>When <code>line_sep</code> is <code>&quot;\\n&quot;</code> …\n"],["chomp!","String","String.html#method-i-chomp-21","(*args)","<p>Like String#chomp, but modifies <code>self</code> in place; returns <code>nil</code> if no modification made, <code>self</code> otherwise.\n"],["choose","Random::Formatter","Random/Formatter.html#method-i-choose","(source, n)","<p>Generate a string that randomly draws from a source array of characters.\n<p>The argument <em>source</em> specifies …\n"],["choose_from_list","Gem::StreamUI","Gem/StreamUI.html#method-i-choose_from_list","(question, list)","<p>Choose from a list of options.  <code>question</code> is a prompt displayed above the list.  <code>list</code> is a list of option …\n"],["choose_from_list","Gem::UserInteraction","Gem/UserInteraction.html#method-i-choose_from_list","(question, list)","<p>Asks the user to answer <code>question</code> with an answer from the given <code>list</code>.\n"],["chop","Kernel","Kernel.html#method-i-chop","()","<p>Equivalent to <code>($_.dup).chop!</code>, except <code>nil</code> is never returned. See String#chop!. Available only when -p/-n …\n"],["chop","String","String.html#method-i-chop","()","<p>Returns a new string copied from <code>self</code>, with trailing characters possibly removed.\n<p>Removes <code>&quot;\\r\\n&quot;</code> …\n"],["chop!","String","String.html#method-i-chop-21","()","<p>Like String#chop, but modifies <code>self</code> in place; returns <code>nil</code> if <code>self</code> is empty, <code>self</code> otherwise.\n<p>Related:  …\n"],["chown","File","File.html#method-i-chown","(p1, p2)","<p>Changes the owner and group of <em>file</em> to the given numeric owner and group id’s. Only a process with …\n"],["chown","File","File.html#method-c-chown","(*args)","<p>Changes the owner and group of the named file(s) to the given numeric owner and group id’s. Only …\n"],["chown","FileUtils","FileUtils.html#method-c-chown","(user, group, list, noop: nil, verbose: nil)","<p>Changes the owner and group on the entries at the paths given in <code>list</code> (a single path or an array of paths) …\n"],["chown","FileUtils","FileUtils.html#method-i-chown","(user, group, list, noop: nil, verbose: nil)","<p>Changes the owner and group on the entries at the paths given in <code>list</code> (a single path or an array of paths) …\n"],["chown","Pathname","Pathname.html#method-i-chown","(p1, p2)","<p>Change owner and group of the file.\n<p>See File.chown.\n"],["chown_R","FileUtils","FileUtils.html#method-c-chown_R","(user, group, list, noop: nil, verbose: nil, force: nil)","<p>Like FileUtils.chown, but changes owner and group recursively.\n"],["chown_R","FileUtils","FileUtils.html#method-i-chown_R","(user, group, list, noop: nil, verbose: nil, force: nil)","<p>Like FileUtils.chown, but changes owner and group recursively.\n"],["chr","Integer","Integer.html#method-i-chr","(*args)","<p>Returns a 1-character string containing the character represented by the value of <code>self</code>, according to …\n"],["chr","String","String.html#method-i-chr","()","<p>Returns a string containing the first character of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-comment\"># =&gt; &quot;foo&quot;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">chr</span>     <span class=\"ruby-comment\"># =&gt; &quot;f&quot;</span>\n</pre>\n"],["chroot","Dir","Dir.html#method-c-chroot","(p1)","<p>Changes this process’s idea of the file system root. Only a privileged process may make this call. …\n"],["chunk","Enumerable","Enumerable.html#method-i-chunk","()","<p>Each element in the returned enumerator is a 2-element array consisting of:\n<p>A value returned by the block. …\n"],["chunk","Enumerator::Lazy","Enumerator/Lazy.html#method-i-chunk","(*args)","<p>Like Enumerable#chunk, but chains operation to be lazy-evaluated.\n"],["chunk_while","Enumerable","Enumerable.html#method-i-chunk_while","()","<p>Creates an enumerator for each chunked elements. The beginnings of chunks are defined by the block.\n<p>This …\n"],["chunk_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-chunk_while","(*args)","<p>Like Enumerable#chunk_while, but chains operation to be lazy-evaluated.\n"],["chunked?","Net::HTTPHeader","Net/HTTPHeader.html#method-i-chunked-3F","()","<p>Returns <code>true</code> if field <code>&#39;Transfer-Encoding&#39;</code> exists and has value <code>&#39;chunked&#39;</code>, <code>false</code> otherwise; …\n"],["ci?","Gem::UpdateSuggestion","Gem/UpdateSuggestion.html#method-i-ci-3F","()",""],["cipher","OpenSSL::Engine","OpenSSL/Engine.html#method-i-cipher","(p1)","<p>Returns a new instance of OpenSSL::Cipher by <em>name</em>, if it is available in this engine.\n<p>An EngineError will …\n"],["cipher","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-cipher","()","<p>Returns the cipher suite actually used in the current session, or nil if no session has been established. …\n"],["cipher=","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-cipher-3D","(p1)",""],["ciphers","OpenSSL::Cipher","OpenSSL/Cipher.html#method-c-ciphers","()","<p>Returns the names of all available ciphers in an array.\n"],["ciphers","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-ciphers","()","<p>The list of cipher suites configured for this context.\n"],["ciphers=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-ciphers-3D","(p1)","<p>Sets the list of available cipher suites for this context.  Note in a server context some ciphers require …\n"],["ciphersuites=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-ciphersuites-3D","(p1)","<p>Sets the list of available TLSv1.3 cipher suites for this context.\n"],["civil","Date","Date.html#method-c-civil","(*args)","<p>Same as Date.new.\n"],["civil","DateTime","DateTime.html#method-c-civil","(*args)","<p>Same as DateTime.new.\n"],["clamp","Comparable","Comparable.html#method-i-clamp","(p1, p2 = v2)","<p>In <code>(min, max)</code> form, returns <em>min</em> if <em>obj</em> <code>&lt;=&gt;</code> <em>min</em> is less than zero, <em>max</em> if <em>obj</em> <code>&lt;=&gt;</code> <em>max</em> is greater …\n"],["class","Kernel","Kernel.html#method-i-class","()","<p>Returns the class of <em>obj</em>. This method must always be called with an explicit receiver, as #class is also …\n"],["class","Win32::Registry::PredefinedKey","Win32/Registry/PredefinedKey.html#method-i-class","()","<p>Fake #class method for Registry#open, Registry#create\n"],["class_attributes","RDoc::Context","RDoc/Context.html#method-i-class_attributes","()","<p>Class attributes\n"],["class_eval","Module","Module.html#method-i-class_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>, except that when a block is given, constant/class …\n"],["class_exec","Module","Module.html#method-i-class_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method defined in the block will belong …\n"],["class_file","RDoc::Store","RDoc/Store.html#method-i-class_file","(klass_name)","<p>Path to the ri data for <code>klass_name</code>\n"],["class_method_list","RDoc::Context","RDoc/Context.html#method-i-class_method_list","()","<p>Class methods\n"],["class_methods","RDoc::Store","RDoc/Store.html#method-i-class_methods","()","<p>Class methods cache accessor.  Maps a class to an Array of its class methods (not full name).\n"],["class_name","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-class_name","()",""],["class_names","DidYouMean::ClassNameChecker","DidYouMean/ClassNameChecker.html#method-i-class_names","()",""],["class_path","RDoc::Store","RDoc/Store.html#method-i-class_path","(klass_name)","<p>Path where data for <code>klass_name</code> will be stored (methods or class data)\n"],["class_variable_defined?","Module","Module.html#method-i-class_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given class variable is defined in <em>obj</em>. String arguments are converted to symbols. …\n"],["class_variable_get","Module","Module.html#method-i-class_variable_get","(p1)","<p>Returns the value of the given class variable (or throws a NameError exception). The <code>@@</code> part of the variable …\n"],["class_variable_set","Module","Module.html#method-i-class_variable_set","(p1, p2)","<p>Sets the class variable named by <em>symbol</em> to the given object. If the class variable name is passed as …\n"],["class_variables","Module","Module.html#method-i-class_variables","(*args)","<p>Returns an array of the names of class variables in <em>mod</em>. This includes the names of class variables in …\n"],["classes","RDoc::Context","RDoc/Context.html#method-i-classes","()","<p>Array of classes in this context\n"],["classes_and_modules","RDoc::Context","RDoc/Context.html#method-i-classes_and_modules","()","<p>All classes and modules in this namespace\n"],["classes_hash","RDoc::Context","RDoc/Context.html#method-i-classes_hash","()","<p>Hash of classes keyed by class name\n"],["classes_hash","RDoc::Store","RDoc/Store.html#method-i-classes_hash","()","<p>Hash of all classes known to RDoc\n"],["classify","Set","Set.html#method-i-classify","()","<p>Classifies the set by the return value of the given block and\nreturns a hash of {value =&gt; set of elements} ...\n"],["clean","Syslog::Logger::Formatter","Syslog/Logger/Formatter.html#method-i-clean","(message)","<p>Clean up messages so they’re nice and pretty.\n"],["clean_env","Bundler","Bundler.html#method-c-clean_env","()","<p>@deprecated Use ‘unbundled_env` instead\n"],["clean_exec","Bundler","Bundler.html#method-c-clean_exec","(*args)","<p>@deprecated Use ‘unbundled_exec` instead\n"],["clean_gems","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-clean_gems","()",""],["clean_sweep","SyntaxSuggest::CleanDocument","SyntaxSuggest/CleanDocument.html#method-i-clean_sweep","(source:)","<p>Remove comments and whitespace only lines\n<p>replace with empty newlines\n\n<pre>source = &lt;&lt;~&#39;EOM&#39;\n  # Comment 1\n ...</pre>\n"],["clean_system","Bundler","Bundler.html#method-c-clean_system","(*args)","<p>@deprecated Use ‘unbundled_system` instead\n"],["clean_text","Gem::Text","Gem/Text.html#method-i-clean_text","(text)","<p>Remove any non-printable characters and make the text suitable for printing.\n"],["clean_up","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-i-clean_up","()",""],["cleanpath","Pathname","Pathname.html#method-i-cleanpath","(consider_symlink=false)","<p>Returns clean pathname of <code>self</code> with consecutive slashes and useless dots removed.  The filesystem is …\n"],["cleanup","OpenSSL::Engine","OpenSSL/Engine.html#method-c-cleanup","()","<p>It is only necessary to run cleanup when engines are loaded via OpenSSL::Engine.load. However, running …\n"],["cleanup","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-cleanup","()",""],["clear","Array","Array.html#method-i-clear","()","<p>Removes all elements from <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">clear</span> <span class=\"ruby-comment\"># =&gt; []</span>\n</pre>\n"],["clear","ENV","ENV.html#method-c-clear","()","<p>Removes every environment variable; returns ENV:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">size</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["clear","Fiddle::Pinned","Fiddle/Pinned.html#method-i-clear","()","<p>Clear the reference to the object this is pinning.\n"],["clear","GC::Profiler","GC/Profiler.html#method-c-clear","()","<p>Clears the GC profiler data.\n"],["clear","Gem::DependencyList","Gem/DependencyList.html#method-i-clear","()",""],["clear","Gem::SourceList","Gem/SourceList.html#method-i-clear","()","<p>Removes all sources from the SourceList.\n"],["clear","Hash","Hash.html#method-i-clear","()","<p>Removes all hash entries; returns <code>self</code>.\n"],["clear","IO::Buffer","IO/Buffer.html#method-i-clear","(*args)","<p>Fill buffer with <code>value</code>, starting with <code>offset</code> and going for <code>length</code> bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">buffer</span> = <span class=\"ruby-constant\">IO</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Buffer</span>.<span class=\"ruby-identifier\">for</span>(<span class=\"ruby-string\">&#39;test&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["clear","IRB::Color","IRB/Color.html#method-c-clear","(colorable: colorable?)",""],["clear","Racc::ISet","Racc/ISet.html#method-i-clear","()",""],["clear","Set","Set.html#method-i-clear","()","<p>Removes all elements and returns self.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">set</span> = <span class=\"ruby-constant\">Set</span>[<span class=\"ruby-value\">1</span>, <span class=\"ruby-string\">&#39;c&#39;</span>, <span class=\"ruby-value\">:s</span>]             <span class=\"ruby-comment\">#=&gt; #&lt;Set: {1, &quot;c&quot;, :s}&gt;</span>\n<span class=\"ruby-identifier\">set</span>.<span class=\"ruby-identifier\">clear</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["clear","String","String.html#method-i-clear","()","<p>Removes the contents of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-comment\"># =&gt; &quot;foo&quot;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">clear</span>   <span class=\"ruby-comment\"># =&gt; &quot;&quot;</span>\n</pre>\n"],["clear","StringScanner","StringScanner.html#method-i-clear","()","<p>Equivalent to #terminate. This method is obsolete; use #terminate instead.\n"],["clear","Thread::Queue","Thread/Queue.html#method-i-clear","()","<p>Removes all objects from the queue.\n"],["clear","Thread::SizedQueue","Thread/SizedQueue.html#method-i-clear","()","<p>Removes all objects from the queue.\n"],["clear_bit!","OpenSSL::BN","OpenSSL/BN.html#method-i-clear_bit-21","(p1)",""],["clear_comment","RDoc::ClassModule","RDoc/ClassModule.html#method-i-clear_comment","()","<p>Clears the comment. Used by the Ruby parser.\n"],["clear_default_specs","Gem","Gem.html#method-c-clear_default_specs","()","<p>Clear default gem related variables. It is for test\n"],["clear_dialog","Reline::LineEditor","Reline/LineEditor.html#method-i-clear_dialog","()",""],["clear_dialog_with_content","Reline::LineEditor","Reline/LineEditor.html#method-i-clear_dialog_with_content","()",""],["clear_each_dialog","Reline::LineEditor","Reline/LineEditor.html#method-i-clear_each_dialog","(dialog)",""],["clear_gemspec_cache","Bundler","Bundler.html#method-c-clear_gemspec_cache","()",""],["clear_paths","Gem","Gem.html#method-c-clear_paths","()","<p>Reset the <code>dir</code> and <code>path</code> values.  The next time <code>dir</code> or <code>path</code> is requested, the values will be calculated …\n"],["clear_screen","IO","IO.html#method-i-clear_screen","()",""],["clear_screen","Reline::ANSI","Reline/ANSI.html#method-c-clear_screen","()",""],["clear_screen","Reline::GeneralIO","Reline/GeneralIO.html#method-c-clear_screen","()",""],["clear_screen","Reline::LineEditor","Reline/LineEditor.html#method-i-clear_screen","(key)",""],["clear_screen","Reline::Windows","Reline/Windows.html#method-c-clear_screen","()",""],["clear_screen_buffer","Reline::LineEditor","Reline/LineEditor.html#method-i-clear_screen_buffer","(prompt, prompt_list, prompt_width)",""],["cleared?","Fiddle::Pinned","Fiddle/Pinned.html#method-i-cleared-3F","()","<p>Returns true if the reference has been cleared, otherwise returns false.\n"],["client_ca","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-client_ca","()","<p>Returns the list of client CAs. Please note that in contrast to SSLContext#client_ca= no array of X509::Certificate …\n"],["client_cert_cb","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-client_cert_cb","()",""],["clobber_task_description","RDoc::Task","RDoc/Task.html#method-i-clobber_task_description","()","<p>Task description for the clobber rdoc task or its renamed equivalent\n"],["clobber_task_name","RDoc::Task","RDoc/Task.html#method-i-clobber_task_name","()",""],["clock_getres","Process","Process.html#method-c-clock_getres","(*args)","<p>Returns an estimate of the resolution of a <code>clock_id</code> using the POSIX <code>clock_getres()</code> function.\n<p>Note the …\n"],["clock_gettime","Process","Process.html#method-c-clock_gettime","(*args)","<p>Returns a time returned by POSIX clock_gettime() function.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">clock_gettime</span>(<span class=\"ruby-constant\">Process</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">CLOCK_MONOTONIC</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["clone","BigDecimal","BigDecimal.html#method-i-clone","()",""],["clone","ENV","ENV.html#method-c-clone","(p1 = {})","<p>Raises TypeError, because ENV is a wrapper for the process-wide environment variables and a clone is …\n"],["clone","Kernel","Kernel.html#method-i-clone","(freeze: nil)","<p>Produces a shallow copy of <em>obj</em>—the instance variables of <em>obj</em> are copied, but not the objects they reference. …\n"],["clone","Method","Method.html#method-i-clone","()","<p>Returns a clone of this method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">A</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">foo</span>\n    <span class=\"ruby-keyword\">return</span> <span class=\"ruby-string\">&quot;bar&quot;</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">A</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:foo</span>)\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">call</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["clone","Numeric","Numeric.html#method-i-clone","(*args)","<p>Returns <code>self</code>.\n<p>Raises an exception if the value for <code>freeze</code> is neither <code>true</code> nor <code>nil</code>.\n<p>Related: Numeric#dup …\n"],["clone","Singleton","Singleton.html#method-i-clone","()","<p>Raises a TypeError to prevent cloning.\n"],["clone","UnboundMethod","UnboundMethod.html#method-i-clone","()","<p>Returns a clone of this method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">A</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">foo</span>\n    <span class=\"ruby-keyword\">return</span> <span class=\"ruby-string\">&quot;bar&quot;</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">A</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:foo</span>)\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">call</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["close","ARGF","ARGF.html#method-i-close","()","<p>Closes the current file and skips to the next file in ARGV. If there are no more files to open, just …\n"],["close","CGI::Session","CGI/Session.html#method-i-close","()","<p>Store session data on the server and close the session storage. For some session storage types, this …\n"],["close","CGI::Session::FileStore","CGI/Session/FileStore.html#method-i-close","()","<p>Update and close the session’s FileStore file.\n"],["close","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-i-close","()","<p>Close session storage.\n<p>A no-op.\n"],["close","CGI::Session::NullStore","CGI/Session/NullStore.html#method-i-close","()","<p>Close session storage.\n<p>A no-op.\n"],["close","CGI::Session::PStore","CGI/Session/PStore.html#method-i-close","()","<p>Update and close the session’s PStore file.\n"],["close","Dir","Dir.html#method-i-close","()","<p>Closes the directory stream. Calling this method on closed Dir object is ignored since Ruby 2.3.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["close","Fiber::Scheduler","Fiber/Scheduler.html#method-i-close","()","<p>Called when the current thread exits. The scheduler is expected to implement this method in order to …\n"],["close","Fiddle::Handle","Fiddle/Handle.html#method-i-close","()","<p>Close this handle.\n<p>Calling close more than once will raise a Fiddle::DLError exception.\n"],["close","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-close","()","<p>Close the tar file\n"],["close","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-close","()","<p>Closes the tar entry\n"],["close","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-close","()","<p>Closes the TarWriter\n"],["close","Gem::SilentUI","Gem/SilentUI.html#method-i-close","()",""],["close","Gem::StreamUI","Gem/StreamUI.html#method-i-close","()",""],["close","IO","IO.html#method-i-close","()","<p>Closes the stream for both reading and writing if open for either or both; returns <code>nil</code>. See Open and …\n"],["close","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-close","()",""],["close","Logger","Logger.html#method-i-close","()","<p>Closes the logger; returns <code>nil</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">logger</span> = <span class=\"ruby-constant\">Logger</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.log&#39;</span>)\n<span class=\"ruby-identifier\">logger</span>.<span class=\"ruby-identifier\">close</span>       <span class=\"ruby-comment\"># =&gt; nil</span>\n<span class=\"ruby-identifier\">logger</span>.<span class=\"ruby-identifier\">info</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["close","Logger::LogDevice","Logger/LogDevice.html#method-i-close","()",""],["close","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-close","()","<p>Closes the SSLSocket and flushes any unwritten data.\n"],["close","OpenSSL::SSL::SSLServer","OpenSSL/SSL/SSLServer.html#method-i-close","()","<p>See IO#close for details.\n"],["close","Resolv::DNS","Resolv/DNS.html#method-i-close","()","<p>Closes the DNS resolver.\n"],["close","SOCKSSocket","SOCKSSocket.html#method-i-close","()","<p>Closes the SOCKS connection.\n"],["close","StringIO","StringIO.html#method-i-close","()","<p>Closes <code>self</code> for both reading and writing.\n<p>Raises IOError if reading or writing is attempted.\n<p>Related:  …\n"],["close","Syslog","Syslog.html#method-c-close","()","<p>Closes the syslog facility. Raises a runtime exception if it is not open.\n"],["close","Tempfile","Tempfile.html#method-i-close","(unlink_now=false)","<p>Closes the file. If <code>unlink_now</code> is true, then the file will be unlinked (deleted) after closing. Of course, …\n"],["close","Thread::Queue","Thread/Queue.html#method-i-close","()","<p>Closes the queue. A closed queue cannot be re-opened.\n<p>After the call to close completes, the following …\n"],["close","Thread::SizedQueue","Thread/SizedQueue.html#method-i-close","()","<p>Similar to Thread::Queue#close.\n<p>The difference is behavior with waiting enqueuing threads.\n<p>If there are …\n"],["close","Win32::Registry","Win32/Registry.html#method-i-close","()","<p>Close key.\n<p>After close, most method raise an error.\n"],["close","Win32::Registry::PredefinedKey","Win32/Registry/PredefinedKey.html#method-i-close","()","<p>Predefined keys cannot be closed\n"],["close","Zlib::GzipFile","Zlib/GzipFile.html#method-i-close","()","<p>Closes the GzipFile object. This method calls close method of the associated IO object. Returns the associated …\n"],["close","Zlib::ZStream","Zlib/ZStream.html#method-i-close","()","<p>Closes the stream. All operations on the closed stream will raise an exception.\n"],["close!","Tempfile","Tempfile.html#method-i-close-21","()","<p>Closes and unlinks (deletes) the file. Has the same effect as called <code>close(true)</code>.\n"],["close_all","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-close_all","()",""],["close_enabled?","Fiddle::Handle","Fiddle/Handle.html#method-i-close_enabled-3F","()","<p>Returns <code>true</code> if dlclose() will be called when this handle is garbage collected.\n<p>See man(3) dlclose() for …\n"],["close_incoming","Ractor","Ractor.html#method-i-close_incoming","()","<p>Closes the incoming port and returns its previous state. All further attempts to Ractor.receive in the …\n"],["close_on_exec=","IO","IO.html#method-i-close_on_exec-3D","(p1)","<p>Sets a close-on-exec flag.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;/dev/null&quot;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">close_on_exec</span> = <span class=\"ruby-keyword\">true</span>\n<span class=\"ruby-identifier\">system</span>(<span class=\"ruby-string\">&quot;cat&quot;</span>, <span class=\"ruby-node\">&quot;/proc/self/fd/#{f.fileno}&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["close_on_exec?","IO","IO.html#method-i-close_on_exec-3F","()","<p>Returns <code>true</code> if the stream will be closed on exec, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">close_on_exec?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["close_outgoing","Ractor","Ractor.html#method-i-close_outgoing","()","<p>Closes the outgoing port and returns its previous state. All further attempts to Ractor.yield in the …\n"],["close_read","BasicSocket","BasicSocket.html#method-i-close_read","()","<p>Disallows further read using shutdown system call.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s1</span>, <span class=\"ruby-identifier\">s2</span> = <span class=\"ruby-constant\">UNIXSocket</span>.<span class=\"ruby-identifier\">pair</span>\n<span class=\"ruby-identifier\">s1</span>.<span class=\"ruby-identifier\">close_read</span>\n<span class=\"ruby-identifier\">s2</span>.<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["close_read","IO","IO.html#method-i-close_read","()","<p>Closes the stream for reading if open for reading; returns <code>nil</code>. See Open and Closed Streams.\n<p>If the stream …\n"],["close_read","StringIO","StringIO.html#method-i-close_read","()","<p>Closes <code>self</code> for reading; closed-write setting remains unchanged.\n<p>Raises IOError if reading is attempted. …\n"],["close_write","BasicSocket","BasicSocket.html#method-i-close_write","()","<p>Disallows further write using shutdown system call.\n\n<pre>UNIXSocket.pair {|s1, s2|\n  s1.print &quot;ping&quot;\n  s1.close_write ...</pre>\n"],["close_write","IO","IO.html#method-i-close_write","()","<p>Closes the stream for writing if open for writing; returns <code>nil</code>. See Open and Closed Streams.\n<p>Flushes any …\n"],["close_write","StringIO","StringIO.html#method-i-close_write","()","<p>Closes <code>self</code> for writing; closed-read setting remains unchanged.\n<p>Raises IOError if writing is attempted. …\n"],["closed?","ARGF","ARGF.html#method-i-closed-3F","()","<p>Returns <em>true</em> if the current file has been closed; <em>false</em> otherwise. Use ARGF.close to actually close the …\n"],["closed?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-closed-3F","()","<p>Is the tar entry closed?\n"],["closed?","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-closed-3F","()","<p>Is the TarWriter closed?\n"],["closed?","IO","IO.html#method-i-closed-3F","()","<p>Returns <code>true</code> if the stream is closed for both reading and writing, <code>false</code> otherwise. See Open and Closed …\n"],["closed?","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-closed-3F","()",""],["closed?","StringIO","StringIO.html#method-i-closed-3F","()","<p>Returns <code>true</code> if <code>self</code> is closed for both reading and writing, <code>false</code> otherwise.\n"],["closed?","Thread::Queue","Thread/Queue.html#method-i-closed-3F","()","<p>Returns <code>true</code> if the queue is closed.\n"],["closed?","Zlib::GzipFile","Zlib/GzipFile.html#method-i-closed-3F","()","<p>Same as IO#closed?\n"],["closed?","Zlib::ZStream","Zlib/ZStream.html#method-i-closed-3F","()","<p>Returns true if the stream is closed.\n"],["closed_read?","StringIO","StringIO.html#method-i-closed_read-3F","()","<p>Returns <code>true</code> if <code>self</code> is closed for reading, <code>false</code> otherwise.\n"],["closed_write?","StringIO","StringIO.html#method-i-closed_write-3F","()","<p>Returns <code>true</code> if <code>self</code> is closed for writing, <code>false</code> otherwise.\n"],["cmds","OpenSSL::Engine","OpenSSL/Engine.html#method-i-cmds","()","<p>Returns an array of command definitions for the current engine\n"],["cmp","FileUtils","FileUtils.html#method-i-cmp","(a, b)",""],["cmp","FileUtils","FileUtils.html#method-c-cmp","(a, b)",""],["cmp","OpenSSL::BN","OpenSSL/BN.html#method-i-cmp","(p1)",""],["cmp","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-cmp","(p1)","<p>Compares this certificate id with <em>other</em> and returns <code>true</code> if they are the same.\n"],["cmp","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-cmp","(p1)","<p>Compares this Name with <em>other</em> and returns <code>0</code> if they are the same and <code>-1</code> or <code>+1</code> if they are greater or …\n"],["cmp_issuer","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-cmp_issuer","(p1)","<p>Compares this certificate id’s issuer with <em>other</em> and returns <code>true</code> if they are the same.\n"],["cmsg_is?","Socket::AncillaryData","Socket/AncillaryData.html#method-i-cmsg_is-3F","(p1, p2)","<p>tests the level and type of <em>ancillarydata</em>.\n\n<pre>ancdata = Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, ...</pre>\n"],["code_around_binding","IRB::WorkSpace","IRB/WorkSpace.html#method-i-code_around_binding","()",""],["code_block","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-code_block","()",""],["code_gc","RubyVM::YJIT","RubyVM/YJIT.html#method-c-code_gc","()","<p>Free and recompile all existing JIT code\n"],["code_with_context","SyntaxSuggest::DisplayInvalidBlocks","SyntaxSuggest/DisplayInvalidBlocks.html#method-i-code_with_context","()",""],["codepage","WIN32OLE","WIN32OLE.html#method-c-codepage","()","<p>Returns current codepage.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">codepage</span> <span class=\"ruby-comment\"># =&gt; WIN32OLE::CP_ACP</span>\n</pre>\n"],["codepage=","WIN32OLE","WIN32OLE.html#method-c-codepage-3D","(p1)","<p>Sets current codepage. The WIN32OLE.codepage is initialized according to Encoding.default_internal.  …\n"],["codepoints","String","String.html#method-i-codepoints","()","<p>Returns an array of the codepoints in <code>self</code>; each codepoint is the integer value for a character:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;hello&#39;</span>.<span class=\"ruby-identifier\">codepoints</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["coerce","BigDecimal","BigDecimal.html#method-i-coerce","(p1)","<p>The coerce method provides support for Ruby type coercion. It is not enabled by default.\n<p>This means that …\n"],["coerce","Float","Float.html#method-i-coerce","(p1)","<p>Returns a 2-element array containing <code>other</code> converted to a Float and <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>                 <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["coerce","Integer","Integer.html#method-i-coerce","(p1)","<p>Returns an array with both a <code>numeric</code> and a <code>int</code> represented as Integer objects or Float objects.\n<p>This is …\n"],["coerce","Numeric","Numeric.html#method-i-coerce","(p1)","<p>Returns a 2-element array containing two numeric elements, formed from the two operands <code>self</code> and <code>other</code> …\n"],["coerce","OpenSSL::BN","OpenSSL/BN.html#method-i-coerce","(p1)",""],["coerce","URI::Generic","URI/Generic.html#method-i-coerce","(oth)","<p>Args\n<p><code>v</code> &mdash; URI or String\n\n<p>Description\n"],["coerce_other","IPAddr","IPAddr.html#method-i-coerce_other","(other)",""],["cofactor","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-cofactor","()","<p>Returns the cofactor of the group.\n<p>See the OpenSSL documentation for EC_GROUP_get_cofactor()\n"],["col_sep","CSV","CSV.html#method-i-col_sep","()","<p>Returns the encoded column separator; used for parsing and writing; see {Option <code>col_sep</code>}:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CSV</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;&#39;</span>).<span class=\"ruby-identifier\">col_sep</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["collect","Array","Array.html#method-i-collect","()","<p>Calls the block, if given, with each element of <code>self</code>; returns a new Array whose elements are the return …\n"],["collect","Enumerable","Enumerable.html#method-i-collect","()","<p>Returns an array of objects returned by the block.\n<p>With a block given, calls the block with successive …\n"],["collect","Enumerator::Lazy","Enumerator/Lazy.html#method-i-collect","()","<p>Like Enumerable#map, but chains operation to be lazy-evaluated.\n\n<pre>(1..Float::INFINITY).lazy.map {|i| i**2 ...</pre>\n"],["collect!","Array","Array.html#method-i-collect-21","()","<p>Calls the block, if given, with each element; replaces the element with the block’s return value: …\n"],["collect!","Set","Set.html#method-i-collect-21","()","<p>Replaces the elements with ones returned by <code>collect()</code>.\nReturns an enumerator if no block is given.\n"],["collect_concat","Enumerable","Enumerable.html#method-i-collect_concat","()","<p>Returns an array of flattened objects returned by the block.\n<p>With a block given, calls the block with …\n"],["collect_concat","Enumerator::Lazy","Enumerator/Lazy.html#method-i-collect_concat","()","<p>Returns a new lazy enumerator with the concatenated results of running <code>block</code> once for every element in …\n"],["collect_first_comment","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-collect_first_comment","()","<p>Look for the first comment in a file that isn’t a shebang line.\n"],["collect_method","FileUtils","FileUtils.html#method-c-collect_method","(opt)","<p>Returns an array of the string method names of the methods that accept the given keyword option <code>opt</code>; …\n"],["collect_tokens","RDoc::TokenStream","RDoc/TokenStream.html#method-i-collect_tokens","()","<p>Starts collecting tokens\n"],["colorable?","IRB::Color","IRB/Color.html#method-c-colorable-3F","()",""],["colorize","IRB::Color","IRB/Color.html#method-c-colorize","(text, seq, colorable: colorable?)",""],["colorize_code","IRB::Color","IRB/Color.html#method-c-colorize_code","(code, complete: true, ignore_error: false, colorable: colorable?, local_variables: [])","<p>If ‘complete` is false (code is incomplete), this does not warn compile_error. This option is needed …\n"],["column","Ripper","Ripper.html#method-i-column","()","<p>Return column number of current parsing line. This number starts from 0.\n"],["column","Ripper::Filter","Ripper/Filter.html#method-i-column","()","<p>The column number of the current token. This value starts from 0. This method is valid only in event …\n"],["column_separator","CSV::Parser","CSV/Parser.html#method-i-column_separator","()",""],["combination","Array","Array.html#method-i-combination","(p1)","<p>Calls the block, if given, with combinations of elements of <code>self</code>; returns <code>self</code>. The order of combinations …\n"],["combination","SyntaxSuggest::CodeFrontier","SyntaxSuggest/CodeFrontier.html#method-c-combination","(array)","<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">combination</span>([<span class=\"ruby-value\">:a</span>, <span class=\"ruby-value\">:b</span>, <span class=\"ruby-value\">:c</span>, <span class=\"ruby-value\">:d</span>])\n<span class=\"ruby-comment\"># =&gt; [[:a], [:b], [:c], [:d], [:a, :b], [:a, :c], [:a, :d], [:b, ...</span>\n</pre>\n"],["comma_breakable","PP::PPMethods","PP/PPMethods.html#method-i-comma_breakable","()","<p>A convenience method which is same as follows:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">text</span> <span class=\"ruby-string\">&#39;,&#39;</span>\n<span class=\"ruby-identifier\">breakable</span>\n</pre>\n"],["command","DRb::ExtServManager","DRb/ExtServManager.html#method-c-command","()",""],["command=","DRb::ExtServManager","DRb/ExtServManager.html#method-c-command-3D","(cmd)",""],["command_names","Gem::CommandManager","Gem/CommandManager.html#method-i-command_names","()","<p>Return a sorted list of all command names as strings.\n"],["commands","FileUtils","FileUtils.html#method-c-commands","()","<p>Returns an array of the string names of FileUtils methods that accept one or more keyword arguments: …\n"],["comment","Zlib::GzipFile","Zlib/GzipFile.html#method-i-comment","()","<p>Returns comments recorded in the gzip file header, or nil if the comments is not present.\n"],["comment=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-comment-3D","(comment)","<p>Replaces our comment with <code>comment</code>, unless it is empty.\n"],["comment=","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-comment-3D","(p1)","<p>Specify the comment (<code>str</code>) in the gzip header.\n"],["commercial","Date","Date.html#method-c-commercial","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Returns a new Date object constructed from the arguments.\n<p>Argument <code>cwyear</code> gives the year, and should be …\n"],["commercial","DateTime","DateTime.html#method-c-commercial","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7, p8 = v8)","<p>Creates a DateTime object denoting the given week date.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">commercial</span>(<span class=\"ruby-value\">2001</span>) <span class=\"ruby-comment\">#=&gt; #&lt;DateTime: 2001-01-01T00:00:00+00:00 ...</span>\n</pre>\n"],["commit","PStore","PStore.html#method-i-commit","()","<p>Exits the current transaction block, committing any changes specified in the transaction block. See  …\n"],["common_options","Gem::Command","Gem/Command.html#method-c-common_options","()",""],["compact","Array","Array.html#method-i-compact","()","<p>Returns a new Array containing all non-<code>nil</code> elements from <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-keyword\">nil</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">compact</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compact","Enumerable","Enumerable.html#method-i-compact","()","<p>Returns an array of all non-<code>nil</code> elements:\n\n<pre>a = [nil, 0, nil, &#39;a&#39;, false, nil, false, nil, &#39;a&#39;, nil, 0, ...</pre>\n"],["compact","Enumerator::Lazy","Enumerator/Lazy.html#method-i-compact","()","<p>Like Enumerable#compact, but chains operation to be lazy-evaluated.\n"],["compact","Fiddle::CParser","Fiddle/CParser.html#method-i-compact","(signature)",""],["compact","GC","GC.html#method-c-compact","()","<p>This function compacts objects together in Ruby’s heap.  It eliminates unused space (or fragmentation) …\n"],["compact","Hash","Hash.html#method-i-compact","()","<p>Returns a copy of <code>self</code> with all <code>nil</code>-valued entries removed:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">bat:</span> <span class=\"ruby-keyword\">nil</span>}\n<span class=\"ruby-identifier\">h1</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compact!","Array","Array.html#method-i-compact-21","()","<p>Removes all <code>nil</code> elements from <code>self</code>.\n<p>Returns <code>self</code> if any elements removed, otherwise <code>nil</code>.\n"],["compact!","Hash","Hash.html#method-i-compact-21","()","<p>Returns <code>self</code> with all its <code>nil</code>-valued entries removed (in place):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">bat:</span> <span class=\"ruby-keyword\">nil</span>} <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compact_specs","Gem::Indexer","Gem/Indexer.html#method-i-compact_specs","(specs)","<p>Compacts Marshal output for the specs index data source by using identical objects as much as possible. …\n"],["compare?","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-compare-3F","(p1)","<p>Used primarily to check if an OpenSSL::X509::Certificate#public_key compares to its private key.\n<p>Example …\n"],["compare_by_identity","Hash","Hash.html#method-i-compare_by_identity","()","<p>Sets <code>self</code> to consider only identity in comparing keys; two keys are considered the same only if they …\n"],["compare_by_identity","Set","Set.html#method-i-compare_by_identity","()","<p>Makes the set compare its elements by their identity and returns\nself. This method may not be supported ...\n"],["compare_by_identity?","Hash","Hash.html#method-i-compare_by_identity-3F","()","<p>Returns <code>true</code> if #compare_by_identity has been called, <code>false</code> otherwise.\n"],["compare_by_identity?","Set","Set.html#method-i-compare_by_identity-3F","()","<p>Returns true if the set will compare its elements by their\nidentity. Also see Set#compare_by_identity ...\n"],["compare_file","FileUtils","FileUtils.html#method-c-compare_file","(a, b)","<p>Returns <code>true</code> if the contents of files <code>a</code> and <code>b</code> are identical, <code>false</code> otherwise.\n<p>Arguments <code>a</code> and <code>b</code> should …\n"],["compare_file","FileUtils","FileUtils.html#method-i-compare_file","(a, b)","<p>Returns <code>true</code> if the contents of files <code>a</code> and <code>b</code> are identical, <code>false</code> otherwise.\n<p>Arguments <code>a</code> and <code>b</code> should …\n"],["compare_stream","FileUtils","FileUtils.html#method-i-compare_stream","(a, b)","<p>Returns <code>true</code> if the contents of streams <code>a</code> and <code>b</code> are identical, <code>false</code> otherwise.\n<p>Arguments <code>a</code> and <code>b</code> should …\n"],["compare_stream","FileUtils","FileUtils.html#method-c-compare_stream","(a, b)","<p>Returns <code>true</code> if the contents of streams <code>a</code> and <code>b</code> are identical, <code>false</code> otherwise.\n<p>Arguments <code>a</code> and <code>b</code> should …\n"],["compatible?","Encoding","Encoding.html#method-c-compatible-3F","(p1, p2)","<p>Checks the compatibility of two objects.\n<p>If the objects are both strings they are compatible when they …\n"],["compile","Regexp","Regexp.html#method-c-compile","(*args)","<p>Alias for Regexp.new\n"],["compile","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile","(p1, *args, p3 = {})","<p>Takes <code>source</code>, a String of Ruby code and compiles it to an InstructionSequence.\n<p>Optionally takes <code>file</code>, …\n"],["compile_error","Ripper","Ripper.html#method-i-compile_error","(msg)","<p>This method is called when the parser found syntax error.\n"],["compile_error","SyntaxSuggest::RipperErrors","SyntaxSuggest/RipperErrors.html#method-i-compile_error","(msg)",""],["compile_file","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile_file","(p1, *args, p3 = {})","<p>Takes <code>file</code>, a String with the location of a Ruby source file, reads, parses and compiles the file, and …\n"],["compile_option","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile_option","()","<p>Returns a hash of default options used by the Ruby iseq compiler.\n<p>For details, see InstructionSequence.compile_option= …\n"],["compile_option=","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile_option-3D","(p1)","<p>Sets the default values for various optimizations in the Ruby iseq compiler.\n<p>Possible values for <code>options</code> …\n"],["complain","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-complain","(message)",""],["complete","OptionParser::Completion","OptionParser/Completion.html#method-i-complete","(key, icase = false, pat = nil)",""],["complete","OptionParser::List","OptionParser/List.html#method-i-complete","(id, opt, icase = false, *pat, &block)","<p>Searches list <code>id</code> for <code>opt</code> and the optional patterns for completion <code>pat</code>. If <code>icase</code> is true, the search is …\n"],["complete","RDoc::ClassModule","RDoc/ClassModule.html#method-i-complete","(min_visibility)","<p>Prepares this ClassModule for use by a generator.\n<p>See RDoc::Store#complete\n"],["complete","RDoc::Store","RDoc/Store.html#method-i-complete","(min_visibility)","<p>Prepares the RDoc code object tree for use by a generator.\n<p>It finds unique classes/modules defined, and …\n"],["complete","Reline::LineEditor","Reline/LineEditor.html#method-i-complete","(list, just_show_list = false)",""],["complete_authentication","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-i-complete_authentication","(token)","<p>Takes a token and gets the next token in the Negotiate authentication chain. Token can be Base64 encoded …\n"],["complete_internal_proc","Reline::LineEditor","Reline/LineEditor.html#method-i-complete_internal_proc","(list, is_menu)",""],["completer_quote_characters","Readline","Readline.html#method-c-completer_quote_characters","()","<p>Gets a list of characters which can be used to quote a substring of the line.\n<p>Raises NotImplementedError …\n"],["completer_quote_characters=","Readline","Readline.html#method-c-completer_quote_characters-3D","(p1)","<p>Sets a list of characters which can be used to quote a substring of the line. Completion occurs on the …\n"],["completer_quote_characters=","Reline::Core","Reline/Core.html#method-i-completer_quote_characters-3D","(v)",""],["completer_word_break_characters","Readline","Readline.html#method-c-completer_word_break_characters","()","<p>Gets the basic list of characters that signal a break between words for rl_complete_internal().\n<p>Raises …\n"],["completer_word_break_characters=","Readline","Readline.html#method-c-completer_word_break_characters-3D","(p1)","<p>Sets the basic list of characters that signal a break between words for rl_complete_internal(). The default …\n"],["completer_word_break_characters=","Reline::Core","Reline/Core.html#method-i-completer_word_break_characters-3D","(v)",""],["completion_append_character","Readline","Readline.html#method-c-completion_append_character","()","<p>Returns a string containing a character to be appended on completion. The default is a space (“ …\n"],["completion_append_character=","Readline","Readline.html#method-c-completion_append_character-3D","(p1)","<p>Specifies a character to be appended on completion. Nothing will be appended if an empty string (“”) …\n"],["completion_append_character=","Reline::Core","Reline/Core.html#method-i-completion_append_character-3D","(val)",""],["completion_case_fold","Readline","Readline.html#method-c-completion_case_fold","()","<p>Returns true if completion ignores case. If no, returns false.\n<p>NOTE: Returns the same object that is specified …\n"],["completion_case_fold","Reline::Core","Reline/Core.html#method-i-completion_case_fold","()",""],["completion_case_fold=","Readline","Readline.html#method-c-completion_case_fold-3D","(p1)","<p>Sets whether or not to ignore case on completion.\n"],["completion_case_fold=","Reline::Core","Reline/Core.html#method-i-completion_case_fold-3D","(v)",""],["completion_journey_data","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-completion_journey_data","()",""],["completion_proc","Readline","Readline.html#method-c-completion_proc","()","<p>Returns the completion Proc object.\n"],["completion_proc=","Readline","Readline.html#method-c-completion_proc-3D","(p1)","<p>Specifies a Proc object <code>proc</code> to determine completion behavior.  It should take input string and return …\n"],["completion_proc=","Reline::Core","Reline/Core.html#method-i-completion_proc-3D","(p)",""],["completion_quote_character","Readline","Readline.html#method-c-completion_quote_character","()","<p>When called during a completion (e.g. from within your completion_proc), it will return a string containing …\n"],["completion_quote_character","Reline::Core","Reline/Core.html#method-i-completion_quote_character","()",""],["component","URI::Generic","URI/Generic.html#method-i-component","()","<p>Components of the URI in the order.\n"],["component","URI::Generic","URI/Generic.html#method-c-component","()","<p>Components of the URI in the order.\n"],["component_ary","URI::Generic","URI/Generic.html#method-i-component_ary","()","<p>Returns an Array of the components defined from the COMPONENT Array.\n"],["compose_sets","Gem::Resolver","Gem/Resolver.html#method-c-compose_sets","(*sets)","<p>Combines <code>sets</code> into a ComposedSet that allows specification lookup in a uniform manner.  If one of the …\n"],["compress","Gem::Indexer","Gem/Indexer.html#method-i-compress","(filename, extension)","<p>Compress <code>filename</code> with <code>extension</code>.\n"],["compress_indices","Gem::Indexer","Gem/Indexer.html#method-i-compress_indices","()","<p>Compresses indices on disk\n"],["compress_meta_key","Reline::KeyStroke","Reline/KeyStroke.html#method-i-compress_meta_key","(ary)",""],["compute_dfa","Racc::States","Racc/States.html#method-i-compute_dfa","()",""],["compute_expand","Racc::Grammar","Racc/Grammar.html#method-i-compute_expand","(t)","<p>Sym#expand\n"],["compute_hash","Racc::Grammar","Racc/Grammar.html#method-i-compute_hash","()","<p>Rule#hash\n"],["compute_heads","Racc::Grammar","Racc/Grammar.html#method-i-compute_heads","()","<p>Sym#heads\n"],["compute_key","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-compute_key","(pub_bn)","<p>Returns a String containing a shared secret computed from the other party’s public value.\n<p>This method …\n"],["compute_locate","Racc::Grammar","Racc/Grammar.html#method-i-compute_locate","()","<p>Sym#locate\n"],["compute_nfa","Racc::States","Racc/States.html#method-i-compute_nfa","()",""],["compute_nullable","Racc::Grammar","Racc/Grammar.html#method-i-compute_nullable","()","<p>Sym#nullable?, Rule#nullable?\n"],["compute_nullable_0","Racc::Grammar","Racc/Grammar.html#method-i-compute_nullable_0","()","<p>Sym#self_null?\n"],["compute_useless","Racc::Grammar","Racc/Grammar.html#method-i-compute_useless","()","<p>Sym#useless?, Rule#useless? FIXME: what means “useless”?\n"],["concat","Array","Array.html#method-i-concat","(*args)","<p>Adds to <code>array</code> all elements from each Array in <code>other_arrays</code>; returns <code>self</code>:\n\n<pre>a = [0, 1]\na.concat([2, 3], ...</pre>\n"],["concat","Gem::Requirement","Gem/Requirement.html#method-i-concat","(new)","<p>Concatenates the <code>new</code> requirements onto this requirement.\n"],["concat","OpenSSL::Buffering::Buffer","OpenSSL/Buffering/Buffer.html#method-i-concat","(string)",""],["concat","Reline::History","Reline/History.html#method-i-concat","(*val)",""],["concat","String","String.html#method-i-concat","(*args)","<p>Concatenates each object in <code>objects</code> to <code>self</code> and returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">concat</span>(<span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-string\">&#39;baz&#39;</span>) <span class=\"ruby-comment\"># =&gt; &quot;foobarbaz&quot; ...</span>\n</pre>\n"],["concat","StringScanner","StringScanner.html#method-i-concat","(p1)","<p>Appends <code>str</code> to the string being scanned. This method does not affect scan pointer.\n\n<pre>s = StringScanner.new(&quot;Fri ...</pre>\n"],["conf","IRB","IRB.html#method-c-conf","()","<p>Displays current configuration.\n<p>Modifying the configuration is achieved by sending a message to IRB.conf …\n"],["config","DRb","DRb.html#method-i-config","()","<p>Get the configuration of the current server.\n<p>If there is no current server, this returns the default configuration. …\n"],["config","DRb","DRb.html#method-c-config","()","<p>Get the configuration of the current server.\n<p>If there is no current server, this returns the default configuration. …\n"],["config","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-config","()",""],["config_file","Gem","Gem.html#method-c-config_file","()","<p>The path to standard location of the user’s .gemrc file.\n"],["config_file_name","Gem::ConfigFile","Gem/ConfigFile.html#method-i-config_file_name","()","<p>The name of the configuration file.\n"],["config_home","Gem","Gem.html#method-c-config_home","()","<p>The path to standard location of the user’s configuration directory.\n"],["configuration","Gem","Gem.html#method-c-configuration","()","<p>The standard configuration object for gems.\n"],["configuration=","Gem","Gem.html#method-c-configuration-3D","(config)","<p>Use the given configuration object (which implements the ConfigFile protocol) as the standard configuration …\n"],["configure","Bundler","Bundler.html#method-c-configure","()",""],["configure","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-configure","(p1)","<p>Configure this State instance with the Hash <em>opts</em>, and return itself.\n"],["configure_connection_for_https","Gem::Request","Gem/Request.html#method-c-configure_connection_for_https","(connection, cert_files)",""],["configure_gem_home","Bundler","Bundler.html#method-c-configure_gem_home","(path)",""],["configure_gem_home_and_path","Bundler","Bundler.html#method-c-configure_gem_home_and_path","(path = bundle_path)",""],["configure_gem_path","Bundler","Bundler.html#method-c-configure_gem_path","()",""],["configure_options","Gem::Command","Gem/Command.html#method-i-configure_options","(header, option_list)",""],["configured_bundle_path","Bundler","Bundler.html#method-c-configured_bundle_path","()",""],["confirm_multiline_termination","Reline::LineEditor","Reline/LineEditor.html#method-i-confirm_multiline_termination","()",""],["conflict?","Racc::State","Racc/State.html#method-i-conflict-3F","()",""],["conflict_fixing_possibilities?","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-conflict_fixing_possibilities-3F","(state, binding_requirements)","<p>@param [DependencyState] state @param [Array] binding_requirements array of requirements @return [Boolean] …\n"],["conflicting_dependencies","Gem::DependencyResolutionError","Gem/DependencyResolutionError.html#method-i-conflicting_dependencies","()",""],["conflicting_dependencies","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-conflicting_dependencies","()","<p>Return the 2 dependency objects that conflicted\n"],["conflicts","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-conflicts","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#conflicts)\n"],["conflicts","Gem::Specification","Gem/Specification.html#method-i-conflicts","()","<p>Return any possible conflicts against the currently loaded specs.\n"],["confstr","Etc","Etc.html#method-c-confstr","(p1)","<p>Returns system configuration variable using confstr().\n<p><em>name</em> should be a constant under <code>Etc</code> which begins …\n"],["conftest_source","MakeMakefile","MakeMakefile.html#method-i-conftest_source","()",""],["conj","Complex","Complex.html#method-i-conj","()","<p>Returns the complex conjugate.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">conjugate</span>  <span class=\"ruby-comment\">#=&gt; (1-2i)</span>\n</pre>\n"],["conj","Numeric","Numeric.html#method-i-conj","()",""],["conjugate","Complex","Complex.html#method-i-conjugate","()","<p>Returns the complex conjugate.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">conjugate</span>  <span class=\"ruby-comment\">#=&gt; (1-2i)</span>\n</pre>\n"],["conjugate","Numeric","Numeric.html#method-i-conjugate","()","<p>Returns self.\n"],["connect","Addrinfo","Addrinfo.html#method-i-connect","(timeout: nil, &block)","<p>creates a socket connected to the address of self.\n<p>The optional argument <em>opts</em> is options represented by …\n"],["connect","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-connect","(tcp)","<p>Connect to IO <code>tcp</code>, with context of the current certificate configuration\n"],["connect","Net::HTTP","Net/HTTP.html#method-i-connect","()",""],["connect","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-connect","()","<p>Initiates an SSL/TLS handshake with a server.\n"],["connect","Socket","Socket.html#method-i-connect","(p1)","<p>Requests a connection to be made on the given <code>remote_sockaddr</code>. Returns 0 if successful, otherwise an …\n"],["connect","UDPSocket","UDPSocket.html#method-i-connect","(p1, p2)","<p>Connects <em>udpsocket</em> to <em>host</em>:<em>port</em>.\n<p>This makes possible to send without destination address.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">u1</span> = <span class=\"ruby-constant\">UDPSocket</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["connect","WIN32OLE","WIN32OLE.html#method-c-connect","(p1, *args)","<p>Returns running OLE Automation object or WIN32OLE object from moniker. 1st argument should be OLE program …\n"],["connect_address","BasicSocket","BasicSocket.html#method-i-connect_address","()","<p>Returns an address of the socket suitable for connect in the local machine.\n<p>This method returns <em>self</em>.local_address, …\n"],["connect_from","Addrinfo","Addrinfo.html#method-i-connect_from","(*args, timeout: nil, &block)","<p>creates a socket connected to the address of self.\n<p>If one or more arguments given as <em>local_addr_args</em>, …\n"],["connect_internal","Addrinfo","Addrinfo.html#method-i-connect_internal","(local_addrinfo, timeout=nil)","<p>creates a new Socket connected to the address of <code>local_addrinfo</code>.\n<p>If <em>local_addrinfo</em> is nil, the address …\n"],["connect_nonblock","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-connect_nonblock","(p1 = {})","<p>Initiates the SSL/TLS handshake as a client in non-blocking manner.\n\n<pre># emulates blocking connect\nbegin ...</pre>\n"],["connect_nonblock","Socket","Socket.html#method-i-connect_nonblock","(addr, exception: true)","<p>Requests a connection to be made on the given <code>remote_sockaddr</code> after O_NONBLOCK is set for the underlying …\n"],["connect_to","Addrinfo","Addrinfo.html#method-i-connect_to","(*args, timeout: nil, &block)","<p>creates a socket connected to <em>remote_addr_args</em> and bound to self.\n<p>The optional last argument <em>opts</em> is options …\n"],["connection_close?","Net::HTTPHeader","Net/HTTPHeader.html#method-i-connection_close-3F","()",""],["connection_for","Gem::Request","Gem/Request.html#method-i-connection_for","(uri)","<p>Creates or an HTTP connection based on <code>uri</code>, or retrieves an existing connection, using a proxy if needed. …\n"],["connection_keep_alive?","Net::HTTPHeader","Net/HTTPHeader.html#method-i-connection_keep_alive-3F","()",""],["consider_local?","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-consider_local-3F","()","<p>Indicated, based on the requested domain, if local gems should be considered.\n"],["consider_remote?","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-consider_remote-3F","()","<p>Indicated, based on the requested domain, if remote gems should be considered.\n"],["console","IO","IO.html#method-c-console","(*args)","<p>Returns an File instance opened console.\n<p>If <code>sym</code> is given, it will be sent to the opened console with  …\n"],["console_mode","IO","IO.html#method-i-console_mode","()","<p>Returns a data represents the current console mode.\n<p>You must require ‘io/console’ to use this …\n"],["console_mode=","IO","IO.html#method-i-console_mode-3D","(p1)","<p>Sets the console mode to <code>mode</code>.\n<p>You must require ‘io/console’ to use this method.\n"],["console_size","IO","IO.html#method-c-console_size","()",""],["const_added","Module","Module.html#method-i-const_added","(p1)","<p>Invoked as a callback whenever a constant is assigned on the receiver\n\n<pre>module Chatty\n  def self.const_added(const_name) ...</pre>\n"],["const_defined?","Module","Module.html#method-i-const_defined-3F","(*args)","<p>Says whether <em>mod</em> or its ancestors have a constant with the given name:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Float</span>.<span class=\"ruby-identifier\">const_defined?</span>(<span class=\"ruby-value\">:EPSILON</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["const_get","Module","Module.html#method-i-const_get","(*args)","<p>Checks for a constant with the given name in <em>mod</em>. If <code>inherit</code> is set, the lookup will also search the …\n"],["const_load","WIN32OLE","WIN32OLE.html#method-c-const_load","(p1, p2 = v2)","<p>Defines the constants of OLE Automation server as mod’s constants. The first argument is WIN32OLE …\n"],["const_missing","Module","Module.html#method-i-const_missing","(p1)","<p>Invoked when a reference is made to an undefined constant in <em>mod</em>. It is passed a symbol for the undefined …\n"],["const_set","Module","Module.html#method-i-const_set","(p1, p2)","<p>Sets the named constant to the given object, returning that object. Creates a new constant if no constant …\n"],["const_source_location","Module","Module.html#method-i-const_source_location","(*args)","<p>Returns the Ruby source filename and line number containing the definition of the constant specified. …\n"],["constants","Module","Module.html#method-c-constants","(*args)","<p>In the first form, returns an array of the names of all constants accessible from the point of call. …\n"],["constants","Module","Module.html#method-i-constants","(*args)","<p>Returns an array of the names of the constants accessible in <em>mod</em>. This includes the names of constants …\n"],["consume_rbuff","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-consume_rbuff","(size=nil)","<p>Consumes <em>size</em> bytes from the buffer\n"],["contains_requirable_file?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-contains_requirable_file-3F","(file)","<p>Return true if this spec can require <code>file</code>.\n"],["content_encoding","OpenURI::Meta","OpenURI/Meta.html#method-i-content_encoding","()","<p>Returns a list of encodings in Content-Encoding field as an array of strings.\n<p>The encodings are downcased …\n"],["content_length","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_length","()","<p>Returns the value of field <code>&#39;Content-Length&#39;</code> as an integer, or <code>nil</code> if there is no such field; …\n"],["content_length=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_length-3D","(len)","<p>Sets the value of field <code>&#39;Content-Length&#39;</code> to the given numeric; see Content-Length response header …\n"],["content_range","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_range","()","<p>Returns a Range object representing the value of field <code>&#39;Content-Range&#39;</code>, or <code>nil</code> if no such field …\n"],["content_type","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_type","()","<p>Returns the media type from the value of field <code>&#39;Content-Type&#39;</code>, or <code>nil</code> if no such field exists; …\n"],["content_type","OpenURI::Meta","OpenURI/Meta.html#method-i-content_type","()","<p>returns “type/subtype” which is MIME Content-Type. It is downcased for canonicalization. Content-Type …\n"],["content_type=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_type-3D","(type, params = {})",""],["contents","Gem::Package","Gem/Package.html#method-i-contents","()","<p>A list of file names contained in this gem\n"],["contents","Gem::Package::Old","Gem/Package/Old.html#method-i-contents","()","<p>A list of file names contained in this gem\n"],["contents=","Reline::LineEditor::Dialog","Reline/LineEditor/Dialog.html#method-i-contents-3D","(contents)",""],["context","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-context","()",""],["continue_entry_body","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-continue_entry_body","(entry_body, continuation)","<p>Attaches the <code>continuation</code> of the previous line to the <code>entry_body</code>.\n<p>Continued function listings are joined …\n"],["continue_timeout=","Net::HTTP","Net/HTTP.html#method-i-continue_timeout-3D","(sec)","<p>Setter for the continue_timeout attribute.\n"],["convert","CSV","CSV.html#method-i-convert","(name = nil, &converter)","<p>With no block, installs a field converter (a Proc).\n<p>With a block, defines and installs a custom field …\n"],["convert","CSV::FieldsConverter","CSV/FieldsConverter.html#method-i-convert","(fields, headers, lineno, quoted_fields)",""],["convert","Encoding::Converter","Encoding/Converter.html#method-i-convert","(p1)","<p>Convert source_string and return destination_string.\n<p>source_string is assumed as a part of source. i.e. …\n"],["convert","Gem::Ext::CargoBuilder::LinkFlagConverter","Gem/Ext/CargoBuilder/LinkFlagConverter.html#method-c-convert","(arg)",""],["convert","OptionParser::Completion","OptionParser/Completion.html#method-i-convert","(opt = nil, val = nil, *)",""],["convert","RDoc::Markup","RDoc/Markup.html#method-i-convert","(input, formatter)","<p>We take <code>input</code>, parse it if necessary, then invoke the output <code>formatter</code> using a Visitor to render the …\n"],["convert_fields","CSV","CSV.html#method-i-convert_fields","(fields, headers = false)","<p>Processes <code>fields</code> with <code>@converters</code>, or <code>@header_converters</code> if <code>headers</code> is passed as <code>true</code>, returning the …\n"],["convert_invalid_byte_sequence","IRB::Irb","IRB/Irb.html#method-i-convert_invalid_byte_sequence","(str, enc)",""],["convert_to_uri","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-convert_to_uri","(uri)",""],["convert_to_uri","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-convert_to_uri","(uri)",""],["converters","CSV","CSV.html#method-i-converters","()","<p>Returns an Array containing field converters; see Field Converters:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">csv</span> = <span class=\"ruby-constant\">CSV</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;&#39;</span>)\n<span class=\"ruby-identifier\">csv</span>.<span class=\"ruby-identifier\">converters</span> <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["convertible_int","MakeMakefile","MakeMakefile.html#method-i-convertible_int","(type, headers = nil, opts = nil, &b)","<p>Returns the convertible integer type of the given <code>type</code>.  You may optionally specify additional <code>headers</code> …\n"],["convpath","Encoding::Converter","Encoding/Converter.html#method-i-convpath","()","<p>Returns the conversion path of ec.\n<p>The result is an array of conversions.\n\n<pre>ec = Encoding::Converter.new(&quot;ISO-8859-1&quot;, ...</pre>\n"],["cooked","IO","IO.html#method-i-cooked","()","<p>Yields <code>self</code> within cooked mode.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">STDIN</span>.<span class=\"ruby-identifier\">cooked</span>(<span class=\"ruby-operator\">&amp;</span><span class=\"ruby-value\">:gets</span>)\n</pre>\n<p>will read and return a line with echo back and line …\n"],["cooked!","IO","IO.html#method-i-cooked-21","()","<p>Enables cooked mode.\n<p>If the terminal mode needs to be back, use io.cooked { … }.\n<p>You must require ‘io/console’ …\n"],["copy","FileUtils","FileUtils.html#method-c-copy","(src, dest, preserve: nil, noop: nil, verbose: nil)",""],["copy","FileUtils","FileUtils.html#method-i-copy","(src, dest, preserve: nil, noop: nil, verbose: nil)",""],["copy","IO::Buffer","IO/Buffer.html#method-i-copy","(*args)","<p>Efficiently copy data from a source IO::Buffer into the buffer, at <code>offset</code> using <code>memcpy</code>. For copying  …\n"],["copy","Net::HTTP","Net/HTTP.html#method-i-copy","(path, initheader = nil)","<p>Sends a COPY request to the <code>path</code> and gets a response, as an HTTPResponse object.\n"],["copy","OpenSSL::BN","OpenSSL/BN.html#method-i-copy","(p1)",""],["copy_entry","FileUtils","FileUtils.html#method-i-copy_entry","(src, dest, preserve = false, dereference_root = false, remove_destination = false)","<p>Recursively copies files from <code>src</code> to <code>dest</code>.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable as paths.\n<p>If …\n"],["copy_entry","FileUtils","FileUtils.html#method-c-copy_entry","(src, dest, preserve = false, dereference_root = false, remove_destination = false)","<p>Recursively copies files from <code>src</code> to <code>dest</code>.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable as paths.\n<p>If …\n"],["copy_file","FileUtils","FileUtils.html#method-c-copy_file","(src, dest, preserve = false, dereference = true)","<p>Copies file from <code>src</code> to <code>dest</code>, which should not be directories.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable …\n"],["copy_file","FileUtils","FileUtils.html#method-i-copy_file","(src, dest, preserve = false, dereference = true)","<p>Copies file from <code>src</code> to <code>dest</code>, which should not be directories.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable …\n"],["copy_for_vi","Reline::LineEditor","Reline/LineEditor.html#method-i-copy_for_vi","(text)",""],["copy_nonce","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-copy_nonce","(p1)","<p>Copies the nonce from <em>request</em> into this response.  Returns 1 on success and 0 on failure.\n"],["copy_stream","FileUtils","FileUtils.html#method-c-copy_stream","(src, dest)","<p>Copies IO stream <code>src</code> to IO stream <code>dest</code> via IO.copy_stream.\n<p>Related: methods for copying.\n"],["copy_stream","FileUtils","FileUtils.html#method-i-copy_stream","(src, dest)","<p>Copies IO stream <code>src</code> to IO stream <code>dest</code> via IO.copy_stream.\n<p>Related: methods for copying.\n"],["copy_stream","IO","IO.html#method-c-copy_stream","(p1, p2, p3 = v3, p4 = v4)","<p>Copies from the given <code>src</code> to the given <code>dst</code>, returning the number of bytes copied.\n<p>The given <code>src</code> must be …\n"],["copy_to","Gem::Installer::FakePackage","Gem/Installer/FakePackage.html#method-i-copy_to","(path)",""],["copy_to","Gem::Package","Gem/Package.html#method-i-copy_to","(path)","<p>Copies this package to <code>path</code> (if possible)\n"],["core","Reline","Reline.html#method-c-core","()",""],["core_to_state","Racc::States","Racc/States.html#method-i-core_to_state","(core)",""],["coredump?","Process::Status","Process/Status.html#method-i-coredump-3F","()","<p>Returns <code>true</code> if <em>stat</em> generated a coredump when it terminated. Not available on all platforms.\n"],["correct","DidYouMean::SpellChecker","DidYouMean/SpellChecker.html#method-i-correct","(input)",""],["correct","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-correct","(input)",""],["correct?","Gem::Version","Gem/Version.html#method-c-correct-3F","(version)","<p>True if the <code>version</code> string matches RubyGems’ requirements.\n"],["correct_element","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-correct_element","(names, element)",""],["correct_error","DidYouMean","DidYouMean.html#method-c-correct_error","(error_class, spell_checker)","<p>Adds <code>DidYouMean</code> functionality to an error using a given spell checker\n"],["correct_for_windows_path","Gem::Util","Gem/Util.html#method-c-correct_for_windows_path","(path)","<p>Corrects <code>path</code> (usually returned by ‘URI.parse().path` on Windows), that comes with a leading slash.\n"],["corrections","DidYouMean::ClassNameChecker","DidYouMean/ClassNameChecker.html#method-i-corrections","()",""],["corrections","DidYouMean::Correctable","DidYouMean/Correctable.html#method-i-corrections","()",""],["corrections","DidYouMean::KeyErrorChecker","DidYouMean/KeyErrorChecker.html#method-i-corrections","()",""],["corrections","DidYouMean::MethodNameChecker","DidYouMean/MethodNameChecker.html#method-i-corrections","()",""],["corrections","DidYouMean::NullChecker","DidYouMean/NullChecker.html#method-i-corrections","()",""],["corrections","DidYouMean::PatternKeyNameChecker","DidYouMean/PatternKeyNameChecker.html#method-i-corrections","()",""],["corrections","DidYouMean::RequirePathChecker","DidYouMean/RequirePathChecker.html#method-i-corrections","()",""],["corrections","DidYouMean::VariableNameChecker","DidYouMean/VariableNameChecker.html#method-i-corrections","()",""],["corrections","Gem::UnknownCommandSpellChecker","Gem/UnknownCommandSpellChecker.html#method-i-corrections","()",""],["cos","BigMath","BigMath.html#method-i-cos","(x, prec)","<p>Computes the cosine of <code>decimal</code> to the specified number of digits of precision, <code>numeric</code>.\n<p>If <code>decimal</code> is …\n"],["cos","Math","Math.html#method-c-cos","(p1)","<p>Returns the cosine of <code>x</code> in radians.\n<p>Domain: <code>(-INFINITY, INFINITY)</code>.\n<p>Range: <code>[-1.0, 1.0]</code>.\n"],["cosh","Math","Math.html#method-c-cosh","(p1)","<p>Returns the hyperbolic cosine of <code>x</code> in radians.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[1, INFINITY]</code>.\n"],["count","Array","Array.html#method-i-count","(*args)","<p>Returns a count of specified elements.\n<p>With no argument and no block, returns the count of all elements: …\n"],["count","Enumerable","Enumerable.html#method-i-count","(p1)","<p>Returns the count of elements, based on an argument or block criterion, if given.\n<p>With no argument and …\n"],["count","GC","GC.html#method-c-count","()","<p>The number of times GC occurred.\n<p>It returns the number of times GC occurred since the process started. …\n"],["count","Ractor","Ractor.html#method-c-count","()","<p>Returns total count of Ractors currently running.\n\n<pre>Ractor.count                   #=&gt; 1\nr = Ractor.new(name: ...</pre>\n"],["count","Range","Range.html#method-i-count","(*args)","<p>Returns the count of elements, based on an argument or block criterion, if given.\n<p>With no argument and …\n"],["count","String","String.html#method-i-count","(*args)","<p>Returns the total number of characters in <code>self</code> that are specified by the given <code>selectors</code> (see Multiple …\n"],["count","SyntaxSuggest::CodeFrontier","SyntaxSuggest/CodeFrontier.html#method-i-count","()",""],["count_end","SyntaxSuggest::LeftRightLexCount","SyntaxSuggest/LeftRightLexCount.html#method-i-count_end","()",""],["count_for_char","SyntaxSuggest::LeftRightLexCount","SyntaxSuggest/LeftRightLexCount.html#method-i-count_for_char","(char)",""],["count_imemo_objects","ObjectSpace","ObjectSpace.html#method-c-count_imemo_objects","(*args)","<p>Counts objects for each <code>T_IMEMO</code> type.\n<p>This method is only for MRI developers interested in performance …\n"],["count_kw","SyntaxSuggest::LeftRightLexCount","SyntaxSuggest/LeftRightLexCount.html#method-i-count_kw","()",""],["count_lex","SyntaxSuggest::LeftRightLexCount","SyntaxSuggest/LeftRightLexCount.html#method-i-count_lex","(lex)","<p>Count source code characters\n<p>Example:\n\n<pre>left_right = LeftRightLexCount.new\nleft_right.count_lex(LexValue.new(1, ...</pre>\n"],["count_nodes","ObjectSpace","ObjectSpace.html#method-c-count_nodes","(*args)","<p>Counts nodes for each node type.\n<p>This method is only for MRI developers interested in performance and …\n"],["count_objects","ObjectSpace","ObjectSpace.html#method-c-count_objects","(*args)","<p>Counts all objects grouped by type.\n<p>It returns a hash, such as:\n\n<pre>{\n  :TOTAL=&gt;10000,\n  :FREE=&gt;3011,\n  :T_OBJECT=&gt;6, ...</pre>\n"],["count_objects_size","ObjectSpace","ObjectSpace.html#method-c-count_objects_size","(*args)","<p>Counts objects size (in bytes) for each type.\n<p>Note that this information is incomplete.  You need to deal …\n"],["count_observers","Observable","Observable.html#method-i-count_observers","()","<p>Return the number of observers associated with this object.\n"],["count_symbols","ObjectSpace","ObjectSpace.html#method-c-count_symbols","(*args)","<p>Counts symbols for each Symbol type.\n<p>This method is only for MRI developers interested in performance …\n"],["count_tdata_objects","ObjectSpace","ObjectSpace.html#method-c-count_tdata_objects","(*args)","<p>Counts objects for each <code>T_DATA</code> type.\n<p>This method is only for MRI developers interested in performance …\n"],["cover?","Range","Range.html#method-i-cover-3F","(p1)","<p>Returns <code>true</code> if the given argument is within <code>self</code>, <code>false</code> otherwise.\n<p>With non-range argument <code>object</code>, evaluates …\n"],["coverage_level=","RDoc::Stats","RDoc/Stats.html#method-i-coverage_level-3D","(level)","<p>Sets coverage report level.  Accepted values are:\n<p>false or nil &mdash; No report\n<p>0 &mdash; Classes, modules, constants, …\n"],["cp","FileUtils","FileUtils.html#method-i-cp","(src, dest, preserve: nil, noop: nil, verbose: nil)","<p>Copies files.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should be interpretable …\n"],["cp","FileUtils","FileUtils.html#method-c-cp","(src, dest, preserve: nil, noop: nil, verbose: nil)","<p>Copies files.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should be interpretable …\n"],["cp_lr","FileUtils","FileUtils.html#method-c-cp_lr","(src, dest, noop: nil, verbose: nil, dereference_root: true, remove_destination: false)","<p>Creates hard links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["cp_lr","FileUtils","FileUtils.html#method-i-cp_lr","(src, dest, noop: nil, verbose: nil, dereference_root: true, remove_destination: false)","<p>Creates hard links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["cp_r","FileUtils","FileUtils.html#method-i-cp_r","(src, dest, preserve: nil, noop: nil, verbose: nil, dereference_root: true, remove_destination: nil)","<p>Recursively copies files.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) …\n"],["cp_r","FileUtils","FileUtils.html#method-c-cp_r","(src, dest, preserve: nil, noop: nil, verbose: nil, dereference_root: true, remove_destination: nil)","<p>Recursively copies files.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) …\n"],["crc","Zlib::GzipFile","Zlib/GzipFile.html#method-i-crc","()","<p>Returns CRC value of the uncompressed data.\n"],["crc32","Zlib","Zlib.html#method-c-crc32","(*args)","<p>Calculates CRC checksum for <code>string</code>, and returns updated value of <code>crc</code>. If <code>string</code> is omitted, it returns …\n"],["crc32_combine","Zlib","Zlib.html#method-c-crc32_combine","(p1, p2, p3)","<p>Combine two CRC-32 check values in to one.  <code>crc1</code> is the first CRC-32 value, <code>crc2</code> is the second CRC-32 …\n"],["crc_table","Zlib","Zlib.html#method-c-crc_table","()","<p>Returns the table for calculating CRC checksum as an array.\n"],["create","Fiddle::CStructBuilder","Fiddle/CStructBuilder.html#method-i-create","(klass, types, members)","<p>Construct a new class given a C:\n<p>class <code>klass</code> (CUnion, CStruct, or other that provide an #entity_class …\n"],["create","Fiddle::CStructBuilder","Fiddle/CStructBuilder.html#method-c-create","(klass, types, members)","<p>Construct a new class given a C:\n<p>class <code>klass</code> (CUnion, CStruct, or other that provide an #entity_class …\n"],["create","Fiddle::Closure","Fiddle/Closure.html#method-c-create","(*args)","<p>Create a new closure. If a block is given, the created closure is automatically freed after the given …\n"],["create","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-c-create","()",""],["create","Gem::Requirement","Gem/Requirement.html#method-c-create","(*inputs)","<p>Factory method to create a Gem::Requirement object.  Input may be a Version, a String, or nil.  Intended …\n"],["create","Gem::Version","Gem/Version.html#method-c-create","(input)","<p>Factory method to create a Version object. Input may be a Version or a String. Intended to simplify client …\n"],["create","OpenSSL::OCSP::Response","OpenSSL/OCSP/Response.html#method-c-create","(p1, p2)","<p>Creates an OpenSSL::OCSP::Response from <em>status</em> and <em>basic_response</em>.\n"],["create","OpenSSL::PKCS12","OpenSSL/PKCS12.html#method-c-create","(p1, p2, p3, p4, p5 = v5, p6 = v6, p7 = v7, p8 = v8, p9 = v9, p10 = v10)","<p>Parameters\n<p><em>pass</em> - string\n<p><em>name</em> - A string describing the key.\n"],["create","Psych::Visitors::JSONTree","Psych/Visitors/JSONTree.html#method-c-create","(options = {})",""],["create","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-c-create","(symbolize_names: false, freeze: false, strict_integer: false)",""],["create","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-c-create","(options = {})",""],["create","Resolv::DNS::Name","Resolv/DNS/Name.html#method-c-create","(arg)","<p>Creates a new DNS name from <code>arg</code>.  <code>arg</code> can be:\n<p>Name &mdash; returns <code>arg</code>.\n<p>String &mdash; Creates a new Name.\n"],["create","Resolv::IPv4","Resolv/IPv4.html#method-c-create","(arg)",""],["create","Resolv::IPv6","Resolv/IPv6.html#method-c-create","(arg)","<p>Creates a new IPv6 address from <code>arg</code> which may be:\n<p>IPv6 &mdash; returns <code>arg</code>.\n<p>String &mdash; <code>arg</code> must match one of the IPv6::Regex …\n"],["create","Resolv::LOC::Alt","Resolv/LOC/Alt.html#method-c-create","(arg)","<p>Creates a new LOC::Alt from <code>arg</code> which may be:\n<p>LOC::Alt &mdash; returns <code>arg</code>.\n<p>String &mdash; <code>arg</code> must match the LOC::Alt::Regex …\n"],["create","Resolv::LOC::Coord","Resolv/LOC/Coord.html#method-c-create","(arg)","<p>Creates a new LOC::Coord from <code>arg</code> which may be:\n<p>LOC::Coord &mdash; returns <code>arg</code>.\n<p>String &mdash; <code>arg</code> must match the LOC::Coord::Regex …\n"],["create","Resolv::LOC::Size","Resolv/LOC/Size.html#method-c-create","(arg)","<p>Creates a new LOC::Size from <code>arg</code> which may be:\n<p>LOC::Size &mdash; returns <code>arg</code>.\n<p>String &mdash; <code>arg</code> must match the LOC::Size::Regex …\n"],["create","Tempfile","Tempfile.html#method-c-create","(basename=\"\", tmpdir=nil, mode: 0, **options)","<p>Creates a file in the underlying file system; returns a new File object based on that file.\n<p>With no block …\n"],["create","Win32::Registry","Win32/Registry.html#method-c-create","(hkey, subkey, desired = KEY_ALL_ACCESS, opt = REG_OPTION_RESERVED)","<p>— Registry.create(key, subkey, desired = KEY_ALL_ACCESS, opt = REG_OPTION_RESERVED)\n<p>— Registry.create …\n"],["create","Win32::Registry","Win32/Registry.html#method-i-create","(subkey, desired = KEY_ALL_ACCESS, opt = REG_OPTION_RESERVED, &blk)","<p>Same as Win32::Registry.create (self, subkey, desired, opt)\n"],["create_blocks_from_untracked_lines","SyntaxSuggest::CodeSearch","SyntaxSuggest/CodeSearch.html#method-i-create_blocks_from_untracked_lines","()","<p>Parses the most indented lines into blocks that are marked and added to the frontier\n"],["create_bundle_path","Bundler","Bundler.html#method-c-create_bundle_path","()",""],["create_cert","Gem::Security","Gem/Security.html#method-c-create_cert","(subject, key, age = ONE_YEAR, extensions = EXTENSIONS, serial = 1)","<p>Creates an unsigned certificate for <code>subject</code> and <code>key</code>.  The lifetime of the key is from the current time …\n"],["create_cert_email","Gem::Security","Gem/Security.html#method-c-create_cert_email","(email, key, age = ONE_YEAR, extensions = EXTENSIONS)","<p>Creates a self-signed certificate with an issuer and subject from <code>email</code>, a subject alternative name of …\n"],["create_cert_self_signed","Gem::Security","Gem/Security.html#method-c-create_cert_self_signed","(subject, key, age = ONE_YEAR, extensions = EXTENSIONS, serial = 1)","<p>Creates a self-signed certificate with an issuer and subject of <code>subject</code> and the given <code>extensions</code> for …\n"],["create_conflict","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-create_conflict","(underlying_error = nil)","<p>@param [Object] underlying_error @return [Conflict] a {Conflict} that reflects the failure to activate …\n"],["create_digest","Gem::Security","Gem/Security.html#method-c-create_digest","(algorithm = DIGEST_NAME)",""],["create_document","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-create_document","(groups)","<p>Creates an RDoc::Markup::Document given the <code>groups</code> of ChangeLog entries.\n"],["create_entries","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-create_entries","(entries)","<p>Returns a list of ChangeLog entries an RDoc::Markup nodes for the given <code>entries</code>.\n"],["create_entries","RDoc::Parser::ChangeLog::Git","RDoc/Parser/ChangeLog/Git.html#method-i-create_entries","(entries)",""],["create_entry","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-create_entry","(tuple, sec)",""],["create_ext","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-create_ext","(p1, p2, p3 = v3)","<p>Creates a new X509::Extension with passed values. See also x509v3_config(5).\n"],["create_ext_from_array","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-create_ext_from_array","(ary)",""],["create_ext_from_hash","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-create_ext_from_hash","(hash)",""],["create_ext_from_string","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-create_ext_from_string","(str)",""],["create_extension","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-create_extension","(*arg)",""],["create_fast_state","JSON","JSON.html#method-c-create_fast_state","()",""],["create_guid","WIN32OLE","WIN32OLE.html#method-c-create_guid","()","<p>Creates GUID.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">create_guid</span> <span class=\"ruby-comment\"># =&gt; {1CB530F1-F6B1-404D-BCE6-1959BF91F4A8}</span>\n</pre>\n"],["create_header","MakeMakefile","MakeMakefile.html#method-i-create_header","(header = \"extconf.h\")","<p>Generates a header file consisting of the various macro definitions generated by other methods such as …\n"],["create_id","JSON","JSON.html#method-c-create_id","()","<p>Returns the current create identifier. See also JSON.create_id=.\n"],["create_id=","JSON","JSON.html#method-c-create_id-3D","(new_value)","<p>Sets create identifier, which is used to decide if the <em>json_create</em> hook of a class should be called; …\n"],["create_items","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-create_items","(items)","<p>Returns an RDoc::Markup::List containing the given <code>items</code> in the ChangeLog\n"],["create_key","Gem::Security","Gem/Security.html#method-c-create_key","(algorithm)","<p>Creates a new key pair of the specified <code>algorithm</code>. RSA, DSA, and EC are supported.\n"],["create_logfile","Logger::LogDevice","Logger/LogDevice.html#method-i-create_logfile","(filename)",""],["create_makefile","MakeMakefile","MakeMakefile.html#method-i-create_makefile","(target, srcprefix = nil)","<p>Generates the Makefile for your extension, passing along any options and preprocessor constants that …\n"],["create_new_id","CGI::Session","CGI/Session.html#method-i-create_new_id","()","<p>Create a new session id.\n<p>The session id is a secure random number by SecureRandom if possible, otherwise …\n"],["create_option_parser","Gem::Command","Gem/Command.html#method-i-create_option_parser","()","<p>Creates an option parser and fills it in with the help info for the command.\n"],["create_pretty_state","JSON","JSON.html#method-c-create_pretty_state","()",""],["create_request_pool","Gem::S3URISigner","Gem/S3URISigner.html#method-i-create_request_pool","(uri)",""],["create_timestamp","OpenSSL::Timestamp::Factory","OpenSSL/Timestamp/Factory.html#method-i-create_timestamp","(p1, p2, p3)","<p>Creates a Response with the help of an OpenSSL::PKey, an OpenSSL::X509::Certificate and a Request.\n<p>Mandatory …\n"],["create_tmap","Racc::States","Racc/States.html#method-i-create_tmap","(size)",""],["create_value","Fiddle::Importer","Fiddle/Importer.html#method-i-create_value","(ty, val=nil)","<p>Creates a class to wrap the C struct with the value <code>ty</code>\n<p>See also Fiddle::Importer.struct\n"],["created?","Win32::Registry","Win32/Registry.html#method-i-created-3F","()","<p>Returns if key is created ((<strong>newly</strong>)). (see Registry.create) – basically you call create then when you …\n"],["credentials_path","Gem::ConfigFile","Gem/ConfigFile.html#method-i-credentials_path","()","<p>Location of RubyGems.org credentials\n"],["cref_pop","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-cref_pop","()",""],["cref_push","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-cref_push","(name)",""],["critical=","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-critical-3D","(p1)",""],["critical?","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-critical-3F","()",""],["crl=","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-crl-3D","(p1)",""],["crl_uris","OpenSSL::X509::Extension::CRLDistributionPoints","OpenSSL/X509/Extension/CRLDistributionPoints.html#method-i-crl_uris","()","<p>Get the distributionPoint fullName URI from the certificate’s CRL distribution points extension, …\n"],["crls","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-crls","()",""],["crls=","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-crls-3D","(p1)",""],["cross","IRB::Vec","IRB/Vec.html#method-i-cross","(other)",""],["crypt","String","String.html#method-i-crypt","(p1)","<p>Returns the string generated by calling <code>crypt(3)</code> standard library function with <code>str</code> and <code>salt_str</code>, in …\n"],["css","RDoc::Markdown","RDoc/Markdown.html#method-i-css","","<p>Allow style blocks\n"],["ctime","Date","Date.html#method-i-ctime","()","<p>Equivalent to #strftime with argument <code>&#39;%a %b %e %T %Y&#39;</code> (or its shorthand form <code>&#39;%c&#39;</code>): …\n"],["ctime","File","File.html#method-c-ctime","(p1)","<p>Returns the change time for the named file (the time at which directory information about the file was …\n"],["ctime","File","File.html#method-i-ctime","()","<p>Returns the change time for <em>file</em> (that is, the time directory information about the file was changed, …\n"],["ctime","File::Stat","File/Stat.html#method-i-ctime","()","<p>Returns the change time for <em>stat</em> (that is, the time directory information about the file was changed, …\n"],["ctime","Pathname","Pathname.html#method-i-ctime","()","<p>Returns the last change time, using directory information, not the file itself.\n<p>See File.ctime.\n"],["ctime","Time","Time.html#method-i-ctime","()","<p>Returns a string representation of <code>self</code>, formatted by <code>strftime(&#39;%a %b %e %T %Y&#39;)</code> or its shorthand …\n"],["ctrl_cmd","OpenSSL::Engine","OpenSSL/Engine.html#method-i-ctrl_cmd","(p1, p2 = v2)","<p>Sends the given <em>command</em> to this engine.\n<p>Raises an EngineError if the command fails.\n"],["current","Fiber","Fiber.html#method-c-current","()","<p>Returns the current fiber. If you are not running in the context of a fiber this method will return the …\n"],["current","RDoc::RDoc","RDoc/RDoc.html#method-c-current","()","<p>Active RDoc::RDoc instance\n"],["current","Ractor","Ractor.html#method-c-current","()","<p>Returns the currently executing Ractor.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Ractor</span>.<span class=\"ruby-identifier\">current</span> <span class=\"ruby-comment\">#=&gt; #&lt;Ractor:#1 running&gt;</span>\n</pre>\n"],["current","Thread","Thread.html#method-c-current","()","<p>Returns the currently executing thread.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">current</span>   <span class=\"ruby-comment\">#=&gt; #&lt;Thread:0x401bdf4c run&gt;</span>\n</pre>\n"],["current=","RDoc::RDoc","RDoc/RDoc.html#method-c-current-3D","(rdoc)","<p>Sets the active RDoc::RDoc instance\n"],["current_cert","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-current_cert","()","<p>Returns the certificate which caused the error.\n<p>See also the man page X509_STORE_CTX_get_current_cert …\n"],["current_crl","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-current_crl","()","<p>Returns the CRL which caused the error.\n<p>See also the man page X509_STORE_CTX_get_current_crl(3).\n"],["current_group","PrettyPrint","PrettyPrint.html#method-i-current_group","()","<p>Returns the group most recently added to the stack.\n<p>Contrived example:\n\n<pre>out = &quot;&quot;\n=&gt; &quot;&quot;\nq = PrettyPrint.new(out) ...</pre>\n"],["current_indent","SyntaxSuggest::CodeBlock","SyntaxSuggest/CodeBlock.html#method-i-current_indent","()",""],["current_scheduler","Fiber","Fiber.html#method-c-current_scheduler","()","<p>Returns the Fiber scheduler, that was last set for the current thread with Fiber.set_scheduler if and …\n"],["current_section","RDoc::Context","RDoc/Context.html#method-i-current_section","()","<p>The current documentation section that new items will be added to.  If temporary_section is available …\n"],["current_server","DRb","DRb.html#method-c-current_server","()","<p>Get the ‘current’ server.\n<p>In the context of execution taking place within the main thread of a …\n"],["current_server","DRb","DRb.html#method-i-current_server","()","<p>Get the ‘current’ server.\n<p>In the context of execution taking place within the main thread of a …\n"],["curry","Method","Method.html#method-i-curry","(*args)","<p>Returns a curried proc based on the method. When the proc is called with a number of arguments that is …\n"],["curry","Proc","Proc.html#method-i-curry","(*args)","<p>Returns a curried proc. If the optional <em>arity</em> argument is given, it determines the number of arguments. …\n"],["curses_dl","Reline::Terminfo","Reline/Terminfo.html#method-c-curses_dl","()",""],["curses_dl_files","Reline::Terminfo","Reline/Terminfo.html#method-c-curses_dl_files","()",""],["cursor","IO","IO.html#method-i-cursor","()",""],["cursor=","IO","IO.html#method-i-cursor-3D","(p1)",""],["cursor_down","IO","IO.html#method-i-cursor_down","(p1)",""],["cursor_left","IO","IO.html#method-i-cursor_left","(p1)",""],["cursor_pos","Reline::ANSI","Reline/ANSI.html#method-c-cursor_pos","()",""],["cursor_pos","Reline::GeneralIO","Reline/GeneralIO.html#method-c-cursor_pos","()",""],["cursor_pos","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-cursor_pos","()",""],["cursor_pos","Reline::Windows","Reline/Windows.html#method-c-cursor_pos","()",""],["cursor_right","IO","IO.html#method-i-cursor_right","(p1)",""],["cursor_up","IO","IO.html#method-i-cursor_up","(p1)",""],["curve_name","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-curve_name","()","<p>Returns the curve name (sn).\n<p>See the OpenSSL documentation for EC_GROUP_get_curve_name()\n"],["cwday","Date","Date.html#method-i-cwday","()","<p>Returns the commercial-date weekday index for <code>self</code> (see Date.commercial); 1 is Monday:\n\n<pre>Date.new(2001, ...</pre>\n"],["cweek","Date","Date.html#method-i-cweek","()","<p>Returns commercial-date week index for <code>self</code> (see Date.commercial):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">cweek</span> <span class=\"ruby-comment\"># =&gt; 5</span>\n</pre>\n"],["cwyear","Date","Date.html#method-i-cwyear","()","<p>Returns commercial-date year for <code>self</code> (see Date.commercial):\n\n<pre>Date.new(2001, 2, 3).cwyear # =&gt; 2001\nDate.new(2000, ...</pre>\n"],["cycle","Array","Array.html#method-i-cycle","(*args)","<p>When called with positive Integer argument <code>count</code> and a block, calls the block with each element, then …\n"],["cycle","Enumerable","Enumerable.html#method-i-cycle","(*args)","<p>When called with positive integer argument <code>n</code> and a block, calls the block with each element, then does …\n"],["daemon","Process","Process.html#method-c-daemon","(*args)","<p>Detach the process from controlling terminal and run in the background as system daemon.  Unless the …\n"],["darwin_target?","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-darwin_target-3F","()",""],["data","Resolv::DNS::Resource::TXT","Resolv/DNS/Resource/TXT.html#method-i-data","()","<p>Returns the concatenated string from <code>strings</code>.\n"],["data","Socket::AncillaryData","Socket/AncillaryData.html#method-i-data","()","<p>returns the cmsg data as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AncillaryData</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:INET6</span>, <span class=\"ruby-value\">:IPV6</span>, <span class=\"ruby-value\">:PKTINFO</span>, <span class=\"ruby-string\">&quot;&quot;</span>).<span class=\"ruby-identifier\">data</span>\n<span class=\"ruby-comment\">#=&gt; &quot;&quot;</span>\n</pre>\n"],["data","Socket::Option","Socket/Option.html#method-i-data","()","<p>returns the socket option data as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Option</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:INET6</span>, <span class=\"ruby-value\">:IPV6</span>, <span class=\"ruby-value\">:RECVPKTINFO</span>, [<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">pack</span>(<span class=\"ruby-string\">&quot;i!&quot;</span>)).<span class=\"ruby-identifier\">data</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["data=","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-data-3D","(p1)",""],["data_home","Gem","Gem.html#method-c-data_home","()","<p>The path to standard location of the user’s data directory.\n"],["data_type","Zlib::ZStream","Zlib/ZStream.html#method-i-data_type","()","<p>Guesses the type of the data which have been inputed into the stream. The returned value is either <code>BINARY</code> …\n"],["datadir","Gem","Gem.html#method-c-datadir","(gem_name)","<p>The path to the data directory specified by the gem name.  If the package is not available as a gem, …\n"],["datadir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-datadir","()","<p>The path to the data directory for this gem.\n"],["date","Gem::Specification","Gem/Specification.html#method-i-date","()","<p>The date this gem was created.\n<p>If SOURCE_DATE_EPOCH is set as an environment variable, use that to support …\n"],["date=","Gem::Specification","Gem/Specification.html#method-i-date-3D","(date)","<p>The date this gem was created\n<p>DO NOT set this, it is set automatically when the gem is packaged.\n"],["datetime_format","Logger","Logger.html#method-i-datetime_format","()","<p>Returns the date-time format; see #datetime_format=.\n"],["datetime_format=","Logger","Logger.html#method-i-datetime_format-3D","(datetime_format)","<p>Sets the date-time format.\n<p>Argument <code>datetime_format</code> should be either of these:\n<p>A string suitable for use …\n"],["day","Date","Date.html#method-i-day","()","<p>Returns the day of the month in range (1..31):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">mday</span> <span class=\"ruby-comment\"># =&gt; 3</span>\n</pre>\n<p>Date#day is an alias for …\n"],["day","Time","Time.html#method-i-day","()","<p>Returns the integer day of the month for <code>self</code>, in range (1..31):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["day_fraction","Date","Date.html#method-i-day_fraction","()","<p>Returns the fractional part of the day in range (Rational(0, 1)…Rational(1, 1)):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>,<span class=\"ruby-value\">12</span>).<span class=\"ruby-identifier\">day_fraction</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["debug","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-debug","(depth = 0, &block)","<p>Calls the {#resolver_ui}‘s {UI#debug} method @param [Integer] depth the depth of the {#states} stack …\n"],["debug","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-debug","(depth = 0)","<p>Conveys debug information to the user.\n<p>@param [Integer] depth the current depth of the resolution process. …\n"],["debug","Logger","Logger.html#method-i-debug","(progname = nil, &block)","<p>Equivalent to calling #add with severity <code>Logger::DEBUG</code>.\n"],["debug","Net::HTTP","Net/HTTP.html#method-i-debug","(msg)","<p>Adds a message to debugging output\n"],["debug","OpenSSL","OpenSSL.html#method-c-debug","()",""],["debug","Syslog::Logger","Syslog/Logger.html#method-i-debug","","<p>Logs a <code>message</code> at the debug (syslog debug) log level, or logs the message returned from the block.\n"],["debug!","Logger","Logger.html#method-i-debug-21","()","<p>Sets the log level to Logger::DEBUG. See Log Level.\n"],["debug=","OpenSSL","OpenSSL.html#method-c-debug-3D","(p1)","<p>Turns on or off debug mode. With debug mode, all errors added to the OpenSSL error queue will be printed …\n"],["debug?","Gem::Resolver","Gem/Resolver.html#method-i-debug-3F","()",""],["debug?","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-debug-3F","()","<p>Whether or not debug messages should be printed. By default, whether or not the ‘MOLINILLO_DEBUG` environment …\n"],["debug?","Logger","Logger.html#method-i-debug-3F","()","<p>Returns <code>true</code> if the log level allows entries with severity Logger::DEBUG to be written, <code>false</code> otherwise. …\n"],["debug_break","IRB::Irb","IRB/Irb.html#method-i-debug_break","()","<p>A hook point for ‘debug` command’s TracePoint after :IRB_EXIT as well as its clean-up\n"],["debug_output","Ripper","Ripper.html#method-i-debug_output","()","<p>Get debug output.\n"],["debug_output=","Ripper","Ripper.html#method-i-debug_output-3D","(p1)","<p>Set debug output.\n"],["declare_precedence","Racc::Grammar","Racc/Grammar.html#method-i-declare_precedence","(assoc, syms)",""],["decode","OpenSSL::ASN1","OpenSSL/ASN1.html#method-c-decode","(p1)","<p>Decodes a BER- or DER-encoded value and creates an ASN1Data instance. <em>der</em> may be a String or any object …\n"],["decode64","Base64","Base64.html#method-i-decode64","(str)","<p>Returns the Base64-decoded version of <code>str</code>. This method complies with RFC 2045. Characters outside the …\n"],["decode_all","OpenSSL::ASN1","OpenSSL/ASN1.html#method-c-decode_all","(p1)","<p>Similar to #decode with the difference that #decode expects one distinct value represented in <em>der</em>. #decode_all …\n"],["decode_uri_component","URI","URI.html#method-c-decode_uri_component","(str, enc=Encoding::UTF_8)","<p>Decodes given <code>str</code> of URL-encoded data.\n<p>This does not decode + to SP.\n"],["decode_www_form","URI","URI.html#method-c-decode_www_form","(str, enc=Encoding::UTF_8, separator: '&', use__charset_: false, isindex: false)","<p>Decodes URL-encoded form data from given <code>str</code>.\n<p>This decodes application/x-www-form-urlencoded data and …\n"],["decode_www_form_component","URI","URI.html#method-c-decode_www_form_component","(str, enc=Encoding::UTF_8)","<p>Decodes given <code>str</code> of URL-encoded form data.\n<p>This decodes + to SP.\n<p>See URI.encode_www_form_component, URI.decode_www_form …\n"],["decoded_password","URI::Generic","URI/Generic.html#method-i-decoded_password","()","<p>Returns the password component after URI decoding.\n"],["decoded_user","URI::Generic","URI/Generic.html#method-i-decoded_user","()","<p>Returns the user component after URI decoding.\n"],["deconstruct","Array","Array.html#method-i-deconstruct","()",""],["deconstruct","CSV::Row","CSV/Row.html#method-i-deconstruct","()","<p>Returns the new Array suitable for pattern matching containing the values of the row.\n"],["deconstruct","Data","Data.html#method-i-deconstruct","()","<p>Returns the values in <code>self</code> as an array, to use in pattern matching:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Measure</span> = <span class=\"ruby-constant\">Data</span>.<span class=\"ruby-identifier\">define</span>(<span class=\"ruby-value\">:amount</span>, <span class=\"ruby-value\">:unit</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deconstruct","MatchData","MatchData.html#method-i-deconstruct","()","<p>Returns the array of captures, which are all matches except <code>m[0]</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deconstruct","Struct","Struct.html#method-i-deconstruct","()","<p>Returns the values in <code>self</code> as an array:\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["deconstruct_keys","CSV::Row","CSV/Row.html#method-i-deconstruct_keys","(keys)","<p>Returns the new Hash suitable for pattern matching containing only the keys specified as an argument. …\n"],["deconstruct_keys","Data","Data.html#method-i-deconstruct_keys","(p1)","<p>Returns a hash of the name/value pairs, to use in pattern matching.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Measure</span> = <span class=\"ruby-constant\">Data</span>.<span class=\"ruby-identifier\">define</span>(<span class=\"ruby-value\">:amount</span>, <span class=\"ruby-value\">:unit</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deconstruct_keys","Date","Date.html#method-i-deconstruct_keys","(p1)","<p>Returns a hash of the name/value pairs, to use in pattern matching. Possible keys are: <code>:year</code>, <code>:month</code> …\n"],["deconstruct_keys","DateTime","DateTime.html#method-i-deconstruct_keys","(p1)","<p>Returns a hash of the name/value pairs, to use in pattern matching. Possible keys are: <code>:year</code>, <code>:month</code> …\n"],["deconstruct_keys","Hash","Hash.html#method-i-deconstruct_keys","(p1)",""],["deconstruct_keys","MatchData","MatchData.html#method-i-deconstruct_keys","(p1)","<p>Returns a hash of the named captures for the given names.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(?&lt;hours&gt;\\d{2}):(?&lt;minutes&gt;\\d{2}):(?&lt;seconds&gt;\\d{2})/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;18:37:22&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deconstruct_keys","Struct","Struct.html#method-i-deconstruct_keys","(p1)","<p>Returns a hash of the name/value pairs for the given member names.\n\n<pre>Customer = Struct.new(:name, :address, ...</pre>\n"],["deconstruct_keys","Time","Time.html#method-i-deconstruct_keys","(p1)","<p>Returns a hash of the name/value pairs, to use in pattern matching. Possible keys are: <code>:year</code>, <code>:month</code> …\n"],["decref","Racc::Reduce","Racc/Reduce.html#method-i-decref","()",""],["decrypt","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-decrypt","(*args)","<p>Initializes the Cipher for decryption.\n<p>Make sure to call Cipher#encrypt or Cipher#decrypt before using …\n"],["decrypt","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-decrypt","(p1, p2 = v2, p3 = v3)",""],["decrypt","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-decrypt","(p1, p2 = v2)","<p>Performs a public key decryption operation using <code>pkey</code>.\n<p>See #encrypt for a description of the parameters …\n"],["dedent_string","Ripper","Ripper.html#method-c-dedent_string","(p1, p2)","<p>USE OF RIPPER LIBRARY ONLY.\n<p>Strips up to <code>width</code> leading whitespaces from <code>input</code>, and returns the stripped …\n"],["dedent_string","Ripper","Ripper.html#method-i-dedent_string","(p1, p2)","<p>USE OF RIPPER LIBRARY ONLY.\n<p>Strips up to <code>width</code> leading whitespaces from <code>input</code>, and returns the stripped …\n"],["dedup","String","String.html#method-i-dedup","()","<p>Returns a frozen, possibly pre-existing copy of the string.\n<p>The returned String will be deduplicated as …\n"],["deduplicate","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-deduplicate","(key)",""],["deduplicate_call_seq","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-deduplicate_call_seq","(call_seq)","<p>call_seq with alias examples information removed, if this method is an alias method.\n"],["def_class","ERB","ERB.html#method-i-def_class","(superklass=Object, methodname='result')","<p>Define unnamed class which has <em>methodname</em> as instance method, and return it.\n<p>example:\n\n<pre>class MyClass_\n  ...</pre>\n"],["def_delegator","Forwardable","Forwardable.html#method-i-def_delegator","(accessor, method, ali = method)",""],["def_delegator","SingleForwardable","SingleForwardable.html#method-i-def_delegator","(accessor, method, ali = method)",""],["def_delegators","Forwardable","Forwardable.html#method-i-def_delegators","(accessor, *methods)",""],["def_delegators","SingleForwardable","SingleForwardable.html#method-i-def_delegators","(accessor, *methods)",""],["def_erb_method","ERB::DefMethod","ERB/DefMethod.html#method-i-def_erb_method","(methodname, erb_or_fname)","<p>define <em>methodname</em> as instance method of current module, using ERB object or eRuby file\n"],["def_erb_method","ERB::DefMethod","ERB/DefMethod.html#method-c-def_erb_method","(methodname, erb_or_fname)","<p>define <em>methodname</em> as instance method of current module, using ERB object or eRuby file\n"],["def_extend_command","IRB::ContextExtender","IRB/ContextExtender.html#method-c-def_extend_command","(cmd_name, load_file, *aliases)","<p>Evaluate the given <code>command</code> from the given <code>load_file</code> on the Context module.\n<p>Will also define any given …\n"],["def_extend_command","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-def_extend_command","(cmd_name, cmd_class, load_file = nil, *aliases)","<p>Evaluate the given <code>cmd_name</code> on the given <code>cmd_class</code> Class.\n<p>Will also define any given <code>aliases</code> for the method. …\n"],["def_head_option","OptionParser","OptionParser.html#method-i-def_head_option","(*opts, &block)",""],["def_inspector","IRB::Inspector","IRB/Inspector.html#method-c-def_inspector","(key, arg=nil, &block)","<p>Example\n\n<pre>Inspector.def_inspector(key, init_p=nil){|v| v.inspect}\nInspector.def_inspector([key1,..], init_p=nil){|v| ...</pre>\n"],["def_instance_delegator","Forwardable","Forwardable.html#method-i-def_instance_delegator","(accessor, method, ali = method)","<p>Define <code>method</code> as delegator instance method with an optional alias name <code>ali</code>. Method calls to <code>ali</code> will …\n"],["def_instance_delegators","Forwardable","Forwardable.html#method-i-def_instance_delegators","(accessor, *methods)","<p>Shortcut for defining multiple delegator methods, but with no provision for using a different name.  …\n"],["def_method","ERB","ERB.html#method-i-def_method","(mod, methodname, fname='(ERB)')","<p>Define <em>methodname</em> as instance method of <em>mod</em> from compiled Ruby source.\n<p>example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">filename</span> = <span class=\"ruby-string\">&#39;example.rhtml&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["def_module","ERB","ERB.html#method-i-def_module","(methodname='erb')","<p>Create unnamed module, define <em>methodname</em> as instance method of it, and return it.\n<p>example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">filename</span> = <span class=\"ruby-string\">&#39;example.rhtml&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["def_notifier","IRB::Notifier","IRB/Notifier.html#method-i-def_notifier","(prefix = \"\", output_method = StdioOutputMethod.new)","<p>Define a new Notifier output source, returning a new CompositeNotifier with the given <code>prefix</code> and <code>output_method</code> …\n"],["def_notifier","IRB::Notifier","IRB/Notifier.html#method-c-def_notifier","(prefix = \"\", output_method = StdioOutputMethod.new)","<p>Define a new Notifier output source, returning a new CompositeNotifier with the given <code>prefix</code> and <code>output_method</code> …\n"],["def_notifier","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-i-def_notifier","(level, prefix = \"\")","<p>Creates a new LeveledNotifier in the composite #notifiers group.\n<p>The given <code>prefix</code> will be assigned to …\n"],["def_option","OptionParser","OptionParser.html#method-i-def_option","(*opts, &block)",""],["def_post_proc","IRB::MethodExtender","IRB/MethodExtender.html#method-i-def_post_proc","(base_method, extend_method)","<p>Extends the given <code>base_method</code> with a postfix call to the given <code>extend_method</code>.\n"],["def_pre_proc","IRB::MethodExtender","IRB/MethodExtender.html#method-i-def_pre_proc","(base_method, extend_method)","<p>Extends the given <code>base_method</code> with a prefix call to the given <code>extend_method</code>.\n"],["def_single_delegator","SingleForwardable","SingleForwardable.html#method-i-def_single_delegator","(accessor, method, ali = method)","<p>Defines a method <em>method</em> which delegates to <em>accessor</em> (i.e. it calls the method of the same name in <em>accessor</em> …\n"],["def_single_delegators","SingleForwardable","SingleForwardable.html#method-i-def_single_delegators","(accessor, *methods)","<p>Shortcut for defining multiple delegator methods, but with no provision for using a different name.  …\n"],["def_tail_option","OptionParser","OptionParser.html#method-i-def_tail_option","(*opts, &block)",""],["default","Gem::Requirement","Gem/Requirement.html#method-c-default","()",""],["default","Hash","Hash.html#method-i-default","(*args)","<p>Returns the default value for the given <code>key</code>. The returned value will be determined either by the default …\n"],["default","WIN32OLE::Param","WIN32OLE/Param.html#method-i-default","()","<p>Returns default value. If the default value does not exist, this method returns nil.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["default=","Hash","Hash.html#method-i-default-3D","(p1)","<p>Sets the default value to <code>value</code>; returns <code>value</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">default</span> <span class=\"ruby-comment\"># =&gt; nil</span>\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">default</span> = <span class=\"ruby-keyword\">false</span> <span class=\"ruby-comment\"># =&gt; false ...</span>\n</pre>\n"],["default_acl","DRb::DRbServer","DRb/DRbServer.html#method-c-default_acl","(acl)","<p>Set the default access control list to <code>acl</code>.  The default ACL is <code>nil</code>.\n<p>See also DRb::ACL and #new()\n"],["default_argc_limit","DRb::DRbServer","DRb/DRbServer.html#method-c-default_argc_limit","(argc)","<p>Set the default value for the :argc_limit option.\n<p>See #new().  The initial default value is 256.\n"],["default_bindir","Gem","Gem.html#method-c-default_bindir","()","<p>The default directory for binaries\n"],["default_bundle_dir","Bundler","Bundler.html#method-c-default_bundle_dir","()",""],["default_cert_path","Gem","Gem.html#method-c-default_cert_path","()","<p>The default signing certificate chain path\n"],["default_console_size","IO","IO.html#method-c-default_console_size","()","<p>fallback to console window size\n"],["default_dir","Gem","Gem.html#method-c-default_dir","()","<p>Default home directory path to be used if an alternate value is not specified in the environment\n"],["default_dir","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-default_dir","()",""],["default_event_sources","WIN32OLE::Type","WIN32OLE/Type.html#method-i-default_event_sources","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the WIN32OLE_TYPE object and having …\n"],["default_exec_format","Gem","Gem.html#method-c-default_exec_format","()","<p>Deduce Ruby’s –program-prefix and –program-suffix from its install name\n"],["default_ext_dir_for","Gem","Gem.html#method-c-default_ext_dir_for","(base_dir)","<p>Returns binary extensions dir for specified RubyGems base dir or nil if such directory cannot be determined. …\n"],["default_external","Encoding","Encoding.html#method-c-default_external","()","<p>Returns default external encoding.\n<p>The default external encoding is used by default for strings created …\n"],["default_external=","Encoding","Encoding.html#method-c-default_external-3D","(p1)","<p>Sets default external encoding.  You should not set Encoding::default_external in ruby code as strings …\n"],["default_gem?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-default_gem-3F","()",""],["default_gem_load_paths","Gem","Gem.html#method-c-default_gem_load_paths","()",""],["default_gemfile","Bundler","Bundler.html#method-c-default_gemfile","()",""],["default_host?","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-default_host-3F","()",""],["default_id_conv","DRb::DRbServer","DRb/DRbServer.html#method-c-default_id_conv","(idconv)","<p>Set the default value for the :id_conv option.\n<p>See #new().  The initial default value is a DRbIdConv instance. …\n"],["default_inputrc_path","Reline::Config","Reline/Config.html#method-i-default_inputrc_path","()",""],["default_internal","Encoding","Encoding.html#method-c-default_internal","()","<p>Returns default internal encoding.  Strings will be transcoded to the default internal encoding in the …\n"],["default_internal=","Encoding","Encoding.html#method-c-default_internal-3D","(p1)","<p>Sets default internal encoding or removes default internal encoding when passed nil.  You should not …\n"],["default_key_bindings","Reline::KeyActor::Base","Reline/KeyActor/Base.html#method-i-default_key_bindings","()",""],["default_key_path","Gem","Gem.html#method-c-default_key_path","()","<p>The default signing key path\n"],["default_load_limit","DRb::DRbServer","DRb/DRbServer.html#method-c-default_load_limit","(sz)","<p>Set the default value for the :load_limit option.\n<p>See #new().  The initial default value is 25 MB.\n"],["default_lockfile","Bundler","Bundler.html#method-c-default_lockfile","()",""],["default_ole_types","WIN32OLE::Type","WIN32OLE/Type.html#method-i-default_ole_types","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the WIN32OLE_TYPE object and having …\n"],["default_path","Gem","Gem.html#method-c-default_path","()","<p>Default gem load path\n"],["default_path","Gem::PathSupport","Gem/PathSupport.html#method-i-default_path","()","<p>Return the default Gem path\n"],["default_port","Net::HTTP","Net/HTTP.html#method-c-default_port","()","<p>Returns intger <code>80</code>, the default port to use for HTTP requests:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">default_port</span> <span class=\"ruby-comment\"># =&gt; 80</span>\n</pre>\n"],["default_port","URI::Generic","URI/Generic.html#method-i-default_port","()","<p>Returns default port.\n"],["default_port","URI::Generic","URI/Generic.html#method-c-default_port","()","<p>Returns default port.\n"],["default_prerelease","Gem::Requirement","Gem/Requirement.html#method-c-default_prerelease","()",""],["default_proc","Hash","Hash.html#method-i-default_proc","()","<p>Returns the default proc for <code>self</code> (see Default Values):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">default_proc</span> <span class=\"ruby-comment\"># =&gt; nil</span>\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">default_proc</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["default_proc=","Hash","Hash.html#method-i-default_proc-3D","(p1)","<p>Sets the default proc for <code>self</code> to <code>proc</code>: (see Default Values):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">default_proc</span> <span class=\"ruby-comment\"># =&gt; nil</span>\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">default_proc</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["default_rubygems_dirs","Gem","Gem.html#method-c-default_rubygems_dirs","()","<p>Paths where RubyGems’ .rb files and bin files are installed\n"],["default_sources","Gem","Gem.html#method-c-default_sources","()","<p>An Array of the default sources that come with RubyGems\n"],["default_spec_cache_dir","Gem","Gem.html#method-c-default_spec_cache_dir","()","<p>Default spec directory path to be used if an alternate value is not specified in the environment\n"],["default_spec_file","Gem::Installer","Gem/Installer.html#method-i-default_spec_file","()","<p>The location of the default spec file for default gems.\n"],["default_spec_matches?","Gem::Uninstaller","Gem/Uninstaller.html#method-i-default_spec_matches-3F","(spec)","<p>@return true if the specs of any default gems are ‘==` to the given `spec`.\n"],["default_specifications_dir","Gem","Gem.html#method-c-default_specifications_dir","()","<p>Path to specification files of default gems.\n"],["default_specifications_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-c-default_specifications_dir","()",""],["default_specs_that_match","Gem::Uninstaller","Gem/Uninstaller.html#method-i-default_specs_that_match","(spec)","<p>@return [Array] specs of default gems that are ‘==` to the given `spec`.\n"],["default_src_encoding","IRB","IRB.html#method-c-default_src_encoding","()",""],["default_stubs","Gem::Specification","Gem/Specification.html#method-c-default_stubs","(pattern = \"*.gemspec\")","<p>Returns a Gem::StubSpecification for default gems\n"],["default_title=","RDoc::Options","RDoc/Options.html#method-i-default_title-3D","(string)","<p>Set the title, but only if not already set. Used to set the title from a source file, so that a title …\n"],["default_value","Gem::Specification","Gem/Specification.html#method-i-default_value","(name)","<p>The default value for specification attribute <code>name</code>\n"],["defaults","RDoc::Task","RDoc/Task.html#method-i-defaults","()","<p>Sets default task values\n"],["defaults_str","Gem::Command","Gem/Command.html#method-i-defaults_str","()","<p>Override to display the default values of the command options. (similar to <code>arguments</code>, but displays the …\n"],["defaults_str","Gem::Commands::InfoCommand","Gem/Commands/InfoCommand.html#method-i-defaults_str","()",""],["define","Data","Data.html#method-c-define","(*args)","<p>Defines a new Data class. If the first argument is a string, the class is stored in <code>Data::&lt;name&gt;</code> …\n"],["define","Gem::PackageTask","Gem/PackageTask.html#method-i-define","()","<p>Create the Rake tasks and actions specified by this Gem::PackageTask. (<code>define</code> is automatically called …\n"],["define","OptionParser","OptionParser.html#method-i-define","(*opts, &block)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["define","RDoc::Task","RDoc/Task.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["define","Racc::Grammar","Racc/Grammar.html#method-c-define","(&block)","<p>Dynamic Generation Interface\n"],["define_actions","Racc::ParserClassGenerator","Racc/ParserClassGenerator.html#method-i-define_actions","(c)",""],["define_by_keywords","OptionParser","OptionParser.html#method-i-define_by_keywords","(options, meth, **opts)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["define_finalizer","ObjectSpace","ObjectSpace.html#method-c-define_finalizer","(p1, p2 = v2)","<p>Adds <em>aProc</em> as a finalizer, to be called after <em>obj</em> was destroyed. The object ID of the <em>obj</em> will be passed …\n"],["define_head","OptionParser","OptionParser.html#method-i-define_head","(*opts, &block)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["define_method","Module","Module.html#method-i-define_method","(*args)","<p>Defines an instance method in the receiver. The <em>method</em> parameter can be a <code>Proc</code>, a <code>Method</code> or an <code>UnboundMethod</code> …\n"],["define_singleton_method","Object","Object.html#method-i-define_singleton_method","(*args)","<p>Defines a public singleton method in the receiver. The <em>method</em> parameter can be a <code>Proc</code>, a <code>Method</code> or an …\n"],["define_tail","OptionParser","OptionParser.html#method-i-define_tail","(*opts, &block)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["defined_class","TracePoint","TracePoint.html#method-i-defined_class","()","<p>Return class or module of the method being called.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">C</span>; <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">foo</span>; <span class=\"ruby-keyword\">end</span>; <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">trace</span> = <span class=\"ruby-constant\">TracePoint</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:call</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["defined_in?","RDoc::Context","RDoc/Context.html#method-i-defined_in-3F","(file)","<p>Is part of this thing was defined in <code>file</code>?\n"],["definition","Bundler","Bundler.html#method-c-definition","(unlock = nil)","<p>Returns an instance of Bundler::Definition for given Gemfile and lockfile\n<p>@param unlock [Hash, Boolean …\n"],["definition","RDoc::Attr","RDoc/Attr.html#method-i-definition","()","<p>Returns attr_reader, attr_writer or attr_accessor as appropriate.\n"],["definition","RDoc::NormalClass","RDoc/NormalClass.html#method-i-definition","()","<p>The definition of this class, <code>class MyClassName</code>\n"],["definition","RDoc::NormalModule","RDoc/NormalModule.html#method-i-definition","()","<p>The definition of this module, <code>module MyModuleName</code>\n"],["definition","RDoc::SingleClass","RDoc/SingleClass.html#method-i-definition","()","<p>The definition of this singleton class, <code>class &lt;&lt; MyClassName</code>\n"],["definition_lists","RDoc::Markdown","RDoc/Markdown.html#method-i-definition_lists","","<p>Allow PHP Markdown Extras style definition lists\n"],["deflate","Gem","Gem.html#method-c-deflate","(data)","<p>A Zlib::Deflate.deflate wrapper\n"],["deflate","Zlib","Zlib.html#method-c-deflate","(p1, p2 = v2)","<p>Compresses the given <code>string</code>. Valid values of level are Zlib::NO_COMPRESSION, Zlib::BEST_SPEED, Zlib::BEST_COMPRESSION …\n"],["deflate","Zlib::Deflate","Zlib/Deflate.html#method-i-deflate","(p1, p2 = v2)","<p>Inputs <code>string</code> into the deflate stream and returns the output from the stream.  On calling this method, …\n"],["deflate","Zlib::Deflate","Zlib/Deflate.html#method-c-deflate","(p1, p2 = v2)","<p>Compresses the given <code>string</code>. Valid values of level are Zlib::NO_COMPRESSION, Zlib::BEST_SPEED, Zlib::BEST_COMPRESSION …\n"],["degree","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-degree","()","<p>See the OpenSSL documentation for EC_GROUP_get_degree()\n"],["delegate","Forwardable","Forwardable.html#method-i-delegate","(hash)",""],["delegate","SingleForwardable","SingleForwardable.html#method-i-delegate","(hash)",""],["delete","Array","Array.html#method-i-delete","(p1)","<p>Removes zero or more elements from <code>self</code>.\n<p>When no block is given, removes from <code>self</code> each element <code>ele</code> such …\n"],["delete","CGI::Session","CGI/Session.html#method-i-delete","()","<p>Delete the session from storage.  Also closes the storage.\n<p>Note that the session’s data is <em>not</em> automatically …\n"],["delete","CGI::Session::FileStore","CGI/Session/FileStore.html#method-i-delete","()","<p>Close and delete the session’s FileStore file.\n"],["delete","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-i-delete","()","<p>Delete the session state.\n"],["delete","CGI::Session::NullStore","CGI/Session/NullStore.html#method-i-delete","()","<p>Delete the session state.\n<p>A no-op.\n"],["delete","CGI::Session::PStore","CGI/Session/PStore.html#method-i-delete","()","<p>Close and delete the session’s PStore file.\n"],["delete","CSV::Row","CSV/Row.html#method-i-delete","(header_or_index, minimum_index = 0)","<p>Removes a specified field from <code>self</code>; returns the 2-element Array <code>[header, value]</code> if the field exists. …\n"],["delete","CSV::Table","CSV/Table.html#method-i-delete","(*indexes_or_headers)","<p>If the access mode is <code>:row</code> or <code>:col_or_row</code>, and each argument is either an Integer or a Range, returns …\n"],["delete","Dir","Dir.html#method-c-delete","(p1)","<p>Deletes the named directory. Raises a subclass of SystemCallError if the directory isn’t empty.\n"],["delete","ENV","ENV.html#method-c-delete","(p1)","<p>Deletes the environment variable with <code>name</code> if it exists and returns its value:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>[<span class=\"ruby-string\">&#39;foo&#39;</span>] = <span class=\"ruby-string\">&#39;0&#39;</span>\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">delete</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["delete","File","File.html#method-c-delete","(*args)","<p>Deletes the named files, returning the number of names passed as arguments. Raises an exception on any …\n"],["delete","Gem::SourceList","Gem/SourceList.html#method-i-delete","(source)","<p>Deletes <code>source</code> from the source list which may be a Gem::Source or a URI.\n"],["delete","Hash","Hash.html#method-i-delete","(p1)","<p>Deletes the entry for the given <code>key</code> and returns its associated value.\n<p>If no block is given and <code>key</code> is …\n"],["delete","IRB::JobManager","IRB/JobManager.html#method-i-delete","(key)","<p>Deletes the job at the given <code>key</code>.\n"],["delete","Net::HTTP","Net/HTTP.html#method-i-delete","(path, initheader = {'Depth' => 'Infinity'})","<p>Sends a DELETE request to the <code>path</code> and gets a response, as an HTTPResponse object.\n"],["delete","Net::HTTPHeader","Net/HTTPHeader.html#method-i-delete","(key)","<p>Removes the header for the given case-insensitive <code>key</code> (see Fields); returns the deleted value, or <code>nil</code> …\n"],["delete","PStore","PStore.html#method-i-delete","(key)","<p>Removes and returns the value at <code>key</code> if it exists:\n\n<pre>example_store do |store|\n  store.transaction do\n   ...</pre>\n"],["delete","Pathname","Pathname.html#method-i-delete","()","<p>Removes a file or directory, using File.unlink if <code>self</code> is a file, or Dir.unlink as necessary.\n"],["delete","Racc::ISet","Racc/ISet.html#method-i-delete","(key)",""],["delete","Racc::SymbolTable","Racc/SymbolTable.html#method-i-delete","(sym)",""],["delete","Rinda::TupleBag","Rinda/TupleBag.html#method-i-delete","(tuple)","<p>Removes <code>tuple</code> from the TupleBag.\n"],["delete","Rinda::TupleBag::TupleBin","Rinda/TupleBag/TupleBin.html#method-i-delete","(tuple)",""],["delete","Set","Set.html#method-i-delete","(o)","<p>Deletes the given object from the set and returns self. Use\n<code>subtract</code> to delete many items at once.\n"],["delete","String","String.html#method-i-delete","(*args)","<p>Returns a copy of <code>self</code> with characters specified by <code>selectors</code> removed (see Multiple Character Selectors …\n"],["delete","SyntaxSuggest::CodeBlock","SyntaxSuggest/CodeBlock.html#method-i-delete","()",""],["delete","Tempfile","Tempfile.html#method-i-delete","()",""],["delete","Win32::Registry","Win32/Registry.html#method-i-delete","(name)",""],["delete","YAML::DBM","YAML/DBM.html#method-i-delete","( key )","<p>Deletes value from database associated with <code>key</code>.\n<p>Returns value or <code>nil</code>.\n"],["delete!","String","String.html#method-i-delete-21","(*args)","<p>Like String#delete, but modifies <code>self</code> in place. Returns <code>self</code> if any changes were made, <code>nil</code> otherwise. …\n"],["delete?","Set","Set.html#method-i-delete-3F","(o)","<p>Deletes the given object from the set and returns self. If the\nobject is not in the set, returns nil. ...\n"],["delete_at","Array","Array.html#method-i-delete_at","(p1)","<p>Deletes an element from <code>self</code>, per the given Integer <code>index</code>.\n<p>When <code>index</code> is non-negative, deletes the element …\n"],["delete_at","Reline::History","Reline/History.html#method-i-delete_at","(index)",""],["delete_char","Reline::LineEditor","Reline/LineEditor.html#method-i-delete_char","(key)",""],["delete_char_or_list","Reline::LineEditor","Reline/LineEditor.html#method-i-delete_char_or_list","(key)",""],["delete_edge","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-delete_edge","(edge)","<p>Deletes an {Edge} from the dependency graph @param [Edge] edge @return [Void]\n"],["delete_edge","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-delete_edge","(graph, origin_name, destination_name, requirement)","<p>{include:DependencyGraph#delete_edge} @param [Graph] graph the graph to perform the action on @param …\n"],["delete_field","OpenStruct","OpenStruct.html#method-i-delete_field","(name, &block)","<p>Removes the named field from the object and returns the value the field contained if it was defined. …\n"],["delete_first","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-delete_first","(array, item)",""],["delete_if","Array","Array.html#method-i-delete_if","()","\n<pre>Removes each element in +self+ for which the block returns a truthy value;\nreturns +self+:\n\n  a = [:foo, ...</pre>\n"],["delete_if","CSV::Row","CSV/Row.html#method-i-delete_if","(&block)","<p>Removes fields from <code>self</code> as selected by the block; returns <code>self</code>.\n<p>Removes each field for which the block …\n"],["delete_if","CSV::Table","CSV/Table.html#method-i-delete_if","(&block)","<p>Removes rows or columns for which the block returns a truthy value; returns <code>self</code>.\n<p>Removes rows when the …\n"],["delete_if","ENV","ENV.html#method-c-delete_if","()","<p>Yields each environment variable name and its value as a 2-element Array, deleting each environment variable …\n"],["delete_if","Hash","Hash.html#method-i-delete_if","()","<p>If a block given, calls the block with each key-value pair; deletes each entry for which the block returns …\n"],["delete_if","Set","Set.html#method-i-delete_if","()","<p>Deletes every element of the set for which block evaluates to\ntrue, and returns self. Returns an enumerator ...\n"],["delete_if","YAML::DBM","YAML/DBM.html#method-i-delete_if","()","<p>Calls the given block once for each <code>key</code>, <code>value</code> pair in the database. Deletes all entries for which the …\n"],["delete_key","Win32::Registry","Win32/Registry.html#method-i-delete_key","(name, recursive = false)","<p>Delete a subkey named name and all its values.\n<p>If recursive is false, the subkey must not have subkeys. …\n"],["delete_legacy_args","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-delete_legacy_args","(args)","<p>Removes legacy rdoc arguments from <code>args</code>\n"],["delete_legacy_args","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-delete_legacy_args","(args)","<p>Removes legacy rdoc arguments from <code>args</code>\n"],["delete_observer","Observable","Observable.html#method-i-delete_observer","(observer)","<p>Remove <code>observer</code> as an observer on this object so that it will no longer receive notifications.\n<p><code>observer</code> … &mdash; "],["delete_observers","Observable","Observable.html#method-i-delete_observers","()","<p>Remove all observers associated with this object.\n"],["delete_prefix","String","String.html#method-i-delete_prefix","(p1)","<p>Returns a copy of <code>self</code> with leading substring <code>prefix</code> removed:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;hello&#39;</span>.<span class=\"ruby-identifier\">delete_prefix</span>(<span class=\"ruby-string\">&#39;hel&#39;</span>)      <span class=\"ruby-comment\"># =&gt; &quot;lo&quot; ...</span>\n</pre>\n"],["delete_prefix!","String","String.html#method-i-delete_prefix-21","(p1)","<p>Like String#delete_prefix, except that <code>self</code> is modified in place. Returns <code>self</code> if the prefix is removed, …\n"],["delete_suffix","CSV::DeleteSuffix","CSV/DeleteSuffix.html#method-i-delete_suffix","(suffix)",""],["delete_suffix","String","String.html#method-i-delete_suffix","(p1)","<p>Returns a copy of <code>self</code> with trailing substring <code>suffix</code> removed:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;hello&#39;</span>.<span class=\"ruby-identifier\">delete_suffix</span>(<span class=\"ruby-string\">&#39;llo&#39;</span>)      <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["delete_suffix!","String","String.html#method-i-delete_suffix-21","(p1)","<p>Like String#delete_suffix, except that <code>self</code> is modified in place. Returns <code>self</code> if the suffix is removed, …\n"],["delete_text","Readline","Readline.html#method-c-delete_text","(*args)","<p>Delete text between start and end in the current line.\n<p>See GNU Readline’s rl_delete_text function. …\n"],["delete_text","Reline::LineEditor","Reline/LineEditor.html#method-i-delete_text","(start = nil, length = nil)",""],["delete_unless_alive","Rinda::TupleBag","Rinda/TupleBag.html#method-i-delete_unless_alive","()","<p>Delete tuples which dead tuples from the TupleBag, returning the deleted tuples.\n"],["delete_value","Win32::Registry","Win32/Registry.html#method-i-delete_value","(name)","<p>Delete a registry value named name. We can not delete the ‘default’ value.\n"],["deleted?","SyntaxSuggest::CodeBlock","SyntaxSuggest/CodeBlock.html#method-i-deleted-3F","()",""],["denominator","Complex","Complex.html#method-i-denominator","()","<p>Returns the denominator (lcm of both denominator - real and imag).\n<p>See numerator.\n"],["denominator","Float","Float.html#method-i-denominator","()","<p>Returns the denominator (always positive).  The result is machine dependent.\n<p>See also Float#numerator …\n"],["denominator","Integer","Integer.html#method-i-denominator","()","<p>Returns 1.\n"],["denominator","Numeric","Numeric.html#method-i-denominator","()","<p>Returns the denominator (always positive).\n"],["denominator","Rational","Rational.html#method-i-denominator","()","<p>Returns the denominator (always positive).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">denominator</span>             <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">7</span>, <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">denominator</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["depend_rules","MakeMakefile","MakeMakefile.html#method-i-depend_rules","(depend)","<p>Processes the data contents of the “depend” file.  Each line of this file is expected to be …\n"],["dependencies","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-i-dependencies","()","<p>The dependencies of the gem for this specification\n"],["dependencies","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-dependencies","()","<p>The dependencies of the gem for this specification\n"],["dependencies","Gem::Specification","Gem/Specification.html#method-i-dependencies","()","<p>A list of Gem::Dependency objects this gem depends on.\n<p>Use #add_dependency or #add_development_dependency …\n"],["dependencies_equal?","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-dependencies_equal-3F","(dependencies, other_dependencies)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#dependencies_equal?)\n"],["dependencies_equal?","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-dependencies_equal-3F","(dependencies, other_dependencies)","<p>Determines whether two arrays of dependencies are equal, and thus can be grouped.\n<p>@param [Array&lt;Object&gt;] …\n"],["dependencies_for","Gem::Resolver","Gem/Resolver.html#method-i-dependencies_for","(specification)",""],["dependencies_for","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-dependencies_for","(specification)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#dependencies_for)\n"],["dependencies_for","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-dependencies_for","(specification)","<p>Returns the dependencies of ‘specification`. @note This method should be ’pure’, i.e. the return …\n"],["dependency","Gem::ImpossibleDependenciesError","Gem/ImpossibleDependenciesError.html#method-i-dependency","()",""],["dependency_order","Gem::DependencyList","Gem/DependencyList.html#method-i-dependency_order","()","<p>Return a list of the gem specifications in the dependency list, sorted in order so that no gemspec in …\n"],["dependent_gems","Gem::Specification","Gem/Specification.html#method-i-dependent_gems","(check_dev=true)","<p>Return a list of all gems that have a dependency on this gemspec.  The list is structured with entries …\n"],["dependent_specs","Gem::Specification","Gem/Specification.html#method-i-dependent_specs","()","<p>Returns all specs that matches this spec’s runtime dependencies.\n"],["deprecate","Gem::Deprecate","Gem/Deprecate.html#method-i-deprecate","(name, repl, year, month)","<p>Simple deprecation method that deprecates <code>name</code> by wrapping it up in a dummy method. It warns on each …\n"],["deprecate_constant","Module","Module.html#method-i-deprecate_constant","(*args)","<p>Makes a list of existing constants deprecated. Attempt to refer to them will produce a warning.\n\n<pre>module ...</pre>\n"],["deprecate_option","Gem::Command","Gem/Command.html#method-i-deprecate_option","(name, version: nil, extra_msg: nil)","<p>Mark a command-line option as deprecated, and optionally specify a deprecation horizon.\n<p>Note that with …\n"],["deprecated?","Gem::Command","Gem/Command.html#method-i-deprecated-3F","()",""],["deprecation_warning","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-deprecation_warning","()",""],["deprep","Reline::ANSI","Reline/ANSI.html#method-c-deprep","(otio)",""],["deprep","Reline::GeneralIO","Reline/GeneralIO.html#method-c-deprep","(otio)",""],["deprep","Reline::Windows","Reline/Windows.html#method-c-deprep","(otio)",""],["depth","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-depth","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#depth)\n"],["depth","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-depth","()","<p>This integer returns the current depth of data structure nesting.\n"],["depth=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-depth-3D","(p1)","<p>This sets the maximum level of data structure nesting in the generated JSON to the integer depth, max_nesting …\n"],["deq","Thread::Queue","Thread/Queue.html#method-i-deq","(non_block = false, timeout: nil)",""],["deq","Thread::SizedQueue","Thread/SizedQueue.html#method-i-deq","(non_block = false, timeout: nil)",""],["derive","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-derive","(p1)","<p>Derives a shared secret from <em>pkey</em> and <em>peer_pkey</em>. <em>pkey</em> must contain the private components, <em>peer_pkey</em> …\n"],["descend","Pathname","Pathname.html#method-i-descend","()","<p>Iterates over and yields a new Pathname object for each element in the given path in descending order. …\n"],["descendent?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-descendent-3F","(other)",""],["description","Gem::Command","Gem/Command.html#method-i-description","()","<p>Override to display a longer description of what this command does.\n"],["description","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-description","()",""],["description=","Gem::Specification","Gem/Specification.html#method-i-description-3D","(str)","<p>A detailed description of this gem.  See also #summary\n"],["deserialize","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-deserialize","(o)",""],["destination_encoding","Encoding::Converter","Encoding/Converter.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an Encoding object.\n"],["destination_encoding","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an encoding object.\n"],["destination_encoding","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an encoding object.\n"],["destination_encoding_name","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-destination_encoding_name","()","<p>Returns the destination encoding name as a string.\n"],["destination_encoding_name","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-destination_encoding_name","()","<p>Returns the destination encoding name as a string.\n"],["detab","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-detab","(str, ts = 8)",""],["detach","Process","Process.html#method-c-detach","(p1)","<p>Some operating systems retain the status of terminated child processes until the parent collects that …\n"],["detach_vertex_named","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-detach_vertex_named","(name)","<p>Detaches the {#vertex_named} ‘name` {Vertex} from the graph, recursively removing any non-root vertices …\n"],["detach_vertex_named","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-detach_vertex_named","(graph, name)","<p>@macro action\n"],["detached","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-detached","()",""],["detached=","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-detached-3D","(p1)",""],["detached?","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-detached-3F","()",""],["detailed_message","DidYouMean::Correctable","DidYouMean/Correctable.html#method-i-detailed_message","(highlight: true, did_you_mean: true, **)",""],["detailed_message","ErrorHighlight::CoreExt","ErrorHighlight/CoreExt.html#method-i-detailed_message","(highlight: false, error_highlight: true, **)",""],["detailed_message","Exception","Exception.html#method-i-detailed_message","(p1 = {})","<p>Processes a string returned by #message.\n<p>It may add the class name of the exception to the end of the …\n"],["detailed_message","SyntaxSuggest","SyntaxSuggest.html#method-i-detailed_message","(highlight: true, syntax_suggest: true, **kwargs)",""],["detect","Enumerable","Enumerable.html#method-i-detect","(*args)","<p>Returns the first element for which the block returns a truthy value.\n<p>With a block given, calls the block …\n"],["detect","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-detect","(type=:complete)","<p>Return all gem name tuples who’s names match <code>obj</code>\n"],["detect_encoding","IRB::MagicFile","IRB/MagicFile.html#method-c-detect_encoding","(line)",""],["detect_encoding","RDoc::Encoding","RDoc/Encoding.html#method-c-detect_encoding","(string)","<p>Detects the encoding of <code>string</code> based on the magic comment\n"],["detect_invalid_blocks","SyntaxSuggest::CodeFrontier","SyntaxSuggest/CodeFrontier.html#method-i-detect_invalid_blocks","()","<p>Given that we know our syntax error exists somewhere in our frontier, we want to find the smallest possible …\n"],["detect_row_separator","CSV::Parser","CSV/Parser.html#method-i-detect_row_separator","(sample, cr, lf)",""],["determine_encoding","CSV","CSV.html#method-i-determine_encoding","(encoding, internal_encoding)",""],["determine_terminals","Racc::Grammar","Racc/Grammar.html#method-i-determine_terminals","()","<p>Sym#terminal?\n"],["dev","File::Stat","File/Stat.html#method-i-dev","()","<p>Returns an integer representing the device on which <em>stat</em> resides.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">dev</span>   <span class=\"ruby-comment\">#=&gt; 774</span>\n</pre>\n"],["dev_major","File::Stat","File/Stat.html#method-i-dev_major","()","<p>Returns the major part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/fd1&quot;</span>).<span class=\"ruby-identifier\">dev_major</span>   <span class=\"ruby-comment\">#=&gt; 2</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/tty&quot;</span>).<span class=\"ruby-identifier\">dev_major</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["dev_minor","File::Stat","File/Stat.html#method-i-dev_minor","()","<p>Returns the minor part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/fd1&quot;</span>).<span class=\"ruby-identifier\">dev_minor</span>   <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/tty&quot;</span>).<span class=\"ruby-identifier\">dev_minor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["development?","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-development-3F","()","<p>Is this activation request for a development dependency?\n"],["development?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-development-3F","()","<p>Is this dependency a development dependency?\n"],["development_dependencies","Gem::Specification","Gem/Specification.html#method-i-development_dependencies","()","<p>List of dependencies that are used for development\n"],["dfa","Racc::Grammar","Racc/Grammar.html#method-i-dfa","()",""],["dfa","Racc::States","Racc/States.html#method-i-dfa","()","<p>DFA (Deterministic Finite Automaton) Generation\n"],["dfdxi","Jacobian","Jacobian.html#method-i-dfdxi","(f,fx,x,i)","<p>Computes the derivative of <code>f[i]</code> at <code>x[i]</code>. <code>fx</code> is the value of <code>f</code> at <code>x</code>.\n"],["dh_compute_key","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-dh_compute_key","(pubkey)","<p>Derives a shared secret by ECDH. <em>pubkey</em> must be an instance of OpenSSL::PKey::EC::Point and must belong …\n"],["dialog","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-dialog","()",""],["dialog_proc","Reline::Core","Reline/Core.html#method-i-dialog_proc","(name_sym)",""],["dictionary_without_leaves","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-dictionary_without_leaves","()",""],["difference","Array","Array.html#method-i-difference","(*args)","<p>Returns a new Array containing only those elements from <code>self</code> that are not found in any of the Arrays …\n"],["difference","Set","Set.html#method-i-difference","(enum)",""],["dig","Array","Array.html#method-i-dig","(*args)","<p>Finds and returns the object in nested objects that is specified by <code>index</code> and <code>identifiers</code>. The nested …\n"],["dig","CSV::Row","CSV/Row.html#method-i-dig","(index_or_header, *indexes)","<p>Finds and returns the object in nested object that is specified by <code>index_or_header</code> and <code>specifiers</code>.\n<p>The …\n"],["dig","CSV::Table","CSV/Table.html#method-i-dig","(index_or_header, *index_or_headers)","<p>Extracts the nested value specified by the sequence of <code>index</code> or <code>header</code> objects by calling dig at each …\n"],["dig","Hash","Hash.html#method-i-dig","(*args)","<p>Finds and returns the object in nested objects that is specified by <code>key</code> and <code>identifiers</code>. The nested objects …\n"],["dig","OpenStruct","OpenStruct.html#method-i-dig","(name, *names)","<p>Finds and returns the object in nested objects that is specified by <code>name</code> and <code>identifiers</code>. The nested …\n"],["dig","Struct","Struct.html#method-i-dig","(*args)","<p>Finds and returns an object among nested objects. The nested objects may be instances of various classes. …\n"],["dig_perfect_match_proc=","Reline::Core","Reline/Core.html#method-i-dig_perfect_match_proc-3D","(p)",""],["digest","Digest::Class","Digest/Class.html#method-c-digest","(*args)","<p>Returns the hash value of a given <em>string</em>.  This is equivalent to Digest::Class.new(*parameters).digest(string), …\n"],["digest","Digest::Instance","Digest/Instance.html#method-i-digest","(p1 = v1)","<p>If none is given, returns the resulting hash value of the digest, keeping the digest’s state.\n<p>If a …\n"],["digest","OpenSSL::Digest","OpenSSL/Digest.html#method-c-digest","(name, data)","<p>Return the hash value computed with <em>name</em> Digest. <em>name</em> is either the long name or short name of a supported …\n"],["digest","OpenSSL::Engine","OpenSSL/Engine.html#method-i-digest","(p1)","<p>Returns a new instance of OpenSSL::Digest by <em>name</em>.\n<p>Will raise an EngineError if the digest is unavailable. …\n"],["digest","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-digest","()","<p>Returns the authentication code an instance represents as a binary string.\n<p>Example\n\n<pre>instance = OpenSSL::HMAC.new(&#39;key&#39;, ...</pre>\n"],["digest","OpenSSL::HMAC","OpenSSL/HMAC.html#method-c-digest","(digest, key, data)","<p>Returns the authentication code as a binary string. The <em>digest</em> parameter specifies the digest algorithm …\n"],["digest!","Digest::Instance","Digest/Instance.html#method-i-digest-21","()","<p>Returns the resulting hash value and resets the digest to the initial state.\n"],["digest_length","Digest::Base","Digest/Base.html#method-i-digest_length","()","<p>Return the length of the hash value in bytes.\n"],["digest_length","Digest::Instance","Digest/Instance.html#method-i-digest_length","()","<p>Returns the length of the hash value of the digest.\n<p>This method should be overridden by each implementation …\n"],["digest_length","Digest::SHA2","Digest/SHA2.html#method-i-digest_length","()","<p>Return the length of the hash value (the digest) in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Digest</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SHA256</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">digest_length</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">8</span>\n<span class=\"ruby-comment\"># =&gt; 256 ...</span>\n</pre>\n"],["digest_length","OpenSSL::Digest","OpenSSL/Digest.html#method-i-digest_length","()","<p>Returns the output size of the digest, i.e. the length in bytes of the final message digest result.\n<p>Example …\n"],["digits","Integer","Integer.html#method-i-digits","(*args)","<p>Returns an array of integers representing the <code>base</code>-radix digits of <code>self</code>; the first element of the array …\n"],["digraph","Racc::States","Racc/States.html#method-i-digraph","(map, relation)",""],["dimensions","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-dimensions","()",""],["dir","Gem","Gem.html#method-c-dir","()","<p>The path where gems are to be installed.\n"],["dir","Gem::Installer","Gem/Installer.html#method-i-dir","()","<p>Return the target directory where the gem is to be installed. This directory is not guaranteed to be …\n"],["dir_config","MakeMakefile","MakeMakefile.html#method-i-dir_config","(target, idefault=nil, ldefault=nil)","<p>Sets a <code>target</code> name that the user can then use to configure various “with” options with on the …\n"],["direct_ancestors","RDoc::ClassModule","RDoc/ClassModule.html#method-i-direct_ancestors","()","<p>Ancestors of this class or module only\n"],["direct_ancestors","RDoc::NormalClass","RDoc/NormalClass.html#method-i-direct_ancestors","()",""],["directory?","File","File.html#method-c-directory-3F","(p1)","<p>With string <code>object</code> given, returns <code>true</code> if <code>path</code> is a string path leading to a directory, or to a symbolic …\n"],["directory?","File::Stat","File/Stat.html#method-i-directory-3F","()","<p>With string <code>object</code> given, returns <code>true</code> if <code>path</code> is a string path leading to a directory, or to a symbolic …\n"],["directory?","FileTest","FileTest.html#method-i-directory-3F","(p1)","<p>With string <code>object</code> given, returns <code>true</code> if <code>path</code> is a string path leading to a directory, or to a symbolic …\n"],["directory?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-directory-3F","()","<p>Is this tar entry a directory?\n"],["directory?","Pathname","Pathname.html#method-i-directory-3F","()","<p>See FileTest.directory?.\n"],["dirname","File","File.html#method-c-dirname","(*args)","<p>Returns all components of the filename given in <em>file_name</em> except the last one (after first stripping …\n"],["dirname","Pathname","Pathname.html#method-i-dirname","()","<p>Returns all but the last component of the path.\n<p>See File.dirname.\n"],["dirs","Gem::Specification","Gem/Specification.html#method-c-dirs","()","<p>Return the directories that Specification uses to find specs.\n"],["dirs=","Gem::Specification","Gem/Specification.html#method-c-dirs-3D","(dirs)","<p>Set the directories that Specification uses to find specs. Setting this resets the list of known specs. …\n"],["disable","GC","GC.html#method-c-disable","()","<p>Disables garbage collection, returning <code>true</code> if garbage collection was already disabled.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GC</span>.<span class=\"ruby-identifier\">disable</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["disable","GC::Profiler","GC/Profiler.html#method-c-disable","()","<p>Stops the GC profiler.\n"],["disable","TracePoint","TracePoint.html#method-i-disable","()","<p>Deactivates the trace\n<p>Return true if trace was enabled. Return false if trace was disabled.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">trace</span>.<span class=\"ruby-identifier\">enabled?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["disable_close","Fiddle::Handle","Fiddle/Handle.html#method-i-disable_close","()","<p>Disable a call to dlclose() when this handle is garbage collected.\n"],["disasm","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-disasm","(p1)","<p>Takes <code>body</code>, a Method or Proc object, and returns a String with the human readable instructions for <code>body</code> …\n"],["disasm","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-disasm","()","<p>Returns the instruction sequence as a <code>String</code> in human readable form.\n\n<pre>puts RubyVM::InstructionSequence.compile(&#39;1 ...</pre>\n"],["disasm","RubyVM::YJIT","RubyVM/YJIT.html#method-c-disasm","(iseq)","<p>Produce disassembly for an iseq\n"],["disassemble","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-disassemble","()","<p>Returns the instruction sequence as a <code>String</code> in human readable form.\n\n<pre>puts RubyVM::InstructionSequence.compile(&#39;1 ...</pre>\n"],["disassemble","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-disassemble","(p1)","<p>Takes <code>body</code>, a Method or Proc object, and returns a String with the human readable instructions for <code>body</code> …\n"],["disjoint?","Set","Set.html#method-i-disjoint-3F","(set)","<p>Returns true if the set and the given enumerable have\nno element in common. This method is the opposite ...\n"],["dispatch","Psych::Visitors::Visitor","Psych/Visitors/Visitor.html#method-i-dispatch","()",""],["dispatch_cache","Psych::Visitors::Visitor","Psych/Visitors/Visitor.html#method-c-dispatch_cache","()","<p>@api private\n"],["dispatch_seq","IRB::Color","IRB/Color.html#method-c-dispatch_seq","(token, expr, str, in_symbol:)",""],["dispid","WIN32OLE::Method","WIN32OLE/Method.html#method-i-dispid","()","<p>Returns dispatch ID.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Workbooks&#39;</span>)\n<span class=\"ruby-identifier\">method</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["display","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-display","()",""],["display","Object","Object.html#method-i-display","(*args)","<p>Writes <code>self</code> on the given port:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">display</span>\n<span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">display</span>\n[ <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span> ].<span class=\"ruby-identifier\">display</span>\n<span class=\"ruby-identifier\">puts</span>\n</pre>\n<p>Output:\n"],["display?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-display-3F","()","<p>Should this CodeObject be displayed in output?\n<p>A code object should be displayed if:\n<p>The item didn’t …\n"],["display?","RDoc::TopLevel","RDoc/TopLevel.html#method-i-display-3F","()","<p>Only a TopLevel that contains text file) will be displayed.  See also RDoc::CodeObject#display?\n"],["display_block","SyntaxSuggest::DisplayInvalidBlocks","SyntaxSuggest/DisplayInvalidBlocks.html#method-i-display_block","(block)",""],["display_header","Gem::QueryUtils","Gem/QueryUtils.html#method-i-display_header","(type)",""],["distance","DidYouMean::Jaro","DidYouMean/Jaro.html#method-i-distance","(str1, str2)",""],["distance","DidYouMean::JaroWinkler","DidYouMean/JaroWinkler.html#method-i-distance","(str1, str2)",""],["div","BigDecimal","BigDecimal.html#method-i-div","(p1, p2 = v2)","<p>Divide by the specified value.\n<p>digits &mdash; If specified and less than the number of significant digits of the …\n"],["div","Integer","Integer.html#method-i-div","(p1)","<p>Performs integer division; returns the integer result of dividing <code>self</code> by <code>numeric</code>:\n\n<pre class=\"ruby\">  <span class=\"ruby-value\">4</span>.<span class=\"ruby-identifier\">div</span>(<span class=\"ruby-value\">3</span>)      <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["div","Numeric","Numeric.html#method-i-div","(p1)","<p>Returns the quotient <code>self/other</code> as an integer (via <code>floor</code>), using method <code>/</code> in the derived class of <code>self</code> …\n"],["divide","Set","Set.html#method-i-divide","(&func)","<p>Divides the set into a set of subsets according to the commonality\ndefined by the given block.\n<p>If the …\n"],["divmod","BigDecimal","BigDecimal.html#method-i-divmod","(p1)","<p>Divides by the specified value, and returns the quotient and modulus as BigDecimal numbers. The quotient …\n"],["divmod","Float","Float.html#method-i-divmod","(p1)","<p>Returns a 2-element array <code>[q, r]</code>, where\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">q</span> = (<span class=\"ruby-keyword\">self</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">other</span>).<span class=\"ruby-identifier\">floor</span>      <span class=\"ruby-comment\"># Quotient</span>\n<span class=\"ruby-identifier\">r</span> = <span class=\"ruby-keyword\">self</span> <span class=\"ruby-operator\">%</span> <span class=\"ruby-identifier\">other</span>       <span class=\"ruby-operator\">...</span>\n</pre>\n"],["divmod","Integer","Integer.html#method-i-divmod","(p1)","<p>Returns a 2-element array <code>[q, r]</code>, where\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">q</span> = (<span class=\"ruby-keyword\">self</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">other</span>).<span class=\"ruby-identifier\">floor</span>    <span class=\"ruby-comment\"># Quotient</span>\n<span class=\"ruby-identifier\">r</span> = <span class=\"ruby-keyword\">self</span> <span class=\"ruby-operator\">%</span> <span class=\"ruby-identifier\">other</span>         <span class=\"ruby-operator\">...</span>\n</pre>\n"],["divmod","Numeric","Numeric.html#method-i-divmod","(p1)","<p>Returns a 2-element array <code>[q, r]</code>, where\n\n<pre>q = (self/other).floor                  # Quotient\nr = self % ...</pre>\n"],["dlload","Fiddle::Importer","Fiddle/Importer.html#method-i-dlload","(*libs)","<p>Creates an array of handlers for the given <code>libs</code>, can be an instance of Fiddle::Handle, Fiddle::Importer …\n"],["dlopen","Fiddle","Fiddle.html#method-c-dlopen","(library)","<p>Creates a new handler that opens <code>library</code>, and returns an instance of Fiddle::Handle.\n<p>If <code>nil</code> is given for …\n"],["dlopen","Fiddle","Fiddle.html#method-i-dlopen","(library)","<p>Creates a new handler that opens <code>library</code>, and returns an instance of Fiddle::Handle.\n<p>If <code>nil</code> is given for …\n"],["dlunwrap","Fiddle","Fiddle.html#method-c-dlunwrap","(p1)","<p>Returns the hexadecimal representation of a memory pointer address <code>addr</code>\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">lib</span> = <span class=\"ruby-constant\">Fiddle</span>.<span class=\"ruby-identifier\">dlopen</span>(<span class=\"ruby-string\">&#39;/lib64/libc-2.15.so&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["dlwrap","Fiddle","Fiddle.html#method-c-dlwrap","(p1)","<p>Returns a memory pointer of a function’s hexadecimal address location <code>val</code>\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">lib</span> = <span class=\"ruby-constant\">Fiddle</span>.<span class=\"ruby-identifier\">dlopen</span>(<span class=\"ruby-string\">&#39;/lib64/libc-2.15.so&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["dn","URI::LDAP","URI/LDAP.html#method-i-dn","()","<p>Returns dn.\n"],["dn=","URI::LDAP","URI/LDAP.html#method-i-dn-3D","(val)","<p>Setter for dn <code>val</code>.\n"],["do_GET","RDoc::Servlet","RDoc/Servlet.html#method-i-do_GET","(req, res)","<p>GET request entry point.  Fills in <code>res</code> for the path, etc. in <code>req</code>.\n"],["do_aliases","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_aliases","()","<p>Scans #content for rb_define_alias\n"],["do_attrs","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_attrs","()","<p>Scans #content for rb_attr and rb_define_attr\n"],["do_boot_defclass","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_boot_defclass","()","<p>Scans #content for boot_defclass\n"],["do_classes_and_modules","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_classes_and_modules","()","<p>Scans #content for rb_define_class, boot_defclass, rb_define_class_under and rb_singleton_class\n"],["do_configuration","Gem::GemRunner","Gem/GemRunner.html#method-i-do_configuration","(args)",""],["do_constants","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_constants","()","<p>Scans #content for rb_define_variable, rb_define_readonly_variable, rb_define_const and rb_define_global_const …\n"],["do_finish","Net::HTTP","Net/HTTP.html#method-i-do_finish","()",""],["do_includes","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_includes","()","<p>Scans #content for rb_include_module\n"],["do_methods","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_methods","()","<p>Scans #content for rb_define_method, rb_define_singleton_method, rb_define_module_function, rb_define_private_method …\n"],["do_missing","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_missing","()","<p>Creates classes and module that were missing were defined due to the file order being different than …\n"],["do_not_reverse_lookup","BasicSocket","BasicSocket.html#method-i-do_not_reverse_lookup","()","<p>Gets the do_not_reverse_lookup flag of <em>basicsocket</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;socket&#39;</span>\n\n<span class=\"ruby-constant\">BasicSocket</span>.<span class=\"ruby-identifier\">do_not_reverse_lookup</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["do_not_reverse_lookup","BasicSocket","BasicSocket.html#method-c-do_not_reverse_lookup","()","<p>Gets the global do_not_reverse_lookup flag.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BasicSocket</span>.<span class=\"ruby-identifier\">do_not_reverse_lookup</span>  <span class=\"ruby-comment\">#=&gt; false</span>\n</pre>\n"],["do_not_reverse_lookup=","BasicSocket","BasicSocket.html#method-i-do_not_reverse_lookup-3D","(p1)","<p>Sets the do_not_reverse_lookup flag of <em>basicsocket</em>.\n\n<pre>TCPSocket.open(&quot;www.ruby-lang.org&quot;, 80) {|sock|\n  ...</pre>\n"],["do_not_reverse_lookup=","BasicSocket","BasicSocket.html#method-c-do_not_reverse_lookup-3D","(p1)","<p>Sets the global do_not_reverse_lookup flag.\n<p>The flag is used for initial value of do_not_reverse_lookup …\n"],["do_not_reverse_lookup=","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-do_not_reverse_lookup-3D","(flag)",""],["do_reply","Rinda::RingServer","Rinda/RingServer.html#method-i-do_reply","()","<p>Pulls lookup tuples out of the TupleSpace and sends their DRb object the address of the local TupleSpace …\n"],["do_resolve_sr","Racc::States","Racc/States.html#method-i-do_resolve_sr","(stok, rtok)",""],["do_start","Net::HTTP","Net/HTTP.html#method-i-do_start","()",""],["do_write","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-do_write","(s)","<p>Writes <em>s</em> to the buffer.  When the buffer is full or #sync is true the buffer is flushed to the underlying …\n"],["do_write","Rinda::RingServer","Rinda/RingServer.html#method-i-do_write","(msg)","<p>Extracts the response URI from <code>msg</code> and adds it to TupleSpace where it will be picked up by <code>reply_service</code> …\n"],["doc_dir","Gem::Specification","Gem/Specification.html#method-i-doc_dir","(type = nil)","<p>Returns the full path to this spec’s documentation directory.  If <code>type</code> is given it will be appended …\n"],["doc_stats","RDoc::Stats","RDoc/Stats.html#method-i-doc_stats","(collection)","<p>Returns the length and number of undocumented items in <code>collection</code>.\n"],["doctor","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-i-doctor","()",""],["doctor","Gem::Doctor","Gem/Doctor.html#method-i-doctor","()","<p>Cleans up uninstalled files and invalid gem specifications\n"],["document","RDoc::RDoc","RDoc/RDoc.html#method-i-document","(options)","<p>Generates documentation or a coverage report depending upon the settings in <code>options</code>.\n<p><code>options</code> can be either …\n"],["document","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-document","(generator, options, destination)","<p>Generates documentation using the named <code>generator</code> (“darkfish” or “ri”) and following …\n"],["document","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-document","(generator, options, destination)","<p>Generates documentation using the named <code>generator</code> (“darkfish” or “ri”) and following …\n"],["document?","Psych::Nodes::Document","Psych/Nodes/Document.html#method-i-document-3F","()",""],["document?","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-document-3F","()",""],["document_children=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-document_children-3D","(document_children)","<p>Enables or disables documentation of this CodeObject’s children unless it has been turned off by …\n"],["document_ok?","SyntaxSuggest::DisplayInvalidBlocks","SyntaxSuggest/DisplayInvalidBlocks.html#method-i-document_ok-3F","()",""],["document_self=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-document_self-3D","(document_self)","<p>Enables or disables documentation of this CodeObject unless it has been turned off by :enddoc:.  If the …\n"],["document_self_or_methods","RDoc::ClassModule","RDoc/ClassModule.html#method-i-document_self_or_methods","()","<p>Does this ClassModule or any of its methods have document_self set?\n"],["documentation_page","RDoc::Servlet","RDoc/Servlet.html#method-i-documentation_page","(store, generator, path, req, res)","<p>Fills in <code>res</code> with the class, module or page for <code>req</code> from <code>store</code>.\n<p><code>path</code> is relative to the mount_path and …\n"],["documentation_search","RDoc::Servlet","RDoc/Servlet.html#method-i-documentation_search","(store, generator, req, res)","<p>Creates the JSON search index on <code>res</code> for the given <code>store</code>.  <code>generator</code> must respond to #json_index to build. …\n"],["documentation_source","RDoc::Servlet","RDoc/Servlet.html#method-i-documentation_source","(path)","<p>Returns the RDoc::Store and path relative to <code>mount_path</code> for documentation at <code>path</code>.\n"],["documented?","RDoc::ClassModule","RDoc/ClassModule.html#method-i-documented-3F","()","<p>Does this class or module have a comment with content or is #received_nodoc true?\n"],["documented?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-documented-3F","()","<p>Does this object have a comment with content or is #received_nodoc true?\n"],["documented?","RDoc::Constant","RDoc/Constant.html#method-i-documented-3F","()","<p>A constant is documented if it has a comment, or is an alias for a documented class or module.\n"],["documented?","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-documented-3F","()","<p>A method/attribute is documented if any of the following is true:\n<p>it was marked with :nodoc:;\n<p>it has a …\n"],["domain=","CGI::Cookie","CGI/Cookie.html#method-i-domain-3D","(str)","<p>Set domain for which this cookie applies\n"],["done","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-done","()","<p>The silent download reporter won’t tell you when the download is done. Because it is silent.\n"],["done","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-i-done","()","<p>Does not print anything when complete as this object has taken a vow of silence.\n"],["done","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-i-done","()","<p>Prints out the terminal message.\n"],["done","Gem::StreamUI::ThreadedDownloadReporter","Gem/StreamUI/ThreadedDownloadReporter.html#method-i-done","()","<p>Indicates the download is complete.\n"],["done","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-i-done","()","<p>Prints out the terminal message.\n"],["done_adding","RDoc::Stats","RDoc/Stats.html#method-i-done_adding","()","<p>Call this to mark the end of parsing for display purposes\n"],["done_documenting=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-done_documenting-3D","(value)","<p>Turns documentation on/off, and turns on/off #document_self and #document_children.\n<p>Once documentation …\n"],["done_installing","Gem","Gem.html#method-c-done_installing","(&hook)","<p>Adds a post-installs hook that will be passed a Gem::DependencyInstaller and a list of installed specifications …\n"],["dot","IRB::Vec","IRB/Vec.html#method-i-dot","(other)",""],["dot_pat","ACL::ACLEntry","ACL/ACLEntry.html#method-i-dot_pat","(str)","<p>Creates a Regexp to match an address.\n"],["dot_pat_str","ACL::ACLEntry","ACL/ACLEntry.html#method-i-dot_pat_str","(str)","<p>Creates a regular expression to match IPv4 addresses\n"],["double_fig","BigDecimal","BigDecimal.html#method-c-double_fig","()",""],["down","Gem::Resolver::Molinillo::DependencyGraph::Action","Gem/Resolver/Molinillo/DependencyGraph/Action.html#method-i-down","(graph)","<p>Reverses the action on the given graph. @param  [DependencyGraph] graph the graph to reverse the action …\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-down","(graph)","<p>(see Action#down)\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-i-down","(graph)","<p>(see Action#down)\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html#method-i-down","(graph)","<p>(see Action#down)\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::Tag","Gem/Resolver/Molinillo/DependencyGraph/Tag.html#method-i-down","(graph)","<p>(see Action#down)\n"],["downcase","String","String.html#method-i-downcase","(*args)","<p>Returns a string containing the downcased characters in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;Hello World!&#39;</span> <span class=\"ruby-comment\"># =&gt; &quot;Hello World!&quot;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">downcase</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["downcase","Symbol","Symbol.html#method-i-downcase","(*args)","<p>Equivalent to <code>sym.to_s.downcase.to_sym</code>.\n<p>See String#downcase.\n<p>Related: Symbol#upcase.\n"],["downcase!","String","String.html#method-i-downcase-21","(*args)","<p>Downcases the characters in <code>self</code>; returns <code>self</code> if any changes were made, <code>nil</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;Hello World!&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["downcase_word","Reline::LineEditor","Reline/LineEditor.html#method-i-downcase_word","(key)",""],["download","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-download","(spec, source_uri, install_dir = Gem.dir)","<p>Moves the gem <code>spec</code> from <code>source_uri</code> to the cache dir unless it is already there.  If the source_uri is …\n"],["download","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-download","(path)","<p>Downloads a gem at <code>path</code> and returns the file path.\n"],["download","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-download","(options)",""],["download","Gem::Source","Gem/Source.html#method-i-download","(spec, dir=Dir.pwd)","<p>Downloads <code>spec</code> and writes it to <code>dir</code>.  See also Gem::RemoteFetcher#download.\n"],["download","Gem::Source::Installed","Gem/Source/Installed.html#method-i-download","(spec, path)","<p>We don’t need to download an installed gem\n"],["download_reporter","Gem::StreamUI","Gem/StreamUI.html#method-i-download_reporter","(*args)","<p>Return a download reporter object chosen from the current verbosity\n"],["download_to_cache","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-download_to_cache","(dependency)","<p>Given a name and requirement, downloads this gem into cache and returns the filename. Returns nil if …\n"],["downto","Date","Date.html#method-i-downto","(p1)","<p>Equivalent to #step with arguments <code>min</code> and <code>-1</code>.\n"],["downto","Integer","Integer.html#method-i-downto","(p1)","<p>Calls the given block with each integer value from <code>self</code> down to <code>limit</code>; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = []\n<span class=\"ruby-value\">10</span>.<span class=\"ruby-identifier\">downto</span>(<span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["draw","IRB::Canvas","IRB/Canvas.html#method-i-draw","()",""],["drop","Array","Array.html#method-i-drop","(p1)","<p>Returns a new Array containing all but the first <code>n</code> element of <code>self</code>, where <code>n</code> is a non-negative Integer …\n"],["drop","Enumerable","Enumerable.html#method-i-drop","(p1)","<p>For positive integer <code>n</code>, returns an array containing all but the first <code>n</code> elements:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">r</span> = (<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>)\n<span class=\"ruby-identifier\">r</span>.<span class=\"ruby-identifier\">drop</span>(<span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["drop","Enumerator::Lazy","Enumerator/Lazy.html#method-i-drop","(p1)","<p>Like Enumerable#drop, but chains operation to be lazy-evaluated.\n"],["drop_while","Array","Array.html#method-i-drop_while","()","<p>Returns a new Array containing zero or more trailing elements of <code>self</code>; does not modify <code>self</code>.\n<p>With a block …\n"],["drop_while","Enumerable","Enumerable.html#method-i-drop_while","()","<p>Calls the block with successive elements as long as the block returns a truthy value; returns an array …\n"],["drop_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-drop_while","()","<p>Like Enumerable#drop_while, but chains operation to be lazy-evaluated.\n"],["dsa_sign_asn1","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-dsa_sign_asn1","(data)","<p><strong>Deprecated in version 3.0</strong>. Consider using PKey::PKey#sign_raw and PKey::PKey#verify_raw instead.\n"],["dsa_verify_asn1","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-dsa_verify_asn1","(data, sig)","<p><strong>Deprecated in version 3.0</strong>. Consider using PKey::PKey#sign_raw and PKey::PKey#verify_raw instead.\n"],["dst?","Time","Time.html#method-i-dst-3F","()","<p>Returns <code>true</code> if <code>self</code> is in daylight saving time, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-01 ...</span>\n</pre>\n"],["dstaddr","Socket::Ifaddr","Socket/Ifaddr.html#method-i-dstaddr","()","<p>Returns the destination address of <em>ifaddr</em>. nil is returned if the flags doesn’t have IFF_POINTOPOINT …\n"],["dummy?","Encoding","Encoding.html#method-i-dummy-3F","()","<p>Returns true for dummy encodings. A dummy encoding is an encoding for which character handling is not …\n"],["dummy?","Racc::Sym","Racc/Sym.html#method-i-dummy-3F","()",""],["dummy_instance_alias","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-dummy_instance_alias","(foo, bar)",""],["dummy_instance_method","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-dummy_instance_method","(foo, bar)",""],["dummy_makefile","MakeMakefile","MakeMakefile.html#method-i-dummy_makefile","(srcdir)","<p>Creates a stub Makefile.\n"],["dummy_singleton_method","RDoc::MarkupReference","RDoc/MarkupReference.html#method-c-dummy_singleton_method","(foo, bar)",""],["dump","JSON","JSON.html#method-i-dump","(obj, anIO = nil, limit = nil)","<p>Dumps <code>obj</code> as a JSON string, i.e. calls generate on the object and returns the result.\n<p>The default options …\n"],["dump","JSON::GenericObject","JSON/GenericObject.html#method-c-dump","(obj, *args)",""],["dump","Marshal","Marshal.html#method-c-dump","(p1, p2 = v2, p3 = v3)","<p>Serializes obj and all descendant objects. If anIO is specified, the serialized data will be written …\n"],["dump","ObjectSpace","ObjectSpace.html#method-i-dump","(obj, output: :string)","<p>Dump the contents of a ruby object as JSON.\n<p>This method is only expected to work with C Ruby. This is …\n"],["dump","Psych","Psych.html#method-c-dump","(o, io = nil, options = {})","<p>Dump Ruby object <code>o</code> to a YAML string.  Optional <code>options</code> may be passed in to control the output format. …\n"],["dump","String","String.html#method-i-dump","()","<p>Returns a printable version of <code>self</code>, enclosed in double-quotes, with special characters escaped, and …\n"],["dump_all","ObjectSpace","ObjectSpace.html#method-i-dump_all","(output: :file, full: false, since: nil, shapes: true)","<p>Dump the contents of the ruby heap as JSON.\n<p><em>full</em> must be a boolean. If true all heap slots are dumped …\n"],["dump_coder","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-dump_coder","(o)",""],["dump_exception","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-dump_exception","(o, msg)",""],["dump_exit_locations","RubyVM::YJIT","RubyVM/YJIT.html#method-c-dump_exit_locations","(filename)","<p>Marshal dumps exit locations to the given filename.\n<p>Usage:\n<p>If ‘–yjit-exit-locations` is passed, a file …\n"],["dump_ivars","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-dump_ivars","(target)",""],["dump_list","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-dump_list","(o)",""],["dump_shapes","ObjectSpace","ObjectSpace.html#method-i-dump_shapes","(output: :file, since: 0)","<p>Dump the contents of the ruby shape tree as JSON.\n<p>If <em>shapes</em> is a positive integer, only shapes newer than …\n"],["dump_stream","Psych","Psych.html#method-c-dump_stream","(*objects)","<p>Dump a list of objects as separate documents to a document stream.\n<p>Example:\n\n<pre>Psych.dump_stream(&quot;foo\\n  &quot;, ...</pre>\n"],["dup","BigDecimal","BigDecimal.html#method-i-dup","()",""],["dup","ENV","ENV.html#method-c-dup","()","<p>Raises TypeError, because ENV is a singleton object. Use #to_h to get a copy of ENV data as a hash.\n"],["dup","Numeric","Numeric.html#method-i-dup","()","<p>Returns <code>self</code>.\n<p>Related: Numeric#clone.\n"],["dup","Object","Object.html#method-i-dup","()","<p>Produces a shallow copy of <em>obj</em>—the instance variables of <em>obj</em> are copied, but not the objects they reference. …\n"],["dup","Racc::ISet","Racc/ISet.html#method-i-dup","()",""],["dup","Singleton","Singleton.html#method-i-dup","()","<p>Raises a TypeError to prevent duping.\n"],["dynamic_prompt","IRB::RelineInputMethod","IRB/RelineInputMethod.html#method-i-dynamic_prompt","(&block)",""],["each","ARGF","ARGF.html#method-i-each","(*args)","<p>Returns an enumerator which iterates over each line (separated by <em>sep</em>, which defaults to your platform’s …\n"],["each","Array","Array.html#method-i-each","()","<p>Iterates over array elements.\n<p>When a block given, passes each successive array element to the block; returns …\n"],["each","CSV","CSV.html#method-i-each","(&block)","<p>Calls the block with each successive row. The data source must be opened for reading.\n<p>Without headers: …\n"],["each","CSV::FieldsConverter","CSV/FieldsConverter.html#method-i-each","(&block)",""],["each","CSV::Row","CSV/Row.html#method-i-each","(&block)","<p>Calls the block with each header-value pair; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;Name,Name,Name\\nFoo,Bar,Baz\\n&quot;</span>\n<span class=\"ruby-identifier\">table</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each","CSV::Table","CSV/Table.html#method-i-each","(&block)","<p>Calls the block with each row or column; returns <code>self</code>.\n<p>When the access mode is <code>:row</code> or <code>:col_or_row</code>, calls …\n"],["each","Dir","Dir.html#method-i-each","()","<p>Calls the block once for each entry in this directory, passing the filename of each entry as a parameter …\n"],["each","ENV","ENV.html#method-c-each","()","<p>Yields each environment variable name and its value as a 2-element Array:\n\n<pre>h = {}\nENV.each_pair { |name, ...</pre>\n"],["each","Enumerator","Enumerator.html#method-i-each","(*args)","<p>Iterates over the block according to how this Enumerator was constructed. If no block and no arguments …\n"],["each","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-each","()",""],["each","Enumerator::Chain","Enumerator/Chain.html#method-i-each","(*args)","<p>Iterates over the elements of the first enumerable by calling the “each” method on it with …\n"],["each","Enumerator::Product","Enumerator/Product.html#method-i-each","()","<p>Iterates over the elements of the first enumerable by calling the “each_entry” method on it …\n"],["each","Etc::Group","Etc/Group.html#method-c-each","()","<p>Iterates for each entry in the <code>/etc/group</code> file if a block is given.\n<p>If no block is given, returns the …\n"],["each","Etc::Passwd","Etc/Passwd.html#method-c-each","()","<p>Iterates for each entry in the <code>/etc/passwd</code> file if a block is given.\n<p>If no block is given, returns the …\n"],["each","Fiddle::CStruct","Fiddle/CStruct.html#method-i-each","()",""],["each","Gem::AvailableSet","Gem/AvailableSet.html#method-i-each","()","<p>Yields each Tuple in this AvailableSet\n"],["each","Gem::ConfigFile","Gem/ConfigFile.html#method-i-each","(&block)","<p>Delegates to @hash\n"],["each","Gem::DependencyList","Gem/DependencyList.html#method-i-each","(&block)","<p>Iterator over dependency_order\n"],["each","Gem::List","Gem/List.html#method-i-each","()",""],["each","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-each","()","<p>Iterates over files in the tarball yielding each entry\n"],["each","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-each","()","<p>Enumerates through the vertices of the graph. @return [Array&lt;Vertex&gt;] The graph’s vertices. …\n"],["each","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-each","()","<p>@!visibility private Enumerates each action in the log @yield [Action]\n"],["each","Gem::SourceList","Gem/SourceList.html#method-i-each","()","<p>Yields each source URI in the list.\n"],["each","Gem::Specification","Gem/Specification.html#method-c-each","()","<p>Enumerate every known spec.  See ::dirs= and ::add_spec to set the list of specs.\n"],["each","GetoptLong","GetoptLong.html#method-i-each","()","<p>Calls the given block with each option; each option is a 2-element array containing:\n<p>The option name (the …\n"],["each","Hash","Hash.html#method-i-each","()","<p>Hash#each is an alias for Hash#each_pair.\n<p>Calls the given block with each key-value pair; returns <code>self</code> …\n"],["each","IO","IO.html#method-i-each","(*args)","<p>Calls the block with each remaining line read from the stream; returns <code>self</code>. Does nothing if already …\n"],["each","IO::Buffer","IO/Buffer.html#method-i-each","(*args)","<p>Iterates over the buffer, yielding each <code>value</code> of <code>data_type</code> starting from <code>offset</code>.\n<p>If <code>count</code> is given, only …\n"],["each","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each","()",""],["each","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each","OpenSSL::ASN1::Constructive","OpenSSL/ASN1/Constructive.html#method-i-each","()","<p>Calls the given block once for each element in self, passing that element as parameter <em>asn1</em>. If no block …\n"],["each","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-each","(eol=$/)","<p>Executes the block for every line in the stream where lines are separated by <em>eol</em>.\n<p>See also #gets\n"],["each","OpenSSL::Config","OpenSSL/Config.html#method-i-each","()","<p>Retrieves the section and its pairs for the current configuration.\n\n<pre>config.each do |section, key, value| ...</pre>\n"],["each","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-each","(&block)","<p>Iterate over each node in the tree. Yields each node to <code>block</code> depth first.\n"],["each","Racc::Grammar","Racc/Grammar.html#method-i-each","(&block)",""],["each","Racc::ISet","Racc/ISet.html#method-i-each","(&block)",""],["each","Racc::Rule","Racc/Rule.html#method-i-each","(&block)",""],["each","Racc::States","Racc/States.html#method-i-each","(&block)",""],["each","Racc::SymbolTable","Racc/SymbolTable.html#method-i-each","(&block)",""],["each","Range","Range.html#method-i-each","()","<p>With a block given, passes each element of <code>self</code> to the block:\n\n<pre>a = []\n(1..4).each {|element| a.push(element) ...</pre>\n"],["each","Reline::KillRing","Reline/KillRing.html#method-i-each","()",""],["each","Rinda::NotifyTemplateEntry","Rinda/NotifyTemplateEntry.html#method-i-each","()","<p>Yields event/tuple pairs until this NotifyTemplateEntry expires.\n"],["each","Rinda::RingFinger","Rinda/RingFinger.html#method-i-each","()","<p>Iterates over all discovered TupleSpaces starting with the primary.\n"],["each","Rinda::Tuple","Rinda/Tuple.html#method-i-each","()","<p>Iterate through the tuple, yielding the index or key, and the value, thus ensuring arrays are iterated …\n"],["each","Set","Set.html#method-i-each","(&block)","<p>Calls the given block once for each element in the set, passing\nthe element as parameter. Returns an ...\n"],["each","StringIO","StringIO.html#method-i-each","(*args)","<p>Calls the block with each remaining line read from the stream; does nothing if already at end-of-file; …\n"],["each","Struct","Struct.html#method-i-each","()","<p>Calls the given block with the value of each member; returns <code>self</code>:\n\n<pre>Customer = Struct.new(:name, :address, ...</pre>\n"],["each","SyntaxSuggest::LexAll","SyntaxSuggest/LexAll.html#method-i-each","()",""],["each","WIN32OLE","WIN32OLE.html#method-i-each","()","<p>Iterates over each item of OLE collection which has IEnumVARIANT interface.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">excel</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Excel.Application&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each","Win32::Registry","Win32/Registry.html#method-i-each","()",""],["each","YAML::DBM","YAML/DBM.html#method-i-each","()",""],["each","Zlib::GzipReader","Zlib/GzipReader.html#method-i-each","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["each_address","Resolv","Resolv.html#method-i-each_address","(name)","<p>Iterates over all IP addresses for <code>name</code>.\n"],["each_address","Resolv","Resolv.html#method-c-each_address","(name, &block)","<p>Iterates over all IP addresses for <code>name</code>.\n"],["each_address","Resolv::DNS","Resolv/DNS.html#method-i-each_address","(name)","<p>Iterates over all IP addresses for <code>name</code> retrieved from the DNS resolver.\n<p><code>name</code> can be a Resolv::DNS::Name …\n"],["each_address","Resolv::Hosts","Resolv/Hosts.html#method-i-each_address","(name, &proc)","<p>Iterates over all IP addresses for <code>name</code> retrieved from the hosts file.\n"],["each_address","Resolv::MDNS","Resolv/MDNS.html#method-i-each_address","(name)","<p>Iterates over all IP addresses for <code>name</code> retrieved from the mDNS resolver, provided name ends with “local”. …\n"],["each_ancestor","RDoc::ClassModule","RDoc/ClassModule.html#method-i-each_ancestor","()","<p>Iterates the ancestors of this class or module for which an RDoc::ClassModule exists.\n"],["each_attribute","RDoc::Context","RDoc/Context.html#method-i-each_attribute","()","<p>Iterator for attributes\n"],["each_builtin","RubyVM","RubyVM.html#method-c-each_builtin","()",""],["each_byte","ARGF","ARGF.html#method-i-each_byte","()","<p>Iterates over each byte of each file in <code>ARGV</code>. A byte is returned as an Integer in the range 0..255.\n<p>This …\n"],["each_byte","IO","IO.html#method-i-each_byte","()","<p>Calls the given block with each byte (0..255) in the stream; returns <code>self</code>. See Byte IO.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.rus&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_byte","IO::Buffer","IO/Buffer.html#method-i-each_byte","(*args)","<p>Iterates over the buffer, yielding each byte starting from <code>offset</code>.\n<p>If <code>count</code> is given, only <code>count</code> bytes …\n"],["each_byte","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-each_byte","()","<p>Calls the given block once for each byte in the stream.\n"],["each_byte","String","String.html#method-i-each_byte","()","<p>Calls the given block with each successive byte from <code>self</code>; returns <code>self</code>:\n\n<pre>&#39;hello&#39;.each_byte {|byte| print ...</pre>\n"],["each_byte","StringIO","StringIO.html#method-i-each_byte","()","<p>With a block given, calls the block with each remaining byte in the stream; see Byte IO.\n<p>With no block …\n"],["each_byte","Zlib::GzipReader","Zlib/GzipReader.html#method-i-each_byte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["each_caller_location","Thread","Thread.html#method-c-each_caller_location","()","<p>Yields each frame of the current execution stack as a backtrace location object.\n"],["each_capitalized","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_capitalized","()","<p>Like #each_header, but the keys are returned in capitalized form.\n<p>Net::HTTPHeader#canonical_each is an …\n"],["each_capitalized_name","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_capitalized_name","()","<p>Calls the block with each capitalized field name:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">res</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">get_response</span>(<span class=\"ruby-identifier\">hostname</span>, <span class=\"ruby-string\">&#39;/todos/1&#39;</span>)\n<span class=\"ruby-identifier\">res</span>.<span class=\"ruby-identifier\">each_capitalized_name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_certificate","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-each_certificate","()","<p>Enumerates trusted certificates.\n"],["each_char","ARGF","ARGF.html#method-i-each_char","()","<p>Iterates over each character of each file in ARGF.\n<p>This method allows you to treat the files supplied …\n"],["each_char","IO","IO.html#method-i-each_char","()","<p>Calls the given block with each character in the stream; returns <code>self</code>. See Character IO.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.rus&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_char","String","String.html#method-i-each_char","()","<p>Calls the given block with each successive character from <code>self</code>; returns <code>self</code>:\n\n<pre>&#39;hello&#39;.each_char {|char| ...</pre>\n"],["each_char","StringIO","StringIO.html#method-i-each_char","()","<p>With a block given, calls the block with each remaining character in the stream; see Character IO.\n<p>With …\n"],["each_char","Zlib::GzipReader","Zlib/GzipReader.html#method-i-each_char","()","<p>See Zlib::GzipReader documentation for a description.\n"],["each_child","Dir","Dir.html#method-i-each_child","()","<p>Calls the block once for each entry except for “.” and “..” in this directory, passing …\n"],["each_child","Dir","Dir.html#method-c-each_child","(*args)","<p>Calls the block once for each entry except for “.” and “..” in the named directory, …\n"],["each_child","Pathname","Pathname.html#method-i-each_child","(with_directory=true, &b)","<p>Iterates over the children of the directory (files and subdirectories, not recursive).\n<p>It yields Pathname …\n"],["each_child","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-each_child","()","<p>Iterate all direct child instruction sequences. Iteration order is implementation/version defined so …\n"],["each_classmodule","RDoc::Context","RDoc/Context.html#method-i-each_classmodule","()","<p>Iterator for classes and modules\n"],["each_codepoint","ARGF","ARGF.html#method-i-each_codepoint","()","<p>Iterates over each codepoint of each file in ARGF.\n<p>This method allows you to treat the files supplied …\n"],["each_codepoint","IO","IO.html#method-i-each_codepoint","()","<p>Calls the given block with each codepoint in the stream; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.rus&#39;</span>)\n<span class=\"ruby-identifier\">a</span> = []\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">each_codepoint</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_codepoint","String","String.html#method-i-each_codepoint","()","<p>Calls the given block with each successive codepoint from <code>self</code>; each codepoint is the integer value for …\n"],["each_codepoint","StringIO","StringIO.html#method-i-each_codepoint","()","<p>With a block given, calls the block with each remaining codepoint in the stream; see Codepoint IO.\n<p>With …\n"],["each_cons","Enumerable","Enumerable.html#method-i-each_cons","(p1)","<p>Calls the block with each successive overlapped <code>n</code>-tuple of elements; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = []\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">each_cons</span>(<span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_const","OptionParser","OptionParser.html#method-c-each_const","(path, base = ::Object)",""],["each_constant","RDoc::Context","RDoc/Context.html#method-i-each_constant","()","<p>Iterator for constants\n"],["each_entry","Enumerable","Enumerable.html#method-i-each_entry","(*args)","<p>Calls the given block with each element, converting multiple values from yield to an array; returns  …\n"],["each_entry","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-each_entry","()",""],["each_entry","Pathname","Pathname.html#method-i-each_entry","()","<p>Iterates over the entries (files and subdirectories) in the directory, yielding a Pathname object for …\n"],["each_entry","Rinda::TupleBag","Rinda/TupleBag.html#method-i-each_entry","(&blk)",""],["each_extend","RDoc::Context","RDoc/Context.html#method-i-each_extend","()","<p>Iterator for extension modules\n"],["each_filename","Pathname","Pathname.html#method-i-each_filename","()","<p>Iterates over each component of the path.\n\n<pre>Pathname.new(&quot;/usr/bin/ruby&quot;).each_filename {|filename| ... ...</pre>\n"],["each_grapheme_cluster","String","String.html#method-i-each_grapheme_cluster","()","<p>Calls the given block with each successive grapheme cluster from <code>self</code> (see Unicode Grapheme Cluster Boundaries …\n"],["each_header","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_header","()","<p>Calls the block with each key/value pair:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">res</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">get_response</span>(<span class=\"ruby-identifier\">hostname</span>, <span class=\"ruby-string\">&#39;/todos/1&#39;</span>)\n<span class=\"ruby-identifier\">res</span>.<span class=\"ruby-identifier\">each_header</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_include","RDoc::Context","RDoc/Context.html#method-i-each_include","()","<p>Iterator for included modules\n"],["each_index","Array","Array.html#method-i-each_index","()","<p>Iterates over array indexes.\n<p>When a block given, passes each successive array index to the block; returns …\n"],["each_index","Racc::Grammar","Racc/Grammar.html#method-i-each_index","(&block)",""],["each_index","Racc::States","Racc/States.html#method-i-each_index","(&block)",""],["each_key","ENV","ENV.html#method-c-each_key","()","<p>Yields each environment variable name:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>) <span class=\"ruby-comment\"># =&gt; ENV</span>\n<span class=\"ruby-identifier\">names</span> = []\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">each_key</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_key","Hash","Hash.html#method-i-each_key","()","<p>Calls the given block with each key; returns <code>self</code>:\n\n<pre>h = {foo: 0, bar: 1, baz: 2}\nh.each_key {|key| puts ...</pre>\n"],["each_key","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_key","()",""],["each_key","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each_key","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_key","Win32::Registry","Win32/Registry.html#method-i-each_key","()","<p>Enumerate subkeys.\n<p>subkey is String which contains name of subkey. wtime is last write time as FILETIME …\n"],["each_la","Racc::Item","Racc/Item.html#method-i-each_la","(tbl)",""],["each_line","ARGF","ARGF.html#method-i-each_line","(*args)","<p>Returns an enumerator which iterates over each line (separated by <em>sep</em>, which defaults to your platform’s …\n"],["each_line","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-i-each_line","(row_separator)",""],["each_line","CSV::Parser::Scanner","CSV/Parser/Scanner.html#method-i-each_line","(row_separator)",""],["each_line","IO","IO.html#method-i-each_line","(*args)","<p>Calls the block with each remaining line read from the stream; returns <code>self</code>. Does nothing if already …\n"],["each_line","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-each_line","(eol=$/)",""],["each_line","Pathname","Pathname.html#method-i-each_line","(p1 = v1, p2 = v2, p3 = v3)","<p>Iterates over each line in the file and yields a String object for each.\n"],["each_line","String","String.html#method-i-each_line","(*args)","<p>With a block given, forms the substrings (“lines”) that are the result of splitting <code>self</code> at …\n"],["each_line","StringIO","StringIO.html#method-i-each_line","(*args)","<p>Calls the block with each remaining line read from the stream; does nothing if already at end-of-file; …\n"],["each_line","Zlib::GzipReader","Zlib/GzipReader.html#method-i-each_line","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["each_localized_path","IRB::Locale","IRB/Locale.html#method-i-each_localized_path","(dir, file)",""],["each_method","RDoc::Context","RDoc/Context.html#method-i-each_method","()","<p>Iterator for methods\n"],["each_name","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_name","()","<p>Calls the block with each field key:\n\n<pre>res = Net::HTTP.get_response(hostname, &#39;/todos/1&#39;)\nres.each_key do ...</pre>\n"],["each_name","Resolv","Resolv.html#method-c-each_name","(address, &proc)","<p>Iterates over all hostnames for <code>address</code>.\n"],["each_name","Resolv","Resolv.html#method-i-each_name","(address)","<p>Iterates over all hostnames for <code>address</code>.\n"],["each_name","Resolv::DNS","Resolv/DNS.html#method-i-each_name","(address)","<p>Iterates over all hostnames for <code>address</code> retrieved from the DNS resolver.\n<p><code>address</code> must be a Resolv::IPv4 …\n"],["each_name","Resolv::Hosts","Resolv/Hosts.html#method-i-each_name","(address, &proc)","<p>Iterates over all hostnames for <code>address</code> retrieved from the hosts file.\n"],["each_neighbor_block","SyntaxSuggest::ParseBlocksFromIndentLine","SyntaxSuggest/ParseBlocksFromIndentLine.html#method-i-each_neighbor_block","(target_line)","<p>Builds blocks from bottom up\n"],["each_nonterminal","Racc::SymbolTable","Racc/SymbolTable.html#method-i-each_nonterminal","(&block)",""],["each_object","ObjectSpace","ObjectSpace.html#method-c-each_object","(*args)","<p>Calls the block once for each living, nonimmediate object in this Ruby process. If <em>module</em> is specified, …\n"],["each_option","GetoptLong","GetoptLong.html#method-i-each_option","()",""],["each_option","OptionParser::List","OptionParser/List.html#method-i-each_option","(&block)","<p>Iterates over each option, passing the option to the <code>block</code>.\n"],["each_pair","CSV::Row","CSV/Row.html#method-i-each_pair","(&block)",""],["each_pair","ENV","ENV.html#method-c-each_pair","()","<p>Yields each environment variable name and its value as a 2-element Array:\n\n<pre>h = {}\nENV.each_pair { |name, ...</pre>\n"],["each_pair","Fiddle::CStruct","Fiddle/CStruct.html#method-i-each_pair","()",""],["each_pair","Hash","Hash.html#method-i-each_pair","()","<p>Hash#each is an alias for Hash#each_pair.\n<p>Calls the given block with each key-value pair; returns <code>self</code> …\n"],["each_pair","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each_pair","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_pair","OpenStruct","OpenStruct.html#method-i-each_pair","()","<p>Yields all attributes (as symbols) along with the corresponding values or returns an enumerator if no …\n"],["each_pair","Struct","Struct.html#method-i-each_pair","()","<p>Calls the given block with each member name/value pair; returns <code>self</code>:\n\n<pre>Customer = Struct.new(:name, :address, ...</pre>\n"],["each_pair","YAML::DBM","YAML/DBM.html#method-i-each_pair","()","<p>Calls the given block once for each <code>key</code>, <code>value</code> pair in the database.\n<p>Returns <code>self</code>.\n"],["each_parent","RDoc::CodeObject","RDoc/CodeObject.html#method-i-each_parent","()","<p>Yields each parent of this CodeObject.  See also RDoc::ClassModule#each_ancestor\n"],["each_reduce","Racc::ActionTable","Racc/ActionTable.html#method-i-each_reduce","(&block)",""],["each_resource","Resolv::DNS","Resolv/DNS.html#method-i-each_resource","(name, typeclass, &proc)","<p>Iterates over all <code>typeclass</code> DNS resources for <code>name</code>.  See #getresource for argument details.\n"],["each_response_header","Net::HTTPResponse","Net/HTTPResponse.html#method-c-each_response_header","(sock)",""],["each_rule","Racc::Grammar","Racc/Grammar.html#method-i-each_rule","(&block)",""],["each_rule","Racc::Rule","Racc/Rule.html#method-i-each_rule","(&block)",""],["each_section","RDoc::Context","RDoc/Context.html#method-i-each_section","()","<p>Iterator for each section’s contents sorted by title.  The <code>section</code>, the section’s <code>constants</code> and …\n"],["each_shift","Racc::ActionTable","Racc/ActionTable.html#method-i-each_shift","(&block)",""],["each_slice","Enumerable","Enumerable.html#method-i-each_slice","(p1)","<p>Calls the block with each successive disjoint <code>n</code>-tuple of elements; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = []\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">each_slice</span>(<span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_source","Gem::SourceList","Gem/SourceList.html#method-i-each_source","(&b)","<p>Yields each source in the list.\n"],["each_spec","Gem::AvailableSet","Gem/AvailableSet.html#method-i-each_spec","()","<p>Yields the Gem::Specification for each Tuple in this AvailableSet\n"],["each_state","Racc::States","Racc/States.html#method-i-each_state","(&block)",""],["each_strongly_connected_component","TSort","TSort.html#method-i-each_strongly_connected_component","()","<p>The iterator version of the #strongly_connected_components method. <code><em>obj</em>.each_strongly_connected_component</code> …\n"],["each_strongly_connected_component","TSort","TSort.html#method-c-each_strongly_connected_component","(each_node, each_child)","<p>The iterator version of the TSort.strongly_connected_components method.\n<p>The graph is represented by <em>each_node</em> …\n"],["each_strongly_connected_component_from","TSort","TSort.html#method-c-each_strongly_connected_component_from","(node, each_child, id_map={}, stack=[])","<p>Iterates over strongly connected components in a graph. The graph is represented by <em>node</em> and <em>each_child</em> …\n"],["each_strongly_connected_component_from","TSort","TSort.html#method-i-each_strongly_connected_component_from","(node, id_map={}, stack=[])","<p>Iterates over strongly connected component in the subgraph reachable from <em>node</em>.\n<p>Return value is unspecified. …\n"],["each_sublocale","IRB::Locale","IRB/Locale.html#method-i-each_sublocale","()",""],["each_t","Racc::States","Racc/States.html#method-i-each_t","(tbl, set)",""],["each_terminal","Racc::SymbolTable","Racc/SymbolTable.html#method-i-each_terminal","(&block)",""],["each_useless_nonterminal","Racc::Grammar","Racc/Grammar.html#method-i-each_useless_nonterminal","()",""],["each_useless_rule","Racc::Grammar","Racc/Grammar.html#method-i-each_useless_rule","()",""],["each_value","ENV","ENV.html#method-c-each_value","()","<p>Yields each environment variable value:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>) <span class=\"ruby-comment\"># =&gt; ENV</span>\n<span class=\"ruby-identifier\">values</span> = []\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">each_value</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_value","Hash","Hash.html#method-i-each_value","()","<p>Calls the given block with each value; returns <code>self</code>:\n\n<pre>h = {foo: 0, bar: 1, baz: 2}\nh.each_value {|value| ...</pre>\n"],["each_value","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_value","()","<p>Calls the block with each string field value:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">res</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">get_response</span>(<span class=\"ruby-identifier\">hostname</span>, <span class=\"ruby-string\">&#39;/todos/1&#39;</span>)\n<span class=\"ruby-identifier\">res</span>.<span class=\"ruby-identifier\">each_value</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_value","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each_value","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_value","Win32::Registry","Win32/Registry.html#method-i-each_value","()","<p>Enumerate values.\n"],["each_value","YAML::DBM","YAML/DBM.html#method-i-each_value","()","<p>Calls the given block for each value in database.\n<p>Returns <code>self</code>.\n"],["each_with_index","Enumerable","Enumerable.html#method-i-each_with_index","(*args)","<p>With a block given, calls the block with each element and its index; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {}\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">each_with_index</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_with_index","Enumerator","Enumerator.html#method-i-each_with_index","()","<p>Same as Enumerator#with_index(0), i.e. there is no starting offset.\n<p>If no block is given, a new Enumerator …\n"],["each_with_index","Racc::Grammar","Racc/Grammar.html#method-i-each_with_index","(&block)",""],["each_with_object","Enumerable","Enumerable.html#method-i-each_with_object","(p1)","<p>Calls the block once for each element, passing both the element and the given object:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">each_with_object</span>([]) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_with_object","Enumerator","Enumerator.html#method-i-each_with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object, <code>obj</code>, and returns <code>obj</code>\n<p>If no block is …\n"],["eager","Enumerator::Lazy","Enumerator/Lazy.html#method-i-eager","()","<p>Returns a non-lazy Enumerator converted from the lazy enumerator.\n"],["easter_egg","IRB","IRB.html#method-c-easter_egg","(type = nil)",""],["ec2_metadata_credentials_json","Gem::S3URISigner","Gem/S3URISigner.html#method-i-ec2_metadata_credentials_json","()",""],["ec2_metadata_request","Gem::S3URISigner","Gem/S3URISigner.html#method-i-ec2_metadata_request","(url)",""],["ecdh_curves=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-ecdh_curves-3D","(p1)","<p>Sets the list of “supported elliptic curves” for this context.\n<p>For a TLS client, the list is …\n"],["echo=","IO","IO.html#method-i-echo-3D","(p1)","<p>Enables/disables echo back. On some platforms, all combinations of this flags and raw/cooked mode may …\n"],["echo?","IO","IO.html#method-i-echo-3F","()","<p>Returns <code>true</code> if echo back is enabled.\n<p>You must require ‘io/console’ to use this method.\n"],["ed_argument_digit","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_argument_digit","(key)",""],["ed_clear_screen","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_clear_screen","(key)",""],["ed_delete_next_char","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_delete_next_char","(key, arg: 1)",""],["ed_delete_prev_char","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_delete_prev_char","(key, arg: 1)",""],["ed_delete_prev_word","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_delete_prev_word","(key)",""],["ed_digit","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_digit","(key)",""],["ed_insert","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_insert","(key)","<p>Editline &mdash; <code>ed-insert</code> (vi input: almost all; emacs: printable characters) In insert mode, insert the input …\n"],["ed_kill_line","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_kill_line","(key)","<p>Editline &mdash; <code>ed-kill-line</code> (vi command: <code>D</code>, <code>Ctrl-K</code>; emacs: <code>Ctrl-K</code>, <code>Ctrl-U</code>) + Kill from the cursor to the end …\n"],["ed_move_to_beg","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_move_to_beg","(key)",""],["ed_move_to_end","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_move_to_end","(key)",""],["ed_newline","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_newline","(key)",""],["ed_next_char","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_next_char","(key, arg: 1)",""],["ed_next_history","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_next_history","(key, arg: 1)",""],["ed_prev_char","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_prev_char","(key, arg: 1)",""],["ed_prev_history","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_prev_history","(key, arg: 1)",""],["ed_prev_word","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_prev_word","(key)",""],["ed_quoted_insert","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_quoted_insert","(str, arg: 1)",""],["ed_search_next_history","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_search_next_history","(key, arg: 1)",""],["ed_search_prev_history","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_search_prev_history","(key, arg: 1)",""],["ed_transpose_chars","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_transpose_chars","(key)",""],["ed_transpose_words","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_transpose_words","(key)",""],["ed_transpose_words","Reline::Unicode","Reline/Unicode.html#method-c-ed_transpose_words","(line, byte_pointer)",""],["ed_unassigned","Reline::LineEditor","Reline/LineEditor.html#method-i-ed_unassigned","(key)","<p>Editline &mdash; <code>ed-unassigned</code> This  editor command always results in an error.\n<p>GNU Readline &mdash; There is no corresponding …\n\n"],["edit_path","Net::HTTP","Net/HTTP.html#method-i-edit_path","(path)",""],["editing_mode","Reline::Config","Reline/Config.html#method-i-editing_mode","()",""],["editing_mode","Reline::LineEditor","Reline/LineEditor.html#method-i-editing_mode","()",""],["editing_mode=","Reline::Config","Reline/Config.html#method-i-editing_mode-3D","(val)",""],["editing_mode_is?","Reline::Config","Reline/Config.html#method-i-editing_mode_is-3F","(*val)",""],["egd","OpenSSL::Random","OpenSSL/Random.html#method-c-egd","(p1)","<p>Same as ::egd_bytes but queries 255 bytes by default.\n"],["egd_bytes","OpenSSL::Random","OpenSSL/Random.html#method-c-egd_bytes","(p1, p2)","<p>Queries the entropy gathering daemon EGD on socket path given by <em>filename</em>.\n<p>Fetches <em>length</em> number of bytes …\n"],["egid","Process","Process.html#method-c-egid","()","<p>Returns the effective group ID for this process. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["egid=","Process","Process.html#method-c-egid-3D","(p1)","<p>Sets the effective group ID for this process. Not available on all platforms.\n"],["eglible_for_update?","Gem::UpdateSuggestion","Gem/UpdateSuggestion.html#method-i-eglible_for_update-3F","()","<p>Determines if current environment is eglible for update suggestion.\n"],["eid","Process::GID","Process/GID.html#method-c-eid","()","<p>Returns the effective group ID for this process. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["eid","Process::UID","Process/UID.html#method-c-eid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["em_backward_word","Reline::Unicode","Reline/Unicode.html#method-c-em_backward_word","(line, byte_pointer)",""],["em_big_backward_word","Reline::Unicode","Reline/Unicode.html#method-c-em_big_backward_word","(line, byte_pointer)",""],["em_capitol_case","Reline::LineEditor","Reline/LineEditor.html#method-i-em_capitol_case","(key)",""],["em_delete","Reline::LineEditor","Reline/LineEditor.html#method-i-em_delete","(key)",""],["em_delete_next_word","Reline::LineEditor","Reline/LineEditor.html#method-i-em_delete_next_word","(key)",""],["em_delete_or_list","Reline::LineEditor","Reline/LineEditor.html#method-i-em_delete_or_list","(key)",""],["em_delete_prev_char","Reline::LineEditor","Reline/LineEditor.html#method-i-em_delete_prev_char","(key, arg: 1)",""],["em_exchange_mark","Reline::LineEditor","Reline/LineEditor.html#method-i-em_exchange_mark","(key)",""],["em_forward_word","Reline::Unicode","Reline/Unicode.html#method-c-em_forward_word","(line, byte_pointer)",""],["em_forward_word_with_capitalization","Reline::Unicode","Reline/Unicode.html#method-c-em_forward_word_with_capitalization","(line, byte_pointer)",""],["em_kill_line","Reline::LineEditor","Reline/LineEditor.html#method-i-em_kill_line","(key)","<p>Editline &mdash; <code>em-kill-line</code> (not bound) Delete the entire contents of the edit buffer and save it to the cut …\n"],["em_kill_region","Reline::LineEditor","Reline/LineEditor.html#method-i-em_kill_region","(key)",""],["em_lower_case","Reline::LineEditor","Reline/LineEditor.html#method-i-em_lower_case","(key)",""],["em_next_word","Reline::LineEditor","Reline/LineEditor.html#method-i-em_next_word","(key)",""],["em_set_mark","Reline::LineEditor","Reline/LineEditor.html#method-i-em_set_mark","(key)",""],["em_upper_case","Reline::LineEditor","Reline/LineEditor.html#method-i-em_upper_case","(key)",""],["em_yank","Reline::LineEditor","Reline/LineEditor.html#method-i-em_yank","(key)",""],["em_yank_pop","Reline::LineEditor","Reline/LineEditor.html#method-i-em_yank_pop","(key)",""],["emacs_editing_mode","Readline","Readline.html#method-c-emacs_editing_mode","()","<p>Specifies Emacs editing mode. The default is this mode. See the manual of GNU Readline for details of …\n"],["emacs_editing_mode","Reline::Core","Reline/Core.html#method-i-emacs_editing_mode","()",""],["emacs_editing_mode?","Readline","Readline.html#method-c-emacs_editing_mode-3F","()","<p>Returns true if emacs mode is active. Returns false if not.\n<p>Raises NotImplementedError if the using readline …\n"],["emacs_editing_mode?","Reline::Core","Reline/Core.html#method-i-emacs_editing_mode-3F","()",""],["email_to_name","Gem::Security","Gem/Security.html#method-c-email_to_name","(email_address)","<p>Turns <code>email_address</code> into an OpenSSL::X509::Name\n"],["embed_library","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-embed_library","(src)",""],["embedded_action","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-i-embedded_action","(act)",""],["emit_coder","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-emit_coder","(c, o)",""],["emit_row","CSV::Parser","CSV/Parser.html#method-i-emit_row","(row, quoted_fields, &block)",""],["emphasis","RDoc::Markdown","RDoc/Markdown.html#method-i-emphasis","(text)","<p>Wraps <code>text</code> in emphasis for rdoc inline formatting\n"],["empty","Gem::Resolver::Molinillo::ResolutionState","Gem/Resolver/Molinillo/ResolutionState.html#method-c-empty","()","<p>Returns an empty resolution state @return [ResolutionState] an empty state\n"],["empty","Psych::Handler","Psych/Handler.html#method-i-empty","()","<p>Called when an empty event happens. (Which, as far as I can tell, is never).\n"],["empty","Racc::UserAction","Racc/UserAction.html#method-c-empty","()",""],["empty?","Array","Array.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the count of elements in <code>self</code> is zero, <code>false</code> otherwise.\n"],["empty?","CSV::FieldsConverter","CSV/FieldsConverter.html#method-i-empty-3F","()",""],["empty?","Dir","Dir.html#method-c-empty-3F","(p1)","<p>Returns <code>true</code> if the named file is an empty directory, <code>false</code> if it is not a directory or non-empty.\n"],["empty?","ENV","ENV.html#method-c-empty-3F","()","<p>Returns <code>true</code> when there are no environment variables, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">clear</span>\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">empty?</span> <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["empty?","File","File.html#method-c-empty-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["empty?","FileTest","FileTest.html#method-i-empty-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["empty?","Gem::AvailableSet","Gem/AvailableSet.html#method-i-empty-3F","()",""],["empty?","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-empty-3F","()","<p>Is the tar entry empty?\n"],["empty?","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-empty-3F","()",""],["empty?","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-empty-3F","()","<p>Is the list empty?\n"],["empty?","Gem::SourceList","Gem/SourceList.html#method-i-empty-3F","()","<p>Returns true if there are no sources in this SourceList.\n"],["empty?","Hash","Hash.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no hash entries, <code>false</code> otherwise:\n\n<pre>{}.empty? # =&gt; true\n{foo: 0, bar: 1, baz: ...</pre>\n"],["empty?","IO::Buffer","IO/Buffer.html#method-i-empty-3F","()","<p>If the buffer has 0 size: it is created by ::new with size 0, or with ::for from an empty string. (Note …\n"],["empty?","Pathname","Pathname.html#method-i-empty-3F","()","<p>Tests the file is empty.\n<p>See Dir#empty? and FileTest.empty?.\n"],["empty?","RDoc::Comment","RDoc/Comment.html#method-i-empty-3F","()","<p>A comment is empty if its text String is empty.\n"],["empty?","Racc::ISet","Racc/ISet.html#method-i-empty-3F","()",""],["empty?","Racc::Rule","Racc/Rule.html#method-i-empty-3F","()",""],["empty?","Racc::UserAction","Racc/UserAction.html#method-i-empty-3F","()",""],["empty?","Reline::KillRing::RingBuffer","Reline/KillRing/RingBuffer.html#method-i-empty-3F","()",""],["empty?","Set","Set.html#method-i-empty-3F","()","<p>Returns true if the set contains no elements.\n"],["empty?","String","String.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the length of <code>self</code> is zero, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">empty?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-string\">&quot; &quot;</span>.<span class=\"ruby-identifier\">empty?</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["empty?","StringScanner","StringScanner.html#method-i-empty-3F","()","<p>Equivalent to #eos?. This method is obsolete, use #eos? instead.\n"],["empty?","Symbol","Symbol.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <code>self</code> is <code>:&#39;&#39;</code>, <code>false</code> otherwise.\n"],["empty?","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-i-empty-3F","()","<p>An ‘empty?` line is one that was originally left empty in the source code, while a “hidden” …\n"],["empty?","SyntaxSuggest::PriorityEngulfQueue","SyntaxSuggest/PriorityEngulfQueue.html#method-i-empty-3F","()",""],["empty?","SyntaxSuggest::PriorityQueue","SyntaxSuggest/PriorityQueue.html#method-i-empty-3F","()",""],["empty?","SyntaxSuggest::UnvisitedLines","SyntaxSuggest/UnvisitedLines.html#method-i-empty-3F","()",""],["empty?","Thread::Queue","Thread/Queue.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the queue is empty.\n"],["empty?","Thread::SizedQueue","Thread/SizedQueue.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the queue is empty.\n"],["empty_buffer?","Reline::ANSI","Reline/ANSI.html#method-c-empty_buffer-3F","()",""],["empty_buffer?","Reline::Windows","Reline/Windows.html#method-c-empty_buffer-3F","()",""],["empty_marshal_checksum","PStore","PStore.html#method-i-empty_marshal_checksum","()",""],["empty_marshal_data","PStore","PStore.html#method-i-empty_marshal_data","()",""],["enable","GC","GC.html#method-c-enable","()","<p>Enables garbage collection, returning <code>true</code> if garbage collection was previously disabled.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GC</span>.<span class=\"ruby-identifier\">disable</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["enable","GC::Profiler","GC/Profiler.html#method-c-enable","()","<p>Starts the GC profiler.\n"],["enable","TracePoint","TracePoint.html#method-i-enable","(target: nil, target_line: nil, target_thread: :default)","<p>Activates the trace.\n<p>Returns <code>true</code> if trace was enabled. Returns <code>false</code> if trace was disabled.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">trace</span>.<span class=\"ruby-identifier\">enabled?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["enable_close","Fiddle::Handle","Fiddle/Handle.html#method-i-enable_close","()","<p>Enable a call to dlclose() when this handle is garbage collected.\n"],["enable_config","MakeMakefile","MakeMakefile.html#method-i-enable_config","(config, default=nil)","<p>Tests for the presence of an <code>--enable-</code><em>config</em> or <code>--disable-</code><em>config</em> option. Returns <code>true</code> if the enable option …\n"],["enable_fallback_scsv","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-enable_fallback_scsv","()","<p>Activate TLS_FALLBACK_SCSV for this context. See RFC 7507.\n"],["enabled?","GC::Profiler","GC/Profiler.html#method-c-enabled-3F","()","<p>The current status of GC profile mode.\n"],["enabled?","Reline::Terminfo","Reline/Terminfo.html#method-c-enabled-3F","()",""],["enabled?","RubyVM::MJIT","RubyVM/MJIT.html#method-c-enabled-3F","()","<p>Return true if MJIT is enabled.\n"],["enabled?","RubyVM::YJIT","RubyVM/YJIT.html#method-c-enabled-3F","()","<p>Check if YJIT is enabled\n"],["enabled?","TracePoint","TracePoint.html#method-i-enabled-3F","()","<p>The current status of the trace\n"],["enc_key","OpenSSL::PKCS7::RecipientInfo","OpenSSL/PKCS7/RecipientInfo.html#method-i-enc_key","()",""],["enclose","ThreadGroup","ThreadGroup.html#method-i-enclose","()","<p>Prevents threads from being added to or removed from the receiving ThreadGroup.\n<p>New threads can still …\n"],["enclosed?","ThreadGroup","ThreadGroup.html#method-i-enclosed-3F","()","<p>Returns <code>true</code> if the <code>thgrp</code> is enclosed. See also ThreadGroup#enclose.\n"],["encode","String","String.html#method-i-encode","(dst_encoding = Encoding.default_internal, **enc_opts)","<p>Returns a copy of <code>self</code> transcoded as determined by <code>dst_encoding</code>. By default, raises an exception if  …\n"],["encode!","RDoc::Comment","RDoc/Comment.html#method-i-encode-21","(encoding)","<p>HACK dubious\n"],["encode!","String","String.html#method-i-encode-21","(*args)","<p>Like #encode, but applies encoding changes to <code>self</code>; returns <code>self</code>.\n"],["encode64","Base64","Base64.html#method-i-encode64","(bin)","<p>Returns the Base64-encoded version of <code>bin</code>. This method complies with RFC 2045. Line feeds are added to …\n"],["encode_fallback","RDoc::Text","RDoc/Text.html#method-c-encode_fallback","(character, encoding, fallback)","<p>Transcodes <code>character</code> to <code>encoding</code> with a <code>fallback</code> character.\n"],["encode_multipart_form_data","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-encode_multipart_form_data","(out, params, opt)",""],["encode_token","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-i-encode_token","(t)",""],["encode_uri_component","URI","URI.html#method-c-encode_uri_component","(str, enc=nil)","<p>Encodes <code>str</code> using URL encoding\n<p>This encodes SP to %20 instead of +.\n"],["encode_with_invalid_byte_sequence","IRB::Irb","IRB/Irb.html#method-i-encode_with_invalid_byte_sequence","(str, enc)",""],["encode_www_form","URI","URI.html#method-c-encode_www_form","(enum, enc=nil)","<p>Generates URL-encoded form data from given <code>enum</code>.\n<p>This generates application/x-www-form-urlencoded data …\n"],["encode_www_form_component","URI","URI.html#method-c-encode_www_form_component","(str, enc=nil)","<p>Encodes given <code>str</code> to URL-encoded form data.\n<p>This method doesn’t convert *, -, ., 0-9, A-Z, _, a-z, …\n"],["encoding","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","IRB::Locale","IRB/Locale.html#method-i-encoding","()",""],["encoding","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","IRB::RelineInputMethod","IRB/RelineInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","Regexp","Regexp.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of obj.\n"],["encoding","Reline::ANSI","Reline/ANSI.html#method-c-encoding","()",""],["encoding","Reline::Core","Reline/Core.html#method-i-encoding","()",""],["encoding","Reline::GeneralIO","Reline/GeneralIO.html#method-c-encoding","()",""],["encoding","Reline::Windows","Reline/Windows.html#method-c-encoding","()",""],["encoding","Ripper","Ripper.html#method-i-encoding","()","<p>Return encoding of the source.\n"],["encoding","String","String.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of obj.\n"],["encoding","Symbol","Symbol.html#method-i-encoding","()","<p>Equivalent to <code>self.to_s.encoding</code>; see String#encoding.\n"],["encoding_system_needs","Reline","Reline.html#method-c-encoding_system_needs","()",""],["encrypt","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-encrypt","(*args)","<p>Initializes the Cipher for encryption.\n<p>Make sure to call Cipher#encrypt or Cipher#decrypt before using …\n"],["encrypt","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-c-encrypt","(p1, p2, p3 = v3, p4 = v4)",""],["encrypt","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-encrypt","(p1, p2 = v2)","<p>Performs a public key encryption operation using <code>pkey</code>.\n<p>See #decrypt for the reverse operation.\n<p>Added in …\n"],["end","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-end","()",""],["end","MatchData","MatchData.html#method-i-end","(p1)","<p>Returns the offset (in characters) of the end of the specified match.\n<p>When non-negative integer argument …\n"],["end","Range","Range.html#method-i-end","()","<p>Returns the object that defines the end of <code>self</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">end</span>  <span class=\"ruby-comment\"># =&gt; 4</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">...</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">end</span> <span class=\"ruby-comment\"># =&gt; 4</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span>).<span class=\"ruby-identifier\">end</span>   <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["end","Zlib::ZStream","Zlib/ZStream.html#method-i-end","()","<p>Closes the stream. All operations on the closed stream will raise an exception.\n"],["end?","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-c-end-3F","(token)",""],["end_document","Psych::Emitter","Psych/Emitter.html#method-i-end_document","(p1)","<p>End a document emission with an <code>implicit</code> ending.\n<p>See Psych::Handler#end_document\n"],["end_document","Psych::Handler","Psych/Handler.html#method-i-end_document","(implicit)","<p>Called with the document ends.  <code>implicit</code> is a boolean value indicating whether or not the document has …\n"],["end_document","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-end_document","(implicit_end = !streaming?)","<p>Handles end_document events with <code>version</code>, <code>tag_directives</code>, and <code>implicit</code> styling.\n<p>See Psych::Handler#start_document …\n"],["end_mapping","Psych::Emitter","Psych/Emitter.html#method-i-end_mapping","()","<p>Emit the end of a mapping.\n<p>See Psych::Handler#end_mapping\n"],["end_mapping","Psych::Handler","Psych/Handler.html#method-i-end_mapping","()","<p>Called when a map ends\n"],["end_of_line","Reline::LineEditor","Reline/LineEditor.html#method-i-end_of_line","(key)",""],["end_precedence_declaration","Racc::Grammar","Racc/Grammar.html#method-i-end_precedence_declaration","(reverse)",""],["end_resolution","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-end_resolution","()","<p>Ends the resolution process @return [void]\n"],["end_seen?","Ripper","Ripper.html#method-i-end_seen-3F","()","<p>Return true if parsed source ended by +_<em>END</em>_+.\n"],["end_sequence","Psych::Emitter","Psych/Emitter.html#method-i-end_sequence","()","<p>End sequence emission.\n<p>See Psych::Handler#end_sequence\n"],["end_sequence","Psych::Handler","Psych/Handler.html#method-i-end_sequence","()","<p>Called when a sequence ends.\n"],["end_stream","Psych::Emitter","Psych/Emitter.html#method-i-end_stream","()","<p>End a stream emission\n<p>See Psych::Handler#end_stream\n"],["end_stream","Psych::Handler","Psych/Handler.html#method-i-end_stream","()","<p>Called when the YAML stream ends\n"],["end_stream","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-end_stream","()",""],["end_transport","Net::HTTP","Net/HTTP.html#method-i-end_transport","(req, res)",""],["end_with?","String","String.html#method-i-end_with-3F","(*args)","<p>Returns whether <code>self</code> ends with any of the given <code>strings</code>.\n<p>Returns <code>true</code> if any given string matches the …\n"],["end_with?","Symbol","Symbol.html#method-i-end_with-3F","(*args)","<p>Equivalent to <code>self.to_s.end_with?</code>; see String#end_with?.\n"],["ended?","Zlib::ZStream","Zlib/ZStream.html#method-i-ended-3F","()","<p>Returns true if the stream is closed.\n"],["endgrent","Etc","Etc.html#method-c-endgrent","()","<p>Ends the process of scanning through the <code>/etc/group</code> file begun by ::getgrent, and closes the file.\n"],["endpwent","Etc","Etc.html#method-c-endpwent","()","<p>Ends the process of scanning through the <code>/etc/passwd</code> file begun with ::getpwent, and closes the file. …\n"],["enforce_trailing_slash","Gem::Source","Gem/Source.html#method-i-enforce_trailing_slash","(uri)",""],["engines","OpenSSL::Engine","OpenSSL/Engine.html#method-c-engines","()","<p>Returns an array of currently loaded engines.\n"],["england","Date","Date.html#method-i-england","()","<p>Equivalent to Date#new_start with argument Date::ENGLAND.\n"],["enhanced?","Reline::Windows::KeyEventRecord","Reline/Windows/KeyEventRecord.html#method-i-enhanced-3F","()",""],["enq","Thread::Queue","Thread/Queue.html#method-i-enq","(p1)","<p>Pushes the given <code>object</code> to the queue.\n"],["enq","Thread::SizedQueue","Thread/SizedQueue.html#method-i-enq","(object, non_block = false, timeout: nil)",""],["ensure_default_gem_subdirectories","Gem","Gem.html#method-c-ensure_default_gem_subdirectories","(dir = Gem.dir, mode = nil)","<p>Quietly ensure the Gem directory <code>dir</code> contains all the proper subdirectories for handling default gems. …\n"],["ensure_dependency","Gem::Installer","Gem/Installer.html#method-i-ensure_dependency","(spec, dependency)","<p>Ensure that the dependency is satisfied by the current installation of gem.  If it is not an exception …\n"],["ensure_gem_subdirectories","Gem","Gem.html#method-c-ensure_gem_subdirectories","(dir = Gem.dir, mode = nil)","<p>Quietly ensure the Gem directory <code>dir</code> contains all the proper subdirectories.  If we can’t create …\n"],["ensure_loadable_spec","Gem::Installer","Gem/Installer.html#method-i-ensure_loadable_spec","()","<p>Ensures the Gem::Specification written out for this gem is loadable upon installation.\n"],["enter","Monitor","Monitor.html#method-i-enter","()",""],["entity","Net::HTTPResponse","Net/HTTPResponse.html#method-i-entity","()",""],["entity_class","Fiddle::CStruct","Fiddle/CStruct.html#method-c-entity_class","()","<p>accessor to Fiddle::CStructEntity\n"],["entity_class","Fiddle::CUnion","Fiddle/CUnion.html#method-c-entity_class","()","<p>accessor to Fiddle::CUnionEntity\n"],["entries","Dir","Dir.html#method-c-entries","(*args)","<p>Returns an array containing all of the filenames in the given directory. Will raise a SystemCallError …\n"],["entries","Enumerable","Enumerable.html#method-i-entries","(*args)","<p>Returns an array containing the items in <code>self</code>:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">0</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">to_a</span> <span class=\"ruby-comment\"># =&gt; [0, 1, 2, 3, 4]</span>\n</pre>\n<p>Enumerable#entries is an …\n"],["entries","Pathname","Pathname.html#method-i-entries","()","<p>Return the entries (files and subdirectories) in the directory, each as a Pathname object.\n<p>The results …\n"],["entries","Range","Range.html#method-i-entries","()","<p>Returns an array containing the elements in <code>self</code>, if a finite collection; raises an exception otherwise. …\n"],["entry_details","Gem::QueryUtils","Gem/QueryUtils.html#method-i-entry_details","(entry, detail_tuple, specs, platforms)",""],["entry_versions","Gem::QueryUtils","Gem/QueryUtils.html#method-i-entry_versions","(entry, name_tuples, platforms, specs)",""],["enum_for","Enumerator::Lazy","Enumerator/Lazy.html#method-i-enum_for","(*args)","<p>Similar to Object#to_enum, except it returns a lazy enumerator. This makes it easy to define Enumerable …\n"],["enum_for","Object","Object.html#method-i-enum_for","(*args)","<p>Creates a new Enumerator which will enumerate by calling <code>method</code> on <code>obj</code>, passing <code>args</code> if any. What was …\n"],["env_requirement","Gem","Gem.html#method-c-env_requirement","(gem_name)",""],["env_table","CGI","CGI.html#method-i-env_table","()","<p>Synonym for ENV.\n"],["environment","Bundler","Bundler.html#method-c-environment","()",""],["environment","OptionParser","OptionParser.html#method-i-environment","(env = File.basename($0, '.*'))","<p>Parses environment variable <code>env</code> or its uppercase with splitting like a shell.\n<p><code>env</code> defaults to the basename …\n"],["eof","ARGF","ARGF.html#method-i-eof","()","<p>Returns true if the current file in ARGF is at end of file, i.e. it has no data to read. The stream must …\n"],["eof","CSV","CSV.html#method-i-eof","()",""],["eof","IO","IO.html#method-i-eof","()","<p>Returns <code>true</code> if the stream is positioned at its end, <code>false</code> otherwise; see Position:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["eof","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-eof","()",""],["eof","StringIO","StringIO.html#method-i-eof","()","<p>Returns <code>true</code> if positioned at end-of-stream, <code>false</code> otherwise; see Position.\n<p>Raises IOError if the stream …\n"],["eof","Zlib::GzipReader","Zlib/GzipReader.html#method-i-eof","()","<p>Returns <code>true</code> or <code>false</code> whether the stream has reached the end.\n"],["eof?","ARGF","ARGF.html#method-i-eof-3F","()","<p>Returns true if the current file in ARGF is at end of file, i.e. it has no data to read. The stream must …\n"],["eof?","CSV","CSV.html#method-i-eof-3F","()",""],["eof?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-eof-3F","()","<p>Are we at the end of the tar entry?\n"],["eof?","IO","IO.html#method-i-eof-3F","()","<p>Returns <code>true</code> if the stream is positioned at its end, <code>false</code> otherwise; see Position:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["eof?","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns <code>true</code> if there is no more data to read. …\n"],["eof?","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns <code>true</code> if there is no more data to read. …\n"],["eof?","IRB::RelineInputMethod","IRB/RelineInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns <code>true</code> if there is no more data to read. …\n"],["eof?","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns <code>true</code> if there is no more data to read. …\n"],["eof?","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-eof-3F","()","<p>Returns true if the stream is at file which means there is no more data to be read.\n"],["eof?","Reline::LineEditor","Reline/LineEditor.html#method-i-eof-3F","()",""],["eof?","StringIO","StringIO.html#method-i-eof-3F","()","<p>Returns <code>true</code> if positioned at end-of-stream, <code>false</code> otherwise; see Position.\n<p>Raises IOError if the stream …\n"],["eof?","XMP::StringInputMethod","XMP/StringInputMethod.html#method-i-eof-3F","()","<p>Whether there are any expressions left in this printer.\n"],["eof?","Zlib::GzipReader","Zlib/GzipReader.html#method-i-eof-3F","()","<p>Returns <code>true</code> or <code>false</code> whether the stream has reached the end.\n"],["eos?","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-i-eos-3F","()",""],["eos?","StringScanner","StringScanner.html#method-i-eos-3F","()","<p>Returns <code>true</code> if the scan pointer is at the end of the string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">StringScanner</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;test string&#39;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">eos?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["eql?","Array","Array.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>other_array</code> are the same size, and if, for each index <code>i</code> in <code>self</code>, <code>self[i].eql?</code> …\n"],["eql?","BigDecimal","BigDecimal.html#method-i-eql-3F","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["eql?","Data","Data.html#method-i-eql-3F","(p1)","<p>Equality check that is used when two items of data are keys of a Hash.\n<p>The subtle difference with #== …\n"],["eql?","Delegator","Delegator.html#method-i-eql-3F","(obj)","<p>Returns true if two objects are considered of equal value.\n"],["eql?","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is an Enumerator::ArithmeticSequence, has equivalent begin, end, step, and  …\n"],["eql?","Fiddle::Pointer","Fiddle/Pointer.html#method-i-eql-3F","(p1)","<p>Returns true if <code>other</code> wraps the same pointer, otherwise returns false.\n"],["eql?","Float","Float.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>other</code> is a Float with the same value as <code>self</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span>.<span class=\"ruby-identifier\">eql?</span>(<span class=\"ruby-value\">2.0</span>)          <span class=\"ruby-operator\">...</span>\n</pre>\n"],["eql?","Gem::NameTuple","Gem/NameTuple.html#method-i-eql-3F","(other)",""],["eql?","Gem::Platform","Gem/Platform.html#method-i-eql-3F","(other)",""],["eql?","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-eql-3F","(other)",""],["eql?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-eql-3F","(other)",""],["eql?","Gem::Version","Gem/Version.html#method-i-eql-3F","(other)","<p>A Version is only eql? to another version if it’s specified to the same precision. Version “1.0” …\n"],["eql?","Hash","Hash.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if all of the following are true:\n<p><code>object</code> is a Hash object.\n<p><code>hash</code> and <code>object</code> have the same keys …\n"],["eql?","IPAddr","IPAddr.html#method-i-eql-3F","(other)","<p>Checks equality used by Hash.\n"],["eql?","MatchData","MatchData.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>object</code> is another MatchData object whose target string, regexp, match, and captures are …\n"],["eql?","Method","Method.html#method-i-eql-3F","(p1)","<p>Two method objects are equal if they are bound to the same object and refer to the same method definition …\n"],["eql?","Numeric","Numeric.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>other</code> are the same type and have equal values.\n<p>Of the Core and Standard Library …\n"],["eql?","Object","Object.html#method-i-eql-3F","(p1)","<p>Equality — At the Object level, #== returns <code>true</code> only if <code>obj</code> and <code>other</code> are the same object.  Typically …\n"],["eql?","OpenSSL::BN","OpenSSL/BN.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <em>obj</em> is a <code>OpenSSL::BN</code> with the same value as <em>bn</em>. Contrast this with OpenSSL::BN#== …\n"],["eql?","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if the two groups use the same curve and have the same parameters, <code>false</code> otherwise.\n"],["eql?","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-eql-3F","(p1)",""],["eql?","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-eql-3F","(p1)","<p>Returns true if <em>name</em> and <em>other</em> refer to the same hash key.\n"],["eql?","OpenStruct","OpenStruct.html#method-i-eql-3F","(other)","<p>Compares this object and <code>other</code> for equality.  An OpenStruct is eql? to <code>other</code> when <code>other</code> is an OpenStruct …\n"],["eql?","Pathname","Pathname.html#method-i-eql-3F","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is string-based. Be aware that two different paths …\n"],["eql?","Proc","Proc.html#method-i-eql-3F","(p1)","<p>Two procs are the same if, and only if, they were created from the same code block.\n\n<pre>def return_block(&amp;block) ...</pre>\n"],["eql?","RDoc::TopLevel","RDoc/TopLevel.html#method-i-eql-3F","(other)",""],["eql?","Racc::LocationPointer","Racc/LocationPointer.html#method-i-eql-3F","(ot)",""],["eql?","Racc::State","Racc/State.html#method-i-eql-3F","(oth)",""],["eql?","Range","Range.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if and only if:\n<p><code>other</code> is a range.\n<p><code>other.begin eql? self.begin</code>.\n"],["eql?","Regexp","Regexp.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>object</code> is another Regexp whose pattern, flags, and encoding are the same as <code>self</code>, <code>false</code> …\n"],["eql?","String","String.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>object</code> has the same length and content; as <code>self</code>; <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">eql?</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["eql?","Struct","Struct.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if and only if the following are true; otherwise returns <code>false</code>:\n<p><code>other.class == self.class</code> …\n"],["eql?","Time","Time.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>other_time</code> are both Time objects with the exact same time value.\n"],["eql?","URI::Generic","URI/Generic.html#method-i-eql-3F","(oth)",""],["eql?","UnboundMethod","UnboundMethod.html#method-i-eql-3F","(p1)","<p>Two unbound method objects are equal if they refer to the same method definition.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Array</span>.<span class=\"ruby-identifier\">instance_method</span>(<span class=\"ruby-value\">:each_slice</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["equal?","BasicObject","BasicObject.html#method-i-equal-3F","(p1)","<p>Equality — At the Object level, #== returns <code>true</code> only if <code>obj</code> and <code>other</code> are the same object.  Typically …\n"],["equal?","Ractor::MovedObject","Ractor/MovedObject.html#method-i-equal-3F","(*args)",""],["equal?","Reline::KeyStroke","Reline/KeyStroke.html#method-i-equal-3F","(me, other)",""],["erase_after_cursor","Reline::ANSI","Reline/ANSI.html#method-c-erase_after_cursor","()",""],["erase_after_cursor","Reline::GeneralIO","Reline/GeneralIO.html#method-c-erase_after_cursor","()",""],["erase_after_cursor","Reline::Windows","Reline/Windows.html#method-c-erase_after_cursor","()",""],["erase_line","IO","IO.html#method-i-erase_line","(p1)",""],["erase_screen","IO","IO.html#method-i-erase_screen","(p1)",""],["erf","Math","Math.html#method-c-erf","(p1)","<p>Returns the value of the Gauss error function for <code>x</code>.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[-1, 1]</code>.\n"],["erfc","Math","Math.html#method-c-erfc","(p1)","<p>Returns the value of the complementary error function for <code>x</code>.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[0,</code> …\n"],["errno","SystemCallError","SystemCallError.html#method-i-errno","()","<p>Return this SystemCallError’s error number.\n"],["error","Gem::MockGemUi","Gem/MockGemUi.html#method-i-error","()",""],["error","Logger","Logger.html#method-i-error","(progname = nil, &block)","<p>Equivalent to calling #add with severity <code>Logger::ERROR</code>.\n"],["error","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-error","()","<p>Returns the error code of <em>stctx</em>. This is typically called after #verify is done, or from the verification …\n"],["error","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-error","(msg)","<p>Aborts with <code>msg</code>\n"],["error","RDoc::RDoc","RDoc/RDoc.html#method-i-error","(msg)","<p>Report an error message and exit\n"],["error","RDoc::Servlet","RDoc/Servlet.html#method-i-error","(exception, req, res)","<p>Generates an error page for the <code>exception</code> while handling <code>req</code> on <code>res</code>.\n"],["error","Syslog::Logger","Syslog/Logger.html#method-i-error","","<p>Logs a <code>message</code> at the error (syslog warning) log level, or logs the message returned from the block. …\n"],["error!","Logger","Logger.html#method-i-error-21","()","<p>Sets the log level to Logger::ERROR. See Log Level.\n"],["error=","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-error-3D","(p1)","<p>Sets the error code of <em>stctx</em>. This is used by the verification callback set to OpenSSL::X509::Store#verify_callback= …\n"],["error?","Logger","Logger.html#method-i-error-3F","()","<p>Returns <code>true</code> if the log level allows entries with severity Logger::ERROR to be written, <code>false</code> otherwise. …\n"],["error?","Ripper","Ripper.html#method-i-error-3F","()","<p>Return true if parsed source has errors.\n"],["error_bytes","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-error_bytes","()","<p>Returns the discarded bytes when Encoding::InvalidByteSequenceError occurs.\n\n<pre>ec = Encoding::Converter.new(&quot;EUC-JP&quot;, ...</pre>\n"],["error_char","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-error_char","()","<p>Returns the one-character string which cause Encoding::UndefinedConversionError.\n\n<pre>ec = Encoding::Converter.new(&quot;ISO-8859-1&quot;, ...</pre>\n"],["error_depth","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-error_depth","()","<p>Returns the depth of the chain. This is used in combination with #error.\n<p>See also the man page X509_STORE_CTX_get_error_depth …\n"],["error_message","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-error_message","()",""],["error_message","GetoptLong","GetoptLong.html#method-i-error_message","()","<p>Return the appropriate error message in POSIX-defined format. If no error has occurred, returns <code>nil</code>. …\n"],["error_print","DRb::DRbServer","DRb/DRbServer.html#method-i-error_print","(exception)",""],["error_string","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-error_string","()","<p>Returns the human readable error string corresponding to the error code retrieved by #error.\n<p>See also …\n"],["errors","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-errors","()",""],["errors","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-errors","()","<p>Errors encountered while resolving gems\n"],["errors","OpenSSL","OpenSSL.html#method-c-errors","()","<p>See any remaining errors held in queue.\n<p>Any errors you see here are probably due to a bug in Ruby’s …\n"],["errors","SyntaxSuggest::ExplainSyntax","SyntaxSuggest/ExplainSyntax.html#method-i-errors","()","<p>Returns an array of syntax error messages\n<p>If no missing pairs are found it falls back on the original …\n"],["escape","CGI::Escape","CGI/Escape.html#method-i-escape","(p1)","<p>Returns URL-escaped string (<code>application/x-www-form-urlencoded</code>).\n"],["escape","CGI::Util","CGI/Util.html#method-i-escape","(string)","<p>URL-encode a string into application/x-www-form-urlencoded. Space characters (+“ ”+) are encoded …\n"],["escape","Gem::UriFormatter","Gem/UriFormatter.html#method-i-escape","()","<p>Escapes the #uri for use as a CGI parameter\n"],["escape","Regexp","Regexp.html#method-c-escape","(p1)","<p>Returns a new string that escapes any characters that have special meaning in a regular expression:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["escape","Shellwords","Shellwords.html#method-c-escape","(str)",""],["escape","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-escape","(str, unsafe = @regexp[:UNSAFE])","<p>Args\n<p><code>str</code> &mdash; String to make safe\n<p><code>unsafe</code> &mdash; Regexp to apply. Defaults to <code>self.regexp[:UNSAFE]</code>\n"],["escape","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-escape","(str, unsafe = @regexp[:UNSAFE])","<p>Args\n<p><code>str</code> &mdash; String to make safe\n<p><code>unsafe</code> &mdash; Regexp to apply. Defaults to <code>self.regexp[:UNSAFE]</code>\n"],["escapeElement","CGI::Util","CGI/Util.html#method-i-escapeElement","(string, *elements)","<p>Escape only the tags of certain HTML elements in <code>string</code>.\n<p>Takes an element or elements or array of elements. …\n"],["escapeHTML","CGI::Escape","CGI/Escape.html#method-i-escapeHTML","(p1)","<p>Returns HTML-escaped string.\n"],["escapeHTML","CGI::Util","CGI/Util.html#method-i-escapeHTML","(string)","<p>Escape special characters in HTML, namely ‘&amp;&quot;&lt;&gt;\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CGI</span>.<span class=\"ruby-identifier\">escapeHTML</span>(<span class=\"ruby-string\">&#39;Usage: foo &quot;bar&quot; &lt;baz&gt;&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["escapeURIComponent","CGI::Escape","CGI/Escape.html#method-i-escapeURIComponent","(p1)","<p>Returns URL-escaped string following RFC 3986.\n"],["escapeURIComponent","CGI::Util","CGI/Util.html#method-i-escapeURIComponent","(string)","<p>URL-encode a string following RFC 3986 Space characters (+“ ”+) are encoded with (+“%20”+) …\n"],["escape_element","CGI::Util","CGI/Util.html#method-i-escape_element","(string, *elements)","<p>Synonym for CGI.escapeElement(str)\n"],["escape_for_print","Reline::Unicode","Reline/Unicode.html#method-c-escape_for_print","(str)",""],["escape_html","CGI::Util","CGI/Util.html#method-i-escape_html","(string)","<p>Synonym for CGI.escapeHTML(str)\n"],["escape_slash","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-escape_slash","()","<p>If this boolean is true, the forward slashes will be escaped in the json output.\n"],["escape_slash=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-escape_slash-3D","(p1)","<p>This sets whether or not the forward slashes will be escaped in the json output.\n"],["escape_slash?","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-escape_slash-3F","()","<p>If this boolean is true, the forward slashes will be escaped in the json output.\n"],["escape_userpass","URI::Generic","URI/Generic.html#method-i-escape_userpass","(v)","<p>Escapes ‘user:password’ <code>v</code> based on RFC 1738 section 3.1.\n"],["euid","Process","Process.html#method-c-euid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["euid=","Process","Process.html#method-c-euid-3D","(p1)","<p>Sets the effective user ID for this process. Not available on all platforms.\n"],["eval","Binding","Binding.html#method-i-eval","(p1, p2 = v2, p3 = v3)","<p>Evaluates the Ruby expression(s) in <em>string</em>, in the <em>binding</em>’s context.  If the optional <em>filename</em> and …\n"],["eval","Kernel","Kernel.html#method-i-eval","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Evaluates the Ruby expression(s) in <em>string</em>. If <em>binding</em> is given, which must be a Binding object, the …\n"],["eval","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-eval","()","<p>Evaluates the instruction sequence and returns the result.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RubyVM</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">InstructionSequence</span>.<span class=\"ruby-identifier\">compile</span>(<span class=\"ruby-string\">&quot;1 + 2&quot;</span>).<span class=\"ruby-identifier\">eval</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["eval_gemspec","Bundler","Bundler.html#method-c-eval_gemspec","(path, contents)",""],["eval_history=","IRB::Context","IRB/Context.html#method-i-eval_history-3D","(no)","<p>Sets command result history limit. Default value is set from <code>IRB.conf[:EVAL_HISTORY]</code>.\n<p><code>no</code> is an Integer …\n"],["eval_input","IRB::Irb","IRB/Irb.html#method-i-eval_input","()","<p>Evaluates input for this session.\n"],["eval_script","TracePoint","TracePoint.html#method-i-eval_script","()","<p>Compiled source code (String) on *eval methods on the <code>:script_compiled</code> event. If loaded from a file, …\n"],["eval_yaml_gemspec","Bundler","Bundler.html#method-c-eval_yaml_gemspec","(path, contents)",""],["evaluate","IRB::WorkSpace","IRB/WorkSpace.html#method-i-evaluate","(context, statements, file = nil, line = nil)","<p>Evaluate the context of this workspace and use the Tracer library to output the exact lines of code are …\n"],["even?","Integer","Integer.html#method-i-even-3F","()","<p>Returns <code>true</code> if <code>int</code> is an even number.\n"],["event","TracePoint","TracePoint.html#method-i-event","()","<p>Type of event\n<p>See TracePoint@Events for more information.\n"],["event?","WIN32OLE::Method","WIN32OLE/Method.html#method-i-event-3F","()","<p>Returns true if the method is event.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Workbook&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["event_interface","WIN32OLE::Method","WIN32OLE/Method.html#method-i-event_interface","()","<p>Returns event interface name if the method is event.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object ...</pre>\n"],["event_location","Psych::Handler","Psych/Handler.html#method-i-event_location","(start_line, start_column, end_line, end_column)","<p>Called before each event with line/column information.\n"],["event_location","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-event_location","(start_line, start_column, end_line, end_column)",""],["exact?","Gem::Requirement","Gem/Requirement.html#method-i-exact-3F","()","<p>true if the requirement is for only an exact version\n"],["exact_matches","DidYouMean::KeyErrorChecker","DidYouMean/KeyErrorChecker.html#method-i-exact_matches","()",""],["exact_matches","DidYouMean::PatternKeyNameChecker","DidYouMean/PatternKeyNameChecker.html#method-i-exact_matches","()",""],["except","ENV","ENV.html#method-c-except","(*args)","<p>Returns a hash except the given keys from ENV and their values.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>                       <span class=\"ruby-comment\">#=&gt; {&quot;LANG&quot;=&gt;&quot;en_US.UTF-8&quot;, ...</span>\n</pre>\n"],["except","Hash","Hash.html#method-i-except","(*args)","<p>Returns a new Hash excluding entries for the given <code>keys</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-value\">a:</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-value\">b:</span> <span class=\"ruby-value\">200</span>, <span class=\"ruby-value\">c:</span> <span class=\"ruby-value\">300</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">except</span>(<span class=\"ruby-value\">:a</span>)  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["exception","DRb::DRbUnknown","DRb/DRbUnknown.html#method-i-exception","()","<p>Create a DRbUnknownError exception containing this object.\n"],["exception","Exception","Exception.html#method-c-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return the receiver. Otherwise, create …\n"],["exception","Exception","Exception.html#method-i-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return the receiver. Otherwise, create …\n"],["exception","Timeout::Error","Timeout/Error.html#method-i-exception","(*)",""],["exchange","SyntaxSuggest::PriorityQueue","SyntaxSuggest/PriorityQueue.html#method-i-exchange","(source, target)",""],["exchange_point_and_mark","Reline::LineEditor","Reline/LineEditor.html#method-i-exchange_point_and_mark","(key)",""],["exclude","RDoc::Options","RDoc/Options.html#method-i-exclude","()","<p>Create a regexp for #exclude\n"],["exclude_end?","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-exclude_end-3F","()",""],["exclude_end?","Range","Range.html#method-i-exclude_end-3F","()","<p>Returns <code>true</code> if <code>self</code> excludes its end value; <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Range</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">exclude_end?</span>       <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["exec","Kernel","Kernel.html#method-i-exec","(*args)","<p>Replaces the current process by running the given external <em>command</em>, which can take one of the following …\n"],["exec","Process","Process.html#method-c-exec","(*args)","<p>Replaces the current process by running the given external <em>command</em>, which can take one of the following …\n"],["exec_format","Gem::Installer","Gem/Installer.html#method-c-exec_format","()","<p>Defaults to use Ruby’s program prefix and suffix.\n"],["exec_if","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-exec_if","()","<p>Execute the given block if notifications are enabled.\n"],["executable","Gem::Specification","Gem/Specification.html#method-i-executable","()","<p>Singular accessor for #executables\n"],["executable=","Gem::Specification","Gem/Specification.html#method-i-executable-3D","(o)","<p>Singular accessor for #executables\n"],["executable?","File","File.html#method-c-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective user and group id of this process. See …\n"],["executable?","File::Stat","File/Stat.html#method-i-executable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is executable or if the operating system doesn’t distinguish executable files …\n"],["executable?","FileTest","FileTest.html#method-i-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective user and group id of this process. See …\n"],["executable?","Pathname","Pathname.html#method-i-executable-3F","()","<p>See FileTest.executable?.\n"],["executable_real?","File","File.html#method-c-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user and group id of this process. See access(3). …\n"],["executable_real?","File::Stat","File/Stat.html#method-i-executable_real-3F","()","<p>Same as <code>executable?</code>, but tests using the real owner of the process.\n"],["executable_real?","FileTest","FileTest.html#method-i-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user and group id of this process. See access(3). …\n"],["executable_real?","Pathname","Pathname.html#method-i-executable_real-3F","()","<p>See FileTest.executable_real?.\n"],["executables","Gem::Specification","Gem/Specification.html#method-i-executables","()","<p>Executables included in the gem.\n<p>For example, the rake gem has rake as an executable. You don’t specify …\n"],["executables=","Gem::Specification","Gem/Specification.html#method-i-executables-3D","(value)","<p>Sets executables to <code>value</code>, ensuring it is an array.\n"],["execute","Gem::Command","Gem/Command.html#method-i-execute","()","<p>Override to provide command handling.\n<p>#options will be filled in with your parsed options, unparsed options …\n"],["execute","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-execute","()",""],["execute","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-i-execute","()",""],["execute","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-execute","()",""],["execute","Gem::Commands::FetchCommand","Gem/Commands/FetchCommand.html#method-i-execute","()",""],["execute","Gem::Commands::GenerateIndexCommand","Gem/Commands/GenerateIndexCommand.html#method-i-execute","()",""],["execute","Gem::Commands::HelpCommand","Gem/Commands/HelpCommand.html#method-i-execute","()",""],["execute","Gem::Commands::InstallCommand","Gem/Commands/InstallCommand.html#method-i-execute","()",""],["execute","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-execute","()",""],["execute","Gem::Commands::MirrorCommand","Gem/Commands/MirrorCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OutdatedCommand","Gem/Commands/OutdatedCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-execute","()",""],["execute","Gem::Commands::PristineCommand","Gem/Commands/PristineCommand.html#method-i-execute","()",""],["execute","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-execute","()",""],["execute","Gem::Commands::RdocCommand","Gem/Commands/RdocCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ServerCommand","Gem/Commands/ServerCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SigninCommand","Gem/Commands/SigninCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SignoutCommand","Gem/Commands/SignoutCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SourcesCommand","Gem/Commands/SourcesCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SpecificationCommand","Gem/Commands/SpecificationCommand.html#method-i-execute","()",""],["execute","Gem::Commands::StaleCommand","Gem/Commands/StaleCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-execute","()",""],["execute","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-i-execute","()",""],["execute","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-execute","()",""],["execute","Gem::QueryUtils","Gem/QueryUtils.html#method-i-execute","()",""],["exist?","Dir","Dir.html#method-c-exist-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory, <code>false</code> otherwise.\n"],["exist?","File","File.html#method-c-exist-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n<p><em>file_name</em> can be an IO object.\n<p>“file exists” means that …\n"],["exist?","FileTest","FileTest.html#method-i-exist-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n<p><em>file_name</em> can be an IO object.\n<p>“file exists” means that …\n"],["exist?","Pathname","Pathname.html#method-i-exist-3F","()","<p>See FileTest.exist?.\n"],["exist?","StringScanner","StringScanner.html#method-i-exist-3F","(p1)","<p>Looks <em>ahead</em> to see if the <code>pattern</code> exists <em>anywhere</em> in the string, without advancing the scan pointer. …\n"],["exit","IRB::Context","IRB/Context.html#method-i-exit","(ret = 0)","<p>Exits the current session, see IRB.irb_exit\n"],["exit","Kernel","Kernel.html#method-i-exit","(*args)","<p>Initiates the termination of the Ruby script by raising the SystemExit exception. This exception may …\n"],["exit","Monitor","Monitor.html#method-i-exit","()",""],["exit","Process","Process.html#method-c-exit","(*args)","<p>Initiates the termination of the Ruby script by raising the SystemExit exception. This exception may …\n"],["exit","Thread","Thread.html#method-c-exit","()","<p>Terminates the currently running thread and schedules another thread to be run.\n<p>If this thread is already …\n"],["exit","Thread","Thread.html#method-i-exit","()","<p>Terminates <code>thr</code> and schedules another thread to be run, returning the terminated Thread.  If this is the …\n"],["exit!","Kernel","Kernel.html#method-i-exit-21","(*args)","<p>Exits the process immediately. No exit handlers are run. <em>status</em> is returned to the underlying system …\n"],["exit!","Process","Process.html#method-c-exit-21","(*args)","<p>Exits the process immediately. No exit handlers are run. <em>status</em> is returned to the underlying system …\n"],["exit_locations","RubyVM::YJIT","RubyVM/YJIT.html#method-c-exit_locations","()","<p>If –yjit-trace-exits is enabled parse the hashes from Primitive.rb_yjit_get_exit_locations into a format …\n"],["exit_value","LocalJumpError","LocalJumpError.html#method-i-exit_value","()","<p>Returns the exit value associated with this <code>LocalJumpError</code>.\n"],["exited?","Process::Status","Process/Status.html#method-i-exited-3F","()","<p>Returns <code>true</code> if <em>stat</em> exited normally (for example using an <code>exit()</code> call or finishing the program).\n"],["exitstatus","Process::Status","Process/Status.html#method-i-exitstatus","()","<p>Returns the least significant eight bits of the return code of <em>stat</em>. Only available if #exited? is <code>true</code> …\n"],["exp","BigMath","BigMath.html#method-c-exp","(p1, p2)","<p>Computes the value of e (the base of natural logarithms) raised to the power of <code>decimal</code>, to the specified …\n"],["exp","Math","Math.html#method-c-exp","(p1)","<p>Returns <code>e</code> raised to the <code>x</code> power.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[0, INFINITY]</code>.\n"],["expand","Gem::PathSupport","Gem/PathSupport.html#method-i-expand","(path)",""],["expand","Reline::KeyStroke","Reline/KeyStroke.html#method-i-expand","(input)",""],["expand?","SyntaxSuggest::CodeFrontier","SyntaxSuggest/CodeFrontier.html#method-i-expand-3F","()",""],["expand_environ","Win32::Registry","Win32/Registry.html#method-c-expand_environ","(str)","<p>Replace %w+% into the environment value of what is contained between the %‘s This method is used …\n"],["expand_existing","SyntaxSuggest::CodeSearch","SyntaxSuggest/CodeSearch.html#method-i-expand_existing","()","<p>Given an already existing block in the frontier, expand it to see if it contains our invalid syntax\n"],["expand_hexstring","OpenSSL::X509::Name::RFC2253DN","OpenSSL/X509/Name/RFC2253DN.html#method-i-expand_hexstring","(str)",""],["expand_indent","SyntaxSuggest::BlockExpand","SyntaxSuggest/BlockExpand.html#method-i-expand_indent","(block)",""],["expand_neighbors","SyntaxSuggest::BlockExpand","SyntaxSuggest/BlockExpand.html#method-i-expand_neighbors","(block)",""],["expand_pair","OpenSSL::X509::Name::RFC2253DN","OpenSSL/X509/Name/RFC2253DN.html#method-i-expand_pair","(str)",""],["expand_path","File","File.html#method-c-expand_path","(*args)","<p>Converts a pathname to an absolute pathname. Relative paths are referenced from the current working directory …\n"],["expand_path","Pathname","Pathname.html#method-i-expand_path","(p1 = v1)","<p>Returns the absolute path for the file.\n<p>See File.expand_path.\n"],["expand_tabs","RDoc::Text","RDoc/Text.html#method-i-expand_tabs","(text)","<p>Expands tab characters in <code>text</code> to eight spaces\n"],["expand_value","OpenSSL::X509::Name::RFC2253DN","OpenSSL/X509/Name/RFC2253DN.html#method-i-expand_value","(str1, str2, str3)",""],["expect","IO","IO.html#method-i-expect","(pat,timeout=9999999)","<p>The <code>expect</code> library adds instance method IO#expect, which is similar to the TCL expect extension.\n<p>To use …\n"],["expired?","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-expired-3F","()","<p>Has this tuple expired? (true/false).\n<p>A tuple has expired when its expiry timer based on the <code>sec</code> argument …\n"],["explain","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-explain","()","<p>A string explanation of the conflict.\n"],["explanation","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-explanation","()","<p>Explanation of the conflict used by exceptions to print useful messages\n"],["explicit?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-explicit-3F","()","<p>Indicate that the request is for a gem explicitly requested by the user\n"],["explicit_version_requirement","Gem::Installer","Gem/Installer.html#method-i-explicit_version_requirement","(name)",""],["exponent","BigDecimal","BigDecimal.html#method-i-exponent","()","<p>Returns the exponent of the BigDecimal number, as an Integer.\n<p>If the number can be represented as 0.xxxxxx …\n"],["export","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-export","()","<p>Encodes this DH to its PEM encoding. Note that any existing per-session public/private keys will <strong>not</strong> …\n"],["export","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-export","(*args)","<p>Encodes this DSA to its PEM encoding.\n<p>Parameters\n<p><em>cipher</em> is an OpenSSL::Cipher.\n"],["export","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-export","(*args)","<p>Outputs the EC key in PEM encoding.  If <em>cipher</em> and <em>pass_phrase</em> are given they will be used to encrypt …\n"],["export","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-export","(*args)","<p>Outputs this keypair in PEM encoding.  If <em>cipher</em> and <em>pass_phrase</em> are given they will be used to encrypt …\n"],["export_keying_material","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-export_keying_material","(p1, p2, p3 = v3)","<p>Enables use of shared session key material in accordance with RFC 5705.\n"],["expr_beg?","SyntaxSuggest::LexValue","SyntaxSuggest/LexValue.html#method-i-expr_beg-3F","()",""],["expr_label?","SyntaxSuggest::LexValue","SyntaxSuggest/LexValue.html#method-i-expr_label-3F","()",""],["extend","Object","Object.html#method-i-extend","(*args)","<p>Adds to <em>obj</em> the instance methods from each module given as a parameter.\n\n<pre>module Mod\n  def hello\n    &quot;Hello ...</pre>\n"],["extend_object","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-extend_object","(obj)","<p>Installs alias methods for the default irb commands on the given object using #install_alias_method. …\n"],["extend_object","Module","Module.html#method-i-extend_object","(p1)","<p>Extends the specified object by adding this module’s constants and methods (which are added as singleton …\n"],["extend_object","MonitorMixin","MonitorMixin.html#method-c-extend_object","(obj)",""],["extend_object","OptionParser::Arguable","OptionParser/Arguable.html#method-c-extend_object","(obj)","<p>Initializes instance variable.\n"],["extended","Module","Module.html#method-i-extended","(p1)","<p>The equivalent of <code>included</code>, but for extended modules.\n\n<pre>module A\n  def self.extended(mod)\n    puts &quot;#{self} ...</pre>\n"],["extension","RDoc::Markdown","RDoc/Markdown.html#method-i-extension","(name, enable)","<p>Enables or disables the extension with <code>name</code>\n"],["extension","RDoc::Markdown","RDoc/Markdown.html#method-c-extension","(name)","<p>Creates extension methods for the <code>name</code> extension to enable and disable\nthe extension and to query if ...\n"],["extension?","RDoc::Markdown","RDoc/Markdown.html#method-i-extension-3F","(name)","<p>Is the extension <code>name</code> enabled?\n"],["extension_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-extension_dir","()","<p>Returns full path to the directory where gem’s extensions are installed.\n"],["extension_nesting","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-extension_nesting","(extension)","<p>returns the directory nesting of the extension, ignoring the first part, so “ext/foo/bar/Cargo.toml” …\n"],["extensions","Gem::Specification","Gem/Specification.html#method-i-extensions","()","<p>Extensions to build when installing the gem, specifically the paths to extconf.rb-style files used to …\n"],["extensions","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-extensions","()",""],["extensions","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-extensions","()","<p>Gets X509v3 extensions as array of X509Ext objects\n"],["extensions","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-extensions","()",""],["extensions","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-extensions","()","<p>Gets X509v3 extensions as array of X509Ext objects\n"],["extensions","URI::LDAP","URI/LDAP.html#method-i-extensions","()","<p>Returns extensions.\n"],["extensions=","Gem::Specification","Gem/Specification.html#method-i-extensions-3D","(extensions)","<p>Sets extensions to <code>extensions</code>, ensuring it is an array.\n"],["extensions=","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-extensions-3D","(p1)","<p>Sets X509_EXTENSIONs\n"],["extensions=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-extensions-3D","(p1)",""],["extensions=","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-extensions-3D","(p1)","<p>Sets X509_EXTENSIONs\n"],["extensions=","URI::LDAP","URI/LDAP.html#method-i-extensions-3D","(val)","<p>Setter for extensions <code>val</code>.\n"],["extensions_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-extensions_dir","()","<p>Returns path to the extensions directory.\n"],["extern","Fiddle::Importer","Fiddle/Importer.html#method-i-extern","(signature, *opts)","<p>Creates a global method from the given C <code>signature</code>.\n"],["external?","IO::Buffer","IO/Buffer.html#method-i-external-3F","()","<p>The buffer is <em>external</em> if it references the memory which is not allocated or mapped by the buffer itself. …\n"],["external_encoding","ARGF","ARGF.html#method-i-external_encoding","()","<p>Returns the external encoding for files read from ARGF as an Encoding object. The external encoding is …\n"],["external_encoding","IO","IO.html#method-i-external_encoding","()","<p>Returns the Encoding object that represents the encoding of the stream, or <code>nil</code> if the stream is in write …\n"],["external_encoding","StringIO","StringIO.html#method-i-external_encoding","()","<p>Returns the Encoding object that represents the encoding of the file. If the stream is write mode and …\n"],["external_encoding","Zlib::GzipReader","Zlib/GzipReader.html#method-i-external_encoding","()","<p>See Zlib::GzipReader documentation for a description.\n"],["extname","File","File.html#method-c-extname","(p1)","<p>Returns the extension (the portion of file name in <code>path</code> starting from the last period).\n<p>If <code>path</code> is a dotfile, …\n"],["extname","Pathname","Pathname.html#method-i-extname","()","<p>Returns the file’s extension.\n<p>See File.extname.\n"],["extra_args","Gem::Command","Gem/Command.html#method-c-extra_args","()",""],["extra_args=","Gem::Command","Gem/Command.html#method-c-extra_args-3D","(value)",""],["extra_rdoc_files","Gem::Specification","Gem/Specification.html#method-i-extra_rdoc_files","()","<p>Extra files to add to RDoc such as README or doc/examples.txt\n<p>When the user elects to generate the RDoc …\n"],["extra_rdoc_files=","Gem::Specification","Gem/Specification.html#method-i-extra_rdoc_files-3D","(files)","<p>Sets extra_rdoc_files to <code>files</code>, ensuring it is an array.\n"],["extract","URI","URI.html#method-c-extract","(str, schemes = nil, &block)","<p>Synopsis\n\n<pre>URI::extract(str[, schemes][,&amp;blk])</pre>\n<p>Args\n"],["extract","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-extract","(str, schemes = nil)","<p>Args\n<p><code>str</code> &mdash; String to search\n<p><code>schemes</code> &mdash; Patterns to apply to <code>str</code>\n"],["extract","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-extract","(str, schemes = nil)","<p>Args\n<p><code>str</code> &mdash; String to search\n<p><code>schemes</code> &mdash; Patterns to apply to <code>str</code>\n"],["extract_bin","Gem::Installer","Gem/Installer.html#method-i-extract_bin","()","<p>Extracts only the bin/ files from the gem into the gem directory. This is used by default gems to allow …\n"],["extract_call_seq","RDoc::Comment","RDoc/Comment.html#method-i-extract_call_seq","(method)","<p>Look for a ‘call-seq’ in the comment to override the normal parameter handling.  The :call-seq: …\n"],["extract_files","Gem::Installer","Gem/Installer.html#method-i-extract_files","()","<p>Reads the file index and extracts each file into the gem directory.\n<p>Ensures that files can’t be installed …\n"],["extract_files","Gem::Installer::FakePackage","Gem/Installer/FakePackage.html#method-i-extract_files","(destination_dir, pattern = \"*\")",""],["extract_files","Gem::Package","Gem/Package.html#method-i-extract_files","(destination_dir, pattern = \"*\")","<p>Extracts the files in this package into <code>destination_dir</code>\n<p>If <code>pattern</code> is specified, only entries matching …\n"],["extract_files","Gem::Package::Old","Gem/Package/Old.html#method-i-extract_files","(destination_dir)","<p>Extracts the files in this package into <code>destination_dir</code>\n"],["facility","Syslog","Syslog.html#method-c-facility","()","<p>Returns the facility number used in the last call to open()\n"],["fail","Kernel","Kernel.html#method-i-fail","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a RuntimeError if <code>$!</code> is <code>nil</code>.  With a single  …\n"],["failure_info","OpenSSL::Timestamp::Response","OpenSSL/Timestamp/Response.html#method-i-failure_info","()","<p>In cases no timestamp token has been created, this field contains further info about the reason why response …\n"],["fall_back_to_normal_spell_check","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-fall_back_to_normal_spell_check","(input)",""],["family","Socket::AncillaryData","Socket/AncillaryData.html#method-i-family","()","<p>returns the socket family as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AncillaryData</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:INET6</span>, <span class=\"ruby-value\">:IPV6</span>, <span class=\"ruby-value\">:PKTINFO</span>, <span class=\"ruby-string\">&quot;&quot;</span>).<span class=\"ruby-identifier\">family</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["family","Socket::Option","Socket/Option.html#method-i-family","()","<p>returns the socket family as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Option</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:INET6</span>, <span class=\"ruby-value\">:IPV6</span>, <span class=\"ruby-value\">:RECVPKTINFO</span>, [<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">pack</span>(<span class=\"ruby-string\">&quot;i!&quot;</span>)).<span class=\"ruby-identifier\">family</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["family_addrinfo","Addrinfo","Addrinfo.html#method-i-family_addrinfo","(*args)","<p>creates an Addrinfo object from the arguments.\n<p>The arguments are interpreted as similar to self.\n\n<pre>Addrinfo.tcp(&quot;0.0.0.0&quot;, ...</pre>\n"],["fast_generate","JSON","JSON.html#method-i-fast_generate","(obj, opts = nil)","<p>Arguments <code>obj</code> and <code>opts</code> here are the same as arguments <code>obj</code> and <code>opts</code> in JSON.generate.\n<p>By default, generates …\n"],["fatal","Logger","Logger.html#method-i-fatal","(progname = nil, &block)","<p>Equivalent to calling #add with severity <code>Logger::FATAL</code>.\n"],["fatal","Syslog::Logger","Syslog/Logger.html#method-i-fatal","","<p>Logs a <code>message</code> at the fatal (syslog err) log level, or logs the message returned from the block.\n"],["fatal!","Logger","Logger.html#method-i-fatal-21","()","<p>Sets the log level to Logger::FATAL. See Log Level.\n"],["fatal?","Logger","Logger.html#method-i-fatal-3F","()","<p>Returns <code>true</code> if the log level allows entries with severity Logger::FATAL to be written, <code>false</code> otherwise. …\n"],["fcntl","IO","IO.html#method-i-fcntl","(p1, p2 = v2)","<p>Invokes Posix system call fcntl(2), which provides a mechanism for issuing low-level commands to control …\n"],["fcntl","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-fcntl","(*args)",""],["fcntl","StringIO","StringIO.html#method-i-fcntl","(*args)","<p>Raises NotImplementedError.\n"],["fdatasync","IO","IO.html#method-i-fdatasync","()","<p>Immediately writes to disk all data buffered in the stream, via the operating system’s: <code>fdatasync(2)</code> …\n"],["fdiv","Complex","Complex.html#method-i-fdiv","(p1)","<p>Performs division as each part is a float, never returns a float.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">11</span>, <span class=\"ruby-value\">22</span>).<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">3</span>)  <span class=\"ruby-comment\">#=&gt; (3.6666666666666665+7.333333333333333i)</span>\n</pre>\n"],["fdiv","Float","Float.html#method-i-fdiv","(p1)","<p>Returns the quotient from dividing <code>self</code> by <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">quo</span>(<span class=\"ruby-value\">2</span>)              <span class=\"ruby-comment\"># =&gt; 1.57</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">quo</span>(<span class=\"ruby-value\">-2</span>)  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["fdiv","Integer","Integer.html#method-i-fdiv","(p1)","<p>Returns the Float result of dividing <code>self</code> by <code>numeric</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">4</span>.<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">2</span>)      <span class=\"ruby-comment\"># =&gt; 2.0</span>\n<span class=\"ruby-value\">4</span>.<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">-2</span>)      <span class=\"ruby-comment\"># =&gt; -2.0 ...</span>\n</pre>\n"],["fdiv","Numeric","Numeric.html#method-i-fdiv","(p1)","<p>Returns the quotient <code>self/other</code> as a float, using method <code>/</code> in the derived class of <code>self</code>. (Numeric itself …\n"],["fdiv","Rational","Rational.html#method-i-fdiv","(p1)","<p>Performs division and returns the value as a Float.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">1</span>)       <span class=\"ruby-comment\">#=&gt; 0.6666666666666666 ...</span>\n</pre>\n"],["feature_flag","Bundler","Bundler.html#method-c-feature_flag","()",""],["feed","Enumerator","Enumerator.html#method-i-feed","(p1)","<p>Sets the value to be returned by the next yield inside <code>e</code>.\n<p>If the value is not set, the yield returns nil. …\n"],["fetch","Array","Array.html#method-i-fetch","(p1, p2 = v2)","<p>Returns the element at offset  <code>index</code>.\n<p>With the single Integer argument <code>index</code>, returns the element at offset …\n"],["fetch","CSV::Row","CSV/Row.html#method-i-fetch","(header, *varargs)","<p>Returns the field value as specified by <code>header</code>.\n<p>With the single argument <code>header</code>, returns the field value …\n"],["fetch","DRb::WeakIdConv::WeakSet","DRb/WeakIdConv/WeakSet.html#method-i-fetch","(ref)",""],["fetch","ENV","ENV.html#method-c-fetch","(*args)","<p>If <code>name</code> is the name of an environment variable, returns its value:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>[<span class=\"ruby-string\">&#39;foo&#39;</span>] = <span class=\"ruby-string\">&#39;0&#39;</span>\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">fetch</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["fetch","Gem::Request","Gem/Request.html#method-i-fetch","()",""],["fetch","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-fetch","(filename, filesize)","<p>The silent download reporter does not display <code>filename</code> or care about <code>filesize</code> because it is silent.\n"],["fetch","Gem::StreamUI::ThreadedDownloadReporter","Gem/StreamUI/ThreadedDownloadReporter.html#method-i-fetch","(file_name, *args)","<p>Tells the download reporter that the <code>file_name</code> is being fetched. The other arguments are ignored.\n"],["fetch","Hash","Hash.html#method-i-fetch","(*args)","<p>Returns the value for the given <code>key</code>, if found.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">fetch</span>(<span class=\"ruby-value\">:bar</span>) <span class=\"ruby-comment\"># =&gt; 1</span>\n</pre>\n<p>If <code>key</code> …\n"],["fetch","Net::HTTPHeader","Net/HTTPHeader.html#method-i-fetch","(key, *args)","<p>With a block, returns the string value for <code>key</code> if it exists; otherwise returns the value of the block; …\n"],["fetch","PStore","PStore.html#method-i-fetch","(key, default=PStore::Error)","<p>Like #[], except that it accepts a default value for the store. If the <code>key</code> does not exist:\n<p>Raises an exception …\n"],["fetch","Rinda::Tuple","Rinda/Tuple.html#method-i-fetch","(k)","<p>Fetches item <code>k</code> from the tuple.\n"],["fetch","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-fetch","(key)","<p>Fetches <code>key</code> from the tuple.\n"],["fetch","Thread","Thread.html#method-i-fetch","(*args)","<p>Returns a fiber-local for the given key. If the key can’t be found, there are several options: With …\n"],["fetch","YAML::DBM","YAML/DBM.html#method-i-fetch","( keystr, ifnone = nil )","<p>Return value associated with <code>key</code>.\n<p>If there is no value for <code>key</code> and no block is given, returns <code>ifnone</code>. …\n"],["fetch_file","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_file","(uri, *_)","<p>File Fetcher. Dispatched by <code>fetch_path</code>. Use it instead.\n"],["fetch_http","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_http","(uri, last_modified = nil, head = false, depth = 0)","<p>HTTP Fetcher. Dispatched by <code>fetch_path</code>. Use it instead.\n"],["fetch_https","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_https","(uri, last_modified = nil, head = false, depth = 0)",""],["fetch_line","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-fetch_line","(lineno)",""],["fetch_path","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_path","(uri, mtime = nil, head = false)","<p>Downloads <code>uri</code> and returns it as a String.\n"],["fetch_resource","Resolv::DNS","Resolv/DNS.html#method-i-fetch_resource","(name, typeclass)",""],["fetch_s3","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_s3","(uri, mtime = nil, head = false)",""],["fetch_s3_config","Gem::S3URISigner","Gem/S3URISigner.html#method-i-fetch_s3_config","()","<p>Extracts S3 configuration for S3 bucket\n"],["fetch_server","DRb","DRb.html#method-i-fetch_server","(uri)","<p>Retrieves the server with the given <code>uri</code>.\n<p>See also regist_server and remove_server.\n"],["fetch_server","DRb","DRb.html#method-c-fetch_server","(uri)","<p>Retrieves the server with the given <code>uri</code>.\n<p>See also regist_server and remove_server.\n"],["fetch_spec","Gem::Source","Gem/Source.html#method-i-fetch_spec","(name_tuple)","<p>Fetches a specification for the given <code>name_tuple</code>.\n"],["fetch_spec","Gem::Source::Lock","Gem/Source/Lock.html#method-i-fetch_spec","(name_tuple)","<p>Delegates to the wrapped source’s fetch_spec method.\n"],["fetch_values","Hash","Hash.html#method-i-fetch_values","(*args)","<p>Returns a new Array containing the values associated with the given keys *keys:\n\n<pre>h = {foo: 0, bar: 1, baz: ...</pre>\n"],["fetcher","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-c-fetcher","()","<p>Cached RemoteFetcher instance.\n"],["fetcher","Gem::SpecFetcher","Gem/SpecFetcher.html#method-c-fetcher","()","<p>Default fetcher instance.  Use this instead of ::new to reduce object allocation.\n"],["fiber","Fiber::Scheduler","Fiber/Scheduler.html#method-i-fiber","(*args)","<p>Implementation of the Fiber.schedule. The method is <em>expected</em> to immediately run the given block of code …\n"],["field","CSV::Row","CSV/Row.html#method-i-field","(header_or_index, minimum_index = 0)","<p>Returns the field value for the given <code>index</code> or <code>header</code>.\n<p>Fetch field value by Integer index:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;Name,Value\\nfoo,0\\nbar,1\\nbaz,2\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["field?","CSV::Row","CSV/Row.html#method-i-field-3F","(data)","<p>Returns <code>true</code> if <code>value</code> is a field in this row, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;Name,Name,Name\\nFoo,Bar,Baz\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["field_row?","CSV::Row","CSV/Row.html#method-i-field_row-3F","()","<p>Returns <code>true</code> if this is a field row, <code>false</code> otherwise.\n"],["field_size_limit","CSV","CSV.html#method-i-field_size_limit","()","<p>Returns the limit for field size; used for parsing; see {Option <code>field_size_limit</code>}:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CSV</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;&#39;</span>).<span class=\"ruby-identifier\">field_size_limit</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["field_size_limit","CSV::Parser","CSV/Parser.html#method-i-field_size_limit","()",""],["fields","CSV::Row","CSV/Row.html#method-i-fields","(*headers_and_or_indices)","<p>Returns field values per the given <code>specifiers</code>, which may be any mixture of:\n<p>Integer index.\n<p>Range of Integer …\n"],["file","ARGF","ARGF.html#method-i-file","()","<p>Returns the current file as an IO or File object. <code>$stdin</code> is returned when the current file is STDIN. …\n"],["file","Digest::Class","Digest/Class.html#method-c-file","(name, *args)","<p>Creates a digest object and reads a given file, <em>name</em>. Optional arguments are passed to the constructor …\n"],["file","Digest::Instance","Digest/Instance.html#method-i-file","(name)","<p>Updates the digest with the contents of a given file <em>name</em> and returns self.\n"],["file?","File","File.html#method-c-file-3F","(p1)","<p>Returns <code>true</code> if the named <code>file</code> exists and is a regular file.\n<p><code>file</code> can be an IO object.\n<p>If the <code>file</code> argument …\n"],["file?","File::Stat","File/Stat.html#method-i-file-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a regular file (not a device file, pipe, socket, etc.).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">file?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["file?","FileTest","FileTest.html#method-i-file-3F","(p1)","<p>Returns <code>true</code> if the named <code>file</code> exists and is a regular file.\n<p><code>file</code> can be an IO object.\n<p>If the <code>file</code> argument …\n"],["file?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-file-3F","()","<p>Is this tar entry a file?\n"],["file?","Pathname","Pathname.html#method-i-file-3F","()","<p>See FileTest.file?.\n"],["file_field","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-file_field","(name = \"\", size = 20, maxlength = nil)","<p>Generate an File Upload Input element as a string.\n<p>The attributes of the element can be specified as three …\n"],["file_input?","IRB::Context","IRB/Context.html#method-i-file_input-3F","()","<p>Whether #io uses a File for the <code>input_method</code> passed when creating the current context, see ::new\n"],["file_name","Fiddle::Handle","Fiddle/Handle.html#method-i-file_name","()","<p>Returns the file name of this handle.\n"],["file_name","Gem::Specification","Gem/Specification.html#method-i-file_name","()","<p>The default (generated) file name of the gem.  See also #spec_name.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">file_name</span> <span class=\"ruby-comment\"># =&gt; &quot;example-1.0.gem&quot;</span>\n</pre>\n"],["file_name","RDoc::CodeObject","RDoc/CodeObject.html#method-i-file_name","()","<p>File name where this CodeObject was found.\n<p>See also RDoc::Context#in_files\n"],["filename","ARGF","ARGF.html#method-i-filename","()","<p>Returns the current filename. “-” is returned when the current file is STDIN.\n<p>For example:\n\n<pre>$ ...</pre>\n"],["filename","Ripper","Ripper.html#method-i-filename","()","<p>Return current parsing filename.\n"],["filename","Ripper::Filter","Ripper/Filter.html#method-i-filename","()","<p>The file name of the input.\n"],["filename_quote_characters","Readline","Readline.html#method-c-filename_quote_characters","()","<p>Gets a list of characters that cause a filename to be quoted by the completer when they appear in a completed …\n"],["filename_quote_characters=","Readline","Readline.html#method-c-filename_quote_characters-3D","(p1)","<p>Sets a list of characters that cause a filename to be quoted by the completer when they appear in a completed …\n"],["filename_quote_characters=","Reline::Core","Reline/Core.html#method-i-filename_quote_characters-3D","(v)",""],["fileno","ARGF","ARGF.html#method-i-fileno","()","<p>Returns an integer representing the numeric file descriptor for the current file. Raises an ArgumentError …\n"],["fileno","Dir","Dir.html#method-i-fileno","()","<p>Returns the file descriptor used in <em>dir</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;..&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">fileno</span>   <span class=\"ruby-comment\">#=&gt; 8</span>\n</pre>\n<p>This method uses dirfd() function …\n"],["fileno","IO","IO.html#method-i-fileno","()","<p>Returns the integer file descriptor for the stream:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$stdin</span>.<span class=\"ruby-identifier\">fileno</span>             <span class=\"ruby-comment\"># =&gt; 0</span>\n<span class=\"ruby-identifier\">$stdout</span>.<span class=\"ruby-identifier\">fileno</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["fileno","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-fileno","()","<p>The file descriptor for the socket.\n"],["fileno","StringIO","StringIO.html#method-i-fileno","()","<p>Returns <code>nil</code>.  Just for compatibility to IO.\n"],["files","Gem::Specification","Gem/Specification.html#method-i-files","()","<p>Files included in this gem.  You cannot append to this accessor, you must assign to it.\n<p>Only add files …\n"],["files=","Gem::Specification","Gem/Specification.html#method-i-files-3D","(files)","<p>Sets files to <code>files</code>, ensuring it is an array.\n"],["files_hash","RDoc::Store","RDoc/Store.html#method-i-files_hash","()","<p>Hash of all files known to RDoc\n"],["files_in","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-files_in","(spec)",""],["files_in","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-files_in","(dir)",""],["files_in_default_gem","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-files_in_default_gem","(spec)",""],["files_in_gem","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-files_in_gem","(spec)",""],["fill","Array","Array.html#method-i-fill","(p1 = v1, p2 = v2)","<p>Replaces specified elements in <code>self</code> with specified objects; returns <code>self</code>.\n<p>With argument <code>obj</code> and no block …\n"],["fill_breakable","PrettyPrint","PrettyPrint.html#method-i-fill_breakable","(sep=' ', width=sep.length)","<p>This is similar to #breakable except the decision to break or not is determined individually.\n<p>Two #fill_breakable …\n"],["fill_rbuff","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-fill_rbuff","()","<p>Fills the buffer from the underlying SSLSocket\n"],["filter","Array","Array.html#method-i-filter","()","<p>Calls the block, if given, with each element of <code>self</code>; returns a new Array containing those elements of …\n"],["filter","CSV","CSV.html#method-c-filter","(input=nil, output=nil, **options)","<p>Parses CSV from a source (String, IO stream, or ARGF).\n<p>Calls the given block with each parsed row:\n<p>Without …\n"],["filter","ENV","ENV.html#method-c-filter","()","<p>ENV.filter is an alias for ENV.select.\n<p>Yields each environment variable name and its value as a 2-element …\n"],["filter","Enumerable","Enumerable.html#method-i-filter","()","<p>Returns an array containing elements selected by the block.\n<p>With a block given, calls the block with successive …\n"],["filter","Enumerator::Lazy","Enumerator/Lazy.html#method-i-filter","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["filter","Hash","Hash.html#method-i-filter","()","<p>Hash#filter is an alias for Hash#select.\n<p>Returns a new Hash object whose entries are those for which the …\n"],["filter","Struct","Struct.html#method-i-filter","(*args)","<p>With a block given, returns an array of values from <code>self</code> for which the block returns a truthy value: …\n"],["filter","URI::LDAP","URI/LDAP.html#method-i-filter","()","<p>Returns filter.\n"],["filter!","Array","Array.html#method-i-filter-21","()","<p>Calls the block, if given  with each element of <code>self</code>; removes from <code>self</code> those elements for which the …\n"],["filter!","ENV","ENV.html#method-c-filter-21","()","<p>ENV.filter! is an alias for ENV.select!.\n<p>Yields each environment variable name and its value as a 2-element …\n"],["filter!","Hash","Hash.html#method-i-filter-21","()","<p>Hash#filter! is an alias for Hash#select!.\n<p>Returns <code>self</code>, whose entries are those for which the block returns …\n"],["filter!","Set","Set.html#method-i-filter-21","(&block)","<p>Equivalent to Set#select!\n"],["filter=","URI::LDAP","URI/LDAP.html#method-i-filter-3D","(val)","<p>Setter for filter <code>val</code>.\n"],["filter_backtrace","IRB::WorkSpace","IRB/WorkSpace.html#method-i-filter_backtrace","(bt)","<p>error message manipulator\n"],["filter_backtrace","OptionParser::ParseError","OptionParser/ParseError.html#method-c-filter_backtrace","(array)",""],["filter_map","Enumerable","Enumerable.html#method-i-filter_map","()","<p>Returns an array containing truthy elements returned by the block.\n<p>With a block given, calls the block …\n"],["filter_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-filter_map","()","<p>Like Enumerable#filter_map, but chains operation to be lazy-evaluated.\n\n<pre>(1..).lazy.filter_map { |i| i * ...</pre>\n"],["filter_possibilities_after_unwind","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-filter_possibilities_after_unwind","(unwind_details)","<p>Filter’s a state’s possibilities to remove any that would not fix the conflict we’ve just …\n"],["filter_possibilities_for_parent_unwind","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-filter_possibilities_for_parent_unwind","(unwind_details)","<p>Filter’s a state’s possibilities to remove any that would (eventually) create a requirement in …\n"],["filter_possibilities_for_primary_unwind","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-filter_possibilities_for_primary_unwind","(unwind_details)","<p>Filter’s a state’s possibilities to remove any that would not satisfy the requirements in the …\n"],["filtered_possibility_set","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-filtered_possibility_set","(vertex)","<p>Generates a filtered version of the existing vertex’s ‘PossibilitySet` using the current state’s …\n"],["final","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-final","()","<p>Returns the remaining data held in the cipher object. Further calls to Cipher#update or Cipher#final …\n"],["finalize","Reline::LineEditor","Reline/LineEditor.html#method-i-finalize","()",""],["find","Encoding","Encoding.html#method-c-find","(p1)","<p>Search the encoding with specified <em>name</em>. <em>name</em> should be a string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span>.<span class=\"ruby-identifier\">find</span>(<span class=\"ruby-string\">&quot;US-ASCII&quot;</span>)  <span class=\"ruby-comment\">#=&gt; #&lt;Encoding:US-ASCII&gt;</span>\n</pre>\n"],["find","Enumerable","Enumerable.html#method-i-find","(*args)","<p>Returns the first element for which the block returns a truthy value.\n<p>With a block given, calls the block …\n"],["find","Find","Find.html#method-c-find","(*paths, ignore_error: true)","<p>Calls the associated block with the name of every file and directory listed as arguments, then recursively …\n"],["find","Find","Find.html#method-i-find","(*paths, ignore_error: true)","<p>Calls the associated block with the name of every file and directory listed as arguments, then recursively …\n"],["find","IRB::Locale","IRB/Locale.html#method-i-find","(file , paths = $:)",""],["find","Pathname","Pathname.html#method-i-find","(ignore_error: true)","<p>Iterates over the directory tree in a depth first manner, yielding a Pathname for each file under “this” …\n"],["find","Psych::ClassLoader::Restricted","Psych/ClassLoader/Restricted.html#method-i-find","(klassname)",""],["find","Rinda::TupleBag","Rinda/TupleBag.html#method-i-find","(template)","<p>Finds a live tuple that matches <code>template</code>.\n"],["find","Rinda::TupleBag::TupleBin","Rinda/TupleBag/TupleBin.html#method-i-find","()",""],["find_active_stub_by_path","Gem::Specification","Gem/Specification.html#method-c-find_active_stub_by_path","(path)",""],["find_alias_command","Gem::CommandManager","Gem/CommandManager.html#method-i-find_alias_command","(cmd_name)",""],["find_alias_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_alias_comment","(class_name, new_name, old_name)","<p>Finds the comment for an alias on <code>class_name</code> from <code>new_name</code> to <code>old_name</code>\n"],["find_all","Enumerable","Enumerable.html#method-i-find_all","()","<p>Returns an array containing elements selected by the block.\n<p>With a block given, calls the block with successive …\n"],["find_all","Enumerator::Lazy","Enumerator/Lazy.html#method-i-find_all","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["find_all","Gem::AvailableSet","Gem/AvailableSet.html#method-i-find_all","(req)","<p>Used by the Resolver, the protocol to use a AvailableSet as a search Set.\n"],["find_all","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-i-find_all","(req)","<p>Return an array of APISpecification objects matching DependencyRequest <code>req</code>.\n"],["find_all","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-find_all","(req)","<p>Finds all specs matching <code>req</code> in all sets.\n"],["find_all","Gem::Resolver::CurrentSet","Gem/Resolver/CurrentSet.html#method-i-find_all","(req)",""],["find_all","Gem::Resolver::GitSet","Gem/Resolver/GitSet.html#method-i-find_all","(req)","<p>Finds all git gems matching <code>req</code>\n"],["find_all","Gem::Resolver::IndexSet","Gem/Resolver/IndexSet.html#method-i-find_all","(req)","<p>Return an array of IndexSpecification objects matching DependencyRequest <code>req</code>.\n"],["find_all","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-find_all","(req)","<p>Returns an array of IndexSpecification objects matching DependencyRequest <code>req</code>.\n"],["find_all","Gem::Resolver::LockSet","Gem/Resolver/LockSet.html#method-i-find_all","(req)","<p>Returns an Array of IndexSpecification objects matching the DependencyRequest <code>req</code>.\n"],["find_all","Gem::Resolver::Set","Gem/Resolver/Set.html#method-i-find_all","(req)","<p>The find_all method must be implemented.  It returns all Resolver Specification objects matching the …\n"],["find_all","Gem::Resolver::VendorSet","Gem/Resolver/VendorSet.html#method-i-find_all","(req)","<p>Returns an Array of VendorSpecification objects matching the DependencyRequest <code>req</code>.\n"],["find_all","Rinda::TupleBag","Rinda/TupleBag.html#method-i-find_all","(template)","<p>Finds all live tuples that match <code>template</code>.\n"],["find_all_by_full_name","Gem::Specification","Gem/Specification.html#method-c-find_all_by_full_name","(full_name)","<p>Returns every spec that has the given <code>full_name</code>\n"],["find_all_by_name","Gem::Specification","Gem/Specification.html#method-c-find_all_by_name","(name, *requirements)","<p>Returns every spec that matches <code>name</code> and optional <code>requirements</code>.\n"],["find_all_satisfiers","Gem::Specification","Gem/Specification.html#method-i-find_all_satisfiers","(dep)","<p>Finds all gems that satisfy <code>dep</code>\n"],["find_all_template","Rinda::TupleBag","Rinda/TupleBag.html#method-i-find_all_template","(tuple)","<p>Finds all tuples in the TupleBag which when treated as templates, match <code>tuple</code> and are alive.\n"],["find_ancestor_local_symbol","RDoc::ClassModule","RDoc/ClassModule.html#method-i-find_ancestor_local_symbol","(symbol)","<p>Looks for a symbol in the #ancestors. See Context#find_local_symbol.\n"],["find_attr_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_attr_comment","(var_name, attr_name, read = nil, write = nil)","<p>Finds a comment for rb_define_attr, rb_attr or Document-attr.\n<p><code>var_name</code> is the C class variable the attribute …\n"],["find_attribute","RDoc::Context","RDoc/Context.html#method-i-find_attribute","(name, singleton)","<p>Finds an attribute <code>name</code> with singleton value <code>singleton</code>.\n"],["find_attribute_named","RDoc::Context","RDoc/Context.html#method-i-find_attribute_named","(name)","<p>Finds an attribute with <code>name</code> in this context\n"],["find_body","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_body","(class_name, meth_name, meth_obj, file_content, quiet = false)","<p>Find the C code corresponding to a Ruby method\n"],["find_by_full_name","Gem::Specification","Gem/Specification.html#method-c-find_by_full_name","(full_name)","<p>Find the best specification matching a <code>full_name</code>.\n"],["find_by_name","Gem::Specification","Gem/Specification.html#method-c-find_by_name","(name, *requirements)","<p>Find the best specification matching a <code>name</code> and <code>requirements</code>. Raises if the dependency doesn’t resolve …\n"],["find_by_path","Gem::Specification","Gem/Specification.html#method-c-find_by_path","(path)","<p>Return the best specification that contains the file matching <code>path</code>.\n"],["find_c_enclosure","RDoc::Store","RDoc/Store.html#method-i-find_c_enclosure","(variable)","<p>Finds the enclosure (namespace) for the given C <code>variable</code>.\n"],["find_class","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_class","(raw_name, name, base_name = nil)","<p>Finds a RDoc::NormalClass or RDoc::NormalModule for <code>raw_name</code>\n"],["find_class_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_class_comment","(class_name, class_mod)","<p>Look for class or module documentation above Init_<code>class_name</code>(void), in a Document-class <code>class_name</code> (or …\n"],["find_class_method_named","RDoc::Context","RDoc/Context.html#method-i-find_class_method_named","(name)","<p>Finds a class method with <code>name</code> in this context\n"],["find_class_named","RDoc::ClassModule","RDoc/ClassModule.html#method-i-find_class_named","(name)","<p>Finds a class or module with <code>name</code> in this namespace or its descendants\n"],["find_class_named","RDoc::Store","RDoc/Store.html#method-i-find_class_named","(name)","<p>Finds the class with <code>name</code> in all discovered classes\n"],["find_class_named_from","RDoc::Store","RDoc/Store.html#method-i-find_class_named_from","(name, from)","<p>Finds the class with <code>name</code> starting in namespace <code>from</code>\n"],["find_class_or_module","RDoc::Store","RDoc/Store.html#method-i-find_class_or_module","(name)","<p>Finds the class or module with <code>name</code>\n"],["find_class_or_module","RDoc::TopLevel","RDoc/TopLevel.html#method-i-find_class_or_module","(name)","<p>See RDoc::TopLevel::find_class_or_module\n"],["find_command","Gem::CommandManager","Gem/CommandManager.html#method-i-find_command","(cmd_name)",""],["find_command_possibilities","Gem::CommandManager","Gem/CommandManager.html#method-i-find_command_possibilities","(cmd_name)",""],["find_config_file","Gem","Gem.html#method-c-find_config_file","()","<p>Finds the user’s config file\n"],["find_const_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_const_comment","(type, const_name, class_name = nil)","<p>Finds a comment matching <code>type</code> and <code>const_name</code> either above the comment or in the matching Document- section. …\n"],["find_constant_named","RDoc::Context","RDoc/Context.html#method-i-find_constant_named","(name)","<p>Finds a constant with <code>name</code> in this context\n"],["find_enclosing_module_named","RDoc::Context","RDoc/Context.html#method-i-find_enclosing_module_named","(name)","<p>Find a module at a higher scope\n"],["find_executable","MakeMakefile","MakeMakefile.html#method-i-find_executable","(bin, path = nil)","<p>Searches for the executable <code>bin</code> on <code>path</code>.  The default path is your <code>PATH</code> environment variable. If that …\n"],["find_extension","OpenSSL::X509::Extension::Helpers","OpenSSL/X509/Extension/Helpers.html#method-i-find_extension","(oid)",""],["find_external_alias","RDoc::Context","RDoc/Context.html#method-i-find_external_alias","(name, singleton)","<p>Finds an external alias <code>name</code> with singleton value <code>singleton</code>.\n"],["find_external_alias_named","RDoc::Context","RDoc/Context.html#method-i-find_external_alias_named","(name)","<p>Finds an external alias with <code>name</code> in this context\n"],["find_file_named","RDoc::Context","RDoc/Context.html#method-i-find_file_named","(name)","<p>Finds a file with <code>name</code> in this context\n"],["find_file_named","RDoc::Store","RDoc/Store.html#method-i-find_file_named","(name)","<p>Finds the file with <code>name</code> in all discovered files\n"],["find_files","Gem","Gem.html#method-c-find_files","(glob, check_load_path=true)","<p>Returns a list of paths matching <code>glob</code> that can be used by a gem to pick up features from other gems. …\n"],["find_files_for_gem","Gem::Validator","Gem/Validator.html#method-i-find_files_for_gem","(gem_directory)",""],["find_gem","Gem::Source::Local","Gem/Source/Local.html#method-i-find_gem","(gem_name, version = Gem::Requirement.default, prerelease = false)",""],["find_gemspec","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-find_gemspec","(glob = \"*.gemspec\")",""],["find_header","MakeMakefile","MakeMakefile.html#method-i-find_header","(header, *paths)","<p>Instructs mkmf to search for the given <code>header</code> in any of the <code>paths</code> provided, and returns whether or not …\n"],["find_home","Gem","Gem.html#method-c-find_home","()","<p>Finds the user’s home directory.\n"],["find_ideas","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-find_ideas","(paths, leaf)",""],["find_in_cache","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-find_in_cache","(filename)","<p>Find cached filename in Gem.path. Returns nil if the file cannot be found.\n"],["find_in_unresolved","Gem::Specification","Gem/Specification.html#method-c-find_in_unresolved","(path)","<p>Return currently unresolved specs that contain the file matching <code>path</code>.\n"],["find_in_unresolved_tree","Gem::Specification","Gem/Specification.html#method-c-find_in_unresolved_tree","(path)","<p>Search through all unresolved deps and sub-dependencies and return specs that contain the file matching …\n"],["find_inactive_by_path","Gem::Specification","Gem/Specification.html#method-c-find_inactive_by_path","(path)","<p>Return the best specification that contains the file matching <code>path</code> amongst the specs that are not activated. …\n"],["find_index","Array","Array.html#method-i-find_index","(*args)","<p>Returns the index of a specified element.\n<p>When argument <code>object</code> is given but no block, returns the index …\n"],["find_index","Enumerable","Enumerable.html#method-i-find_index","(p1)","<p>Returns the index of the first element that meets a specified criterion, or <code>nil</code> if no such element is …\n"],["find_instance_method_named","RDoc::Context","RDoc/Context.html#method-i-find_instance_method_named","(name)","<p>Finds an instance method with <code>name</code> in this context\n"],["find_latest_files","Gem","Gem.html#method-c-find_latest_files","(glob, check_load_path=true)","<p>Returns a list of paths matching <code>glob</code> from the latest gems that can be used by a gem to pick up features …\n"],["find_leaves","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-find_leaves","(path)",""],["find_library","MakeMakefile","MakeMakefile.html#method-i-find_library","(lib, func, *paths, &b)","<p>Returns whether or not the entry point <code>func</code> can be found within the library <code>lib</code> in one of the <code>paths</code> specified, …\n"],["find_local_symbol","RDoc::Context","RDoc/Context.html#method-i-find_local_symbol","(symbol)","<p>Finds a method, constant, attribute, external alias, module or file named <code>symbol</code> in this context.\n"],["find_local_symbol","RDoc::TopLevel","RDoc/TopLevel.html#method-i-find_local_symbol","(symbol)","<p>Finds a class or module named <code>symbol</code>\n"],["find_method","RDoc::Context","RDoc/Context.html#method-i-find_method","(name, singleton)","<p>Finds a method named <code>name</code> with singleton value <code>singleton</code>.\n"],["find_method_named","RDoc::Context","RDoc/Context.html#method-i-find_method_named","(name)","<p>Finds a instance or module method with <code>name</code> in this context\n"],["find_modifiers","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_modifiers","(comment, meth_obj)","<p>Handles modifiers in <code>comment</code> and updates <code>meth_obj</code> as appropriate.\n"],["find_module_named","RDoc::Context","RDoc/Context.html#method-i-find_module_named","(name)","<p>Find a module with <code>name</code> using ruby’s scoping rules\n"],["find_module_named","RDoc::Store","RDoc/Store.html#method-i-find_module_named","(name)","<p>Finds the module with <code>name</code> in all discovered modules\n"],["find_module_named","RDoc::TopLevel","RDoc/TopLevel.html#method-i-find_module_named","(name)","<p>Finds a module or class with <code>name</code>\n"],["find_name","Gem::DependencyList","Gem/DependencyList.html#method-i-find_name","(full_name)",""],["find_override_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_override_comment","(class_name, meth_obj)","<p>Finds a <code>Document-method</code> override for <code>meth_obj</code> on <code>class_name</code>\n"],["find_paths","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-i-find_paths","(package_name, dirs)",""],["find_proxy","URI::Generic","URI/Generic.html#method-i-find_proxy","(env=ENV)","<p>Returns a proxy URI. The proxy URI is obtained from environment variables such as http_proxy, ftp_proxy …\n"],["find_response","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-find_response","(p1)","<p>Returns a SingleResponse whose CertId matches with <em>certificate_id</em>, or <code>nil</code> if this BasicResponse does …\n"],["find_spec_for_exe","Gem","Gem.html#method-c-find_spec_for_exe","(name, exec_name, requirements)",""],["find_state_for","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-find_state_for","(requirement)","<p>@param [Object] requirement @return [ResolutionState] the state whose ‘requirement` is the given\n\n<pre>`requirement`.</pre>\n"],["find_suggestions","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-find_suggestions","(input, plausibles)",""],["find_symbol","RDoc::Context","RDoc/Context.html#method-i-find_symbol","(symbol)","<p>Look up <code>symbol</code>, first as a module, then as a local symbol.\n"],["find_symbol_module","RDoc::Context","RDoc/Context.html#method-i-find_symbol_module","(symbol)","<p>Look up a module named <code>symbol</code>.\n"],["find_text_page","RDoc::Store","RDoc/Store.html#method-i-find_text_page","(file_name)","<p>Returns the RDoc::TopLevel that is a text file and has the given <code>file_name</code>\n"],["find_type","MakeMakefile","MakeMakefile.html#method-i-find_type","(type, opt, *headers, &b)","<p>Returns where the static type <code>type</code> is defined.\n<p>You may also pass additional flags to <code>opt</code> which are then …\n"],["find_unique","RDoc::Store","RDoc/Store.html#method-i-find_unique","(all_hash)","<p>Finds unique classes/modules defined in <code>all_hash</code>, and returns them as an array. Performs the alias updates …\n"],["find_unresolved_default_spec","Gem","Gem.html#method-c-find_unresolved_default_spec","(path)","<p>Find a Gem::Specification of default gem from <code>path</code>\n"],["finger","Rinda::RingFinger","Rinda/RingFinger.html#method-c-finger","()","<p>Creates a singleton RingFinger and looks for a RingServer.  Returns the created RingFinger.\n"],["fingerprint","Racc::States","Racc/States.html#method-i-fingerprint","(arr)",""],["finish","Digest::Instance","Digest/Instance.html#method-i-finish","()","<p>Finishes the digest and returns the resulting hash value.\n<p>This method is overridden by each implementation …\n"],["finish","Encoding::Converter","Encoding/Converter.html#method-i-finish","()","<p>Finishes the converter. It returns the last part of the converted string.\n\n<pre>ec = Encoding::Converter.new(&quot;utf-8&quot;, ...</pre>\n"],["finish","Net::HTTP","Net/HTTP.html#method-i-finish","()","<p>Finishes the HTTP session and closes the TCP connection. Raises IOError if the session has not been started. …\n"],["finish","OpenSSL::Digest","OpenSSL/Digest.html#method-i-finish","(p1 = v1)",""],["finish","OpenSSL::Engine","OpenSSL/Engine.html#method-i-finish","()","<p>Releases all internal structural references for this engine.\n<p>May raise an EngineError if the engine is …\n"],["finish","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-finish","()",""],["finish","RDoc::Options","RDoc/Options.html#method-i-finish","()","<p>Completes any unfinished option setup business such as filtering for existent files, creating a regexp …\n"],["finish","Reline::LineEditor","Reline/LineEditor.html#method-i-finish","()",""],["finish","Zlib::GzipFile","Zlib/GzipFile.html#method-i-finish","()","<p>Closes the GzipFile object. Unlike Zlib::GzipFile#close, this method never calls the close method of …\n"],["finish","Zlib::ZStream","Zlib/ZStream.html#method-i-finish","()","<p>Finishes the stream and flushes output buffer.  If a block is given each chunk is yielded to the block …\n"],["finish_page_dir","RDoc::Options","RDoc/Options.html#method-i-finish_page_dir","()","<p>Fixes the page_dir to be relative to the root_dir and adds the page_dir to the files list.\n"],["finish_pasting","Reline::GeneralIO","Reline/GeneralIO.html#method-c-finish_pasting","()",""],["finish_resolve","Gem","Gem.html#method-c-finish_resolve","(request_set=Gem::RequestSet.new)",""],["finished?","Reline::LineEditor","Reline/LineEditor.html#method-i-finished-3F","()",""],["finished?","Zlib::ZStream","Zlib/ZStream.html#method-i-finished-3F","()","<p>Returns true if the stream is finished.\n"],["finished_message","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-finished_message","()","<p>Returns the last <strong>Finished</strong> message sent\n"],["finite?","BigDecimal","BigDecimal.html#method-i-finite-3F","()","<p>Returns True if the value is finite (not NaN or infinite).\n"],["finite?","Complex","Complex.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <code>cmp</code>‘s real and imaginary parts are both finite numbers, otherwise returns <code>false</code>. …\n"],["finite?","Float","Float.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <code>self</code> is not <code>Infinity</code>, <code>-Infinity</code>, or <code>NaN</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">2.0</span>      <span class=\"ruby-comment\"># =&gt; 2.0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">finite?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["finite?","Numeric","Numeric.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <code>num</code> is a finite number, otherwise returns <code>false</code>.\n"],["fips_mode","OpenSSL","OpenSSL.html#method-c-fips_mode","()",""],["fips_mode=","OpenSSL","OpenSSL.html#method-c-fips_mode-3D","(p1)","<p>Turns FIPS mode on or off. Turning on FIPS mode will obviously only have an effect for FIPS-capable installations …\n"],["first","Array","Array.html#method-i-first","(*args)","<p>Returns elements from <code>self</code>; does not modify <code>self</code>.\n<p>When no argument is given, returns the first element: …\n"],["first","Enumerable","Enumerable.html#method-i-first","(*args)","<p>Returns the first element or elements.\n<p>With no argument, returns the first element, or <code>nil</code> if there is …\n"],["first","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-first","(*args)","<p>Returns the first number in this arithmetic sequence, or an array of the first <code>n</code> elements.\n"],["first","Gem::SourceList","Gem/SourceList.html#method-i-first","()","<p>Returns the first source in the list.\n"],["first","Range","Range.html#method-i-first","(p1)","<p>With no argument, returns the first element of <code>self</code>, if it exists:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">first</span>     <span class=\"ruby-comment\"># =&gt; 1</span>\n(<span class=\"ruby-string\">&#39;a&#39;</span><span class=\"ruby-operator\">..</span><span class=\"ruby-string\">&#39;d&#39;</span>).<span class=\"ruby-identifier\">first</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["first?","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-first-3F","()","<p>This is used as a predicate, and ought to be called first.\n"],["first_column","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-first_column","()","<p>The column number in the source code where this AST’s text began.\n"],["first_lineno","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-first_lineno","()","<p>The line number in the source code where this AST’s text began.\n"],["first_lineno","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-first_lineno","()","<p>Returns the number of the first source line where the instruction sequence was loaded from.\n<p>For example, …\n"],["fix","BigDecimal","BigDecimal.html#method-i-fix","()","<p>Return the integer part of the number, as a BigDecimal.\n"],["fix","Racc::SymbolTable","Racc/SymbolTable.html#method-i-fix","()",""],["fix_basic_object_inheritance","RDoc::Store","RDoc/Store.html#method-i-fix_basic_object_inheritance","()","<p>Fixes the erroneous <code>BasicObject &lt; Object</code> in 1.9.\n<p>Because we assumed all classes without a stated superclass …\n"],["fix_ident","Racc::Grammar","Racc/Grammar.html#method-i-fix_ident","()","<p>Rule#ident LocationPointer#ident\n"],["fix_ident","Racc::SymbolTable","Racc/SymbolTable.html#method-i-fix_ident","()",""],["fixed_anchor?","StringScanner","StringScanner.html#method-i-fixed_anchor-3F","()","<p>Whether <code>scanner</code> uses fixed anchor mode or not.\n<p>If fixed anchor mode is used, <code>\\A</code> always matches the beginning …\n"],["fixed_encoding?","Regexp","Regexp.html#method-i-fixed_encoding-3F","()","<p>Returns <code>false</code> if <code>self</code> is applicable to a string with any ASCII-compatible encoding; otherwise returns …\n"],["fixed_length_secure_compare","OpenSSL","OpenSSL.html#method-c-fixed_length_secure_compare","(p1, p2)","<p>Constant time memory comparison for fixed length strings, such as results of HMAC calculations.\n<p>Returns …\n"],["flags","Socket::Ifaddr","Socket/Ifaddr.html#method-i-flags","()","<p>Returns the flags of <em>ifaddr</em>.\n"],["flags=","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-flags-3D","(p1)","<p>Sets the default flags used by certificate chain verification performed with the Store.\n<p><em>flags</em> consists …\n"],["flags=","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-flags-3D","(p1)","<p>Sets the verification flags to the context. This overrides the default value set by Store#flags=.\n<p>See …\n"],["flat_map","Enumerable","Enumerable.html#method-i-flat_map","()","<p>Returns an array of flattened objects returned by the block.\n<p>With a block given, calls the block with …\n"],["flat_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-flat_map","()","<p>Returns a new lazy enumerator with the concatenated results of running <code>block</code> once for every element in …\n"],["flatten","Array","Array.html#method-i-flatten","(*args)","<p>Returns a new Array that is a recursive flattening of <code>self</code>:\n<p>Each non-Array element is unchanged.\n<p>Each  …\n"],["flatten","Hash","Hash.html#method-i-flatten","(*args)","<p>Returns a new Array object that is a 1-dimensional flattening of <code>self</code>.\n<p>By default, nested Arrays are not …\n"],["flatten","Set","Set.html#method-i-flatten","()","<p>Returns a new set that is a copy of the set, flattening each\ncontaining set recursively.\n"],["flatten!","Array","Array.html#method-i-flatten-21","(*args)","<p>Replaces each nested Array in <code>self</code> with the elements from that Array; returns <code>self</code> if any changes, <code>nil</code> …\n"],["flatten!","Set","Set.html#method-i-flatten-21","()","<p>Equivalent to Set#flatten, but replaces the receiver with the\nresult in place. Returns nil if no modifications ...\n"],["flock","CSV","CSV.html#method-i-flock","(*args)",""],["flock","File","File.html#method-i-flock","(p1)","<p>Locks or unlocks a file according to <em>locking_constant</em> (a logical <em>or</em> of the values in the table below). …\n"],["floor","BigDecimal","BigDecimal.html#method-i-floor","(p1 = v1)","<p>Return the largest integer less than or equal to the value, as a BigDecimal.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;3.14159&#39;</span>).<span class=\"ruby-identifier\">floor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["floor","Float","Float.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>self</code> with a precision of <code>ndigits</code> decimal digits.\n<p>When …\n"],["floor","Integer","Integer.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>self</code> with a precision of <code>ndigits</code> decimal digits.\n<p>When …\n"],["floor","Numeric","Numeric.html#method-i-floor","(*args)","<p>Returns the largest number that is less than or equal to <code>self</code> with a precision of <code>digits</code> decimal digits. …\n"],["floor","Rational","Rational.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>rat</code> with a precision of <code>ndigits</code> decimal digits (default: …\n"],["floor","Time","Time.html#method-i-floor","(*args)","<p>Returns a new Time object whose numerical value is less than or equal to <code>self</code> with its seconds truncated …\n"],["flush","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-flush","()","<p>Flushes the TarWriter’s IO\n"],["flush","Gem::SilentUI::NullIO","Gem/SilentUI/NullIO.html#method-i-flush","()",""],["flush","IO","IO.html#method-i-flush","()","<p>Flushes data buffered in <code>self</code> to the operating system (but does not necessarily flush data buffered in …\n"],["flush","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-flush","()","<p>Flushes buffered data to the SSLSocket.\n"],["flush","PrettyPrint","PrettyPrint.html#method-i-flush","()","<p>outputs buffered data.\n"],["flush","StringIO","StringIO.html#method-i-flush","()","<p>Returns an object itself.  Just for compatibility to IO.\n"],["flush","Win32::Registry","Win32/Registry.html#method-i-flush","()","<p>Write all the attributes into the registry file.\n"],["flush","Zlib::Deflate","Zlib/Deflate.html#method-i-flush","(p1 = v1)","<p>This method is equivalent to <code>deflate(&#39;&#39;, flush)</code>. This method is just provided to improve the …\n"],["flush","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-flush","(p1 = v1)","<p>Flushes all the internal buffers of the GzipWriter object.  The meaning of <code>flush</code> is same as in Zlib::Deflate#deflate …\n"],["flush_buffer","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-flush_buffer","(out, buf, chunked_p)",""],["flush_delayed","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-flush_delayed","()",""],["flush_deleted","SyntaxSuggest::PriorityEngulfQueue","SyntaxSuggest/PriorityEngulfQueue.html#method-i-flush_deleted","()",""],["flush_left","RDoc::Text","RDoc/Text.html#method-i-flush_left","(text)","<p>Flush <code>text</code> left based on the shortest line\n"],["flush_next_in","Zlib::ZStream","Zlib/ZStream.html#method-i-flush_next_in","()",""],["flush_next_out","Zlib::ZStream","Zlib/ZStream.html#method-i-flush_next_out","()","<p>Flushes output buffer and returns all data in that buffer.  If a block is given each chunk is yielded …\n"],["flush_sessions","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-flush_sessions","(p1 = v1)","<p>Removes sessions in the internal cache that have expired at <em>time</em>.\n"],["fname?","SyntaxSuggest::LexValue","SyntaxSuggest/LexValue.html#method-i-fname-3F","()",""],["fnmatch","File","File.html#method-c-fnmatch","(pattern, path, flags = 0)","<p>Returns true if <code>path</code> matches against <code>pattern</code>.  The pattern is not a regular expression; instead it follows …\n"],["fnmatch","Pathname","Pathname.html#method-i-fnmatch","(p1, p2 = v2)","<p>Return <code>true</code> if the receiver matches the given pattern.\n<p>See File.fnmatch.\n"],["fnmatch?","File","File.html#method-c-fnmatch-3F","(pattern, path, flags = 0)",""],["fnmatch?","Pathname","Pathname.html#method-i-fnmatch-3F","(p1, p2 = v2)","<p>Return <code>true</code> if the receiver matches the given pattern.\n<p>See File.fnmatch.\n"],["footer","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-footer","()",""],["for","IO::Buffer","IO/Buffer.html#method-c-for","(p1)","<p>Creates a IO::Buffer from the given string’s memory. Without a block a frozen internal copy of the …\n"],["for","RDoc::Parser","RDoc/Parser.html#method-c-for","(top_level, file_name, content, options, stats)","<p>Finds and instantiates the correct parser for the given <code>file_name</code> and <code>content</code>.\n"],["for","URI","URI.html#method-c-for","(scheme, *arguments, default: Generic)","<p>Construct a URI instance, using the scheme to detect the appropriate class from <code>URI.scheme_list</code>.\n"],["for_cache","Gem::Specification","Gem/Specification.html#method-i-for_cache","()","<p>Creates a duplicate spec without large blobs that aren’t used at runtime.\n"],["for_current_gems","Gem::Resolver","Gem/Resolver.html#method-c-for_current_gems","(needed)","<p>Creates a Resolver that queries only against the already installed gems for the <code>needed</code> dependencies. …\n"],["for_fd","BasicSocket","BasicSocket.html#method-c-for_fd","(p1)","<p>Returns a socket object which contains the file descriptor, <em>fd</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># If invoked by inetd, STDIN/STDOUT/STDERR ...</span>\n</pre>\n"],["for_fd","IO","IO.html#method-c-for_fd","(*args)","<p>Synonym for IO.new.\n"],["for_spec","Gem::Installer","Gem/Installer.html#method-c-for_spec","(spec, options = {})","<p>Construct an installer object for an ephemeral gem (one where we don’t actually have a .gem file, …\n"],["for_spec?","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-for_spec-3F","(spec)","<p>Returns true if the conflicting dependency’s name matches <code>spec</code>.\n"],["force","Enumerator::Lazy","Enumerator/Lazy.html#method-i-force","()","<p>Expands <code>lazy</code> enumerator to an array. See Enumerable#to_a.\n"],["force_documentation=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-force_documentation-3D","(value)","<p>Force the documentation of this object unless documentation has been turned off by :enddoc:\n"],["force_encoding","String","String.html#method-i-force_encoding","(p1)","<p>Changes the encoding of <code>self</code> to <code>encoding</code>, which may be a string encoding name or an Encoding object; …\n"],["force_quotes?","CSV","CSV.html#method-i-force_quotes-3F","()","<p>Returns the value that determines whether all output fields are to be quoted; used for generating; see …\n"],["foreach","Addrinfo","Addrinfo.html#method-c-foreach","(nodename, service, family=nil, socktype=nil, protocol=nil, flags=nil, timeout: nil, &block)","<p>iterates over the list of Addrinfo objects obtained by Addrinfo.getaddrinfo.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">foreach</span>(<span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-value\">80</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["foreach","CSV","CSV.html#method-c-foreach","(path, mode=\"r\", **options, &block)","<p>Calls the block with each row read from source <code>path_or_io</code>.\n<p>Path input without headers:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">string</span> = <span class=\"ruby-string\">&quot;foo,0\\nbar,1\\nbaz,2\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["foreach","Dir","Dir.html#method-c-foreach","(*args)","<p>Calls the block once for each entry in the named directory, passing the filename of each entry as a parameter …\n"],["foreach","IO","IO.html#method-c-foreach","(p1, p2 = v2, p3 = v3, p4 = {})","<p>Calls the block with each successive line read from the stream.\n<p>When called from class IO (but not subclasses …\n"],["fork","Kernel","Kernel.html#method-i-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the subprocess, and the subprocess …\n"],["fork","Process","Process.html#method-c-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the subprocess, and the subprocess …\n"],["fork","Thread","Thread.html#method-c-fork","(*args)","<p>Basically the same as ::new. However, if class Thread is subclassed, then calling <code>start</code> in that subclass …\n"],["form","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-form","(method = \"post\", action = script_name, enctype = \"application/x-www-form-urlencoded\")","<p>Generate a Form element as a string.\n<p><code>method</code> should be either “get” or “post”, and …\n"],["form_data=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-form_data-3D","(params, sep = '&')",""],["format","Benchmark::Tms","Benchmark/Tms.html#method-i-format","(format = nil, *args)","<p>Returns the contents of this Tms object as a formatted string, according to a <code>format</code> string like that …\n"],["format","IRB::Locale","IRB/Locale.html#method-i-format","(*opts)",""],["format","Kernel","Kernel.html#method-i-format","(*args)","<p>Returns the string resulting from formatting <code>objects</code> into <code>format_string</code>.\n<p>For details on <code>format_string</code> …\n"],["format","PrettyPrint","PrettyPrint.html#method-c-format","(output=''.dup, maxwidth=79, newline=\"\\n\", genspace=lambda {|n| ' ' * n})","<p>This is a convenience method which is same as follows:\n\n<pre>begin\n  q = PrettyPrint.new(output, maxwidth, newline, ...</pre>\n"],["format","SyntaxSuggest::DisplayCodeWithLineNumbers","SyntaxSuggest/DisplayCodeWithLineNumbers.html#method-i-format","(contents:, number:, empty:, highlight: false)",""],["format=","RDoc::Comment","RDoc/Comment.html#method-i-format-3D","(format)","<p>Sets the format of this comment and resets any parsed document\n"],["format_datetime","Logger::Formatter","Logger/Formatter.html#method-i-format_datetime","(time)",""],["format_line","SyntaxSuggest::DisplayCodeWithLineNumbers","SyntaxSuggest/DisplayCodeWithLineNumbers.html#method-i-format_line","(code_line)",""],["format_message","Logger","Logger.html#method-i-format_message","(severity, datetime, progname, msg)",""],["format_severity","Logger","Logger.html#method-i-format_severity","(severity)",""],["format_text","Gem::Text","Gem/Text.html#method-i-format_text","(text, wrap, indent=0)","<p>Wraps <code>text</code> to <code>wrap</code> characters and optionally indents by <code>indent</code> characters\n"],["format_time","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-i-format_time","(time)","<p>This is ported over from the yaml_tree in 1.9.3\n"],["format_time","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-format_time","(time, utc = time.utc?)",""],["formatted_program_filename","Gem::Installer","Gem/Installer.html#method-i-formatted_program_filename","(filename)","<p>Prefix and suffix the program filename the same as ruby.\n"],["formatter","DidYouMean","DidYouMean.html#method-c-formatter","()","<p>Returns the currently set formatter. By default, it is set to <code>DidYouMean::Formatter</code>.\n"],["formatter","ErrorHighlight","ErrorHighlight.html#method-c-formatter","()",""],["formatter=","DidYouMean","DidYouMean.html#method-c-formatter-3D","(formatter)","<p>Updates the primary formatter used to format the suggestions.\n"],["formatter=","ErrorHighlight","ErrorHighlight.html#method-c-formatter-3D","(formatter)",""],["forward_char","Reline::LineEditor","Reline/LineEditor.html#method-i-forward_char","(key, arg: 1)",""],["forward_search_history","Reline::LineEditor","Reline/LineEditor.html#method-i-forward_search_history","(key)",""],["forward_word","Reline::LineEditor","Reline/LineEditor.html#method-i-forward_word","(key)",""],["frac","BigDecimal","BigDecimal.html#method-i-frac","()","<p>Return the fractional part of the number, as a BigDecimal.\n"],["fragment=","URI::Generic","URI/Generic.html#method-i-fragment-3D","(v)","<p>Checks the fragment <code>v</code> component against the URI::Parser Regexp for :FRAGMENT.\n<p>Args\n<p><code>v</code> &mdash; String\n"],["free","Fiddle","Fiddle.html#method-c-free","(p1)","<p>Free the memory at address <code>addr</code>\n"],["free","Fiddle::Closure","Fiddle/Closure.html#method-i-free","()","<p>Free this closure explicitly. You can’t use this closure anymore.\n<p>If this closure is already freed, …\n"],["free","Fiddle::Pointer","Fiddle/Pointer.html#method-i-free","()","<p>Get the free function for this pointer.\n<p>Returns a new instance of Fiddle::Function.\n<p>See Fiddle::Function.new …\n"],["free","IO::Buffer","IO/Buffer.html#method-i-free","()","<p>If the buffer references memory, release it back to the operating system.\n<p>for a <em>mapped</em> buffer (e.g. from …\n"],["free=","Fiddle::Pointer","Fiddle/Pointer.html#method-i-free-3D","(p1)","<p>Set the free function for this pointer to <code>function</code> in the given Fiddle::Function.\n"],["freed?","Fiddle::Closure","Fiddle/Closure.html#method-i-freed-3F","()","<p>Whether this closure was freed explicitly.\n"],["freed?","Fiddle::Pointer","Fiddle/Pointer.html#method-i-freed-3F","()","<p>Returns if the free function for this pointer has been called.\n"],["freeze","Delegator","Delegator.html#method-i-freeze","()","<p>:method: freeze Freeze both the object returned by _<em>getobj</em>_ and self.\n"],["freeze","ENV","ENV.html#method-c-freeze","()","<p>Raises an exception:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">freeze</span> <span class=\"ruby-comment\"># Raises TypeError (cannot freeze ENV)</span>\n</pre>\n"],["freeze","Gem::Version","Gem/Version.html#method-i-freeze","()",""],["freeze","Module","Module.html#method-i-freeze","()","<p>Prevents further modifications to <em>mod</em>.\n<p>This method returns self.\n"],["freeze","Object","Object.html#method-i-freeze","()","<p>Prevents further modifications to <em>obj</em>. A FrozenError will be raised if modification is attempted. There …\n"],["freeze","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-freeze","()","<p>This method is called automatically when a new SSLSocket is created. However, it is not thread-safe and …\n"],["freeze","OpenStruct","OpenStruct.html#method-i-freeze","()",""],["freeze","Pathname","Pathname.html#method-i-freeze","()","<p>Freezes this Pathname.\n<p>See Object.freeze.\n"],["freeze","String","String.html#method-i-freeze","()",""],["frexp","Math","Math.html#method-c-frexp","(p1)","<p>Returns a 2-element array containing the normalized signed float <code>fraction</code> and integer <code>exponent</code> of <code>x</code> such …\n"],["friday?","Date","Date.html#method-i-friday-3F","()","<p>Returns <code>true</code> if <code>self</code> is a Friday, <code>false</code> otherwise.\n"],["friday?","Time","Time.html#method-i-friday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Friday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">7</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-07 00:00:00 ...</span>\n</pre>\n"],["friendly_path","RDoc::Store","RDoc/Store.html#method-i-friendly_path","()","<p>Friendly rendition of #path\n"],["from","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-from","(stream)","<p>Creates a tar header from IO <code>stream</code>\n"],["from","Gem::SourceList","Gem/SourceList.html#method-c-from","(ary)","<p>Creates a new SourceList from an array of sources.\n"],["from_file","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-c-from_file","(file)",""],["from_hash","JSON::GenericObject","JSON/GenericObject.html#method-c-from_hash","(object)",""],["from_list","Gem::NameTuple","Gem/NameTuple.html#method-c-from_list","(list)","<p>Turn an array of [name, version, platform] into an array of NameTuple objects.\n"],["from_module","RDoc::ClassModule","RDoc/ClassModule.html#method-c-from_module","(class_type, mod)","<p>Return a RDoc::ClassModule of class <code>class_type</code> that is a copy of module <code>module</code>. Used to promote modules …\n"],["from_name","Process::GID","Process/GID.html#method-c-from_name","(p1)","<p>Get the group ID by the <em>name</em>. If the group is not found, <code>ArgumentError</code> will be raised.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">GID</span>.<span class=\"ruby-identifier\">from_name</span>(<span class=\"ruby-string\">&quot;wheel&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["from_name","Process::UID","Process/UID.html#method-c-from_name","(p1)","<p>Get the user ID by the <em>name</em>. If the user is not found, <code>ArgumentError</code> will be raised.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UID</span>.<span class=\"ruby-identifier\">from_name</span>(<span class=\"ruby-string\">&quot;root&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["from_source","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-c-from_source","(source, lines: nil)","<p>Returns an array of CodeLine objects from the source string\n"],["from_specs","Gem::DependencyList","Gem/DependencyList.html#method-c-from_specs","()","<p>Creates a DependencyList from the current specs.\n"],["from_state","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-c-from_state","(p1)","<p>Creates a State object from <em>opts</em>, which ought to be Hash to create a new State instance configured by …\n"],["from_yaml","Gem::Specification","Gem/Specification.html#method-c-from_yaml","(input)","<p>Special loader for YAML files.  When a Specification object is loaded from a YAML file, it bypasses the …\n"],["front","DRb","DRb.html#method-c-front","()","<p>Get the front object of the current server.\n<p>This raises a DRbServerNotFound error if there is no current …\n"],["front","DRb","DRb.html#method-i-front","()","<p>Get the front object of the current server.\n<p>This raises a DRbServerNotFound error if there is no current …\n"],["front","DRb::ExtServ","DRb/ExtServ.html#method-i-front","()",""],["frozen?","Kernel","Kernel.html#method-i-frozen-3F","()","<p>Returns the freeze status of <em>obj</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">freeze</span>    <span class=\"ruby-comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">frozen?</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["frozen_bundle?","Bundler","Bundler.html#method-c-frozen_bundle-3F","()",""],["fsync","IO","IO.html#method-i-fsync","()","<p>Immediately writes to disk all data buffered in the stream, via the operating system’s <code>fsync(2)</code>. …\n"],["fsync","StringIO","StringIO.html#method-i-fsync","()","<p>Returns 0.  Just for compatibility to IO.\n"],["ftype","File","File.html#method-c-ftype","(p1)","<p>Identifies the type of the named file; the return string is one of “<code>file</code>”, “<code>directory</code>”, …\n"],["ftype","File::Stat","File/Stat.html#method-i-ftype","()","<p>Identifies the type of <em>stat</em>. The return string is one of: “<code>file</code>”, “<code>directory</code>”, “ …\n"],["ftype","Pathname","Pathname.html#method-i-ftype","()","<p>Returns “type” of file (“file”, “directory”, etc).\n<p>See File.ftype.\n"],["fu_blksize","FileUtils::StreamUtils_","FileUtils/StreamUtils_.html#method-i-fu_blksize","(st)",""],["fu_clean_components","FileUtils","FileUtils.html#method-i-fu_clean_components","(*comp)",""],["fu_default_blksize","FileUtils::StreamUtils_","FileUtils/StreamUtils_.html#method-i-fu_default_blksize","()",""],["fu_split_path","FileUtils","FileUtils.html#method-i-fu_split_path","(path)",""],["fu_starting_path?","FileUtils","FileUtils.html#method-i-fu_starting_path-3F","(path)",""],["fu_stream_blksize","FileUtils::StreamUtils_","FileUtils/StreamUtils_.html#method-i-fu_stream_blksize","(*streams)",""],["fu_windows?","FileUtils::StreamUtils_","FileUtils/StreamUtils_.html#method-i-fu_windows-3F","()",""],["full_gem_path","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-full_gem_path","()","<p>The full path to the gem (install path + full name).\n"],["full_message","Exception","Exception.html#method-i-full_message","(p1 = {})","<p>Returns formatted string of <em>exception</em>. The returned string is formatted using the same format that Ruby …\n"],["full_name","DidYouMean::ClassNameChecker::ClassName","DidYouMean/ClassNameChecker/ClassName.html#method-i-full_name","()",""],["full_name","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-full_name","()","<p>Returns the full name (name-version) of this Gem.  Platform information is included (name-version-platform) …\n"],["full_name","Gem::NameTuple","Gem/NameTuple.html#method-i-full_name","()","<p>Returns the full name (name-version) of this Gem.  Platform information is included if it is not the …\n"],["full_name","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-full_name","()","<p>Full name of the tar entry\n"],["full_name","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-full_name","()","<p>The full name of the specification to be activated.\n"],["full_name","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-full_name","()","<p>The name and version of the specification.\n<p>Unlike Gem::Specification#full_name, the platform is not included. …\n"],["full_name","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-full_name","()","<p>The name and version of the specification.\n<p>Unlike Gem::Specification#full_name, the platform is not included. …\n"],["full_name","Gem::Specification","Gem/Specification.html#method-i-full_name","()",""],["full_name","RDoc::ClassModule","RDoc/ClassModule.html#method-i-full_name","()","<p>Return the fully qualified name of this class or module\n"],["full_name","RDoc::Constant","RDoc/Constant.html#method-i-full_name","()","<p>Full constant name including namespace\n"],["full_name","RDoc::Context","RDoc/Context.html#method-i-full_name","()","<p>The full name for this context.  This method is overridden by subclasses.\n"],["full_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-full_name","()","<p>Full method/attribute name including namespace\n"],["full_name","RDoc::Mixin","RDoc/Mixin.html#method-i-full_name","()","<p>Full name based on #module\n"],["full_name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-full_name","()","<p>Returns the relative name of this file\n"],["full_name=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-full_name-3D","(full_name)","<p>Sets the full_name overriding any computed full name.\n<p>Set to <code>nil</code> to clear RDoc’s cached value\n"],["full_old_name","RDoc::Alias","RDoc/Alias.html#method-i-full_old_name","()","<p>Full old name including namespace\n"],["full_require_paths","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-full_require_paths","()","<p>Full paths in the gem to add to <code>$LOAD_PATH</code> when this gem is activated.\n"],["full_spec","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-full_spec","()","<p>The Gem::Specification for this activation request.\n"],["fully_documented?","RDoc::Context","RDoc/Context.html#method-i-fully_documented-3F","()","<p>Does this context and its methods and constants all have documentation?\n<p>(Yes, fully documented doesn’t …\n"],["fully_documented?","RDoc::Stats","RDoc/Stats.html#method-i-fully_documented-3F","()","<p>The documentation status of this project.  <code>true</code> when 100%, <code>false</code> when less than 100% and <code>nil</code> when unknown. …\n"],["gamma","Math","Math.html#method-c-gamma","(p1)","<p>Returns the value of the gamma function for <code>x</code>.\n<p>Domain: <code>(-INFINITY, INFINITY]</code> excluding negative integers. …\n"],["garbage_collect","GC","GC.html#method-i-garbage_collect","(full_mark: true, immediate_mark: true, immediate_sweep: true)",""],["garbage_collect","ObjectSpace","ObjectSpace.html#method-c-garbage_collect","(full_mark: true, immediate_mark: true, immediate_sweep: true)",""],["garbage_collect","ObjectSpace","ObjectSpace.html#method-i-garbage_collect","(full_mark: true, immediate_mark: true, immediate_sweep: true)",""],["gather_files","RDoc::RDoc","RDoc/RDoc.html#method-i-gather_files","(files)","<p>Gathers a set of parseable files from the files and directories listed in <code>files</code>.\n"],["gcd","Integer","Integer.html#method-i-gcd","(p1)","<p>Returns the greatest common divisor of the two integers. The result is always positive. 0.gcd(x) and …\n"],["gcd","OpenSSL::BN","OpenSSL/BN.html#method-i-gcd","(p1)",""],["gcdlcm","Integer","Integer.html#method-i-gcdlcm","(p1)","<p>Returns an array with the greatest common divisor and the least common multiple of the two integers, …\n"],["gem","Gem::Installer","Gem/Installer.html#method-i-gem","()","<p>Filename of the gem being installed.\n"],["gem","Gem::RequestSet","Gem/RequestSet.html#method-i-gem","(name, *reqs)","<p>Declare that a gem of name <code>name</code> with <code>reqs</code> requirements is needed.\n"],["gem","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-gem","(name, *requirements)","<p>Specifies a gem dependency with the given <code>name</code> and <code>requirements</code>.  You may also supply <code>options</code> following …\n"],["gem","Kernel","Kernel.html#method-i-gem","(gem_name, *requirements)","<p>Use Kernel#gem to activate a specific version of <code>gem_name</code>.\n<p><code>requirements</code> is a list of version requirements …\n"],["gem_contents","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-gem_contents","(name)",""],["gem_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-gem_dir","()","<p>Returns the full path to this spec’s gem directory. eg: /usr/local/lib/ruby/1.8/gems/mygem-1.0\n"],["gem_dir","Gem::Installer","Gem/Installer.html#method-i-gem_dir","()","<p>Lazy accessor for the spec’s gem directory.\n"],["gem_file_list","Gem::Indexer","Gem/Indexer.html#method-i-gem_file_list","()","<p>List of gem file names to index.\n"],["gem_install_dir","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-gem_install_dir","(name)",""],["gem_name","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-gem_name","()",""],["gem_name?","Gem::QueryUtils","Gem/QueryUtils.html#method-i-gem_name-3F","()",""],["gem_repository?","Gem::Doctor","Gem/Doctor.html#method-i-gem_repository-3F","()","<p>Are we doctoring a gem repository?\n"],["gemdeps_load","Gem::Installer","Gem/Installer.html#method-i-gemdeps_load","(name)",""],["gems_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-gems_dir","()","<p>Returns the full path to the gems directory containing this spec’s gem directory. eg: /usr/local/lib/ruby/1.8/gems …\n"],["gems_dir","Gem::Specification","Gem/Specification.html#method-i-gems_dir","()",""],["gemspec","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-gemspec","(options = {})","<p>Loads dependencies from a gemspec file.\n<p><code>options</code> include:\n<p>name:  &mdash; The name portion of the gemspec file.  …\n"],["gemspec_stubs_in","Gem::Specification","Gem/Specification.html#method-c-gemspec_stubs_in","(dir, pattern)",""],["gen_action_tables","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-gen_action_tables","(t, states)",""],["gen_body_table","RDoc::Parser::C","RDoc/Parser/C.html#method-i-gen_body_table","(file_content)","<p>Generate a Ruby-method table\n"],["gen_const_table","RDoc::Parser::C","RDoc/Parser/C.html#method-i-gen_const_table","(file_content)","<p>Generate a const table\n"],["gen_goto_tables","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-gen_goto_tables","(t, grammar)",""],["gen_random","Random::Formatter","Random/Formatter.html#method-i-gen_random","(n)",""],["gen_random","SecureRandom","SecureRandom.html#method-c-gen_random","(n)",""],["gen_random_openssl","SecureRandom","SecureRandom.html#method-c-gen_random_openssl","(n)",""],["gen_random_urandom","SecureRandom","SecureRandom.html#method-c-gen_random_urandom","(n)",""],["gen_time","OpenSSL::Timestamp::TokenInfo","OpenSSL/Timestamp/TokenInfo.html#method-i-gen_time","()","<p>Returns time when this timestamp token was created. If status is GRANTED or GRANTED_WITH_MODS, this is …\n"],["generate","CSV","CSV.html#method-c-generate","(str=nil, **options)","<p>Argument <code>csv_string</code>, if given, must be a String object; defaults to a new empty String.\n<p>Arguments <code>options</code> …\n\n"],["generate","JSON","JSON.html#method-i-generate","(obj, opts = nil)","<p>Returns a String containing the generated JSON data.\n<p>See also JSON.fast_generate, JSON.pretty_generate …\n"],["generate","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-generate","(p1)","<p>Generates a valid JSON document from object <code>obj</code> and returns the result. If no valid JSON document can …\n"],["generate","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-c-generate","(size, generator = 2, &blk)","<p>Creates a new DH instance from scratch by generating random parameters and a key pair.\n<p>See also OpenSSL::PKey.generate_parameters …\n"],["generate","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-c-generate","(size, &blk)","<p>Creates a new DSA instance by generating a private/public key pair from scratch.\n<p>See also OpenSSL::PKey.generate_parameters …\n"],["generate","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-c-generate","(p1)","<p>Creates a new EC instance with a new random private and public key.\n"],["generate","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-c-generate","(size, exp = 0x10001, &blk)","<p>Generates an RSA keypair.\n<p>See also OpenSSL::PKey.generate_key.\n<p><code>size</code> &mdash; The desired key size in bits.\n"],["generate","RDoc::RDoc","RDoc/RDoc.html#method-i-generate","()","<p>Generates documentation for <code>file_info</code> (from #parse_files) into the output dir using the generator selected …\n"],["generate","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-generate","()","<p>Generates RDoc and ri data\n"],["generate","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-generate","()","<p>Generates RDoc and ri data\n"],["generate","Racc::ParserClassGenerator","Racc/ParserClassGenerator.html#method-i-generate","()",""],["generate","Racc::StateTransitionTable","Racc/StateTransitionTable.html#method-c-generate","(states)",""],["generate","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-generate","()",""],["generate_bin_script","Gem::Installer","Gem/Installer.html#method-i-generate_bin_script","(filename, bindir)","<p>Creates the scripts to run the applications in the gem.\n"],["generate_bin_symlink","Gem::Installer","Gem/Installer.html#method-i-generate_bin_symlink","(filename, bindir)","<p>Creates the symlinks to run the applications in the gem.  Moves the symlink if the gem being installed …\n"],["generate_canonical_query_params","Gem::S3URISigner","Gem/S3URISigner.html#method-i-generate_canonical_query_params","(s3_config, date_time, credential_info, expiration)",""],["generate_canonical_request","Gem::S3URISigner","Gem/S3URISigner.html#method-i-generate_canonical_request","(canonical_host, query_params)",""],["generate_default_dirs","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-generate_default_dirs","()",""],["generate_default_man_dir","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-generate_default_man_dir","()",""],["generate_index","Gem::Indexer","Gem/Indexer.html#method-i-generate_index","()","<p>Builds and installs indices.\n"],["generate_key","OpenSSL::PKey","OpenSSL/PKey.html#method-c-generate_key","(*args)","<p>Generates a new key (pair).\n<p>If a String is given as the first argument, it generates a new random key …\n"],["generate_key","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-generate_key","()","<p>Generates a new random private and public key.\n<p>See also the OpenSSL documentation for EC_KEY_generate_key …\n"],["generate_key!","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-generate_key-21","()","<p>Generates a private and public key unless a private key already exists. If this DH instance was generated …\n"],["generate_key!","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-generate_key-21","()","<p>Generates a new random private and public key.\n<p>See also the OpenSSL documentation for EC_KEY_generate_key …\n"],["generate_line","CSV","CSV.html#method-c-generate_line","(row, **options)","<p>Returns the String created by generating CSV from <code>ary</code> using the specified <code>options</code>.\n<p>Argument <code>ary</code> must be …\n"],["generate_lines","CSV","CSV.html#method-c-generate_lines","(rows, **options)","<p>Returns the String created by generating CSV from using the specified <code>options</code>.\n<p>Argument <code>rows</code> must be an …\n"],["generate_parameters","OpenSSL::PKey","OpenSSL/PKey.html#method-c-generate_parameters","(*args)","<p>Generates new parameters for the algorithm. <em>algo_name</em> is a String that represents the algorithm. The …\n"],["generate_parser","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-generate_parser","()",""],["generate_parser_file","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-generate_parser_file","(destpath)",""],["generate_prime","OpenSSL::BN","OpenSSL/BN.html#method-c-generate_prime","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Generates a random prime number of bit length <em>bits</em>. If <em>safe</em> is set to <code>true</code>, generates a safe prime.  …\n"],["generate_searcher","Reline::LineEditor","Reline/LineEditor.html#method-i-generate_searcher","()",""],["generate_signature","Gem::S3URISigner","Gem/S3URISigner.html#method-i-generate_signature","(s3_config, date, string_to_sign)",""],["generate_snippet","ErrorHighlight::CoreExt","ErrorHighlight/CoreExt.html#method-i-generate_snippet","()",""],["generate_states","Racc::States","Racc/States.html#method-i-generate_states","(state)",""],["generate_string_to_sign","Gem::S3URISigner","Gem/S3URISigner.html#method-i-generate_string_to_sign","(date_time, credential_info, canonical_request)",""],["generate_windows_script","Gem::Installer","Gem/Installer.html#method-i-generate_windows_script","(filename, bindir)","<p>Creates windows .bat files for easy running of commands\n"],["generation_hook","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-generation_hook","(installer, specs)","<p>Post installs hook that generates documentation for each specification in <code>specs</code>\n"],["generation_hook","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-generation_hook","(installer, specs)","<p>Post installs hook that generates documentation for each specification in <code>specs</code>\n"],["generator","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-generator","()","<p>Returns the generator of the group.\n<p>See the OpenSSL documentation for EC_GROUP_get0_generator()\n"],["generator_descriptions","RDoc::Options","RDoc/Options.html#method-i-generator_descriptions","()","<p>Returns a properly-space list of generators and their descriptions.\n"],["generator_for","RDoc::Servlet","RDoc/Servlet.html#method-i-generator_for","(store)","<p>Instantiates a Darkfish generator for <code>store</code>\n"],["get","GetoptLong","GetoptLong.html#method-i-get","()","<p>Returns the next option as a 2-element array containing:\n<p>The option name (the name itself, not an alias). …\n"],["get","Net::HTTP","Net/HTTP.html#method-i-get","(path, initheader = nil, dest = nil)","<p>Retrieves data from <code>path</code> on the connected-to host which may be an absolute path String or a URI to extract …\n"],["get","Net::HTTP","Net/HTTP.html#method-c-get","(uri_or_host, path_or_headers = nil, port = nil)","<p>Sends a GET request and returns the HTTP response body as a string.\n<p>With string arguments <code>hostname</code> and …\n"],["get2","Net::HTTP","Net/HTTP.html#method-i-get2","(path, initheader = nil)",""],["get_all_gem_names","Gem::Command","Gem/Command.html#method-i-get_all_gem_names","()","<p>Get all gem names from the command line.\n"],["get_all_gem_names_and_versions","Gem::Command","Gem/Command.html#method-i-get_all_gem_names_and_versions","()","<p>Get all [gem, version] from the command line.\n<p>An argument in the form gem:ver is pull apart into the gen …\n"],["get_bool","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_bool","()","<p>Looks for a true or false token.\n"],["get_byte","StringScanner","StringScanner.html#method-i-get_byte","()","<p>Scans one byte and returns it. This method is not multibyte character sensitive. See also: #getch.\n\n<pre>s = ...</pre>\n"],["get_candidate_gems","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-get_candidate_gems","()",""],["get_candidates","OptionParser::List","OptionParser/List.html#method-i-get_candidates","(id)",""],["get_cert_files","Gem::Request","Gem/Request.html#method-c-get_cert_files","()",""],["get_class_or_module","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_class_or_module","(container, ignore_constants = false)","<p>Look for the name of a class of module (optionally with a leading  &mdash; or\n<p>with  &mdash; separated named) and return …\n\n"],["get_class_specification","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_class_specification","()","<p>Return a superclass, which can be either a constant of an expression\n"],["get_console_screen_buffer_info","Reline::Windows","Reline/Windows.html#method-c-get_console_screen_buffer_info","()",""],["get_constant","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_constant","()","<p>Parse a constant, which might be qualified by one or more class or module names\n"],["get_credentials","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-i-get_credentials","()","<p>Gets credentials based on user, domain or both. If both are nil, an error occurs\n"],["get_dns_server_list","Resolv","Resolv.html#method-c-get_dns_server_list","()",""],["get_embdoc_tk","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-i-get_embdoc_tk","(tk)",""],["get_env_editor","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-get_env_editor","()",""],["get_fields","Net::HTTPHeader","Net/HTTPHeader.html#method-i-get_fields","(key)","<p>Returns the array field value for the given <code>key</code>, or <code>nil</code> if there is no such field; see Fields:\n\n<pre>res = Net::HTTP.get_response(hostname, ...</pre>\n"],["get_flags","OpenSSL::BN","OpenSSL/BN.html#method-i-get_flags","(p1)","<p>Returns the flags on the BN object. The argument is used as a bit mask.\n<p>Parameters\n<p><em>flags</em> - integer\n"],["get_gems_to_cleanup","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-get_gems_to_cleanup","()",""],["get_heredoc_tk","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-i-get_heredoc_tk","(heredoc_name, indent)",""],["get_hosts_dir","Resolv","Resolv.html#method-c-get_hosts_dir","()",""],["get_hosts_for","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-get_hosts_for","(name)",""],["get_hosts_path","Resolv","Resolv.html#method-c-get_hosts_path","()",""],["get_included_module_with_optional_parens","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_included_module_with_optional_parens","()","<p>Get an included module that may be surrounded by parens\n"],["get_info","Resolv","Resolv.html#method-c-get_info","()",""],["get_initial_token","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-i-get_initial_token","()","<p>Gets the initial Negotiate token. Returns it as a base64 encoded string suitable for use in HTTP. Can …\n"],["get_key_name","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-get_key_name","(scope)",""],["get_mbchar_byte_size_by_first_char","Reline::Unicode","Reline/Unicode.html#method-c-get_mbchar_byte_size_by_first_char","(c)",""],["get_mbchar_width","Reline::Unicode","Reline/Unicode.html#method-c-get_mbchar_width","(mbchar)",""],["get_method","Reline::KeyActor::Base","Reline/KeyActor/Base.html#method-i-get_method","(key)",""],["get_mfa_params","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-get_mfa_params","(profile)",""],["get_next_mbchar_size","Reline::Unicode","Reline/Unicode.html#method-c-get_next_mbchar_size","(line, byte_pointer)",""],["get_one_gem_name","Gem::Command","Gem/Command.html#method-i-get_one_gem_name","()","<p>Get a single gem name from the command line.  Fail if there is no gem name or if there is more than one …\n"],["get_one_optional_argument","Gem::Command","Gem/Command.html#method-i-get_one_optional_argument","()","<p>Get a single optional argument from the command line.  If more than one argument is given, return only …\n"],["get_op_tk","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-i-get_op_tk","(tk)",""],["get_option","GetoptLong","GetoptLong.html#method-i-get_option","()",""],["get_owner_scope","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-get_owner_scope","(method: nil)",""],["get_path","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-get_path","(dependency)","<p>Return the full path to the cached gem file matching the given name and version requirement.  Returns …\n"],["get_platform_from_requirements","Gem::VersionOption","Gem/VersionOption.html#method-i-get_platform_from_requirements","(requirements)","<p>Extract platform given on the command line\n"],["get_prev_mbchar_size","Reline::Unicode","Reline/Unicode.html#method-c-get_prev_mbchar_size","(line, byte_pointer)",""],["get_primary_gems","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-get_primary_gems","()",""],["get_print","Net::HTTP","Net/HTTP.html#method-c-get_print","(uri_or_host, path_or_headers = nil, port = nil)","<p>Like Net::HTTP.get, but writes the returned body to $stdout; returns <code>nil</code>.\n"],["get_proxy_from_env","Gem::Request","Gem/Request.html#method-c-get_proxy_from_env","(scheme = \"http\")","<p>Returns a proxy URI for the given <code>scheme</code> if one is set in the environment variables.\n"],["get_public_key","Gem::Security","Gem/Security.html#method-c-get_public_key","(key)","<p>Gets the right public key from a PKey instance\n"],["get_push_scope","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-get_push_scope","()",""],["get_quoted_re","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-get_quoted_re","(left)",""],["get_regexp_tk","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-i-get_regexp_tk","(tk)",""],["get_relative_path","Gem::Ext::ExtConfBuilder","Gem/Ext/ExtConfBuilder.html#method-c-get_relative_path","(path, base)",""],["get_renewer","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-get_renewer","(it)","<p>Returns a valid argument to make_expires and the renewer or nil.\n<p>Given <code>true</code>, <code>nil</code>, or Numeric, returns …\n"],["get_resolv_info","Resolv","Resolv.html#method-c-get_resolv_info","()",""],["get_response","Net::HTTP","Net/HTTP.html#method-c-get_response","(uri_or_host, path_or_headers = nil, port = nil, &block)","<p>Like Net::HTTP.get, but returns a Net::HTTPResponse object instead of the body string.\n"],["get_scope_params","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-get_scope_params","(scope)",""],["get_screen_size","Readline","Readline.html#method-c-get_screen_size","()","<p>Returns the terminal’s rows and columns.\n<p>See GNU Readline’s rl_get_screen_size function.\n<p>Raises …\n"],["get_screen_size","Reline::ANSI","Reline/ANSI.html#method-c-get_screen_size","()",""],["get_screen_size","Reline::Core","Reline/Core.html#method-i-get_screen_size","()",""],["get_screen_size","Reline::GeneralIO","Reline/GeneralIO.html#method-c-get_screen_size","()",""],["get_screen_size","Reline::Windows","Reline/Windows.html#method-c-get_screen_size","()",""],["get_set","Gem::Resolver::SourceSet","Gem/Resolver/SourceSet.html#method-i-get_set","(name)",""],["get_squashed_tk","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-i-get_squashed_tk","()",""],["get_string","IO::Buffer","IO/Buffer.html#method-i-get_string","(*args)","<p>Read a chunk or all of the buffer into a string, in the specified <code>encoding</code>. If no encoding is provided …\n"],["get_string_tk","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-i-get_string_tk","(tk)",""],["get_symbol_or_name","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_symbol_or_name","()","<p>Extracts a name or symbol from the token stream.\n"],["get_symbol_tk","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-i-get_symbol_tk","(tk)",""],["get_tk","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-get_tk","()","<p>Fetches the next token from the scanner\n"],["get_tk_until","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-get_tk_until","(*tokens)","<p>Reads and returns all tokens up to one of <code>tokens</code>.  Leaves the matched token in the token list.\n"],["get_tkread","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-get_tkread","()","<p>Retrieves a String representation of the read tokens\n"],["get_user_profile","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-get_user_profile","(email, password)",""],["get_value","IO::Buffer","IO/Buffer.html#method-i-get_value","(p1, p2)","<p>Read from buffer a value of <code>type</code> at <code>offset</code>. <code>data_type</code> should be one of symbols:\n<p><code>:U8</code>: unsigned integer, …\n"],["get_value","OpenSSL::Config","OpenSSL/Config.html#method-i-get_value","(p1, p2)","<p>Gets the value of <em>key</em> from the given <em>section</em>.\n<p>Given the following configurating file being loaded:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">config</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_values","IO::Buffer","IO/Buffer.html#method-i-get_values","(p1, p2)","<p>Similar to #get_value, except that it can handle multiple data types and returns an array of values. …\n"],["get_version_from_requirements","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-get_version_from_requirements","(requirements)",""],["get_words_tk","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-i-get_words_tk","(tk)",""],["get_yank_scope","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-get_yank_scope","()",""],["getaddress","IPSocket","IPSocket.html#method-c-getaddress","(p1)","<p>Lookups the IP address of <em>host</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;socket&#39;</span>\n\n<span class=\"ruby-constant\">IPSocket</span>.<span class=\"ruby-identifier\">getaddress</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>)     <span class=\"ruby-comment\">#=&gt; &quot;127.0.0.1&quot; ...</span>\n</pre>\n"],["getaddress","Resolv","Resolv.html#method-c-getaddress","(name)","<p>Looks up the first IP address for <code>name</code>.\n"],["getaddress","Resolv","Resolv.html#method-i-getaddress","(name)","<p>Looks up the first IP address for <code>name</code>.\n"],["getaddress","Resolv::DNS","Resolv/DNS.html#method-i-getaddress","(name)","<p>Gets the IP address of <code>name</code> from the DNS resolver.\n<p><code>name</code> can be a Resolv::DNS::Name or a String.  Retrieved …\n"],["getaddress","Resolv::Hosts","Resolv/Hosts.html#method-i-getaddress","(name)","<p>Gets the IP address of <code>name</code> from the hosts file.\n"],["getaddress_orig","IPSocket","IPSocket.html#method-c-getaddress_orig","(p1)",""],["getaddresses","Resolv","Resolv.html#method-c-getaddresses","(name)","<p>Looks up all IP address for <code>name</code>.\n"],["getaddresses","Resolv","Resolv.html#method-i-getaddresses","(name)","<p>Looks up all IP address for <code>name</code>.\n"],["getaddresses","Resolv::DNS","Resolv/DNS.html#method-i-getaddresses","(name)","<p>Gets all IP addresses for <code>name</code> from the DNS resolver.\n<p><code>name</code> can be a Resolv::DNS::Name or a String.  Retrieved …\n"],["getaddresses","Resolv::Hosts","Resolv/Hosts.html#method-i-getaddresses","(name)","<p>Gets all IP addresses for <code>name</code> from the hosts file.\n"],["getaddrinfo","Addrinfo","Addrinfo.html#method-c-getaddrinfo","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = {})","<p>returns a list of addrinfo objects as an array.\n<p>This method converts nodename (hostname) and service (port) …\n"],["getaddrinfo","Socket","Socket.html#method-c-getaddrinfo","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7)","<p>Obtains address information for <em>nodename</em>:<em>servname</em>.\n<p>Note that Addrinfo.getaddrinfo provides the same functionality …\n"],["getbyte","ARGF","ARGF.html#method-i-getbyte","()","<p>Gets the next 8-bit byte (0..255) from ARGF. Returns <code>nil</code> if called at the end of the stream.\n<p>For example: …\n"],["getbyte","IO","IO.html#method-i-getbyte","()","<p>Reads and returns the next byte (in range 0..255) from the stream; returns <code>nil</code> if already at end-of-stream. …\n"],["getbyte","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-getbyte","()","<p>Get the next 8bit byte from ‘ssl`.  Returns `nil` on EOF\n"],["getbyte","String","String.html#method-i-getbyte","(p1)","<p>Returns the byte at zero-based <code>index</code> as an integer, or <code>nil</code> if <code>index</code> is out of range:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;abcde&#39;</span>   <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["getbyte","StringIO","StringIO.html#method-i-getbyte","()","<p>Reads and returns the next 8-bit byte from the stream; see Byte IO.\n"],["getbyte","StringScanner","StringScanner.html#method-i-getbyte","()","<p>Equivalent to #get_byte. This method is obsolete; use #get_byte instead.\n"],["getbyte","Zlib::GzipReader","Zlib/GzipReader.html#method-i-getbyte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["getc","ARGF","ARGF.html#method-i-getc","()","<p>Reads the next character from ARGF and returns it as a String. Returns <code>nil</code> at the end of the stream. …\n"],["getc","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-getc","()","<p>Read one byte from the tar entry\n"],["getc","IO","IO.html#method-i-getc","()","<p>Reads and returns the next 1-character string from the stream; returns <code>nil</code> if already at end-of-stream. …\n"],["getc","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-getc","()","<p>Reads one character from the stream.  Returns nil if called at end of file.\n"],["getc","Reline::ANSI","Reline/ANSI.html#method-c-getc","()",""],["getc","Reline::GeneralIO","Reline/GeneralIO.html#method-c-getc","()",""],["getc","Reline::Windows","Reline/Windows.html#method-c-getc","()",""],["getc","StringIO","StringIO.html#method-i-getc","()","<p>Reads and returns the next character from the stream; see Character IO.\n"],["getc","Zlib::GzipReader","Zlib/GzipReader.html#method-i-getc","()","<p>See Zlib::GzipReader documentation for a description.\n"],["getc_with_bracketed_paste","Reline::ANSI","Reline/ANSI.html#method-c-getc_with_bracketed_paste","()",""],["getch","IO","IO.html#method-i-getch","(*args)","<p>Reads and returns a character in raw mode.\n<p>See IO#raw for details on the parameters.\n<p>You must require ‘io/console’ …\n"],["getch","IO::generic_readable","IO/generic_readable.html#method-i-getch","(*args)","<p>See IO#getch.\n"],["getch","StringScanner","StringScanner.html#method-i-getch","()","<p>Scans one character and returns it. This method is multibyte character sensitive.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">StringScanner</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;ab&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["getconsolemode","Reline::Windows","Reline/Windows.html#method-c-getconsolemode","()",""],["getegid","Process::Sys","Process/Sys.html#method-c-getegid","()","<p>Returns the effective group ID for this process. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["geteuid","Process::Sys","Process/Sys.html#method-c-geteuid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["getgid","Process::Sys","Process/Sys.html#method-c-getgid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["getgm","Time","Time.html#method-i-getgm","()","<p>Returns a new Time object representing the value of <code>self</code> converted to the UTC timezone:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">local</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["getgrent","Etc","Etc.html#method-c-getgrent","()","<p>Returns an entry from the <code>/etc/group</code> file.\n<p>The first time it is called it opens the file and returns the …\n"],["getgrgid","Etc","Etc.html#method-c-getgrgid","(p1 = v1)","<p>Returns information about the group with specified integer <code>group_id</code>, as found in <code>/etc/group</code>.\n<p>The information …\n"],["getgrnam","Etc","Etc.html#method-c-getgrnam","(p1)","<p>Returns information about the group with specified <code>name</code>, as found in <code>/etc/group</code>.\n<p>The information is returned …\n"],["gethostbyaddr","Socket","Socket.html#method-c-gethostbyaddr","(p1, p2 = v2)","<p>Use Addrinfo#getnameinfo instead. This method is deprecated for the following reasons:\n<p>Uncommon address …\n"],["gethostbyname","Socket","Socket.html#method-c-gethostbyname","(p1)","<p>Use Addrinfo.getaddrinfo instead. This method is deprecated for the following reasons:\n<p>The 3rd element …\n"],["gethostbyname","TCPSocket","TCPSocket.html#method-c-gethostbyname","(p1)","<p>Use Addrinfo.getaddrinfo instead. This method is deprecated for the following reasons:\n<p>The 3rd element …\n"],["gethostname","Socket","Socket.html#method-c-gethostname","()","<p>Returns the hostname.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">gethostname</span> <span class=\"ruby-comment\">#=&gt; &quot;hal&quot;</span>\n</pre>\n<p>Note that it is not guaranteed to be able to convert …\n"],["getifaddrs","Socket","Socket.html#method-c-getifaddrs","()","<p>Returns an array of interface addresses. An element of the array is an instance of Socket::Ifaddr.\n<p>This …\n"],["getlocal","Time","Time.html#method-i-getlocal","(*args)","<p>Returns a new Time object representing the value of <code>self</code> converted to a given timezone; if <code>zone</code> is <code>nil</code> …\n"],["getlogin","Etc","Etc.html#method-c-getlogin","()","<p>Returns the short user name of the currently logged in user. Unfortunately, it is often rather easy to …\n"],["getname","Resolv","Resolv.html#method-c-getname","(address)","<p>Looks up the hostname of <code>address</code>.\n"],["getname","Resolv","Resolv.html#method-i-getname","(address)","<p>Looks up the hostname of <code>address</code>.\n"],["getname","Resolv::DNS","Resolv/DNS.html#method-i-getname","(address)","<p>Gets the hostname for <code>address</code> from the DNS resolver.\n<p><code>address</code> must be a Resolv::IPv4, Resolv::IPv6 or a …\n"],["getname","Resolv::Hosts","Resolv/Hosts.html#method-i-getname","(address)","<p>Gets the hostname of <code>address</code> from the hosts file.\n"],["getnameinfo","Addrinfo","Addrinfo.html#method-i-getnameinfo","(p1 = v1)","<p>returns nodename and service as a pair of strings. This converts struct sockaddr in addrinfo to textual …\n"],["getnameinfo","Socket","Socket.html#method-c-getnameinfo","(p1, p2 = v2)","<p>Obtains name information for <em>sockaddr</em>.\n<p><em>sockaddr</em> should be one of follows.\n<p>packed sockaddr string such as …\n"],["getnames","Resolv","Resolv.html#method-c-getnames","(address)","<p>Looks up all hostnames for <code>address</code>.\n"],["getnames","Resolv","Resolv.html#method-i-getnames","(address)","<p>Looks up all hostnames for <code>address</code>.\n"],["getnames","Resolv::DNS","Resolv/DNS.html#method-i-getnames","(address)","<p>Gets all hostnames for <code>address</code> from the DNS resolver.\n<p><code>address</code> must be a Resolv::IPv4, Resolv::IPv6 or …\n"],["getnames","Resolv::Hosts","Resolv/Hosts.html#method-i-getnames","(address)","<p>Gets all hostnames for <code>address</code> from the hosts file.\n"],["getopts","OptionParser","OptionParser.html#method-i-getopts","(*args)","<p>Wrapper method for getopts.rb.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">params</span> = <span class=\"ruby-constant\">ARGV</span>.<span class=\"ruby-identifier\">getopts</span>(<span class=\"ruby-string\">&quot;ab:&quot;</span>, <span class=\"ruby-string\">&quot;foo&quot;</span>, <span class=\"ruby-string\">&quot;bar:&quot;</span>, <span class=\"ruby-string\">&quot;zot:Z;zot option&quot;</span>)\n<span class=\"ruby-comment\"># params[&quot;a&quot;] ...</span>\n</pre>\n"],["getopts","OptionParser","OptionParser.html#method-c-getopts","(*args)","<p>See #getopts.\n"],["getopts","OptionParser::Arguable","OptionParser/Arguable.html#method-i-getopts","(*args)","<p>Substitution of getopts is possible as follows. Also see OptionParser#getopts.\n\n<pre>def getopts(*args)\n  ($OPT ...</pre>\n"],["getpass","IO","IO.html#method-i-getpass","(*args)","<p>Reads and returns a line without echo back. Prints <code>prompt</code> unless it is <code>nil</code>.\n<p>The newline character that …\n"],["getpass","IO::generic_readable","IO/generic_readable.html#method-i-getpass","(*args)","<p>See IO#getpass.\n"],["getpeereid","BasicSocket","BasicSocket.html#method-i-getpeereid","()","<p>Returns the user and group on the peer of the UNIX socket. The result is a two element array which contains …\n"],["getpeername","BasicSocket","BasicSocket.html#method-i-getpeername","()","<p>Returns the remote address of the socket as a sockaddr string.\n\n<pre>TCPServer.open(&quot;127.0.0.1&quot;, 1440) {|serv| ...</pre>\n"],["getpgid","Process","Process.html#method-c-getpgid","(p1)","<p>Returns the process group ID for the given process id. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">getpgid</span>(<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">ppid</span>()) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["getpgrp","Process","Process.html#method-c-getpgrp","()","<p>Returns the process group ID for this process. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">getpgid</span>(<span class=\"ruby-value\">0</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["getpriority","Process","Process.html#method-c-getpriority","(p1, p2)","<p>Gets the scheduling priority for specified process, process group, or user. <em>kind</em> indicates the kind of …\n"],["getpty","PTY","PTY.html#method-c-getpty","(*args)","<p>Spawns the specified command on a newly allocated pty. You can also use the alias ::getpty.\n<p>The command’s …\n"],["getpwent","Etc","Etc.html#method-c-getpwent","()","<p>Returns an entry from the <code>/etc/passwd</code> file.\n<p>The first time it is called it opens the file and returns …\n"],["getpwnam","Etc","Etc.html#method-c-getpwnam","(p1)","<p>Returns the <code>/etc/passwd</code> information for the user with specified login <code>name</code>.\n<p>The information is returned …\n"],["getpwuid","Etc","Etc.html#method-c-getpwuid","(p1 = v1)","<p>Returns the <code>/etc/passwd</code> information for the user with the given integer <code>uid</code>.\n<p>The information is returned …\n"],["getresource","Resolv::DNS","Resolv/DNS.html#method-i-getresource","(name, typeclass)","<p>Look up the <code>typeclass</code> DNS resource of <code>name</code>.\n<p><code>name</code> must be a Resolv::DNS::Name or a String.\n<p><code>typeclass</code> should …\n"],["getresources","Resolv::DNS","Resolv/DNS.html#method-i-getresources","(name, typeclass)","<p>Looks up all <code>typeclass</code> DNS resources for <code>name</code>.  See #getresource for argument details.\n"],["getrlimit","Process","Process.html#method-c-getrlimit","(p1)","<p>Gets the resource limit of the process. <em>cur_limit</em> means current (soft) limit and <em>max_limit</em> means maximum …\n"],["gets","ARGF","ARGF.html#method-i-gets","(*args)","<p>Returns the next line from the current file in ARGF.\n<p>By default lines are assumed to be separated by  …\n"],["gets","CSV","CSV.html#method-i-gets","()",""],["gets","Gem::SilentUI::NullIO","Gem/SilentUI/NullIO.html#method-i-gets","(*args)",""],["gets","IO","IO.html#method-i-gets","(*args)","<p>Reads and returns a line from the stream; assigns the return value to <code>$_</code>. See Line IO.\n<p>With no arguments …\n"],["gets","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::InputMethod","IRB/InputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::Locale","IRB/Locale.html#method-i-gets","(*rs)",""],["gets","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::RelineInputMethod","IRB/RelineInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","Kernel","Kernel.html#method-i-gets","(*args)","<p>Returns (and assigns to <code>$_</code>) the next line from the list of files in <code>ARGV</code> (or <code>$*</code>), or from standard input …\n"],["gets","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-gets","(eol=$/, limit=nil)","<p>Reads the next “line” from the stream.  Lines are separated by <em>eol</em>.  If <em>limit</em> is provided the …\n"],["gets","StringIO","StringIO.html#method-i-gets","(*args)","<p>Reads and returns a line from the stream; assigns the return value to <code>$_</code>; see Line IO.\n"],["gets","XMP::StringInputMethod","XMP/StringInputMethod.html#method-i-gets","()","<p>Reads the next expression from this printer.\n<p>See IO#gets for more information.\n"],["gets","Zlib::GzipReader","Zlib/GzipReader.html#method-i-gets","(*args)","<p>See Zlib::GzipReader documentation for a description. However, note that this method can return <code>nil</code> even …\n"],["getservbyname","Socket","Socket.html#method-c-getservbyname","(p1, p2 = v2)","<p>Obtains the port number for <em>service_name</em>.\n<p>If <em>protocol_name</em> is not given, “tcp” is assumed.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">getservbyname</span>(<span class=\"ruby-string\">&quot;smtp&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["getservbyport","Socket","Socket.html#method-c-getservbyport","(p1, p2 = v2)","<p>Obtains the port number for <em>port</em>.\n<p>If <em>protocol_name</em> is not given, “tcp” is assumed.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">getservbyport</span>(<span class=\"ruby-value\">80</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["getsid","Process","Process.html#method-c-getsid","(*args)","<p>Returns the session ID for the given process id. If not given, return current process sid. Not available …\n"],["getsockname","BasicSocket","BasicSocket.html#method-i-getsockname","()","<p>Returns the local address of the socket as a sockaddr string.\n\n<pre>TCPServer.open(&quot;127.0.0.1&quot;, 15120) {|serv| ...</pre>\n"],["getsockopt","BasicSocket","BasicSocket.html#method-i-getsockopt","(p1, p2)","<p>Gets a socket option. These are protocol and system specific, see your local system documentation for …\n"],["getsockopt","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-getsockopt","(level, optname)",""],["getuid","Process::Sys","Process/Sys.html#method-c-getuid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["getutc","Time","Time.html#method-i-getutc","()","<p>Returns a new Time object representing the value of <code>self</code> converted to the UTC timezone:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">local</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["getwd","Dir","Dir.html#method-c-getwd","()","<p>Returns the path to the current working directory of this process as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">chdir</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["getwd","FileUtils","FileUtils.html#method-c-getwd","()",""],["getwd","FileUtils","FileUtils.html#method-i-getwd","()",""],["getwd","Pathname","Pathname.html#method-c-getwd","()","<p>Returns the current working directory as a Pathname.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Pathname</span>.<span class=\"ruby-identifier\">getwd</span>\n    <span class=\"ruby-comment\">#=&gt; #&lt;Pathname:/home/zzak/projects/ruby&gt;</span>\n</pre>\n"],["gid","File::Stat","File/Stat.html#method-i-gid","()","<p>Returns the numeric group id of the owner of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["gid","Process","Process.html#method-c-gid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["gid=","Process","Process.html#method-c-gid-3D","(p1)","<p>Sets the group ID for this process.\n"],["git","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-git","(repository)","<p>Block form for specifying gems from a git <code>repository</code>.\n\n<pre>git &#39;https://github.com/rails/rails.git&#39; do\n  gem ...</pre>\n"],["git_path","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-i-git_path","()","<p>Git binary path\n"],["git_present?","Bundler","Bundler.html#method-c-git_present-3F","()",""],["git_source","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-git_source","(name, &callback)","<p>Defines a custom git source that uses <code>name</code> to expand git repositories for use in gems built from git …\n"],["github","RDoc::Markdown","RDoc/Markdown.html#method-i-github","","<p>Allow Github Flavored Markdown\n"],["glob","Dir","Dir.html#method-c-glob","(pattern, _flags = 0, flags: _flags, base: nil, sort: true)","<p>Expands <code>pattern</code>, which is a pattern string or an Array of pattern strings, and returns an array containing …\n"],["glob","Pathname","Pathname.html#method-i-glob","(p1, p2 = v2)","<p>Returns or yields Pathname objects.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Pathname</span>(<span class=\"ruby-string\">&quot;ruby-2.4.2&quot;</span>).<span class=\"ruby-identifier\">glob</span>(<span class=\"ruby-string\">&quot;R*.md&quot;</span>)\n<span class=\"ruby-comment\">#=&gt; [#&lt;Pathname:ruby-2.4.2/README.md&gt;, ...</span>\n</pre>\n"],["glob","Pathname","Pathname.html#method-c-glob","(p1, p2 = v2, p3 = v3)","<p>Returns or yields Pathname objects.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Pathname</span>.<span class=\"ruby-identifier\">glob</span>(<span class=\"ruby-string\">&quot;lib/i*.rb&quot;</span>)\n    <span class=\"ruby-comment\">#=&gt; [#&lt;Pathname:lib/ipaddr.rb&gt;, #&lt;Pathname:lib/irb.rb&gt;]</span>\n</pre>\n"],["glob_files_in_dir","Gem::Util","Gem/Util.html#method-c-glob_files_in_dir","(glob, base_path)","<p>Globs for files matching <code>pattern</code> inside of <code>directory</code>, returning absolute paths to the matching files. …\n"],["global_variables","Kernel","Kernel.html#method-i-global_variables","()","<p>Returns an array of the names of global variables. This includes special regexp global variables such …\n"],["gm","Time","Time.html#method-c-gm","(*args)","<p>Returns a new Time object based the on given arguments, in the UTC timezone.\n<p>With one to seven arguments …\n"],["gmt?","Time","Time.html#method-i-gmt-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a time in UTC (GMT):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">now</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>\n<span class=\"ruby-comment\"># =&gt; 2022-08-18 10:24:13.5398485 -0500 ...</span>\n</pre>\n"],["gmt_offset","Time","Time.html#method-i-gmt_offset","()","<p>Returns the offset in seconds between the timezones of UTC and <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">utc_offset</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["gmtime","Time","Time.html#method-i-gmtime","()","<p>Returns <code>self</code>, converted to the UTC timezone:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-01 00:00:00 -0600</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">utc?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["gmtoff","Time","Time.html#method-i-gmtoff","()","<p>Returns the offset in seconds between the timezones of UTC and <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">utc_offset</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["goto","IO","IO.html#method-i-goto","(p1, p2)",""],["goto_column","IO","IO.html#method-i-goto_column","(p1)",""],["goto_id","Racc::Shift","Racc/Shift.html#method-i-goto_id","()",""],["grammar","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-grammar","()",""],["grant_privilege","Process::GID","Process/GID.html#method-c-grant_privilege","(p1)","<p>Set the effective group ID, and if possible, the saved group ID of the process to the given <em>group</em>. Returns …\n"],["grant_privilege","Process::UID","Process/UID.html#method-c-grant_privilege","(p1)","<p>Set the effective user ID, and if possible, the saved user ID of the process to the given <em>user</em>. Returns …\n"],["grapheme_clusters","String","String.html#method-i-grapheme_clusters","()","<p>Returns an array of the grapheme clusters in <code>self</code> (see Unicode Grapheme Cluster Boundaries):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&quot;\\u0061\\u0308-pqr-\\u0062\\u0308-xyz-\\u0063\\u0308&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["great_job","RDoc::Stats","RDoc/Stats.html#method-i-great_job","()","<p>A report that says you did a great job!\n"],["gregorian","Date","Date.html#method-i-gregorian","()","<p>Equivalent to Date#new_start with argument Date::GREGORIAN.\n"],["gregorian?","Date","Date.html#method-i-gregorian-3F","()","<p>Returns <code>true</code> if the date is on or after the date of calendar reform, <code>false</code> otherwise:\n\n<pre>Date.new(1582, 10, ...</pre>\n"],["gregorian_leap?","Date","Date.html#method-c-gregorian_leap-3F","(p1)","<p>Returns <code>true</code> if the given year is a leap year in the proleptic Gregorian calendar, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">gregorian_leap?</span>(<span class=\"ruby-value\">2000</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["grep","Enumerable","Enumerable.html#method-i-grep","(p1)","<p>Returns an array of objects based elements of <code>self</code> that match the given pattern.\n<p>With no block given, …\n"],["grep","Enumerator::Lazy","Enumerator/Lazy.html#method-i-grep","(p1)","<p>Like Enumerable#grep, but chains operation to be lazy-evaluated.\n"],["grep_v","Enumerable","Enumerable.html#method-i-grep_v","(p1)","<p>Returns an array of objects based on elements of <code>self</code> that <em>don’t</em> match the given pattern.\n<p>With no …\n"],["grep_v","Enumerator::Lazy","Enumerator/Lazy.html#method-i-grep_v","(p1)","<p>Like Enumerable#grep_v, but chains operation to be lazy-evaluated.\n"],["group","Etc","Etc.html#method-c-group","()","<p>Provides a convenient Ruby iterator which executes a block for each entry in the <code>/etc/group</code> file.\n<p>The …\n"],["group","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-group","(*groups)","<p>Block form for placing a dependency in the given <code>groups</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">group</span> <span class=\"ruby-value\">:development</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-identifier\">gem</span> <span class=\"ruby-string\">&#39;debugger&#39;</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">group</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["group","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-group","()","<p>Returns the EC::Group that the key is associated with. Modifying the returned group does not affect  …\n"],["group","PrettyPrint","PrettyPrint.html#method-i-group","(indent=0, open_obj='', close_obj='', open_width=open_obj.length, close_width=close_obj.length)","<p>Groups line break hints added in the block. The line break hints are all to be used or not.\n<p>If <code>indent</code> …\n"],["group","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-group","(indent=nil, open_obj='', close_obj='', open_width=nil, close_width=nil)","<p>Opens a block for grouping objects to be pretty printed.\n<p>Arguments:\n<p><code>indent</code> - noop argument. Present for …\n"],["group","Thread","Thread.html#method-i-group","()","<p>Returns the ThreadGroup which contains the given thread.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">main</span>.<span class=\"ruby-identifier\">group</span>   <span class=\"ruby-comment\">#=&gt; #&lt;ThreadGroup:0x4029d914&gt;</span>\n</pre>\n"],["group=","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-group-3D","(p1)","<p>Sets the EC::Group for the key. The group structure is internally copied so modification to <em>group</em> after …\n"],["group_by","Enumerable","Enumerable.html#method-i-group_by","()","<p>With a block given returns a hash:\n<p>Each key is a return value from the block.\n<p>Each value is an array of …\n"],["group_entries","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-group_entries","(entries)","<p>Groups <code>entries</code> by date.\n"],["group_possibilities","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-group_possibilities","(possibilities)","<p>Build an array of PossibilitySets, with each element representing a group of dependency versions that …\n"],["group_sub","PrettyPrint","PrettyPrint.html#method-i-group_sub","()","<p>Takes a block and queues a new group that is indented 1 level further.\n"],["groups","Process","Process.html#method-c-groups","()","<p>Get an Array of the group IDs in the supplemental group access list for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">groups</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["groups=","Process","Process.html#method-c-groups-3D","(p1)","<p>Set the supplemental group access list to the given Array of group IDs.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">groups</span>   <span class=\"ruby-comment\">#=&gt; [0, 1, 2, ...</span>\n</pre>\n"],["grpowned?","File","File.html#method-c-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group id of the calling process is the owner …\n"],["grpowned?","File::Stat","File/Stat.html#method-i-grpowned-3F","()","<p>Returns true if the effective group id of the process is the same as the group id of <em>stat</em>. On Windows …\n"],["grpowned?","FileTest","FileTest.html#method-i-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group id of the calling process is the owner …\n"],["grpowned?","Pathname","Pathname.html#method-i-grpowned-3F","()","<p>See FileTest.grpowned?.\n"],["gsub","Kernel","Kernel.html#method-i-gsub","(*args)","<p>Equivalent to <code>$_.gsub...</code>, except that <code>$_</code> will be updated if substitution occurs. Available only when …\n"],["gsub","String","String.html#method-i-gsub","(*args)","<p>Returns a copy of <code>self</code> with all occurrences of the given <code>pattern</code> replaced.\n<p>See Substitution Methods.\n<p>Returns …\n"],["gsub!","String","String.html#method-i-gsub-21","(*args)","<p>Performs the specified substring replacement(s) on <code>self</code>; returns <code>self</code> if any replacement occurred, <code>nil</code> …\n"],["guard_inspect_key","PP::PPMethods","PP/PPMethods.html#method-i-guard_inspect_key","()","<p>Yields to a block and preserves the previous set of objects being printed.\n"],["guess","Kconv","Kconv.html#method-c-guess","(str)","<p>Guess input encoding by NKF.guess\n"],["guess","Kconv","Kconv.html#method-i-guess","(str)","<p>Guess input encoding by NKF.guess\n"],["guess","NKF","NKF.html#method-c-guess","(p1)","<p>Returns guessed encoding of <em>str</em> by nkf routine.\n"],["guess","OptionParser::Switch","OptionParser/Switch.html#method-c-guess","(arg)","<p>Guesses argument style from <code>arg</code>.  Returns corresponding OptionParser::Switch class (OptionalArgument …\n"],["guid","WIN32OLE::Type","WIN32OLE/Type.html#method-i-guid","()","<p>Returns GUID.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Application&#39;</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">tobj</span>.<span class=\"ruby-identifier\">guid</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["guid","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-i-guid","()","<p>Returns guid string which specifies type library.\n\n<pre>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object ...</pre>\n"],["gunzip","Gem::Util","Gem/Util.html#method-c-gunzip","(data)","<p>Zlib::GzipReader wrapper that unzips <code>data</code>.\n"],["gunzip","Zlib","Zlib.html#method-c-gunzip","(p1)","<p>Decode the given gzipped <code>string</code>.\n<p>This method is almost equivalent to the following code:\n\n<pre>def gunzip(string) ...</pre>\n"],["gzip","Gem::Indexer","Gem/Indexer.html#method-i-gzip","(filename)","<p>Zlib::GzipWriter wrapper that gzips <code>filename</code> on disk.\n"],["gzip","Gem::Util","Gem/Util.html#method-c-gzip","(data)","<p>Zlib::GzipWriter wrapper that zips <code>data</code>.\n"],["gzip","Zlib","Zlib.html#method-c-gzip","(p1)","<p>Gzip the given <code>string</code>. Valid values of level are Zlib::NO_COMPRESSION, Zlib::BEST_SPEED, Zlib::BEST_COMPRESSION …\n"],["gzip_to","Gem::Package","Gem/Package.html#method-i-gzip_to","(io)","<p>Gzips content written to <code>gz_io</code> to <code>io</code>.\n"],["h","CGI::Util","CGI/Util.html#method-i-h","(string)",""],["handle_arguments","Gem::ConfigFile","Gem/ConfigFile.html#method-i-handle_arguments","(arg_list)","<p>Handle the command arguments.\n"],["handle_attr","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_attr","(var_name, attr_name, read, write)","<p>Creates a new RDoc::Attr <code>attr_name</code> on class <code>var_name</code> that is either <code>read</code>, <code>write</code> or both\n"],["handle_class_module","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_class_module","(var_name, type, class_name, parent, in_module)","<p>Creates a new RDoc::NormalClass or RDoc::NormalModule based on <code>type</code> named <code>class_name</code> in <code>parent</code> which …\n"],["handle_constants","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_constants","(type, var_name, const_name, definition)","<p>Adds constants.  By providing some_value: at the start of the comment you can override the C value of …\n"],["handle_directive","Reline::Config","Reline/Config.html#method-i-handle_directive","(directive, file, no)",""],["handle_error","SyntaxSuggest","SyntaxSuggest.html#method-c-handle_error","(e, re_raise: true, io: $stderr)","<p>SyntaxSuggest.handle_error [Public]\n<p>Takes a ‘SyntaxError` exception, uses the error message to locate …\n"],["handle_exception","IRB::Irb","IRB/Irb.html#method-i-handle_exception","(exc)",""],["handle_ifdefs_in","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_ifdefs_in","(body)","<p>Removes #ifdefs that would otherwise confuse us\n"],["handle_interrupt","Thread","Thread.html#method-c-handle_interrupt","(p1)","<p>Changes asynchronous interrupt timing.\n<p><em>interrupt</em> means asynchronous event and corresponding procedure …\n"],["handle_method","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_method","(type, var_name, meth_name, function, param_count, source_file = nil)","<p>Adds an RDoc::AnyMethod <code>meth_name</code> defined on a class or module assigned to <code>var_name</code>.  <code>type</code> is the type …\n"],["handle_missing_or_push_dependency_state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-handle_missing_or_push_dependency_state","(state)","<p>Pushes a new {DependencyState}. If the {#specification_provider} says to {SpecificationProvider#allow_missing?} …\n"],["handle_options","Gem::Command","Gem/Command.html#method-i-handle_options","(args)","<p>Handle the given list of arguments by parsing them and recording the results.\n"],["handle_options","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-handle_options","(args)",""],["handle_pipe","RDoc::RDoc","RDoc/RDoc.html#method-i-handle_pipe","()","<p>Turns RDoc from stdin into HTML\n"],["handle_singleton","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_singleton","(sclass_var, class_var)","<p>Registers a singleton class <code>sclass_var</code> as a singleton of <code>class_var</code>\n"],["handle_tab_width","RDoc::Parser","RDoc/Parser.html#method-i-handle_tab_width","(body)","<p>Normalizes tabs in <code>body</code>\n"],["handler","Fiddle::Importer","Fiddle/Importer.html#method-i-handler","()","<p>The Fiddle::CompositeHandler instance\n<p>Will raise an error if no handlers are open.\n"],["handler","WIN32OLE::Event","WIN32OLE/Event.html#method-i-handler","()","<p>returns handler object.\n"],["handler=","WIN32OLE::Event","WIN32OLE/Event.html#method-i-handler-3D","(p1)","<p>sets event handler object. If handler object has onXXX method according to XXX event, then onXXX method …\n"],["handlers","Fiddle::CompositeHandler","Fiddle/CompositeHandler.html#method-i-handlers","()","<p>Array of the currently loaded libraries.\n"],["handles?","Gem::Command","Gem/Command.html#method-i-handles-3F","(args)","<p>True if the command handles the given argument list.\n"],["has_conflicts?","Gem::Specification","Gem/Specification.html#method-i-has_conflicts-3F","()","<p>Return true if there are possible conflicts against the currently loaded specs.\n"],["has_expires?","Rinda::TupleBag","Rinda/TupleBag.html#method-i-has_expires-3F","()","<p><code>true</code> if the TupleBag to see if it has any expired entries.\n"],["has_key?","CGI::QueryExtension","CGI/QueryExtension.html#method-i-has_key-3F","(*args)","<p>Returns true if a given query string parameter exists.\n"],["has_key?","CSV::Row","CSV/Row.html#method-i-has_key-3F","(header)","<p>Returns <code>true</code> if there is a field with the given <code>header</code>, <code>false</code> otherwise.\n"],["has_key?","ENV","ENV.html#method-c-has_key-3F","(p1)","<p>ENV.has_key?, ENV.member?, and ENV.key? are aliases for ENV.include?.\n<p>Returns <code>true</code> if there is an environment …\n"],["has_key?","Hash","Hash.html#method-i-has_key-3F","(p1)","<p>Methods #has_key?, #key?, and #member? are aliases for #include?.\n<p>Returns <code>true</code> if <code>key</code> is a key in <code>self</code> …\n"],["has_value?","ENV","ENV.html#method-c-has_value-3F","(p1)","<p>Returns <code>true</code> if <code>value</code> is the value for some environment variable name, <code>false</code> otherwise:\n\n<pre>ENV.replace(&#39;foo&#39; ...</pre>\n"],["has_value?","Hash","Hash.html#method-i-has_value-3F","(p1)","<p>Method #value? is an alias for #has_value?.\n<p>Returns <code>true</code> if <code>value</code> is a value in <code>self</code>, otherwise <code>false</code> …\n"],["has_value?","YAML::DBM","YAML/DBM.html#method-i-has_value-3F","( val )","<p>Returns true if specified <code>value</code> is found in the database.\n"],["hash","Array","Array.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>.\n<p>Two arrays with the same content will have the same hash code …\n"],["hash","BigDecimal","BigDecimal.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>.\n<p>Two instances of BigDecimal have the same hash value if and only …\n"],["hash","Complex","Complex.html#method-i-hash","()",""],["hash","Data","Data.html#method-i-hash","()","<p>Redefines Object#hash (used to distinguish objects as Hash keys) so that data objects of the same class …\n"],["hash","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-hash","()","<p>Compute a hash-value for this arithmetic sequence. Two arithmetic sequences with same begin, end, step, …\n"],["hash","Float","Float.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>.\n<p>See also Object#hash.\n"],["hash","Gem::NameTuple","Gem/NameTuple.html#method-i-hash","()",""],["hash","Gem::Resolver::APISpecification","Gem/Resolver/APISpecification.html#method-i-hash","()",""],["hash","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-hash","()",""],["hash","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-i-hash","()",""],["hash","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-hash","()","<p>@return [Fixnum] a hash for the vertex based upon its {#name}\n"],["hash","Hash","Hash.html#method-i-hash","()","<p>Returns the Integer hash-code for the hash.\n<p>Two Hash objects have the same hash-code if their content …\n"],["hash","IPAddr","IPAddr.html#method-i-hash","()","<p>Returns a hash value used by Hash, Set, and Array classes\n"],["hash","MatchData","MatchData.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>, based on the target string, regexp, match, and captures.\n<p>See …\n"],["hash","Method","Method.html#method-i-hash","()","<p>Returns a hash value corresponding to the method object.\n<p>See also Object#hash.\n"],["hash","Object","Object.html#method-i-hash","()","<p>Generates an Integer hash value for this object.  This function must have the property that <code>a.eql?(b)</code> …\n"],["hash","OpenSSL::BN","OpenSSL/BN.html#method-i-hash","()","<p>Returns a hash code for this object.\n<p>See also Object#hash.\n"],["hash","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-hash","()","<p>The hash value returned is suitable for use as a certificate’s filename in a CA path.\n"],["hash","Proc","Proc.html#method-i-hash","()","<p>Returns a hash value corresponding to proc body.\n<p>See also Object#hash.\n"],["hash","RDoc::TopLevel","RDoc/TopLevel.html#method-i-hash","()","<p>An RDoc::TopLevel has the same hash as another with the same relative_name\n"],["hash","Range","Range.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>. Two range objects <code>r0</code> and <code>r1</code> have the same hash value if and …\n"],["hash","Rational","Rational.html#method-i-hash","()",""],["hash","Regexp","Regexp.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>.\n<p>Related: Object#hash.\n"],["hash","String","String.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>. The value is based on the length, content and encoding of <code>self</code> …\n"],["hash","Struct","Struct.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>.\n<p>Two structs of the same class and with the same content will …\n"],["hash","Time","Time.html#method-i-hash","()","<p>Returns the integer hash code for <code>self</code>.\n<p>Related: Object#hash.\n"],["hash","URI::Generic","URI/Generic.html#method-i-hash","()",""],["hash","UnboundMethod","UnboundMethod.html#method-i-hash","()","<p>Returns a hash value corresponding to the method object.\n<p>See also Object#hash.\n"],["hash=","Racc::Rule","Racc/Rule.html#method-i-hash-3D","(n)",""],["hash?","Rinda::Tuple","Rinda/Tuple.html#method-i-hash-3F","(ary_or_hash)",""],["hash_algorithm","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-hash_algorithm","()","<p>Returns the ln (long name) of the hash algorithm used to generate the issuerNameHash and the issuerKeyHash …\n"],["hash_old","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-hash_old","()","<p>Returns an MD5 based hash used in OpenSSL 0.9.X.\n"],["have_const","MakeMakefile","MakeMakefile.html#method-i-have_const","(const, headers = nil, opt = \"\", &b)","<p>Returns whether or not the constant <code>const</code> is defined.  You may optionally pass the <code>type</code> of <code>const</code> as  …\n"],["have_devel?","MakeMakefile","MakeMakefile.html#method-i-have_devel-3F","()",""],["have_extensions?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-have_extensions-3F","()",""],["have_file?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-have_file-3F","(file, suffixes)",""],["have_framework","MakeMakefile","MakeMakefile.html#method-i-have_framework","(fw, &b)","<p>Returns whether or not the given <code>framework</code> can be found on your system. If found, a macro is passed as …\n"],["have_func","MakeMakefile","MakeMakefile.html#method-i-have_func","(func, headers = nil, opt = \"\", &b)","<p>Returns whether or not the function <code>func</code> can be found in the common header files, or within any <code>headers</code> …\n"],["have_header","MakeMakefile","MakeMakefile.html#method-i-have_header","(header, preheaders = nil, opt = \"\", &b)","<p>Returns whether or not the given <code>header</code> file can be found on your system. If found, a macro is passed …\n"],["have_library","MakeMakefile","MakeMakefile.html#method-i-have_library","(lib, func = nil, headers = nil, opt = \"\", &b)","<p>Returns whether or not the given entry point <code>func</code> can be found within <code>lib</code>.  If <code>func</code> is <code>nil</code>, the <code>main()</code> …\n"],["have_macro","MakeMakefile","MakeMakefile.html#method-i-have_macro","(macro, headers = nil, opt = \"\", &b)","<p>Returns whether or not <code>macro</code> is defined either in the common header files or within any <code>headers</code> you provide. …\n"],["have_option?","FileUtils","FileUtils.html#method-c-have_option-3F","(mid, opt)","<p>Returns <code>true</code> if method <code>mid</code> accepts the given option <code>opt</code>, <code>false</code> otherwise; the arguments may be strings …\n"],["have_struct_member","MakeMakefile","MakeMakefile.html#method-i-have_struct_member","(type, member, headers = nil, opt = \"\", &b)","<p>Returns whether or not the struct of type <code>type</code> contains <code>member</code>.  If it does not, or the struct type can’t …\n"],["have_type","MakeMakefile","MakeMakefile.html#method-i-have_type","(type, headers = nil, opt = \"\", &b)","<p>Returns whether or not the static type <code>type</code> is defined.  You may optionally pass additional <code>headers</code> to …\n"],["have_var","MakeMakefile","MakeMakefile.html#method-i-have_var","(var, headers = nil, opt = \"\", &b)","<p>Returns whether or not the variable <code>var</code> can be found in the common header files, or within any <code>headers</code> …\n"],["head","Net::HTTP","Net/HTTP.html#method-i-head","(path, initheader = nil)","<p>Gets only the header from <code>path</code> on the connected-to host. <code>header</code> is a Hash like { ‘Accept’ =&gt; …\n"],["head2","Net::HTTP","Net/HTTP.html#method-i-head2","(path, initheader = nil, &block)",""],["head?","Racc::LocationPointer","Racc/LocationPointer.html#method-i-head-3F","()",""],["header","CGI","CGI.html#method-i-header","(options='text/html')","<p>This method is an alias for #http_header, when HTML5 tag maker is inactive.\n<p>NOTE: use #http_header to …\n"],["header","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-header","(checksum = @checksum)",""],["header","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-header","()",""],["header?","CSV::Row","CSV/Row.html#method-i-header-3F","(header)",""],["header_convert","CSV","CSV.html#method-i-header_convert","(name = nil, &converter)","<p>The block need not return a String object:\n\n<pre>csv = CSV.open(path, headers: true)\ncsv.header_convert {|header, ...</pre>\n"],["header_converters","CSV","CSV.html#method-i-header_converters","()","<p>Returns an Array containing header converters; used for parsing; see Header Converters:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CSV</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;&#39;</span>).<span class=\"ruby-identifier\">header_converters</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["header_fields_converter","CSV","CSV.html#method-i-header_fields_converter","()",""],["header_row?","CSV","CSV.html#method-i-header_row-3F","()","<p>Returns <code>true</code> if the next row to be read is a header row; <code>false</code> otherwise.\n<p>Without headers:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">string</span> = <span class=\"ruby-string\">&quot;foo,0\\nbar,1\\nbaz,2\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["header_row?","CSV::Parser","CSV/Parser.html#method-i-header_row-3F","()",""],["header_row?","CSV::Row","CSV/Row.html#method-i-header_row-3F","()","<p>Returns <code>true</code> if this is a header row, <code>false</code> otherwise.\n"],["headers","CSV","CSV.html#method-i-headers","()","<p>Returns the value that determines whether headers are used; used for parsing; see {Option <code>headers</code>}:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CSV</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;&#39;</span>).<span class=\"ruby-identifier\">headers</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["headers","CSV::Parser","CSV/Parser.html#method-i-headers","()",""],["headers","CSV::Row","CSV/Row.html#method-i-headers","()","<p>Returns the headers for this row:\n\n<pre>source = &quot;Name,Value\\nfoo,0\\nbar,1\\nbaz,2\\n&quot;\ntable = CSV.parse(source, ...</pre>\n"],["headers","CSV::Table","CSV/Table.html#method-i-headers","()","<p>Returns a new Array containing the String headers for the table.\n<p>If the table is not empty, returns the …\n"],["headers=","URI::MailTo","URI/MailTo.html#method-i-headers-3D","(v)","<p>Setter for headers <code>v</code>.\n"],["help","OptionParser","OptionParser.html#method-i-help","()","<p>Returns option summary string.\n"],["helpcontext","WIN32OLE::Method","WIN32OLE/Method.html#method-i-helpcontext","()","<p>Returns help context.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Workbooks&#39;</span>)\n<span class=\"ruby-identifier\">method</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["helpcontext","WIN32OLE::Type","WIN32OLE/Type.html#method-i-helpcontext","()","<p>Returns helpcontext. If helpcontext is not found, then returns nil.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["helpfile","WIN32OLE::Method","WIN32OLE/Method.html#method-i-helpfile","()","<p>Returns help file. If help file is not found, then the method returns nil.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["helpfile","WIN32OLE::Type","WIN32OLE/Type.html#method-i-helpfile","()","<p>Returns helpfile path. If helpfile is not found, then returns nil.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["helpstring","WIN32OLE::Method","WIN32OLE/Method.html#method-i-helpstring","()","<p>Returns help string of OLE method. If the help string is not found, then the method returns nil.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["helpstring","WIN32OLE::Type","WIN32OLE/Type.html#method-i-helpstring","()","<p>Returns help string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Internet Controls&#39;</span>, <span class=\"ruby-string\">&#39;IWebBrowser&#39;</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">tobj</span>.<span class=\"ruby-identifier\">helpstring</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["here?","DRb","DRb.html#method-i-here-3F","(uri)","<p>Is <code>uri</code> the URI for the current local server?\n"],["here?","DRb","DRb.html#method-c-here-3F","(uri)","<p>Is <code>uri</code> the URI for the current local server?\n"],["here?","DRb::DRbServer","DRb/DRbServer.html#method-i-here-3F","(uri)","<p>Is <code>uri</code> the URI for this server?\n"],["heredoc_end?","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-i-heredoc_end-3F","(name, indent, tk)",""],["hex","Random::Formatter","Random/Formatter.html#method-i-hex","(n=nil)","<p>Generate a random hexadecimal string.\n<p>The argument <em>n</em> specifies the length, in bytes, of the random number …\n"],["hex","String","String.html#method-i-hex","()","<p>Interprets the leading substring of <code>self</code> as a string of hexadecimal digits (with an optional sign and …\n"],["hexdigest","Digest::Class","Digest/Class.html#method-c-hexdigest","(*args)","<p>Returns the hex-encoded hash value of a given <em>string</em>.  This is almost equivalent to Digest.hexencode …\n"],["hexdigest","Digest::Instance","Digest/Instance.html#method-i-hexdigest","(p1 = v1)","<p>If none is given, returns the resulting hash value of the digest in a hex-encoded form, keeping the digest’s …\n"],["hexdigest","OpenSSL::HMAC","OpenSSL/HMAC.html#method-c-hexdigest","(digest, key, data)","<p>Returns the authentication code as a hex-encoded string. The <em>digest</em> parameter specifies the digest algorithm …\n"],["hexdigest","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-hexdigest","()","<p>Returns the authentication code an instance represents as a hex-encoded string.\n"],["hexdigest!","Digest::Instance","Digest/Instance.html#method-i-hexdigest-21","()","<p>Returns the resulting hash value in a hex-encoded form and resets the digest to the initial state.\n"],["hexdump","IO::Buffer","IO/Buffer.html#method-i-hexdump","()",""],["hexencode","Digest","Digest.html#method-c-hexencode","(p1)","<p>Generates a hex-encoded version of a given <em>string</em>.\n"],["hidden","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-hidden","(name = \"\", value = nil)","<p>Generate a Hidden Input element as a string.\n<p>The attributes of the element can be specified as two arguments, …\n"],["hidden?","SyntaxSuggest::CodeBlock","SyntaxSuggest/CodeBlock.html#method-i-hidden-3F","()",""],["hidden?","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-i-hidden-3F","()","<p>Opposite or ‘visible?` (note: different than `empty?`)\n"],["hide_cursor","Reline::ANSI","Reline/ANSI.html#method-c-hide_cursor","()",""],["hide_cursor","Reline::GeneralIO","Reline/GeneralIO.html#method-c-hide_cursor","()",""],["hide_cursor","Reline::Windows","Reline/Windows.html#method-c-hide_cursor","()",""],["hierarchical?","URI::Generic","URI/Generic.html#method-i-hierarchical-3F","()","<p>Returns true if URI is hierarchical.\n<p>Description\n<p>URI has components listed in order of decreasing significance …\n"],["hierarchical?","URI::LDAP","URI/LDAP.html#method-i-hierarchical-3F","()","<p>Checks if URI has a path. For URI::LDAP this will return <code>false</code>.\n"],["higher","Racc::Grammar::PrecedenceDefinitionEnv","Racc/Grammar/PrecedenceDefinitionEnv.html#method-i-higher","()",""],["history_file","IRB::Context","IRB/Context.html#method-i-history_file","()","<p>A copy of the default <code>IRB.conf[:HISTORY_FILE]</code>\n"],["history_file=","IRB::Context","IRB/Context.html#method-i-history_file-3D","(hist)","<p>Set <code>IRB.conf[:HISTORY_FILE]</code> to the given <code>hist</code>.\n"],["history_search_backward","Reline::LineEditor","Reline/LineEditor.html#method-i-history_search_backward","(key, arg: 1)",""],["history_search_forward","Reline::LineEditor","Reline/LineEditor.html#method-i-history_search_forward","(key, arg: 1)",""],["hkdf","OpenSSL::KDF","OpenSSL/KDF.html#method-c-hkdf","(p1, p2 = {})","<p>HMAC-based Extract-and-Expand Key Derivation Function (HKDF) as specified in RFC 5869.\n<p>New in OpenSSL …\n"],["holds_all_syntax_errors?","SyntaxSuggest::CodeFrontier","SyntaxSuggest/CodeFrontier.html#method-i-holds_all_syntax_errors-3F","(block_array = @queue, can_cache: true)","<p>Returns true if the document is valid with all lines removed. By default it checks all blocks in present …\n"],["home","Bundler","Bundler.html#method-c-home","()",""],["home","Dir","Dir.html#method-c-home","(*args)","<p>Returns the home directory of the current user or the named user if given.\n"],["home","RDoc","RDoc.html#method-c-home","()",""],["home_workspace","IRB::Context","IRB/Context.html#method-i-home_workspace","()","<p>Inherited from <code>TOPLEVEL_BINDING</code>.\n"],["host","Gem","Gem.html#method-c-host","()","<p>Get the default RubyGems API host. This is normally <code>https://rubygems.org</code>.\n"],["host","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-host","()","<p>The host to connect to either from the RUBYGEMS_HOST environment variable or from the user’s configuration …\n"],["host=","Gem","Gem.html#method-c-host-3D","(host)","<p>Set the default RubyGems API host.\n"],["host=","URI::Generic","URI/Generic.html#method-i-host-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["hostname","URI::Generic","URI/Generic.html#method-i-hostname","()","<p>Extract the host part of the URI and unwrap brackets for IPv6 addresses.\n<p>This method is the same as URI::Generic#host …\n"],["hostname=","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-hostname-3D","(p1)","<p>Sets the server hostname used for SNI. This needs to be set before SSLSocket#connect.\n"],["hostname=","URI::Generic","URI/Generic.html#method-i-hostname-3D","(v)","<p>Sets the host part of the URI as the argument with brackets for IPv6 addresses.\n<p>This method is the same …\n"],["hour","DateTime","DateTime.html#method-i-hour","()","<p>Returns the hour in range (0..23):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">hour</span> <span class=\"ruby-comment\"># =&gt; 4</span>\n</pre>\n"],["hour","Time","Time.html#method-i-hour","()","<p>Returns the integer hour of the day for <code>self</code>, in range (0..23):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>)\n<span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["html","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-html","(attributes = {})","<p>Generate a top-level HTML element as a string.\n<p>The attributes of the element are specified as a hash. …\n"],["html","RDoc::Markdown","RDoc/Markdown.html#method-i-html","","<p>Allow HTML\n"],["html_escape","ERB::Escape","ERB/Escape.html#method-c-html_escape","(s)",""],["html_escape","ERB::Escape","ERB/Escape.html#method-i-html_escape","(s)",""],["html_name","RDoc::Alias","RDoc/Alias.html#method-i-html_name","()","<p>HTML id-friendly version of <code>#new_name</code>.\n"],["html_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-html_name","()","<p>HTML id-friendly method/attribute name\n"],["hton","IPAddr","IPAddr.html#method-i-hton","()","<p>Returns a network byte ordered string form of the IP address.\n"],["http_default_port","Net::HTTP","Net/HTTP.html#method-c-http_default_port","()","<p>Returns integer <code>80</code>, the default port to use for HTTP requests:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">http_default_port</span> <span class=\"ruby-comment\"># =&gt; 80</span>\n</pre>\n"],["http_header","CGI","CGI.html#method-i-http_header","(options='text/html')","<p>Create an HTTP header block as a string.\n<p>Includes the empty line that ends the header block.\n<p><code>content_type_string</code> … &mdash; "],["http_url","RDoc::Context","RDoc/Context.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["http_url","RDoc::TopLevel","RDoc/TopLevel.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["httpdate","Date","Date.html#method-c-httpdate","(p1 = v1, p2 = v2, p3 = {})","<p>Returns a new Date object with values parsed from <code>string</code>, which should be a valid HTTP date format:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["httpdate","Date","Date.html#method-i-httpdate","()","<p>Equivalent to #strftime with argument <code>&#39;%a, %d %b %Y %T GMT&#39;</code>; see Formats for Dates and Times …\n"],["httpdate","DateTime","DateTime.html#method-c-httpdate","(p1 = v1, p2 = v2, p3 = {})","<p>Creates a new DateTime object by parsing from a string according to some RFC 2616 format.\n\n<pre>DateTime.httpdate(&#39;Sat, ...</pre>\n"],["httpdate","Time","Time.html#method-i-httpdate","()","<p>Returns a string which represents the time as RFC 1123 date of HTTP-date defined by RFC 2616:\n\n<pre>day-of-week, ...</pre>\n"],["httpdate","Time","Time.html#method-c-httpdate","(date)","<p>Parses <code>date</code> as an HTTP-date defined by RFC 2616 and converts it to a Time object.\n<p>ArgumentError is raised …\n"],["httponly=","CGI::Cookie","CGI/Cookie.html#method-i-httponly-3D","(val)","<p>Set whether the Cookie is a httponly cookie or not.\n<p><code>val</code> must be a boolean.\n"],["https?","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-https-3F","(uri)",""],["https_default_port","Net::HTTP","Net/HTTP.html#method-c-https_default_port","()","<p>Returns integer <code>443</code>, the default port to use for HTTPS requests:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">https_default_port</span> <span class=\"ruby-comment\"># =&gt; 443</span>\n</pre>\n"],["hypot","Math","Math.html#method-c-hypot","(p1, p2)","<p>Returns <code>sqrt(a**2 + b**2)</code>, which is the length of the longest side <code>c</code> (the hypotenuse) of the right triangle …\n"],["i","Numeric","Numeric.html#method-i-i","()","<p>Returns <code>Complex(0, self)</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">i</span>              <span class=\"ruby-comment\"># =&gt; (0+2i)</span>\n<span class=\"ruby-value\">-2</span>.<span class=\"ruby-identifier\">i</span>             <span class=\"ruby-comment\"># =&gt; (0-2i)</span>\n<span class=\"ruby-value\">2.0</span>.<span class=\"ruby-identifier\">i</span>            <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["i_i_sym_list","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-i_i_sym_list","(name, table)",""],["iconv","JSON","JSON.html#method-c-iconv","(to, from, string)","<p>Encodes string using String.encode.\n"],["id","OpenSSL::Engine","OpenSSL/Engine.html#method-i-id","()","<p>Gets the id for this engine.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Engine</span>.<span class=\"ruby-identifier\">load</span>\n<span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Engine</span>.<span class=\"ruby-identifier\">engines</span> <span class=\"ruby-comment\">#=&gt; [#&lt;OpenSSL::Engine#&gt;, ...] ...</span>\n</pre>\n"],["id","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-id","()","<p>Returns the Session ID.\n"],["id2name","Symbol","Symbol.html#method-i-id2name","()","<p>Returns a string representation of <code>self</code> (not including the leading colon):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:foo</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;foo&quot;</span>\n</pre>\n<p>Symbol#id2name …\n"],["ideas_to_paths","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-ideas_to_paths","(ideas, leaf, names, path)",""],["ident","Syslog","Syslog.html#method-c-ident","()","<p>Returns the identity string used in the last call to open()\n"],["identical?","File","File.html#method-c-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n<p><em>file_1</em> and <em>file_2</em> can be an IO object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;w&quot;</span>) {} <span class=\"ruby-operator\">...</span>\n</pre>\n"],["identical?","FileTest","FileTest.html#method-i-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n<p><em>file_1</em> and <em>file_2</em> can be an IO object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;w&quot;</span>) {} <span class=\"ruby-operator\">...</span>\n</pre>\n"],["identical?","FileUtils","FileUtils.html#method-i-identical-3F","(a, b)",""],["identical?","FileUtils","FileUtils.html#method-c-identical-3F","(a, b)",""],["identity","Gem::Dependency","Gem/Dependency.html#method-i-identity","()",""],["if_modified_since","RDoc::Servlet","RDoc/Servlet.html#method-i-if_modified_since","(req, res, path = nil)","<p>Handles the If-Modified-Since HTTP header on <code>req</code> for <code>path</code>.  If the file has not been modified a Not  …\n"],["ifindex","Socket::Ifaddr","Socket/Ifaddr.html#method-i-ifindex","()","<p>Returns the interface index of <em>ifaddr</em>.\n"],["iflush","IO","IO.html#method-i-iflush","()","<p>Flushes input buffer in kernel.\n<p>You must require ‘io/console’ to use this method.\n"],["ignore","RDoc::CodeObject","RDoc/CodeObject.html#method-i-ignore","()","<p>Use this to ignore a CodeObject and all its children until found again (#record_location is called). …\n"],["ignore_broken_line","CSV::Parser","CSV/Parser.html#method-i-ignore_broken_line","()",""],["ignore_deadlock","Thread","Thread.html#method-c-ignore_deadlock","()","<p>Returns the status of the global “ignore deadlock” condition. The default is <code>false</code>, so that …\n"],["ignore_deadlock=","Thread","Thread.html#method-c-ignore_deadlock-3D","(p1)","<p>Returns the new state. When set to <code>true</code>, the VM will not check for deadlock conditions. It is only useful …\n"],["ignore_newline?","SyntaxSuggest::LexValue","SyntaxSuggest/LexValue.html#method-i-ignore_newline-3F","()",""],["ignore_newline_not_beg?","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-i-ignore_newline_not_beg-3F","()","<p>Not stable API &mdash; Lines that have a ‘on_ignored_nl` type token and NOT a `BEG` type seem to be a good proxy …\n"],["ignored?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-ignored-3F","()","<p>Has this class been ignored?\n<p>See also #ignore\n"],["imag","Complex","Complex.html#method-i-imag","()","<p>Returns the imaginary part.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">imaginary</span>      <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">9</span>, <span class=\"ruby-value\">-4</span>).<span class=\"ruby-identifier\">imaginary</span>  <span class=\"ruby-comment\">#=&gt; -4</span>\n</pre>\n"],["imag","Numeric","Numeric.html#method-i-imag","()",""],["image_button","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-image_button","(src = \"\", name = nil, alt = nil)","<p>Generate an Image Button Input element as a string.\n<p><code>src</code> is the URL of the image to use for the button. …\n"],["imaginary","Complex","Complex.html#method-i-imaginary","()","<p>Returns the imaginary part.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">imaginary</span>      <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">9</span>, <span class=\"ruby-value\">-4</span>).<span class=\"ruby-identifier\">imaginary</span>  <span class=\"ruby-comment\">#=&gt; -4</span>\n</pre>\n"],["imaginary","Numeric","Numeric.html#method-i-imaginary","()","<p>Returns zero.\n"],["img","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-img","(src = \"\", alt = \"\", width = nil, height = nil)","<p>Generate an Image element as a string.\n<p><code>src</code> is the URL of the image.  <code>alt</code> is the alternative text for the …\n"],["implemented_ole_types","WIN32OLE::Type","WIN32OLE/Type.html#method-i-implemented_ole_types","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the WIN32OLE_TYPE object.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["implicit?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-implicit-3F","()","<p>Indicate that the request is for a gem requested as a dependency of another gem\n"],["import","Gem::RequestSet","Gem/RequestSet.html#method-i-import","(deps)","<p>Add <code>deps</code> Gem::Dependency objects to the set.\n"],["import_function","Fiddle::Importer","Fiddle/Importer.html#method-i-import_function","(name, ctype, argtype, call_type = nil)","<p>Returns a new Fiddle::Function instance at the memory address of the given <code>name</code> function.\n<p>Raises a DLError …\n"],["import_methods","Refinement","Refinement.html#method-i-import_methods","(*args)","<p>Imports methods from modules. Unlike Module#include, Refinement#import_methods copies methods and adds …\n"],["import_symbol","Fiddle::Importer","Fiddle/Importer.html#method-i-import_symbol","(name)","<p>Returns a new Fiddle::Pointer instance at the memory address of the given <code>name</code> symbol.\n<p>Raises a DLError …\n"],["import_value","Fiddle::Importer","Fiddle/Importer.html#method-i-import_value","(ty, addr)","<p>Returns a new instance of the C struct with the value <code>ty</code> at the <code>addr</code> address.\n"],["in6_addr","IPAddr","IPAddr.html#method-i-in6_addr","(left)",""],["in_addr","IPAddr","IPAddr.html#method-i-in_addr","(addr)",""],["in_pasting?","Reline::ANSI","Reline/ANSI.html#method-c-in_pasting-3F","()",""],["in_pasting?","Reline::GeneralIO","Reline/GeneralIO.html#method-c-in_pasting-3F","()",""],["in_pasting?","Reline::Windows","Reline/Windows.html#method-c-in_pasting-3F","()",""],["in_transaction","PStore","PStore.html#method-i-in_transaction","()","<p>Raises PStore::Error if the calling code is not in a PStore#transaction.\n"],["in_transaction_wr","PStore","PStore.html#method-i-in_transaction_wr","()","<p>Raises PStore::Error if the calling code is not in a PStore#transaction or if the code is in a read-only …\n"],["inc","OptionParser","OptionParser.html#method-i-inc","(*args)",""],["inc","OptionParser","OptionParser.html#method-c-inc","(arg, default = nil)","<p>Returns an incremented value of <code>default</code> according to <code>arg</code>.\n"],["include","Module","Module.html#method-i-include","(*args)","<p>Invokes Module.append_features on each parameter in reverse order.\n"],["include?","Array","Array.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if for some index <code>i</code> in <code>self</code>, <code>obj == self[i]</code>; otherwise <code>false</code>:\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>].<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["include?","CGI::QueryExtension","CGI/QueryExtension.html#method-i-include-3F","(*args)",""],["include?","CSV::Row","CSV/Row.html#method-i-include-3F","(header)",""],["include?","ENV","ENV.html#method-c-include-3F","(p1)","<p>ENV.has_key?, ENV.member?, and ENV.key? are aliases for ENV.include?.\n<p>Returns <code>true</code> if there is an environment …\n"],["include?","Enumerable","Enumerable.html#method-i-include-3F","(p1)","<p>Returns whether for any element <code>object == element</code>:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span>)                       <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["include?","Gem::SourceList","Gem/SourceList.html#method-i-include-3F","(other)","<p>Returns true if this source list includes <code>other</code> which may be a Gem::Source or a source URI.\n"],["include?","Hash","Hash.html#method-i-include-3F","(p1)","<p>Methods #has_key?, #key?, and #member? are aliases for #include?.\n<p>Returns <code>true</code> if <code>key</code> is a key in <code>self</code> …\n"],["include?","IPAddr","IPAddr.html#method-i-include-3F","(other)","<p>Returns true if the given ipaddr is in the range.\n<p>e.g.:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;ipaddr&#39;</span>\n<span class=\"ruby-identifier\">net1</span> = <span class=\"ruby-constant\">IPAddr</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;192.168.2.0/24&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["include?","Module","Module.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>module</em> is included or prepended in <em>mod</em> or one of <em>mod</em>’s ancestors.\n\n<pre>module A\nend\nclass ...</pre>\n"],["include?","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["include?","Racc::ISet","Racc/ISet.html#method-i-include-3F","(key)",""],["include?","Range","Range.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <code>object</code> is an element of <code>self</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span>)        <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["include?","Set","Set.html#method-i-include-3F","(o)","<p>Returns true if the set contains the given object.\n<p>Note that <code>include?</code> and <code>member?</code> do not test member\nequality ...\n"],["include?","String","String.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> contains <code>other_string</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-string\">&#39;f&#39;</span>)    <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-string\">&#39;fo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["included","Module","Module.html#method-i-included","(p1)","<p>Callback invoked whenever the receiver is included in another module or class. This should be used in …\n"],["included","OpenSSL::Marshal","OpenSSL/Marshal.html#method-c-included","(base)",""],["included","Singleton","Singleton.html#method-c-included","(klass)",""],["included","Syslog::Constants","Syslog/Constants.html#method-c-included","(p1)",""],["included","Syslog::Macros","Syslog/Macros.html#method-c-included","(p1)",""],["included_modules","Module","Module.html#method-i-included_modules","()","<p>Returns the list of modules included or prepended in <em>mod</em> or one of <em>mod</em>’s ancestors.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Sub</span>\n<span class=\"ruby-keyword\">end</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inclusive?","Reline::LineEditor","Reline/LineEditor.html#method-i-inclusive-3F","(method_obj)",""],["incompatible_argument_styles","OptionParser::Switch","OptionParser/Switch.html#method-c-incompatible_argument_styles","(arg, t)",""],["incompatible_argument_styles","OptionParser::Switch::NoArgument","OptionParser/Switch/NoArgument.html#method-c-incompatible_argument_styles","(*)",""],["incomplete_input?","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-incomplete_input-3F","()","<p>Returns true if the invalid byte sequence error is caused by premature end of string.\n\n<pre>ec = Encoding::Converter.new(&quot;EUC-JP&quot;, ...</pre>\n"],["incref","Racc::Reduce","Racc/Reduce.html#method-i-incref","()",""],["increment","Racc::LocationPointer","Racc/LocationPointer.html#method-i-increment","()",""],["incremental_search_history","Reline::LineEditor","Reline/LineEditor.html#method-i-incremental_search_history","(key)",""],["indent","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-indent","()","<p>Returns the string that is used to indent levels in the JSON text.\n"],["indent","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-indent","()",""],["indent=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-indent-3D","(p1)","<p>Sets the string that is used to indent levels in the JSON text.\n"],["indent_index","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-i-indent_index","()","<p>Used for stable sort via indentation level\n<p>Ruby’s sort is not “stable” meaning that when …\n"],["indent_re","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-indent_re","(n)",""],["indentation","Psych::Emitter","Psych/Emitter.html#method-i-indentation","()","<p>Get the indentation level.\n"],["indentation=","Psych::Emitter","Psych/Emitter.html#method-i-indentation-3D","(p1)","<p>Set the indentation level to <code>level</code>.  The level must be less than 10 and greater than 1.\n"],["index","Array","Array.html#method-i-index","(*args)","<p>Returns the index of a specified element.\n<p>When argument <code>object</code> is given but no block, returns the index …\n"],["index","CSV::Row","CSV/Row.html#method-i-index","(header, minimum_index = 0)","<p>Returns the index for the given header, if it exists; otherwise returns <code>nil</code>.\n<p>With the single argument …\n"],["index","String","String.html#method-i-index","(p1, p2 = v2)","<p>Returns the integer index of the first match for the given argument, or <code>nil</code> if none found; the search …\n"],["index","YAML::DBM","YAML/DBM.html#method-i-index","( keystr )","<p>Deprecated, used YAML::DBM#key instead.\n<p>Note: YAML::DBM#index makes warning from internal of ::DBM#index …\n"],["indicate_progress","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-indicate_progress","()","<p>Indicates progress roughly once every second @return [void]\n"],["indicate_progress","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-indicate_progress","()","<p>Called roughly every {#progress_rate}, this method should convey progress to the user.\n<p>@return [void] …\n"],["infinite?","BigDecimal","BigDecimal.html#method-i-infinite-3F","()","<p>Returns nil, -1, or +1 depending on whether the value is finite, -Infinity, or +Infinity.\n"],["infinite?","Complex","Complex.html#method-i-infinite-3F","()","<p>Returns <code>1</code> if <code>cmp</code>‘s real or imaginary part is an infinite number, otherwise returns <code>nil</code>.\n\n<pre>For example: ...</pre>\n"],["infinite?","Date","Date.html#method-i-infinite-3F","()","<p>Returns <code>false</code>\n"],["infinite?","Float","Float.html#method-i-infinite-3F","()","<p>Returns:\n<p>1, if <code>self</code> is <code>Infinity</code>.\n<p>-1 if <code>self</code> is <code>-Infinity</code>.\n"],["infinite?","Numeric","Numeric.html#method-i-infinite-3F","()","<p>Returns <code>nil</code>, -1, or 1 depending on whether the value is finite, <code>-Infinity</code>, or <code>+Infinity</code>.\n"],["infinity?","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-infinity-3F","()",""],["inflate","Gem::Util","Gem/Util.html#method-c-inflate","(data)","<p>A Zlib::Inflate#inflate wrapper\n"],["inflate","Zlib","Zlib.html#method-c-inflate","(p1)","<p>Decompresses <code>string</code>. Raises a Zlib::NeedDict exception if a preset dictionary is needed for decompression. …\n"],["inflate","Zlib::Inflate","Zlib/Inflate.html#method-i-inflate","(p1)","<p>Inputs <code>deflate_string</code> into the inflate stream and returns the output from the stream.  Calling this method, …\n"],["inflate","Zlib::Inflate","Zlib/Inflate.html#method-c-inflate","(p1)","<p>Decompresses <code>string</code>. Raises a Zlib::NeedDict exception if a preset dictionary is needed for decompression. …\n"],["info","Logger","Logger.html#method-i-info","(progname = nil, &block)","<p>Equivalent to calling #add with severity <code>Logger::INFO</code>.\n"],["info","Syslog::Logger","Syslog/Logger.html#method-i-info","","<p>Logs a <code>message</code> at the info (syslog info) log level, or logs the message returned from the block.\n"],["info","Win32::Registry","Win32/Registry.html#method-i-info","()","<p>Returns key information as Array of: :num_keys\n\n<pre>The number of subkeys.</pre>\n<p>:max_key_length\n"],["info!","Logger","Logger.html#method-i-info-21","()","<p>Sets the log level to Logger::INFO. See Log Level.\n"],["info?","Logger","Logger.html#method-i-info-3F","()","<p>Returns <code>true</code> if the log level allows entries with severity Logger::INFO to be written, <code>false</code> otherwise. …\n"],["inherited","Class","Class.html#method-i-inherited","(p1)","<p>Callback invoked whenever a subclass of the current class is created.\n<p>Example:\n\n<pre>class Foo\n  def self.inherited(subclass) ...</pre>\n"],["inherited","Gem::Installer","Gem/Installer.html#method-c-inherited","(klass)","<p>Changes in rubygems to lazily loading ‘rubygems/command` (in order to lazily load `optparse` as a side …\n"],["init","Gem::PackageTask","Gem/PackageTask.html#method-i-init","(gem)","<p>Initialization tasks without the “yield self” or define operations.\n"],["init","IRB::Inspector","IRB/Inspector.html#method-i-init","()","<p>Proc to call when the inspector is activated, good for requiring dependent libraries.\n"],["init","Racc::ActionTable","Racc/ActionTable.html#method-i-init","()",""],["init","Racc::Grammar","Racc/Grammar.html#method-i-init","()","<p>Computation\n"],["init_line_conversion_system","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-init_line_conversion_system","()",""],["init_ruby_model","IRB::RubyModel","IRB/RubyModel.html#method-i-init_ruby_model","()",""],["init_with","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-init_with","(o, h, node)",""],["init_with_ary","Rinda::Tuple","Rinda/Tuple.html#method-i-init_with_ary","(ary)","<p>Munges <code>ary</code> into a valid Tuple.\n"],["init_with_hash","Rinda::Tuple","Rinda/Tuple.html#method-i-init_with_hash","(hash)","<p>Ensures <code>hash</code> is a valid Tuple.\n"],["initgroups","Process","Process.html#method-c-initgroups","(p1, p2)","<p>Initializes the supplemental group access list by reading the system group database and using all groups …\n"],["initialize","Gem::Package","Gem/Package.html#method-i-initialize","(gem, security_policy)","<p>Creates a new package that will read or write to the file <code>gem</code>.\n"],["initialize_clone","Set","Set.html#method-i-initialize_clone","(orig, **options)","<p>Clone internal hash.\n"],["initialize_copy","Array","Array.html#method-i-initialize_copy","(p1)","<p>Replaces the content of <code>self</code> with the content of <code>other_array</code>; returns <code>self</code>:\n\n<pre>a = [:foo, &#39;bar&#39;, 2]\na.replace([&#39;foo&#39;, ...</pre>\n"],["initialize_copy","CSV::Row","CSV/Row.html#method-i-initialize_copy","(other)","<p>Calls superclass method.\n"],["initialize_copy","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-initialize_copy","(other)","<p>Initializes a copy of a {DependencyGraph}, ensuring that all {#vertices} are properly copied. @param …\n"],["initialize_copy","Gem::Specification","Gem/Specification.html#method-i-initialize_copy","(other_spec)","<p>Duplicates array_attributes from <code>other_spec</code> so state isn’t shared.\n"],["initialize_copy","Gem::Uri","Gem/Uri.html#method-i-initialize_copy","(original)",""],["initialize_copy","Hash","Hash.html#method-i-initialize_copy","(p1)","<p>Replaces the entire contents of <code>self</code> with the contents of <code>other_hash</code>; returns <code>self</code>:\n\n<pre>h = {foo: 0, bar: ...</pre>\n"],["initialize_copy","IO::Buffer","IO/Buffer.html#method-i-initialize_copy","(p1)","<p>Make an internal copy of the source buffer. Updates to the copy will not affect the source buffer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["initialize_copy","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-initialize_copy","(p1)","<p>Initializes this object from orig if it can be duplicated/cloned and returns it.\n"],["initialize_copy","OpenSSL::BN","OpenSSL/BN.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::Config","OpenSSL/Config.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::Digest","OpenSSL/Digest.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::OCSP::Response","OpenSSL/OCSP/Response.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKCS12","OpenSSL/PKCS12.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-initialize_copy","(p1)",""],["initialize_copy","String","String.html#method-i-initialize_copy","(p1)","<p>Replaces the contents of <code>self</code> with the contents of <code>other_string</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>        <span class=\"ruby-comment\"># =&gt; &quot;foo&quot;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;bar&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["initialize_copy","StringScanner","StringScanner.html#method-i-initialize_copy","(p1)","<p>Duplicates a StringScanner object.\n"],["initialize_copy","Zlib::Deflate","Zlib/Deflate.html#method-i-initialize_copy","(p1)","<p>Duplicates the deflate stream.\n"],["initialize_dup","Set","Set.html#method-i-initialize_dup","(orig)","<p>Dup internal hash.\n"],["initialize_methods_etc","RDoc::Context","RDoc/Context.html#method-i-initialize_methods_etc","()","<p>Sets the defaults for methods and so-forth\n"],["initialize_pattern","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-initialize_pattern","(opts = {})","<p>Constructs the default Hash of patterns.\n"],["initialize_pattern","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-initialize_pattern","(opts = {})","<p>Constructs the default Hash of patterns.\n"],["initialize_query","CGI::QueryExtension","CGI/QueryExtension.html#method-i-initialize_query","()","<p>A wrapper class to use a StringIO object as the body and switch to a TempFile when the passed threshold …\n"],["initialize_readline","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-c-initialize_readline","()",""],["initialize_regexp","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-initialize_regexp","(pattern)","<p>Constructs the default Hash of Regexp’s.\n"],["initialize_regexp","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-initialize_regexp","(pattern)","<p>Constructs the default Hash of Regexp’s.\n"],["initialize_tracer","IRB","IRB.html#method-c-initialize_tracer","()","<p>initialize tracing function\n"],["inject","Enumerable","Enumerable.html#method-i-inject","(p1 = v1, p2 = v2)","<p>Returns an object formed from operands via either:\n<p>A method named by <code>symbol</code>.\n<p>A block to which each operand …\n"],["inject_into_list","Gem::AvailableSet","Gem/AvailableSet.html#method-i-inject_into_list","(dep_list)",""],["inner","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-inner","()",""],["inner_getc","Reline::ANSI","Reline/ANSI.html#method-c-inner_getc","()",""],["inner_readline","Reline::Core","Reline/Core.html#method-i-inner_readline","(prompt, add_hist, multiline, &confirm_multiline_termination)",""],["ino","File::Stat","File/Stat.html#method-i-ino","()","<p>Returns the inode number for <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">ino</span>   <span class=\"ruby-comment\">#=&gt; 1083669</span>\n</pre>\n"],["inplace_mode","ARGF","ARGF.html#method-i-inplace_mode","()","<p>Returns the file extension appended to the names of backup copies of modified files under in-place edit …\n"],["inplace_mode=","ARGF","ARGF.html#method-i-inplace_mode-3D","(p1)","<p>Sets the filename extension for in-place editing mode to the given String. The backup copy of each file …\n"],["input","Gem::MockGemUi","Gem/MockGemUi.html#method-i-input","()",""],["input=","Readline","Readline.html#method-c-input-3D","(p1)","<p>Specifies a File object <code>input</code> that is input stream for Readline.readline method.\n"],["input=","Reline::ANSI","Reline/ANSI.html#method-c-input-3D","(val)",""],["input=","Reline::Core","Reline/Core.html#method-i-input-3D","(val)",""],["input=","Reline::GeneralIO","Reline/GeneralIO.html#method-c-input-3D","(val)",""],["input?","WIN32OLE::Param","WIN32OLE/Param.html#method-i-input-3F","()","<p>Returns true if the parameter is input.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["input_key","Reline::LineEditor","Reline/LineEditor.html#method-i-input_key","(key)",""],["inputrc_path","Reline::Config","Reline/Config.html#method-i-inputrc_path","()",""],["insecure_method?","DRb::DRbServer","DRb/DRbServer.html#method-i-insecure_method-3F","(msg_id)","<p>Has a method been included in the list of insecure methods?\n"],["insert","Array","Array.html#method-i-insert","(*args)","<p>Inserts given <code>objects</code> before or after the element at Integer index <code>offset</code>; returns <code>self</code>.\n<p>When <code>index</code> is …\n"],["insert","IRB::JobManager","IRB/JobManager.html#method-i-insert","(irb)","<p>Add the given <code>irb</code> session to the jobs Array.\n"],["insert","String","String.html#method-i-insert","(p1, p2)","<p>Inserts the given <code>other_string</code> into <code>self</code>; returns <code>self</code>.\n<p>If the Integer <code>index</code> is positive, inserts <code>other_string</code> …\n"],["insert_new_line","Reline::LineEditor","Reline/LineEditor.html#method-i-insert_new_line","(cursor_line, next_line)",""],["insert_output","Encoding::Converter","Encoding/Converter.html#method-i-insert_output","(p1)","<p>Inserts string into the encoding converter. The string will be converted to the destination encoding …\n"],["insert_text","Readline","Readline.html#method-c-insert_text","(p1)","<p>Insert text into the line at the current cursor position.\n<p>See GNU Readline’s rl_insert_text function. …\n"],["insert_text","Reline","Reline.html#method-c-insert_text","(*args, &block)",""],["insert_text","Reline::LineEditor","Reline/LineEditor.html#method-i-insert_text","(text)",""],["insns_compiled","RubyVM::YJIT","RubyVM/YJIT.html#method-c-insns_compiled","(iseq)","<p>Produce a list of instructions compiled by YJIT for an iseq\n"],["inspect","ARGF","ARGF.html#method-i-inspect","()","<p>Returns “ARGF”.\n"],["inspect","Addrinfo","Addrinfo.html#method-i-inspect","()","<p>returns a string which shows addrinfo in human-readable form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["inspect","Array","Array.html#method-i-inspect","()","<p>Returns the new String formed by calling method <code>#inspect</code> on each array element:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","BigDecimal","BigDecimal.html#method-i-inspect","()","<p>Returns a string representation of self.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&quot;1234.5678&quot;</span>).<span class=\"ruby-identifier\">inspect</span>\n  <span class=\"ruby-comment\">#=&gt; &quot;0.12345678e4&quot;</span>\n</pre>\n"],["inspect","CGI::Cookie","CGI/Cookie.html#method-i-inspect","()","<p>A summary of cookie string.\n"],["inspect","CSV","CSV.html#method-i-inspect","()","<p>Returns a String showing certain properties of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">string</span> = <span class=\"ruby-string\">&quot;Name,Value\\nfoo,0\\nbar,1\\nbaz,2\\n&quot;</span>\n<span class=\"ruby-identifier\">csv</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","CSV::Row","CSV/Row.html#method-i-inspect","()","<p>Returns an ASCII-compatible String showing:\n<p>Class CSV::Row.\n<p>Header-value pairs.\n"],["inspect","CSV::Table","CSV/Table.html#method-i-inspect","()","<p>Returns a <code>US-ASCII</code>-encoded String showing table:\n<p>Class: <code>CSV::Table</code>.\n<p>Access mode: <code>:row</code>, <code>:col</code>, or <code>:col_or_row</code> …\n"],["inspect","Complex","Complex.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">inspect</span>                       <span class=\"ruby-comment\">#=&gt; &quot;(2+0i)&quot;</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-string\">&#39;-8/6&#39;</span>).<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","Data","Data.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code>:\n\n<pre>Measure = Data.define(:amount, :unit)\n\ndistance = Measure[10, ...</pre>\n"],["inspect","Date","Date.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">inspect</span>\n<span class=\"ruby-comment\"># =&gt; &quot;#&lt;Date: 2001-02-03 ((2451944j,0s,0n),+0s,2299161j)&gt;&quot;</span>\n</pre>\n"],["inspect","Digest::Instance","Digest/Instance.html#method-i-inspect","()","<p>Creates a printable version of the digest object.\n"],["inspect","Dir","Dir.html#method-i-inspect","()","<p>Return a string describing this Dir object.\n"],["inspect","ENV","ENV.html#method-c-inspect","()","<p>Returns the contents of the environment as a String:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","Encoding","Encoding.html#method-i-inspect","()","<p>Returns a string which represents the encoding for programmers.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">inspect</span>       <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Encoding:UTF-8&gt;&quot; ...</span>\n</pre>\n"],["inspect","Encoding::Converter","Encoding/Converter.html#method-i-inspect","()","<p>Returns a printable version of <em>ec</em>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ec</span> = <span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Converter</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;iso-8859-1&quot;</span>, <span class=\"ruby-string\">&quot;utf-8&quot;</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">ec</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","Enumerator","Enumerator.html#method-i-inspect","()","<p>Creates a printable version of <em>e</em>.\n"],["inspect","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-inspect","()","<p>Convert this arithmetic sequence to a printable form.\n"],["inspect","Enumerator::Chain","Enumerator/Chain.html#method-i-inspect","()","<p>Returns a printable version of the enumerator chain.\n"],["inspect","Enumerator::Product","Enumerator/Product.html#method-i-inspect","()","<p>Returns a printable version of the product enumerator.\n"],["inspect","Exception","Exception.html#method-i-inspect","()","<p>Return this exception’s class name and message.\n"],["inspect","FalseClass","FalseClass.html#method-i-inspect","()","<p>The string representation of <code>false</code> is “false”.\n"],["inspect","Fiber","Fiber.html#method-i-inspect","()",""],["inspect","Fiddle::Pointer","Fiddle/Pointer.html#method-i-inspect","()","<p>Returns a string formatted with an easily readable representation of the internal state of the pointer. …\n"],["inspect","File::Stat","File/Stat.html#method-i-inspect","()","<p>Produce a nicely formatted description of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/etc/passwd&quot;</span>).<span class=\"ruby-identifier\">inspect</span>\n   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;File::Stat ...</span>\n</pre>\n"],["inspect","Float","Float.html#method-i-inspect","()","<p>Returns a string containing a representation of <code>self</code>; depending of the value of <code>self</code>, the string representation …\n"],["inspect","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-inspect","()","<p>@return [String] a string suitable for debugging\n"],["inspect","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-inspect","()","<p>@return [String] a string suitable for debugging\n"],["inspect","Hash","Hash.html#method-i-inspect","()","<p>Returns a new String containing the hash entries:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># =&gt; &quot;{:foo=&gt;0, ...</span>\n</pre>\n"],["inspect","IO","IO.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># =&gt; &quot;#&lt;File:t.txt&gt;&quot;</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">close</span>\n</pre>\n"],["inspect","IO::Buffer","IO/Buffer.html#method-i-inspect","()",""],["inspect","IPAddr","IPAddr.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of the ipaddr. (“#&lt;IPAddr: family:address/mask&gt;”) …\n"],["inspect","IPSocket","IPSocket.html#method-i-inspect","()","<p>Return a string describing this IPSocket object.\n"],["inspect","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-inspect","()","<p>For debug message\n"],["inspect","IRB::InputMethod","IRB/InputMethod.html#method-i-inspect","()","<p>For debug message\n"],["inspect","IRB::Irb","IRB/Irb.html#method-i-inspect","()","<p>Outputs the local variables to this current session, including #signal_status and #context, using IRB::Locale …\n"],["inspect","IRB::JobManager","IRB/JobManager.html#method-i-inspect","()","<p>Outputs a list of jobs, see the irb command <code>irb_jobs</code>, or <code>jobs</code>.\n"],["inspect","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-inspect","()","<p>For debug message\n"],["inspect","IRB::RelineInputMethod","IRB/RelineInputMethod.html#method-i-inspect","()","<p>For debug message\n"],["inspect","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-inspect","()","<p>For debug message\n"],["inspect","Integer","Integer.html#method-i-inspect","(*args)","<p>Returns a string containing the place-value representation of <code>self</code> in radix <code>base</code> (in 2..36).\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12345</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","MatchData","MatchData.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code>:\n\n<pre class=\"ruby\">  <span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/.$/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;foo&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; #&lt;MatchData &quot;o&quot;&gt;</span>\n  <span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["inspect","Method","Method.html#method-i-inspect","()","<p>Returns a human-readable description of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: ...</span>\n</pre>\n"],["inspect","Module","Module.html#method-i-inspect","()","<p>Returns a string representing this module or class. For basic classes and modules, this is the name. …\n"],["inspect","Net::HTTP","Net/HTTP.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">hostname</span>).<span class=\"ruby-identifier\">inspect</span>\n<span class=\"ruby-comment\"># =&gt; &quot;#&lt;Net::HTTP jsonplaceholder.typicode.com:80 ...</span>\n</pre>\n"],["inspect","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-inspect","()",""],["inspect","Net::HTTPResponse","Net/HTTPResponse.html#method-i-inspect","()",""],["inspect","Net::WriteAdapter","Net/WriteAdapter.html#method-i-inspect","()",""],["inspect","NilClass","NilClass.html#method-i-inspect","()","<p>Always returns the string “nil”.\n"],["inspect","Object","Object.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of <em>obj</em>. The default #inspect shows the object’s …\n"],["inspect","ObjectSpace::InternalObjectWrapper","ObjectSpace/InternalObjectWrapper.html#method-i-inspect","()","<p>See Object#inspect.\n"],["inspect","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-inspect","()",""],["inspect","OpenSSL::Config","OpenSSL/Config.html#method-i-inspect","()","<p>String representation of this configuration object, including the class name and its sections.\n"],["inspect","OpenSSL::Engine","OpenSSL/Engine.html#method-i-inspect","()","<p>Pretty prints this engine.\n"],["inspect","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-inspect","()","<p>Returns the authentication code as a hex-encoded string. The <em>digest</em> parameter specifies the digest algorithm …\n"],["inspect","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-inspect","()","<p>Returns a string describing the PKey object.\n"],["inspect","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-inspect","()",""],["inspect","OpenStruct","OpenStruct.html#method-i-inspect","()","<p>Returns a string containing a detailed summary of the keys and values.\n"],["inspect","OptionParser::ParseError","OptionParser/ParseError.html#method-i-inspect","()",""],["inspect","Proc","Proc.html#method-i-inspect","()","<p>Returns the unique identifier for this proc, along with an indication of where the proc was defined. …\n"],["inspect","Process::Status","Process/Status.html#method-i-inspect","()","<p>Override the inspection method.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">system</span>(<span class=\"ruby-string\">&quot;false&quot;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">$?</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Process::Status: pid 12861 exit 1&gt;&quot;</span>\n</pre>\n"],["inspect","Racc::Accept","Racc/Accept.html#method-i-inspect","()",""],["inspect","Racc::Error","Racc/Error.html#method-i-inspect","()",""],["inspect","Racc::Goto","Racc/Goto.html#method-i-inspect","()",""],["inspect","Racc::ISet","Racc/ISet.html#method-i-inspect","()",""],["inspect","Racc::LocationPointer","Racc/LocationPointer.html#method-i-inspect","()",""],["inspect","Racc::OrMark","Racc/OrMark.html#method-i-inspect","()",""],["inspect","Racc::Prec","Racc/Prec.html#method-i-inspect","()",""],["inspect","Racc::Reduce","Racc/Reduce.html#method-i-inspect","()",""],["inspect","Racc::Rule","Racc/Rule.html#method-i-inspect","()",""],["inspect","Racc::Shift","Racc/Shift.html#method-i-inspect","()",""],["inspect","Racc::State","Racc/State.html#method-i-inspect","()",""],["inspect","Racc::States","Racc/States.html#method-i-inspect","()",""],["inspect","Racc::Sym","Racc/Sym.html#method-i-inspect","()",""],["inspect","Racc::UserAction","Racc/UserAction.html#method-i-inspect","()",""],["inspect","Ractor","Ractor.html#method-i-inspect","()",""],["inspect","Range","Range.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code>, including <code>begin.inspect</code> and <code>end.inspect</code>:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">inspect</span>  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["inspect","Rational","Rational.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">inspect</span>      <span class=\"ruby-comment\">#=&gt; &quot;(2/1)&quot;</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">-8</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","Regexp","Regexp.html#method-i-inspect","()","<p>Returns a nicely-formatted string representation of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/ab+c/ix</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># =&gt; &quot;/ab+c/ix&quot;</span>\n</pre>\n<p>Related: Regexp#to_s …\n"],["inspect","Ripper::Lexer::Elem","Ripper/Lexer/Elem.html#method-i-inspect","()",""],["inspect","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-inspect","()","<p>Returns debugging information about this node as a string.\n"],["inspect","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-inspect","()","<p>Returns a human-readable string representation of this instruction sequence, including the #label and …\n"],["inspect","Set","Set.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of the\nset (&quot;#&lt;Set: {element1, element2, ...\n"],["inspect","Socket::AncillaryData","Socket/AncillaryData.html#method-i-inspect","()","<p>returns a string which shows ancillarydata in human-readable form.\n\n<pre>p Socket::AncillaryData.new(:INET6, ...</pre>\n"],["inspect","Socket::Ifaddr","Socket/Ifaddr.html#method-i-inspect","()","<p>Returns a string to show contents of <em>ifaddr</em>.\n"],["inspect","Socket::Option","Socket/Option.html#method-i-inspect","()","<p>Returns a string which shows sockopt in human-readable form.\n\n<pre>p Socket::Option.new(:INET, :SOCKET, :KEEPALIVE, ...</pre>\n"],["inspect","String","String.html#method-i-inspect","()","<p>Returns a printable version of <code>self</code>, enclosed in double-quotes, and with special characters escaped: …\n"],["inspect","StringScanner","StringScanner.html#method-i-inspect","()","<p>Returns a string that represents the StringScanner object, showing:\n<p>the current position\n<p>the size of the …\n"],["inspect","Struct","Struct.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Customer</span> = <span class=\"ruby-constant\">Struct</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:name</span>, <span class=\"ruby-value\">:address</span>, <span class=\"ruby-value\">:zip</span>) <span class=\"ruby-comment\"># =&gt; Customer</span>\n<span class=\"ruby-identifier\">joe</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","Symbol","Symbol.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code> (including the leading colon):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:foo</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># =&gt; &quot;:foo&quot;</span>\n</pre>\n<p>Related: …\n"],["inspect","SyntaxSuggest::BlockExpand","SyntaxSuggest/BlockExpand.html#method-i-inspect","()","<p>Managable rspec errors\n"],["inspect","Syslog","Syslog.html#method-c-inspect","()","<p>Returns an inspect() string summarizing the object state.\n"],["inspect","Thread","Thread.html#method-i-inspect","()","<p>Dump the name, id, and status of <em>thr</em> to a string.\n"],["inspect","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-inspect","()","<p>Returns the same as calling <code>inspect</code> on the string representation of #to_str\n"],["inspect","Time","Time.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code> with subseconds:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">12</span>, <span class=\"ruby-value\">31</span>, <span class=\"ruby-value\">23</span>, <span class=\"ruby-value\">59</span>, <span class=\"ruby-value\">59</span>, <span class=\"ruby-value\">0.5</span>)\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","TracePoint","TracePoint.html#method-i-inspect","()","<p>Return a string containing a human-readable TracePoint status.\n"],["inspect","TrueClass","TrueClass.html#method-i-inspect","()","<p>The string representation of <code>true</code> is “true”.\n"],["inspect","URI::Generic","URI/Generic.html#method-i-inspect","()",""],["inspect","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-inspect","()",""],["inspect","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-inspect","()",""],["inspect","UnboundMethod","UnboundMethod.html#method-i-inspect","()","<p>Returns a human-readable description of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: ...</span>\n</pre>\n"],["inspect","WIN32OLE::Method","WIN32OLE/Method.html#method-i-inspect","()","<p>Returns the method name with class name.\n"],["inspect","WIN32OLE::Param","WIN32OLE/Param.html#method-i-inspect","()","<p>Returns the parameter name with class name. If the parameter has default value, then returns name=value …\n"],["inspect","WIN32OLE::Record","WIN32OLE/Record.html#method-i-inspect","()","<p>Returns the OLE struct name and member name and the value of member\n<p>If COM server in VB.NET ComServer …\n"],["inspect","WIN32OLE::Type","WIN32OLE/Type.html#method-i-inspect","()","<p>Returns the type name with class name.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ie</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;InternetExplorer.Application&#39;</span>)\n<span class=\"ruby-identifier\">ie</span>.<span class=\"ruby-identifier\">ole_type</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-i-inspect","()","<p>Returns the type library name with class name.\n\n<pre>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object ...</pre>\n"],["inspect","WIN32OLE::Variable","WIN32OLE/Variable.html#method-i-inspect","()","<p>Returns the OLE variable name and the value with class name.\n"],["inspect","Win32::Registry","Win32/Registry.html#method-i-inspect","()",""],["inspect","Zlib::GzipFile::Error","Zlib/GzipFile/Error.html#method-i-inspect","()","<p>Constructs a String of the GzipFile Error\n"],["inspect?","IRB::Context","IRB/Context.html#method-i-inspect-3F","()","<p>Whether #inspect_mode is set or not, see #inspect_mode= for more detail.\n"],["inspect_colorable?","IRB::Color","IRB/Color.html#method-c-inspect_colorable-3F","(obj, seen: {}.compare_by_identity)",""],["inspect_mode=","IRB::Context","IRB/Context.html#method-i-inspect_mode-3D","(opt)","<p>Specifies the inspect mode with <code>opt</code>:\n<p><code>true</code> &mdash; display <code>inspect</code>\n<p><code>false</code> &mdash; display <code>to_s</code>\n"],["inspect_sockaddr","Addrinfo","Addrinfo.html#method-i-inspect_sockaddr","()","<p>returns a string which shows the sockaddr in <em>addrinfo</em> with human-readable form.\n\n<pre>Addrinfo.tcp(&quot;localhost&quot;, ...</pre>\n"],["inspect_value","IRB::Inspector","IRB/Inspector.html#method-i-inspect_value","(v)","<p>Proc to call when the input is evaluated and output in irb.\n"],["install","FileUtils","FileUtils.html#method-c-install","(src, dest, mode: nil, owner: nil, group: nil, preserve: nil, noop: nil, verbose: nil)","<p>Copies a file entry. See install(1).\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single …\n"],["install","FileUtils","FileUtils.html#method-i-install","(src, dest, mode: nil, owner: nil, group: nil, preserve: nil, noop: nil, verbose: nil)","<p>Copies a file entry. See install(1).\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single …\n"],["install","Gem","Gem.html#method-c-install","(name, version = Gem::Requirement.default, *options)","<p>Top level install helper method. Allows you to install gems interactively:\n\n<pre>% irb\n&gt;&gt; Gem.install &quot;minitest&quot; ...</pre>\n"],["install","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-install","()",""],["install","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-install","(dep_or_name, version = Gem::Requirement.default)","<p>Installs the gem <code>dep_or_name</code> and all its dependencies.  Returns an Array of installed gem specifications. …\n"],["install","Gem::Installer","Gem/Installer.html#method-i-install","()","<p>Installs the gem and returns a loaded Gem::Specification for the installed gem.\n<p>The gem will be installed …\n"],["install","Gem::RequestSet","Gem/RequestSet.html#method-i-install","(options)","<p>Installs gems for this RequestSet using the Gem::Installer <code>options</code>.\n<p>If a <code>block</code> is given an activation …\n"],["install","Gem::Resolver::GitSpecification","Gem/Resolver/GitSpecification.html#method-i-install","(options = {})","<p>Installing a git gem only involves building the extensions and generating the executables.\n"],["install","Gem::Resolver::InstalledSpecification","Gem/Resolver/InstalledSpecification.html#method-i-install","(options = {})","<p>This is a null install as this specification is already installed. <code>options</code> are ignored.\n"],["install","Gem::Resolver::LockSpecification","Gem/Resolver/LockSpecification.html#method-i-install","(options = {})","<p>This is a null install as a locked specification is considered installed. <code>options</code> are ignored.\n"],["install","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-install","(options = {})","<p>Installs this specification using the Gem::Installer <code>options</code>.  The install method yields a Gem::Installer …\n"],["install","Gem::Resolver::VendorSpecification","Gem/Resolver/VendorSpecification.html#method-i-install","(options = {})","<p>This is a null install as this gem was unpacked into a directory. <code>options</code> are ignored.\n"],["install_acl","DRb","DRb.html#method-i-install_acl","(acl)","<p>Set the default ACL to <code>acl</code>.\n<p>See DRb::DRbServer.default_acl.\n"],["install_acl","DRb","DRb.html#method-c-install_acl","(acl)","<p>Set the default ACL to <code>acl</code>.\n<p>See DRb::DRbServer.default_acl.\n"],["install_alias_method","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-install_alias_method","(to, from, override = NO_OVERRIDE)","<p>Installs alias methods for the default irb commands, see ::install_extend_commands.\n"],["install_default_bundler_gem","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_default_bundler_gem","(bin_dir)",""],["install_executables","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_executables","(bin_dir)",""],["install_extend_commands","IRB::ContextExtender","IRB/ContextExtender.html#method-c-install_extend_commands","()","<p>Installs the default context extensions as irb commands:\n<p>Context#eval_history= &mdash; <code>irb/ext/history.rb</code>\n<p>Context#use_tracer= … &mdash; "],["install_extend_commands","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-install_extend_commands","()","<p>Installs the default irb commands.\n"],["install_file","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_file","(file, dest_dir)",""],["install_file_list","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_file_list","(files, dest_dir)",""],["install_from_gemdeps","Gem::RequestSet","Gem/RequestSet.html#method-i-install_from_gemdeps","(options, &block)","<p>Installs from the gem dependencies files in the <code>:gemdeps</code> option in <code>options</code>, yielding to the <code>block</code> as …\n"],["install_hooks","Gem::RequestSet","Gem/RequestSet.html#method-i-install_hooks","(requests, options)","<p>Call hooks on installed gems\n"],["install_id_conv","DRb","DRb.html#method-c-install_id_conv","(idconv)","<p>Set the default id conversion object.\n<p>This is expected to be an instance such as DRb::DRbIdConv that responds …\n"],["install_id_conv","DRb","DRb.html#method-i-install_id_conv","(idconv)","<p>Set the default id conversion object.\n<p>This is expected to be an instance such as DRb::DRbIdConv that responds …\n"],["install_if_needed","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-install_if_needed","()",""],["install_indices","Gem::Indexer","Gem/Indexer.html#method-i-install_indices","()","<p>Install generated indices into the destination directory.\n"],["install_into","Gem::RequestSet","Gem/RequestSet.html#method-i-install_into","(dir, force = true, options = {})",""],["install_lib","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_lib","(lib_dir)",""],["install_list","ACL","ACL.html#method-i-install_list","(list)","<p>Adds <code>list</code> of ACL entries to this ACL.\n"],["install_path","Bundler","Bundler.html#method-c-install_path","()",""],["install_rdoc","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_rdoc","()",""],["install_siginfo_handler","RDoc::RDoc","RDoc/RDoc.html#method-i-install_siginfo_handler","()","<p>Installs a siginfo handler that prints the current filename.\n"],["install_update_defaults_str","Gem::InstallUpdateOptions","Gem/InstallUpdateOptions.html#method-i-install_update_defaults_str","()","<p>Default description for the gem install and update commands.\n"],["install_update_options","Gem::InstallUpdateOptions","Gem/InstallUpdateOptions.html#method-i-install_update_options","()","<p>Default options for the gem install and update commands.\n"],["installable?","Gem::Platform","Gem/Platform.html#method-c-installable-3F","(spec)",""],["installable_platform?","Gem::Resolver::InstalledSpecification","Gem/Resolver/InstalledSpecification.html#method-i-installable_platform-3F","()","<p>Returns <code>true</code> if this gem is installable for the current platform.\n"],["installable_platform?","Gem::Resolver::LocalSpecification","Gem/Resolver/LocalSpecification.html#method-i-installable_platform-3F","()","<p>Returns <code>true</code> if this gem is installable for the current platform.\n"],["installable_platform?","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-installable_platform-3F","()","<p>Returns true if this specification is installable on this platform.\n"],["installation_satisfies_dependency?","Gem::Installer","Gem/Installer.html#method-i-installation_satisfies_dependency-3F","(dependency)","<p>True if the gems in the system satisfy <code>dependency</code>.\n"],["installed?","Gem::QueryUtils","Gem/QueryUtils.html#method-i-installed-3F","(name, req = Gem::Requirement.default)","<p>Check if gem <code>name</code> version <code>version</code> is installed.\n"],["installed?","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-installed-3F","()","<p>True if the requested gem has already been installed.\n"],["installed_docs","RDoc::Servlet","RDoc/Servlet.html#method-i-installed_docs","()","<p>Returns an Array of installed documentation.\n<p>Each entry contains the documentation name (gem name, ‘Ruby …\n"],["installed_specs","Gem::Installer","Gem/Installer.html#method-i-installed_specs","()","<p>Return an Array of Specifications contained within the gem_home we’ll be installing into.\n"],["installed_stubs","Gem::Specification","Gem/Specification.html#method-c-installed_stubs","(dirs, pattern)",""],["instance","CSV","CSV.html#method-c-instance","(data = $stdout, **options)","<p>Creates or retrieves cached CSV objects. For arguments and options, see CSV.new.\n<p>This API is not Ractor-safe. …\n"],["instance","Gem::CommandManager","Gem/CommandManager.html#method-i-instance","()","<p>Returns self. Allows a CommandManager instance to stand in for the class itself.\n"],["instance","Gem::CommandManager","Gem/CommandManager.html#method-c-instance","()","<p>Return the authoritative instance of the command manager.\n"],["instance","Singleton","Singleton.html#method-c-instance","","<p>Returns the singleton instance.\n"],["instance","Syslog","Syslog.html#method-c-instance","()","<p>Returns self, for backward compatibility.\n"],["instance_attributes","RDoc::Context","RDoc/Context.html#method-i-instance_attributes","()","<p>Instance attributes\n"],["instance_delegate","Forwardable","Forwardable.html#method-i-instance_delegate","(hash)","<p>Takes a hash as its argument.  The key is a symbol or an array of symbols.  These symbols correspond …\n"],["instance_eval","BasicObject","BasicObject.html#method-i-instance_eval","(*args)","<p>Evaluates a string containing Ruby source code, or the given block, within the context of the receiver …\n"],["instance_eval","Ractor::MovedObject","Ractor/MovedObject.html#method-i-instance_eval","(*args)",""],["instance_exec","BasicObject","BasicObject.html#method-i-instance_exec","(*args)","<p>Executes the given block within the context of the receiver (<em>obj</em>). In order to set the context, the variable …\n"],["instance_exec","Ractor::MovedObject","Ractor/MovedObject.html#method-i-instance_exec","(*args)",""],["instance_method","Module","Module.html#method-i-instance_method","(p1)","<p>Returns an <code>UnboundMethod</code> representing the given instance method in <em>mod</em>.\n\n<pre>class Interpreter\n  def do_a() ...</pre>\n"],["instance_method_list","RDoc::Context","RDoc/Context.html#method-i-instance_method_list","()","<p>Instance methods\n"],["instance_methods","Module","Module.html#method-i-instance_methods","(*args)","<p>Returns an array containing the names of the public and protected instance methods in the receiver.  …\n"],["instance_methods","RDoc::Context","RDoc/Context.html#method-i-instance_methods","()","<p>Instance methods\n"],["instance_methods","RDoc::Store","RDoc/Store.html#method-i-instance_methods","()","<p>Instance methods cache accessor.  Maps a class to an Array of its instance methods (not full name).\n"],["instance_of?","Object","Object.html#method-i-instance_of-3F","(p1)","<p>Returns <code>true</code> if <em>obj</em> is an instance of the given class. See also Object#kind_of?.\n\n<pre>class A;     end\nclass ...</pre>\n"],["instance_variable_defined?","Object","Object.html#method-i-instance_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given instance variable is defined in <em>obj</em>. String arguments are converted to symbols. …\n"],["instance_variable_get","Object","Object.html#method-i-instance_variable_get","(p1)","<p>Returns the value of the given instance variable, or nil if the instance variable is not set. The <code>@</code> part …\n"],["instance_variable_set","Object","Object.html#method-i-instance_variable_set","(p1, p2)","<p>Sets the instance variable named by <em>symbol</em> to the given object. This may circumvent the encapsulation …\n"],["instance_variables","Object","Object.html#method-i-instance_variables","()","<p>Returns an array of instance variable names for the receiver. Note that simply defining an accessor does …\n"],["instruction_sequence","TracePoint","TracePoint.html#method-i-instruction_sequence","()","<p>Compiled instruction sequence represented by a RubyVM::InstructionSequence instance on the <code>:script_compiled</code> …\n"],["int","Socket::AncillaryData","Socket/AncillaryData.html#method-i-int","()","<p>Returns the data in <em>ancillarydata</em> as an int.\n<p>The size and endian is dependent on the host.\n\n<pre>ancdata = Socket::AncillaryData.int(:UNIX, ...</pre>\n"],["int","Socket::AncillaryData","Socket/AncillaryData.html#method-c-int","(p1, p2, p3, p4)","<p>Creates a new Socket::AncillaryData object which contains a int as data.\n<p>The size and endian is dependent …\n"],["int","Socket::Option","Socket/Option.html#method-i-int","()","<p>Returns the data in <em>sockopt</em> as an int.\n<p>The size and endian is dependent on the platform.\n\n<pre>sockopt = Socket::Option.int(:INET, ...</pre>\n"],["int","Socket::Option","Socket/Option.html#method-c-int","(p1, p2, p3, p4)","<p>Creates a new Socket::Option object which contains an int as data.\n<p>The size and endian is dependent on …\n"],["integer?","Integer","Integer.html#method-i-integer-3F","()","<p>Since <code>int</code> is already an Integer, this always returns <code>true</code>.\n"],["integer?","Numeric","Numeric.html#method-i-integer-3F","()","<p>Returns <code>true</code> if <code>num</code> is an Integer.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1.0</span>.<span class=\"ruby-identifier\">integer?</span>   <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">integer?</span>     <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["integer_list","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-integer_list","(name, table)",""],["intern","Racc::Grammar","Racc/Grammar.html#method-i-intern","(value, dummy = false)",""],["intern","Racc::SymbolTable","Racc/SymbolTable.html#method-i-intern","(val, dummy = false)",""],["intern","String","String.html#method-i-intern","()","<p>Returns the Symbol corresponding to <em>str</em>, creating the symbol if it did not previously exist. See Symbol#id2name …\n"],["intern","Symbol","Symbol.html#method-i-intern","()",""],["internal?","IO::Buffer","IO/Buffer.html#method-i-internal-3F","()","<p>If the buffer is <em>internal</em>, meaning it references memory allocated by the buffer itself.\n<p>An internal buffer …\n"],["internal_class_of","ObjectSpace","ObjectSpace.html#method-c-internal_class_of","(p1)","<p>MRI specific feature &mdash; Return internal class of obj.\n\n<p>obj can be an instance of InternalObjectWrapper.\n<p>Note …\n"],["internal_encoding","ARGF","ARGF.html#method-i-internal_encoding","()","<p>Returns the internal encoding for strings read from ARGF as an Encoding object.\n<p>If ARGF.set_encoding has …\n"],["internal_encoding","IO","IO.html#method-i-internal_encoding","()","<p>Returns the Encoding object that represents the encoding of the internal string, if conversion is specified, …\n"],["internal_encoding","StringIO","StringIO.html#method-i-internal_encoding","()","<p>Returns the Encoding of the internal string if conversion is specified.  Otherwise returns <code>nil</code>.\n"],["internal_object_id","ObjectSpace::InternalObjectWrapper","ObjectSpace/InternalObjectWrapper.html#method-i-internal_object_id","()","<p>Returns the Object#object_id of the internal object.\n"],["internal_super_of","ObjectSpace","ObjectSpace.html#method-c-internal_super_of","(p1)","<p>MRI specific feature &mdash; Return internal super class of cls (Class or Module).\n\n<p>obj can be an instance of  …\n"],["interpret_loosely","BigDecimal","BigDecimal.html#method-c-interpret_loosely","(p1)",""],["intersect?","Array","Array.html#method-i-intersect-3F","(p1)","<p>Returns <code>true</code> if the array and <code>other_ary</code> have at least one element in common, otherwise returns <code>false</code> …\n"],["intersect?","Set","Set.html#method-i-intersect-3F","(set)","<p>Returns true if the set and the given enumerable have at least one\nelement in common.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Set</span>[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>].<span class=\"ruby-identifier\">intersect?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["intersection","Array","Array.html#method-i-intersection","(*args)","<p>Returns a new Array containing each element found both in <code>self</code> and in all of the given Arrays <code>other_arrays</code> …\n"],["intersection","Set","Set.html#method-i-intersection","(enum)",""],["invalid?","SyntaxSuggest","SyntaxSuggest.html#method-c-invalid-3F","(source)","<p>SyntaxSuggest.invalid? [Private]\n<p>Opposite of ‘SyntaxSuggest.valid?`\n"],["invalid?","SyntaxSuggest::CodeBlock","SyntaxSuggest/CodeBlock.html#method-i-invalid-3F","()",""],["invalidate_memoized_attributes","Gem::Specification","Gem/Specification.html#method-i-invalidate_memoized_attributes","()","<p>Expire memoized instance variables that can incorrectly generate, replace or miss files due changes in …\n"],["invert","ENV","ENV.html#method-c-invert","()","<p>Returns a Hash whose keys are the ENV values, and whose values are the corresponding ENV names:\n\n<pre>ENV.replace(&#39;foo&#39; ...</pre>\n"],["invert","Hash","Hash.html#method-i-invert","()","<p>Returns a new Hash object with the each key-value pair inverted:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h1</span> = <span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">invert</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["invert","YAML::DBM","YAML/DBM.html#method-i-invert","()","<p>Returns a Hash (not a DBM database) created by using each value in the database as a key, with the corresponding …\n"],["invert!","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-invert-21","()",""],["invkind","WIN32OLE::Method","WIN32OLE/Method.html#method-i-invkind","()","<p>Returns the method invoke kind.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Workbooks&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["invoke","Gem::Command","Gem/Command.html#method-i-invoke","(*args)","<p>Invoke the command with the given list of arguments.\n"],["invoke","WIN32OLE","WIN32OLE.html#method-i-invoke","(*args)","<p>Runs OLE method. The first argument specifies the method name of OLE Automation object. The others specify …\n"],["invoke_command","Gem::CommandManager","Gem/CommandManager.html#method-i-invoke_command","(args, build_args)",""],["invoke_kind","WIN32OLE::Method","WIN32OLE/Method.html#method-i-invoke_kind","()","<p>Returns the method kind string. The string is “UNKNOWN” or “PROPERTY” or “PROPERTY” …\n"],["invoke_service","DRb::ExtServManager","DRb/ExtServManager.html#method-i-invoke_service","(name)",""],["invoke_service_command","DRb::ExtServManager","DRb/ExtServManager.html#method-i-invoke_service_command","(name, command)",""],["invoke_thread","DRb::ExtServManager","DRb/ExtServManager.html#method-i-invoke_thread","()",""],["invoke_with_build_args","Gem::Command","Gem/Command.html#method-i-invoke_with_build_args","(args, build_args)","<p>Invoke the command with the given list of normal arguments and additional build arguments.\n"],["io_pread","Fiber::Scheduler","Fiber/Scheduler.html#method-i-io_pread","(p1, p2, p3, p4, p5)","<p>Invoked by IO::Buffer#pread. See that method for description of arguments.\n"],["io_pwrite","Fiber::Scheduler","Fiber/Scheduler.html#method-i-io_pwrite","(p1, p2, p3, p4, p5)","<p>Invoked by IO::Buffer#pwrite. See that method for description of arguments.\n"],["io_read","Fiber::Scheduler","Fiber/Scheduler.html#method-i-io_read","(p1, p2, p3, p4)","<p>Invoked by IO#read to read <code>length</code> bytes from <code>io</code> into a specified <code>buffer</code> (see IO::Buffer).\n<p>The <code>length</code> argument …\n"],["io_select","Fiber::Scheduler","Fiber/Scheduler.html#method-i-io_select","(p1, p2, p3, p4)","<p>Invoked by IO.select to ask whether the specified descriptors are ready for specified events within the …\n"],["io_wait","Fiber::Scheduler","Fiber/Scheduler.html#method-i-io_wait","(p1, p2, p3)","<p>Invoked by IO#wait, IO#wait_readable, IO#wait_writable to ask whether the specified descriptor is ready …\n"],["io_write","Fiber::Scheduler","Fiber/Scheduler.html#method-i-io_write","(p1, p2, p3, p4)","<p>Invoked by IO#write to write <code>length</code> bytes to <code>io</code> from from a specified <code>buffer</code> (see IO::Buffer).\n<p>The <code>length</code> …\n"],["ioctl","CSV","CSV.html#method-i-ioctl","(*args)",""],["ioctl","IO","IO.html#method-i-ioctl","(p1, p2 = v2)","<p>Invokes Posix system call ioctl(2), which issues a low-level command to an I/O device.\n<p>Issues a low-level …\n"],["ioflush","IO","IO.html#method-i-ioflush","()","<p>Flushes input and output buffers in kernel.\n<p>You must require ‘io/console’ to use this method. …\n"],["ip","Addrinfo","Addrinfo.html#method-c-ip","(p1)","<p>returns an addrinfo object for IP address.\n<p>The port, socktype, protocol of the result is filled by zero. …\n"],["ip6_arpa","IPAddr","IPAddr.html#method-i-ip6_arpa","()","<p>Returns a string for DNS reverse lookup compatible with RFC3172.\n"],["ip6_int","IPAddr","IPAddr.html#method-i-ip6_int","()","<p>Returns a string for DNS reverse lookup compatible with RFC1886.\n"],["ip?","Addrinfo","Addrinfo.html#method-i-ip-3F","()","<p>returns true if addrinfo is internet (IPv4/IPv6) address. returns false otherwise.\n\n<pre>Addrinfo.tcp(&quot;127.0.0.1&quot;, ...</pre>\n"],["ip_address","Addrinfo","Addrinfo.html#method-i-ip_address","()","<p>Returns the IP address as a string.\n\n<pre>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ip_address    #=&gt; &quot;127.0.0.1&quot;\nAddrinfo.tcp(&quot;::1&quot;, ...</pre>\n"],["ip_address_list","Socket","Socket.html#method-c-ip_address_list","()","<p>Returns local IP addresses as an array.\n<p>The array contains Addrinfo objects.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">pp</span> <span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">ip_address_list</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ip_pktinfo","Socket::AncillaryData","Socket/AncillaryData.html#method-i-ip_pktinfo","()","<p>Extracts addr, ifindex and spec_dst from IP_PKTINFO ancillary data.\n<p>IP_PKTINFO is not standard.\n<p>Supported …\n"],["ip_pktinfo","Socket::AncillaryData","Socket/AncillaryData.html#method-c-ip_pktinfo","(p1, p2, p3 = v3)","<p>Returns new ancillary data for IP_PKTINFO.\n<p>If spec_dst is not given, addr is used.\n<p>IP_PKTINFO is not standard. …\n"],["ip_port","Addrinfo","Addrinfo.html#method-i-ip_port","()","<p>Returns the port number as an integer.\n\n<pre>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ip_port    #=&gt; 80\nAddrinfo.tcp(&quot;::1&quot;, ...</pre>\n"],["ip_unpack","Addrinfo","Addrinfo.html#method-i-ip_unpack","()","<p>Returns the IP address and port number as 2-element array.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;127.0.0.1&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">ip_unpack</span>    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ipaddr","Net::HTTP","Net/HTTP.html#method-i-ipaddr","()","<p>Returns the IP address for the connection.\n<p>If the session has not been started, returns the value set …\n"],["ipaddr=","Net::HTTP","Net/HTTP.html#method-i-ipaddr-3D","(addr)","<p>Sets the IP address for the connection:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">http</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">hostname</span>)\n<span class=\"ruby-identifier\">http</span>.<span class=\"ruby-identifier\">ipaddr</span> <span class=\"ruby-comment\"># =&gt; nil</span>\n<span class=\"ruby-identifier\">http</span>.<span class=\"ruby-identifier\">ipaddr</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ipv4?","Addrinfo","Addrinfo.html#method-i-ipv4-3F","()","<p>returns true if addrinfo is IPv4 address. returns false otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;127.0.0.1&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">ipv4?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ipv4?","IPAddr","IPAddr.html#method-i-ipv4-3F","()","<p>Returns true if the ipaddr is an IPv4 address.\n"],["ipv4_compat","IPAddr","IPAddr.html#method-i-ipv4_compat","()","<p>Returns a new ipaddr built by converting the native IPv4 address into an IPv4-compatible IPv6 address. …\n"],["ipv4_compat?","IPAddr","IPAddr.html#method-i-ipv4_compat-3F","()","<p>Returns true if the ipaddr is an IPv4-compatible IPv6 address.\n"],["ipv4_loopback?","Addrinfo","Addrinfo.html#method-i-ipv4_loopback-3F","()","<p>Returns true for IPv4 loopback address (127.0.0.0/8). It returns false otherwise.\n"],["ipv4_mapped","IPAddr","IPAddr.html#method-i-ipv4_mapped","()","<p>Returns a new ipaddr built by converting the native IPv4 address into an IPv4-mapped IPv6 address.\n"],["ipv4_mapped?","IPAddr","IPAddr.html#method-i-ipv4_mapped-3F","()","<p>Returns true if the ipaddr is an IPv4-mapped IPv6 address.\n"],["ipv4_multicast?","Addrinfo","Addrinfo.html#method-i-ipv4_multicast-3F","()","<p>Returns true for IPv4 multicast address (224.0.0.0/4). It returns false otherwise.\n"],["ipv4_multicast_loop","Socket::Option","Socket/Option.html#method-c-ipv4_multicast_loop","(p1)","<p>Creates a new Socket::Option object for IP_MULTICAST_LOOP.\n<p>The size is dependent on the platform.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">sockopt</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ipv4_multicast_loop","Socket::Option","Socket/Option.html#method-i-ipv4_multicast_loop","()","<p>Returns the ipv4_multicast_loop data in <em>sockopt</em> as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">sockopt</span> = <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Option</span>.<span class=\"ruby-identifier\">ipv4_multicast_loop</span>(<span class=\"ruby-value\">10</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ipv4_multicast_ttl","Socket::Option","Socket/Option.html#method-c-ipv4_multicast_ttl","(p1)","<p>Creates a new Socket::Option object for IP_MULTICAST_TTL.\n<p>The size is dependent on the platform.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Option</span>.<span class=\"ruby-identifier\">ipv4_multicast_ttl</span>(<span class=\"ruby-value\">10</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ipv4_multicast_ttl","Socket::Option","Socket/Option.html#method-i-ipv4_multicast_ttl","()","<p>Returns the ipv4_multicast_ttl data in <em>sockopt</em> as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">sockopt</span> = <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Option</span>.<span class=\"ruby-identifier\">ipv4_multicast_ttl</span>(<span class=\"ruby-value\">10</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ipv4_private?","Addrinfo","Addrinfo.html#method-i-ipv4_private-3F","()","<p>Returns true for IPv4 private address (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16). It returns false otherwise. …\n"],["ipv6?","Addrinfo","Addrinfo.html#method-i-ipv6-3F","()","<p>returns true if addrinfo is IPv6 address. returns false otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;127.0.0.1&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">ipv6?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ipv6?","IPAddr","IPAddr.html#method-i-ipv6-3F","()","<p>Returns true if the ipaddr is an IPv6 address.\n"],["ipv6_linklocal?","Addrinfo","Addrinfo.html#method-i-ipv6_linklocal-3F","()","<p>Returns true for IPv6 link local address (fe80::/10). It returns false otherwise.\n"],["ipv6_loopback?","Addrinfo","Addrinfo.html#method-i-ipv6_loopback-3F","()","<p>Returns true for IPv6 loopback address (::1). It returns false otherwise.\n"],["ipv6_mc_global?","Addrinfo","Addrinfo.html#method-i-ipv6_mc_global-3F","()","<p>Returns true for IPv6 multicast global scope address. It returns false otherwise.\n"],["ipv6_mc_linklocal?","Addrinfo","Addrinfo.html#method-i-ipv6_mc_linklocal-3F","()","<p>Returns true for IPv6 multicast link-local scope address. It returns false otherwise.\n"],["ipv6_mc_nodelocal?","Addrinfo","Addrinfo.html#method-i-ipv6_mc_nodelocal-3F","()","<p>Returns true for IPv6 multicast node-local scope address. It returns false otherwise.\n"],["ipv6_mc_orglocal?","Addrinfo","Addrinfo.html#method-i-ipv6_mc_orglocal-3F","()","<p>Returns true for IPv6 multicast organization-local scope address. It returns false otherwise.\n"],["ipv6_mc_sitelocal?","Addrinfo","Addrinfo.html#method-i-ipv6_mc_sitelocal-3F","()","<p>Returns true for IPv6 multicast site-local scope address. It returns false otherwise.\n"],["ipv6_multicast?","Addrinfo","Addrinfo.html#method-i-ipv6_multicast-3F","()","<p>Returns true for IPv6 multicast address (ff00::/8). It returns false otherwise.\n"],["ipv6_pktinfo","Socket::AncillaryData","Socket/AncillaryData.html#method-c-ipv6_pktinfo","(p1, p2)","<p>Returns new ancillary data for IPV6_PKTINFO.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">addr</span> = <span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">ip</span>(<span class=\"ruby-string\">&quot;::1&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ipv6_pktinfo","Socket::AncillaryData","Socket/AncillaryData.html#method-i-ipv6_pktinfo","()","<p>Extracts addr and ifindex from IPV6_PKTINFO ancillary data.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre>addr = ...</pre>\n"],["ipv6_pktinfo_addr","Socket::AncillaryData","Socket/AncillaryData.html#method-i-ipv6_pktinfo_addr","()","<p>Extracts addr from IPV6_PKTINFO ancillary data.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">addr</span> = <span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">ip</span>(<span class=\"ruby-string\">&quot;::1&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ipv6_pktinfo_ifindex","Socket::AncillaryData","Socket/AncillaryData.html#method-i-ipv6_pktinfo_ifindex","()","<p>Extracts ifindex from IPV6_PKTINFO ancillary data.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">addr</span> = <span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">ip</span>(<span class=\"ruby-string\">&quot;::1&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ipv6_sitelocal?","Addrinfo","Addrinfo.html#method-i-ipv6_sitelocal-3F","()","<p>Returns true for IPv6 site local address (fec0::/10). It returns false otherwise.\n"],["ipv6_to_ipv4","Addrinfo","Addrinfo.html#method-i-ipv6_to_ipv4","()","<p>Returns IPv4 address of IPv4 mapped/compatible IPv6 address. It returns nil if <code>self</code> is not IPv4 mapped/compatible …\n"],["ipv6_unique_local?","Addrinfo","Addrinfo.html#method-i-ipv6_unique_local-3F","()","<p>Returns true for IPv6 unique local address (fc00::/7, RFC4193). It returns false otherwise.\n"],["ipv6_unspecified?","Addrinfo","Addrinfo.html#method-i-ipv6_unspecified-3F","()","<p>Returns true for IPv6 unspecified address (::). It returns false otherwise.\n"],["ipv6_v4compat?","Addrinfo","Addrinfo.html#method-i-ipv6_v4compat-3F","()","<p>Returns true for IPv4-compatible IPv6 address (::/80). It returns false otherwise.\n"],["ipv6_v4mapped?","Addrinfo","Addrinfo.html#method-i-ipv6_v4mapped-3F","()","<p>Returns true for IPv4-mapped IPv6 address (::ffff:0:0/80). It returns false otherwise.\n"],["ipv6only!","Socket","Socket.html#method-i-ipv6only-21","()","<p>enable the socket option IPV6_V6ONLY if IPV6_V6ONLY is available.\n"],["irb","Binding","Binding.html#method-i-irb","(show_code: true)","<p>Opens an IRB session where <code>binding.irb</code> is called which allows for interactive debugging. You can call …\n"],["irb","IRB","IRB.html#method-c-irb","(file = nil, *main)","<p>Creates a new IRB session, see Irb.new.\n<p>The optional <code>file</code> argument is given to Context.new, along with …\n"],["irb","IRB::JobManager","IRB/JobManager.html#method-i-irb","(key)","<p>Returns the irb session for the given <code>key</code> object, see #search for more information.\n"],["irb_abort","IRB","IRB.html#method-c-irb_abort","(irb, exception = Abort)","<p>Aborts then interrupts irb.\n<p>Will raise an Abort exception, or the given <code>exception</code>.\n"],["irb_at_exit","IRB","IRB.html#method-c-irb_at_exit","()","<p>Calls each event hook of <code>IRB.conf[:AT_EXIT]</code> when the current session quits.\n"],["irb_context","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_context","()","<p>Displays current configuration.\n<p>Modifying the configuration is achieved by sending a message to IRB.conf …\n"],["irb_exit","IRB","IRB.html#method-c-irb_exit","(irb, ret)","<p>Quits irb\n"],["irb_exit","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_exit","(ret = 0)","<p>Quits the current irb context\n<p><code>ret</code> is the optional signal or message to send to Context#exit\n<p>Same as <code>IRB.CurrentContext.exit</code> …\n"],["irb_level","IRB::Context","IRB/Context.html#method-i-irb_level","()","<p>Size of the current WorkSpace stack\n"],["irb_load","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_load","(*opts, &b)","<p>Loads the given file similarly to Kernel#load, see IrbLoader#irb_load\n"],["irb_load","IRB::IrbLoader","IRB/IrbLoader.html#method-i-irb_load","(fn, priv = nil)","<p>Loads the given file similarly to Kernel#load\n"],["irb_require","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_require","(*opts, &b)","<p>Loads the given file similarly to Kernel#require\n"],["isEqual","Jacobian","Jacobian.html#method-i-isEqual","(a,b,zero=0.0,e=1.0e-8)","<p>Determines the equality of two numbers by comparing to zero, or using the epsilon value\n"],["is_a?","Object","Object.html#method-i-is_a-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>, or if <em>class</em> is one of the superclasses of <em>obj</em> or modules included …\n"],["is_alias_for","RDoc::Constant","RDoc/Constant.html#method-i-is_alias_for","()","<p>The module or class this constant is an alias for\n"],["is_end?","SyntaxSuggest::CodeBlock","SyntaxSuggest/CodeBlock.html#method-i-is_end-3F","()",""],["is_end?","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-i-is_end-3F","()","<p>Returns true if the code line is determined to contain an ‘end` keyword\n"],["is_end?","SyntaxSuggest::LexValue","SyntaxSuggest/LexValue.html#method-i-is_end-3F","()",""],["is_kw?","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-i-is_kw-3F","()","<p>Returns true if the code line is determined to contain a keyword that matches with an ‘end`\n<p>For example: …\n"],["is_kw?","SyntaxSuggest::LexValue","SyntaxSuggest/LexValue.html#method-i-is_kw-3F","()",""],["is_reachable_from?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-is_reachable_from-3F","(other)",""],["is_version_1_2?","Net::HTTP","Net/HTTP.html#method-c-is_version_1_2-3F","()",""],["isatty","IO","IO.html#method-i-isatty","()","<p>Returns <code>true</code> if the stream is associated with a terminal device (tty), <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>).<span class=\"ruby-identifier\">isatty</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["isatty","StringIO","StringIO.html#method-i-isatty","()","<p>Returns <code>false</code>.  Just for compatibility to IO.\n"],["isdst","Time","Time.html#method-i-isdst","()","<p>Returns <code>true</code> if <code>self</code> is in daylight saving time, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-01 ...</span>\n</pre>\n"],["iseuc","Kconv","Kconv.html#method-c-iseuc","(str)","<p>Returns whether input encoding is EUC-JP or not.\n<p><strong>Note</strong> don’t expect this return value is MatchData …\n"],["iseuc","Kconv","Kconv.html#method-i-iseuc","(str)","<p>Returns whether input encoding is EUC-JP or not.\n<p><strong>Note</strong> don’t expect this return value is MatchData …\n"],["iseuc","String","String.html#method-i-iseuc","()","<p>Returns whether <code>self</code>‘s encoding is EUC-JP or not.\n"],["isjis","Kconv","Kconv.html#method-i-isjis","(str)","<p>Returns whether input encoding is ISO-2022-JP or not.\n"],["isjis","Kconv","Kconv.html#method-c-isjis","(str)","<p>Returns whether input encoding is ISO-2022-JP or not.\n"],["isjis","String","String.html#method-i-isjis","()","<p>Returns whether <code>self</code>‘s encoding is ISO-2022-JP or not.\n"],["iso8601","Date","Date.html#method-c-iso8601","(p1 = v1, p2 = v2, p3 = {})","<p>Returns a new Date object with values parsed from <code>string</code>, which should contain an ISO 8601 formatted …\n"],["iso8601","Date","Date.html#method-i-iso8601","()","<p>Equivalent to #strftime with argument <code>&#39;%Y-%m-%d&#39;</code> (or its shorthand form <code>&#39;%F&#39;</code>);\n\n<pre>Date.new(2001, ...</pre>\n"],["iso8601","DateTime","DateTime.html#method-c-iso8601","(p1 = v1, p2 = v2, p3 = {})","<p>Creates a new DateTime object by parsing from a string according to some typical ISO 8601 formats.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">iso8601</span>(<span class=\"ruby-string\">&#39;2001-02-03T04:05:06+07:00&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["iso8601","DateTime","DateTime.html#method-i-iso8601","(*args)","<p>This method is equivalent to strftime(‘%FT%T%:z’). The optional argument <code>n</code> is the number of digits …\n"],["iso8601","Time","Time.html#method-i-iso8601","(fraction_digits=0)",""],["iso8601","Time","Time.html#method-c-iso8601","(time)",""],["issetugid","Process::Sys","Process/Sys.html#method-c-issetugid","()","<p>Returns <code>true</code> if the process was created as a result of an execve(2) system call which had either of the …\n"],["issjis","Kconv","Kconv.html#method-i-issjis","(str)","<p>Returns whether input encoding is Shift_JIS or not.\n"],["issjis","Kconv","Kconv.html#method-c-issjis","(str)","<p>Returns whether input encoding is Shift_JIS or not.\n"],["issjis","String","String.html#method-i-issjis","()","<p>Returns whether <code>self</code>‘s encoding is Shift_JIS or not.\n"],["issuer","OpenSSL::PKCS7::RecipientInfo","OpenSSL/PKCS7/RecipientInfo.html#method-i-issuer","()",""],["issuer","OpenSSL::PKCS7::SignerInfo","OpenSSL/PKCS7/SignerInfo.html#method-i-issuer","()",""],["issuer","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-issuer","()",""],["issuer","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-issuer","()",""],["issuer=","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-issuer-3D","(p1)",""],["issuer=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-issuer-3D","(p1)",""],["issuer_certificate=","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-issuer_certificate-3D","(p1)",""],["issuer_key_hash","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-issuer_key_hash","()","<p>Returns the issuerKeyHash of this certificate ID, the hash of the issuer’s public key.\n"],["issuer_name_hash","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-issuer_name_hash","()","<p>Returns the issuerNameHash of this certificate ID, the hash of the issuer’s distinguished name calculated …\n"],["issuer_of","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-issuer_of","(certificate)","<p>Returns the issuer certificate of the given <code>certificate</code> if it exists in the trust directory.\n"],["isutf8","Kconv","Kconv.html#method-c-isutf8","(str)","<p>Returns whether input encoding is UTF-8 or not.\n"],["isutf8","Kconv","Kconv.html#method-i-isutf8","(str)","<p>Returns whether input encoding is UTF-8 or not.\n"],["isutf8","String","String.html#method-i-isutf8","()","<p>Returns whether <code>self</code>‘s encoding is UTF-8 or not.\n"],["italy","Date","Date.html#method-i-italy","()","<p>Equivalent to Date#new_start with argument Date::ITALY.\n"],["iteration!","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-iteration-21","()",""],["iterator?","Kernel","Kernel.html#method-i-iterator-3F","()","<p>Deprecated.  Use block_given? instead.\n"],["itself","Object","Object.html#method-i-itself","()","<p>Returns the receiver.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">string</span> = <span class=\"ruby-string\">&quot;my string&quot;</span>\n<span class=\"ruby-identifier\">string</span>.<span class=\"ruby-identifier\">itself</span>.<span class=\"ruby-identifier\">object_id</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-identifier\">string</span>.<span class=\"ruby-identifier\">object_id</span>   <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["iv=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-iv-3D","(p1)","<p>Sets the cipher IV. Please note that since you should never be using ECB mode, an IV is always explicitly …\n"],["iv_len","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-iv_len","()","<p>Returns the expected length in bytes for an IV for this Cipher.\n"],["iv_len=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-iv_len-3D","(p1)","<p>Sets the IV/nonce length of the Cipher. Normally block ciphers don’t allow changing the IV length, …\n"],["j","Kernel","Kernel.html#method-i-j","(*objs)","<p>Outputs <em>objs</em> to STDOUT as JSON strings in the shortest form, that is in one line.\n"],["jacobian","Jacobian","Jacobian.html#method-i-jacobian","(f,fx,x)","<p>Computes the Jacobian of <code>f</code> at <code>x</code>. <code>fx</code> is the value of <code>f</code> at <code>x</code>.\n"],["java_platform?","Gem","Gem.html#method-c-java_platform-3F","()","<p>Is this a java platform?\n"],["jd","Date","Date.html#method-c-jd","(p1 = v1, p2 = v2)","<p>Returns a new Date object formed from the arguments:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">jd</span>(<span class=\"ruby-value\">2451944</span>).<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;2001-02-03&quot;</span>\n<span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">jd</span>(<span class=\"ruby-value\">2451945</span>).<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["jd","Date","Date.html#method-i-jd","()","<p>Returns the Julian day number.  This is a whole number, which is adjusted by the offset as the local …\n"],["jd","DateTime","DateTime.html#method-c-jd","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6)","<p>Creates a DateTime object denoting the given chronological Julian day number.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">jd</span>(<span class=\"ruby-value\">2451944</span>)    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["jisx0301","Date","Date.html#method-i-jisx0301","()","<p>Returns a string representation of the date in <code>self</code> in JIS X 0301 format.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">jisx0301</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["jisx0301","Date","Date.html#method-c-jisx0301","(p1 = v1, p2 = v2, p3 = {})","<p>Returns a new Date object with values parsed from <code>string</code>, which should be a valid JIS X 0301 format: …\n"],["jisx0301","DateTime","DateTime.html#method-i-jisx0301","(*args)","<p>Returns a string in a JIS X 0301 format. The optional argument <code>n</code> is the number of digits for fractional …\n"],["jisx0301","DateTime","DateTime.html#method-c-jisx0301","(p1 = v1, p2 = v2, p3 = {})","<p>Creates a new DateTime object by parsing from a string according to some typical JIS X 0301 formats. …\n"],["jj","Kernel","Kernel.html#method-i-jj","(*objs)","<p>Outputs <em>objs</em> to STDOUT as JSON strings in a pretty format, with indentation and over many lines.\n"],["join","Array","Array.html#method-i-join","(*args)","<p>Returns the new String formed by joining the array elements after conversion. For each element <code>element</code> …\n"],["join","File","File.html#method-c-join","(*args)","<p>Returns a new string formed by joining the strings using <code>&quot;/&quot;</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">join</span>(<span class=\"ruby-string\">&quot;usr&quot;</span>, <span class=\"ruby-string\">&quot;mail&quot;</span>, <span class=\"ruby-string\">&quot;gumby&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["join","Pathname","Pathname.html#method-i-join","(*args)","<p>Joins the given pathnames onto <code>self</code> to create a new Pathname object. This is effectively the same as …\n"],["join","Set","Set.html#method-i-join","(separator=nil)","<p>Returns a string created by converting each element of the set to a string\nSee also: Array#join\n"],["join","Shellwords","Shellwords.html#method-c-join","(array)",""],["join","Thread","Thread.html#method-i-join","(*args)","<p>The calling thread will suspend execution and run this <code>thr</code>.\n<p>Does not return until <code>thr</code> exits or until the …\n"],["join","URI","URI.html#method-c-join","(*str)","<p>Synopsis\n\n<pre>URI::join(str[, str, ...])</pre>\n<p>Args\n"],["join","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-join","(*uris)","<p>Args\n<p><code>uris</code> &mdash; an Array of Strings\n\n<p>Description\n"],["join","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-join","(*uris)","<p>Args\n<p><code>uris</code> &mdash; an Array of Strings\n\n<p>Description\n"],["join_consecutive!","SyntaxSuggest::CleanDocument","SyntaxSuggest/CleanDocument.html#method-i-join_consecutive-21","()","<p>Smushes logically “consecutive” lines\n\n<pre>source = &lt;&lt;~&#39;EOM&#39;\n  User.\n    where(name: &#39;schneems&#39;). ...</pre>\n"],["join_groups","SyntaxSuggest::CleanDocument","SyntaxSuggest/CleanDocument.html#method-i-join_groups","(groups)","<p>Helper method for joining “groups” of lines\n<p>Input is expected to be type Array&lt;Array&lt;CodeLine&gt;&gt; …\n"],["join_heredoc!","SyntaxSuggest::CleanDocument","SyntaxSuggest/CleanDocument.html#method-i-join_heredoc-21","()","<p>Smushes all heredoc lines into one line\n\n<pre>source = &lt;&lt;~&#39;EOM&#39;\n  foo = &lt;&lt;~HEREDOC\n     lol\n     hehehe\n  HEREDOC ...</pre>\n"],["join_trailing_slash!","SyntaxSuggest::CleanDocument","SyntaxSuggest/CleanDocument.html#method-i-join_trailing_slash-21","()","<p>Join lines with a trailing slash\n\n<pre>source = &lt;&lt;~&#39;EOM&#39;\n  it &quot;code can be split&quot; \\\n     &quot;across multiple lines&quot; ...</pre>\n"],["json_creatable?","Class","Class.html#method-i-json_creatable-3F","()","<p>Returns true if this class can be used to create an instance from a serialised JSON string. The class …\n"],["json_creatable?","JSON::GenericObject","JSON/GenericObject.html#method-c-json_creatable-3F","()",""],["json_create","BigDecimal","BigDecimal.html#method-c-json_create","(object)","<p>Import a JSON Marshalled object.\n<p>method used for JSON marshalling support.\n"],["json_create","Complex","Complex.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting Real value <code>r</code>, imaginary value <code>i</code>, to a Complex object.\n"],["json_create","Date","Date.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting Julian year <code>y</code>, month <code>m</code>, day <code>d</code> and Day of Calendar Reform <code>sg</code> to …\n"],["json_create","DateTime","DateTime.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting year <code>y</code>, month <code>m</code>, day <code>d</code>, hour <code>H</code>, minute <code>M</code>, second <code>S</code>, offset <code>of</code> …\n"],["json_create","Exception","Exception.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Exception object with message <code>m</code> and backtrace <code>b</code> serialized …\n"],["json_create","JSON::GenericObject","JSON/GenericObject.html#method-c-json_create","(data)",""],["json_create","OpenStruct","OpenStruct.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Struct object with values <code>t</code> serialized by <code>to_json</code>.\n"],["json_create","Range","Range.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Range object with arguments <code>a</code> serialized by <code>to_json</code>.\n"],["json_create","Rational","Rational.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting numerator value <code>n</code>, denominator value <code>d</code>, to a Rational object. …\n"],["json_create","Regexp","Regexp.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Regexp object with source <code>s</code> (Regexp or String) and options …\n"],["json_create","Set","Set.html#method-c-json_create","(object)","<p>Import a JSON Marshalled object.\n<p>method used for JSON marshalling support.\n"],["json_create","Struct","Struct.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Struct object with values <code>v</code> serialized by <code>to_json</code>.\n"],["json_create","Symbol","Symbol.html#method-c-json_create","(o)","<p>Deserializes JSON string by converting the <code>string</code> value stored in the object to a Symbol\n"],["json_create","Time","Time.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting time since epoch to Time\n"],["julian","Date","Date.html#method-i-julian","()","<p>Equivalent to Date#new_start with argument Date::JULIAN.\n"],["julian?","Date","Date.html#method-i-julian-3F","()","<p>Returns <code>true</code> if the date is before the date of calendar reform, <code>false</code> otherwise:\n\n<pre>(Date.new(1582, 10, 15) ...</pre>\n"],["julian_leap?","Date","Date.html#method-c-julian_leap-3F","(p1)","<p>Returns <code>true</code> if the given year is a leap year in the proleptic Julian calendar, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">julian_leap?</span>(<span class=\"ruby-value\">1900</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["just_cursor_moving","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-just_cursor_moving","()",""],["just_move_cursor","Reline::LineEditor","Reline/LineEditor.html#method-i-just_move_cursor","()",""],["kconv","Kconv","Kconv.html#method-c-kconv","(str, to_enc, from_enc=nil)","<p>Convert <code>str</code> to <code>to_enc</code>. <code>to_enc</code> and <code>from_enc</code> are given as constants of Kconv or Encoding objects.\n"],["kconv","Kconv","Kconv.html#method-i-kconv","(str, to_enc, from_enc=nil)","<p>Convert <code>str</code> to <code>to_enc</code>. <code>to_enc</code> and <code>from_enc</code> are given as constants of Kconv or Encoding objects.\n"],["kconv","String","String.html#method-i-kconv","(to_enc, from_enc=nil)","<p>Convert <code>self</code> to <code>to_enc</code>. <code>to_enc</code> and <code>from_enc</code> are given as constants of Kconv or Encoding objects.\n"],["keep_alive?","Net::HTTP","Net/HTTP.html#method-i-keep_alive-3F","(req, res)",""],["keep_back","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-i-keep_back","()",""],["keep_back","CSV::Parser::Scanner","CSV/Parser/Scanner.html#method-i-keep_back","()",""],["keep_clean","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-keep_clean","()","<p>Removes dead tuples.\n"],["keep_drop","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-i-keep_drop","()",""],["keep_drop","CSV::Parser::Scanner","CSV/Parser/Scanner.html#method-i-keep_drop","()",""],["keep_end","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-i-keep_end","()",""],["keep_end","CSV::Parser::Scanner","CSV/Parser/Scanner.html#method-i-keep_end","()",""],["keep_if","Array","Array.html#method-i-keep_if","()","<p>Retains those elements for which the block returns a truthy value; deletes all other elements; returns …\n"],["keep_if","ENV","ENV.html#method-c-keep_if","()","<p>Yields each environment variable name and its value as a 2-element Array, deleting each environment variable …\n"],["keep_if","Hash","Hash.html#method-i-keep_if","()","<p>Calls the block for each key-value pair; retains the entry if the block returns a truthy value; otherwise …\n"],["keep_if","Set","Set.html#method-i-keep_if","()","<p>Deletes every element of the set for which block evaluates to\nfalse, and returns self. Returns an enumerator ...\n"],["keep_only_files_and_directories","Gem::Specification","Gem/Specification.html#method-i-keep_only_files_and_directories","()",""],["keep_script_lines","RubyVM","RubyVM.html#method-c-keep_script_lines","()","<p>Return current <code>keep_script_lines</code> status. Now it only returns <code>true</code> of <code>false</code>, but it can return other objects …\n"],["keep_script_lines=","RubyVM","RubyVM.html#method-c-keep_script_lines-3D","(p1)","<p>It set <code>keep_script_lines</code> flag. If the flag is set, all loaded scripts are recorded in a interpreter process. …\n"],["keep_start","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-i-keep_start","()",""],["keep_start","CSV::Parser::Scanner","CSV/Parser/Scanner.html#method-i-keep_start","()",""],["kernel_sleep","Fiber::Scheduler","Fiber/Scheduler.html#method-i-kernel_sleep","(p1)","<p>Invoked by Kernel#sleep and Mutex#sleep and is expected to provide an implementation of sleeping in a …\n"],["key","ENV","ENV.html#method-c-key","(p1)","<p>Returns the name of the first environment variable with <code>value</code>, if it exists:\n\n<pre>ENV.replace(&#39;foo&#39; =&gt; &#39;0&#39;, ...</pre>\n"],["key","Hash","Hash.html#method-i-key","(p1)","<p>Returns the key for the first-found entry with the given <code>value</code> (see Entry Order):\n\n<pre>h = {foo: 0, bar: 2, ...</pre>\n"],["key","KeyError","KeyError.html#method-i-key","()","<p>Return the key caused this KeyError exception.\n"],["key","NoMatchingPatternKeyError","NoMatchingPatternKeyError.html#method-i-key","()","<p>Return the key caused this NoMatchingPatternKeyError exception.\n"],["key","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-key","()",""],["key","YAML::DBM","YAML/DBM.html#method-i-key","( keystr )","<p>Returns the key for the specified value.\n"],["key=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-key-3D","(p1)","<p>Sets the cipher key. To generate a key, you should either use a secure random byte string or, if the …\n"],["key?","CGI::QueryExtension","CGI/QueryExtension.html#method-i-key-3F","(*args)",""],["key?","CSV::Row","CSV/Row.html#method-i-key-3F","(header)",""],["key?","ENV","ENV.html#method-c-key-3F","(p1)","<p>ENV.has_key?, ENV.member?, and ENV.key? are aliases for ENV.include?.\n<p>Returns <code>true</code> if there is an environment …\n"],["key?","Hash","Hash.html#method-i-key-3F","(p1)","<p>Methods #has_key?, #key?, and #member? are aliases for #include?.\n<p>Returns <code>true</code> if <code>key</code> is a key in <code>self</code> …\n"],["key?","Net::HTTPHeader","Net/HTTPHeader.html#method-i-key-3F","(key)","<p>Returns <code>true</code> if the field for the case-insensitive <code>key</code> exists, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">req</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Get</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">uri</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["key?","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["key?","PStore","PStore.html#method-i-key-3F","(key)","<p>Returns <code>true</code> if <code>key</code> exists, <code>false</code> otherwise:\n\n<pre>example_store do |store|\n  store.transaction do\n    store.key?(:foo) ...</pre>\n"],["key?","Racc::ISet","Racc/ISet.html#method-i-key-3F","(key)",""],["key?","Thread","Thread.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the given string (or symbol) exists as a fiber-local variable.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">me</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">current</span>\n<span class=\"ruby-identifier\">me</span>[<span class=\"ruby-value\">:oliver</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["key_bindings","Reline::Config","Reline/Config.html#method-i-key_bindings","()",""],["key_delete","Reline::LineEditor","Reline/LineEditor.html#method-i-key_delete","(key)",""],["key_len","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-key_len","()","<p>Returns the key length in bytes of the Cipher.\n"],["key_len=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-key_len-3D","(p1)","<p>Sets the key length of the cipher.  If the cipher is a fixed length cipher then attempting to set the …\n"],["key_mapping","Reline::KeyStroke","Reline/KeyStroke.html#method-i-key_mapping","()",""],["key_newline","Reline::LineEditor","Reline/LineEditor.html#method-i-key_newline","(key)",""],["key_notation_to_code","Reline::Config","Reline/Config.html#method-i-key_notation_to_code","(notation)",""],["keymap","Reline::Config","Reline/Config.html#method-i-keymap","()",""],["keys","CGI::QueryExtension","CGI/QueryExtension.html#method-i-keys","(*args)","<p>Return all query parameter names as an array of String.\n"],["keys","ENV","ENV.html#method-c-keys","()","<p>Returns all variable names in an Array:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">keys</span> <span class=\"ruby-comment\"># =&gt; [&#39;bar&#39;, ...</span>\n</pre>\n"],["keys","Hash","Hash.html#method-i-keys","()","<p>Returns a new Array containing all keys in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">keys</span> <span class=\"ruby-comment\"># =&gt; [:foo, :bar, ...</span>\n</pre>\n"],["keys","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-keys","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["keys","PStore","PStore.html#method-i-keys","()","<p>Returns an array of the existing keys:\n\n<pre>example_store do |store|\n  store.transaction do\n    store.keys ...</pre>\n"],["keys","Thread","Thread.html#method-i-keys","()","<p>Returns an array of the names of the fiber-local variables (as Symbols).\n\n<pre>thr = Thread.new do\n  Thread.current[:cat] ...</pre>\n"],["keys","Win32::Registry","Win32/Registry.html#method-i-keys","()","<p>return keys as an array\n"],["keys_with_inspector","IRB::Inspector","IRB/Inspector.html#method-c-keys_with_inspector","(inspector)","<p>Determines the inspector to use where <code>inspector</code> is one of the keys passed during inspector definition. …\n"],["keyword_init?","Struct","Struct.html#method-c-keyword_init-3F","()","<p>Returns <code>true</code> if the class was initialized with <code>keyword_init: true</code>. Otherwise returns <code>nil</code> or <code>false</code>.\n<p>Examples: …\n"],["kill","DRb::ThreadObject","DRb/ThreadObject.html#method-i-kill","()",""],["kill","IRB::JobManager","IRB/JobManager.html#method-i-kill","(*keys)","<p>Terminates the irb sessions specified by the given <code>keys</code>.\n<p>Raises an IrbAlreadyDead exception if one of …\n"],["kill","Process","Process.html#method-c-kill","(*args)","<p>Sends the given signal to the specified process id(s) if <em>pid</em> is positive. If <em>pid</em> is zero, <em>signal</em> is sent …\n"],["kill","Thread","Thread.html#method-i-kill","()","<p>Terminates <code>thr</code> and schedules another thread to be run, returning the terminated Thread.  If this is the …\n"],["kill","Thread","Thread.html#method-c-kill","(p1)","<p>Causes the given <code>thread</code> to exit, see also Thread::exit.\n\n<pre>count = 0\na = Thread.new { loop { count += 1 } ...</pre>\n"],["kill_line","Reline::LineEditor","Reline/LineEditor.html#method-i-kill_line","(key)",""],["kill_whole_line","Reline::LineEditor","Reline/LineEditor.html#method-i-kill_whole_line","(key)",""],["kind_of?","Object","Object.html#method-i-kind_of-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>, or if <em>class</em> is one of the superclasses of <em>obj</em> or modules included …\n"],["la=","Racc::State","Racc/State.html#method-i-la-3D","(la)",""],["label","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-label","()","<p>Returns the label of this instruction sequence.\n<p><code>&lt;main&gt;</code> if it’s at the top level, <code>&lt;compiled&gt;</code> …\n"],["label","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-label","()","<p>Returns the label of this frame.\n<p>Usually consists of method, class, module, etc names with decoration. …\n"],["lambda","Kernel","Kernel.html#method-i-lambda","()","<p>Equivalent to Proc.new, except the resulting Proc objects check the number of parameters passed when …\n"],["lambda?","Proc","Proc.html#method-i-lambda-3F","()","<p>Returns <code>true</code> if a Proc object is lambda. <code>false</code> if non-lambda.\n<p>The lambda-ness affects argument handling …\n"],["last","Array","Array.html#method-i-last","(*args)","<p>Returns elements from <code>self</code>; <code>self</code> is not modified.\n<p>When no argument is given, returns the last element: …\n"],["last","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-last","(p1)","<p>Returns the last number in this arithmetic sequence, or an array of the last <code>n</code> elements.\n"],["last","Range","Range.html#method-i-last","(*args)","<p>With no argument, returns the last element of <code>self</code>, if it exists:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">last</span>     <span class=\"ruby-comment\"># =&gt; 4</span>\n(<span class=\"ruby-string\">&#39;a&#39;</span><span class=\"ruby-operator\">..</span><span class=\"ruby-string\">&#39;d&#39;</span>).<span class=\"ruby-identifier\">last</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["last","SyntaxSuggest::LexAll","SyntaxSuggest/LexAll.html#method-i-last","()",""],["last_column","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-last_column","()","<p>The column number in the source code where this AST’s text ended.\n"],["last_error","Encoding::Converter","Encoding/Converter.html#method-i-last_error","()","<p>Returns an exception object for the last conversion. Returns nil if the last conversion did not produce …\n"],["last_error","Fiddle","Fiddle.html#method-c-last_error","()","<p>Returns the last <code>Error</code> of the current executing <code>Thread</code> or nil if none\n"],["last_error=","Fiddle","Fiddle.html#method-c-last_error-3D","(error)","<p>Sets the last <code>Error</code> of the current executing <code>Thread</code> to <code>error</code>\n"],["last_index","SyntaxSuggest::PriorityQueue","SyntaxSuggest/PriorityQueue.html#method-i-last_index","()",""],["last_line","CSV::Parser","CSV/Parser.html#method-i-last_line","()",""],["last_lineno","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-last_lineno","()","<p>The line number in the source code where this AST’s text ended.\n"],["last_match","Regexp","Regexp.html#method-c-last_match","(*args)","<p>With no argument, returns the value of <code>$!</code>, which is the result of the most recent pattern match (see …\n"],["last_modified","OpenURI::Meta","OpenURI/Meta.html#method-i-last_modified","()","<p>returns a Time that represents the Last-Modified field.\n"],["last_modified","RDoc::TopLevel","RDoc/TopLevel.html#method-i-last_modified","()","<p>Time this file was last modified, if known\n"],["last_status","Process","Process.html#method-c-last_status","()","<p>Returns the status of the last executed child process in the current thread.\n\n<pre>Process.wait Process.spawn(&quot;ruby&quot;, ...</pre>\n"],["last_update","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-last_update","()",""],["last_update=","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-last_update-3D","(p1)",""],["last_update_check","Gem::ConfigFile","Gem/ConfigFile.html#method-i-last_update_check","()","<p>Reads time of last update check from state file\n"],["last_update_check=","Gem::ConfigFile","Gem/ConfigFile.html#method-i-last_update_check-3D","(timestamp)","<p>Writes time of last update check to state file\n"],["latest_compact_info","GC","GC.html#method-c-latest_compact_info","()","<p>Returns information about object moved in the most recent GC compaction.\n<p>The returned hash has two keys …\n"],["latest_gc_info","GC","GC.html#method-c-latest_gc_info","(hash_or_key = nil)","<p>Returns information about the most recent garbage collection.\n<p>If the optional argument, hash, is given, …\n"],["latest_rubygems_version","Gem","Gem.html#method-c-latest_rubygems_version","()","<p>Returns the latest release version of RubyGems.\n"],["latest_spec_for","Gem","Gem.html#method-c-latest_spec_for","(name)","<p>Returns the latest release-version specification for the gem <code>name</code>.\n"],["latest_spec_for","Gem::Specification","Gem/Specification.html#method-c-latest_spec_for","(name)","<p>Return the latest installed spec for gem <code>name</code>.\n"],["latest_specs","Gem::Specification","Gem/Specification.html#method-c-latest_specs","(prerelease = false)","<p>Return the latest specs, optionally including prerelease specs if <code>prerelease</code> is true.\n"],["latest_version","Gem::Resolver::Molinillo::Resolver::Resolution::PossibilitySet","Gem/Resolver/Molinillo/Resolver/Resolution/PossibilitySet.html#method-i-latest_version","()","<p>@return [Object] most up-to-date dependency in the possibility set\n"],["latest_version?","Gem::Dependency","Gem/Dependency.html#method-i-latest_version-3F","()","<p>Is this dependency simply asking for the latest version of a gem?\n"],["latest_version_for","Gem","Gem.html#method-c-latest_version_for","(name)","<p>Returns the version of the latest release-version of gem <code>name</code>\n"],["lazy","Enumerable","Enumerable.html#method-i-lazy","()","<p>Returns an Enumerator::Lazy, which redefines most Enumerable methods to postpone enumeration and enumerate …\n"],["lazy","Enumerator::Lazy","Enumerator/Lazy.html#method-i-lazy","()","<p>Returns self.\n"],["lchmod","File","File.html#method-c-lchmod","(*args)","<p>Equivalent to File::chmod, but does not follow symbolic links (so it will change the permissions associated …\n"],["lchmod","Pathname","Pathname.html#method-i-lchmod","(p1)","<p>Same as Pathname.chmod, but does not follow symbolic links.\n<p>See File.lchmod.\n"],["lchown","File","File.html#method-c-lchown","(*args)","<p>Equivalent to File::chown, but does not follow symbolic links (so it will change the owner associated …\n"],["lchown","Pathname","Pathname.html#method-i-lchown","(p1, p2)","<p>Same as Pathname.chown, but does not follow symbolic links.\n<p>See File.lchown.\n"],["lcm","Integer","Integer.html#method-i-lcm","(p1)","<p>Returns the least common multiple of the two integers. The result is always positive. 0.lcm(x) and x.lcm …\n"],["ld","Date","Date.html#method-i-ld","()","<p>Returns the Lilian day number, which is the number of days since the beginning of the Gregorian calendar, …\n"],["ldexp","Math","Math.html#method-c-ldexp","(p1, p2)","<p>Returns the value of <code>fraction * 2**exponent</code>.\n<p>Domain of <code>fraction</code>: <code>[0.0, 1.0)</code>.\n<p>Domain of <code>exponent</code>: <code>[0, 1024]</code> …\n"],["ldflag_to_link_modifier","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-ldflag_to_link_modifier","(arg)",""],["leap?","Date","Date.html#method-i-leap-3F","()","<p>Returns <code>true</code> if the year is a leap year, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">leap?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>).<span class=\"ruby-identifier\">leap?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["leap?","Date","Date.html#method-c-leap-3F","(p1)","<p>Returns <code>true</code> if the given year is a leap year in the proleptic Gregorian calendar, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">gregorian_leap?</span>(<span class=\"ruby-value\">2000</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["left","Racc::Grammar::PrecedenceDefinitionEnv","Racc/Grammar/PrecedenceDefinitionEnv.html#method-i-left","(*syms)",""],["length","Array","Array.html#method-i-length","()","<p>Returns the count of elements in <code>self</code>.\n"],["length","Digest::Instance","Digest/Instance.html#method-i-length","()","<p>Returns digest_obj.digest_length().\n"],["length","ENV","ENV.html#method-c-length","()","<p>Returns the count of environment variables:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-comment\"># =&gt; 2 ...</span>\n</pre>\n"],["length","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-length","()",""],["length","Hash","Hash.html#method-i-length","()","<p>Returns the count of entries in <code>self</code>:\n\n<pre class=\"ruby\">{<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-comment\"># =&gt; 3</span>\n</pre>\n<p>Hash#length is an alias for …\n"],["length","MatchData","MatchData.html#method-i-length","()","<p>Returns size of the match array:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; #&lt;MatchData &quot;HX1138&quot; 1:&quot;H&quot; ...</span>\n</pre>\n"],["length","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-length","()","<p>Returns the number of referenced objects\n"],["length","Set","Set.html#method-i-length","()",""],["length","String","String.html#method-i-length","()","<p>Returns the count of characters (not bytes) in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;foo&#39;</span>.<span class=\"ruby-identifier\">length</span>        <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-string\">&#39;тест&#39;</span>.<span class=\"ruby-identifier\">length</span>       <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["length","StringIO","StringIO.html#method-i-length","()","<p>Returns the size of the buffer string.\n"],["length","Struct","Struct.html#method-i-length","()","<p>Returns the number of members.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe Smith&quot;, ...</pre>\n"],["length","Symbol","Symbol.html#method-i-length","()","<p>Equivalent to <code>self.to_s.length</code>; see String#length.\n<p>Symbol#size is an alias for Symbol#length.\n"],["length","SyntaxSuggest::PriorityEngulfQueue","SyntaxSuggest/PriorityEngulfQueue.html#method-i-length","()",""],["length","SyntaxSuggest::PriorityQueue","SyntaxSuggest/PriorityQueue.html#method-i-length","()",""],["length","Tempfile","Tempfile.html#method-i-length","()",""],["length","Thread::Queue","Thread/Queue.html#method-i-length","()","<p>Returns the length of the queue.\n"],["length","Thread::SizedQueue","Thread/SizedQueue.html#method-i-length","()","<p>Returns the length of the queue.\n"],["level","Socket::AncillaryData","Socket/AncillaryData.html#method-i-level","()","<p>returns the cmsg level as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AncillaryData</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:INET6</span>, <span class=\"ruby-value\">:IPV6</span>, <span class=\"ruby-value\">:PKTINFO</span>, <span class=\"ruby-string\">&quot;&quot;</span>).<span class=\"ruby-identifier\">level</span>\n<span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["level","Socket::Option","Socket/Option.html#method-i-level","()","<p>returns the socket level as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Option</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:INET6</span>, <span class=\"ruby-value\">:IPV6</span>, <span class=\"ruby-value\">:RECVPKTINFO</span>, [<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">pack</span>(<span class=\"ruby-string\">&quot;i!&quot;</span>)).<span class=\"ruby-identifier\">level</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["level","Zlib::GzipFile","Zlib/GzipFile.html#method-i-level","()","<p>Returns compression level.\n"],["level=","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-i-level-3D","(value)",""],["level=","Logger","Logger.html#method-i-level-3D","(severity)","<p>Sets the log level; returns <code>severity</code>. See Log Level.\n<p>Argument <code>severity</code> may be an integer, a string, or …\n"],["level_notifier=","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-i-level_notifier-3D","(value)","<p>Sets the leveled notifier for this object.\n<p>When the given <code>value</code> is an instance of AbstractNotifier, #level_notifier …\n"],["levenshtein_distance","Gem::Text","Gem/Text.html#method-i-levenshtein_distance","(str1, str2)","<p>Returns a value representing the “cost” of transforming str1 into str2 Vendored version of …\n"],["lex","Ripper","Ripper.html#method-c-lex","(src, filename = '-', lineno = 1, **kw)","<p>Tokenizes the Ruby program and returns an array of an array, which is formatted like <code>[[lineno, column],</code> …\n"],["lex_state_name","Ripper","Ripper.html#method-c-lex_state_name","(p1)","<p>Returns a string representation of lex_state.\n"],["lgamma","Math","Math.html#method-c-lgamma","(p1)","<p>Returns a 2-element array equivalent to:\n\n<pre class=\"ruby\">[<span class=\"ruby-constant\">Math</span>.<span class=\"ruby-identifier\">log</span>(<span class=\"ruby-constant\">Math</span>.<span class=\"ruby-identifier\">gamma</span>(<span class=\"ruby-identifier\">x</span>).<span class=\"ruby-identifier\">abs</span>), <span class=\"ruby-constant\">Math</span>.<span class=\"ruby-identifier\">gamma</span>(<span class=\"ruby-identifier\">x</span>) <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-value\">0</span> <span class=\"ruby-operator\">?</span> <span class=\"ruby-value\">-1</span> <span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">1</span>]\n</pre>\n<p>See …\n"],["lib_dirs_glob","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-lib_dirs_glob","()","<p>Returns a string usable in Dir.glob to match all requirable paths for this spec.\n"],["lib_files","Gem::Specification","Gem/Specification.html#method-i-lib_files","()","<p>Files in the Gem under one of the require_paths\n"],["liberal_parsing?","CSV","CSV.html#method-i-liberal_parsing-3F","()","<p>Returns the value that determines whether illegal input is to be handled; used for parsing; see {Option …\n"],["liberal_parsing?","CSV::Parser","CSV/Parser.html#method-i-liberal_parsing-3F","()",""],["library_name","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-i-library_name","()","<p>Returns library name. If the method fails to access library name, WIN32OLERuntimeError is raised.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tlib</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["libruby_args","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-libruby_args","(dest_dir)",""],["libyaml_version","Psych","Psych.html#method-c-libyaml_version","()","<p>Returns the version of libyaml being used\n"],["license","Gem::Specification","Gem/Specification.html#method-i-license","()","<p>Singular accessor for #licenses\n"],["license=","Gem::Specification","Gem/Specification.html#method-i-license-3D","(o)","<p>The license for this gem.\n<p>The license must be no more than 64 characters.\n<p>This should just be the name …\n"],["licenses","Gem::Specification","Gem/Specification.html#method-i-licenses","()","<p>Plural accessor for setting licenses\n<p>See #license= for details\n"],["licenses=","Gem::Specification","Gem/Specification.html#method-i-licenses-3D","(licenses)","<p>The license(s) for the library.\n<p>Each license must be a short name, no more than 64 characters.\n<p>This should …\n"],["limit","BigDecimal","BigDecimal.html#method-c-limit","(p1 = v1)","<p>Limit the number of significant digits in newly created BigDecimal numbers to the specified value. Rounding …\n"],["limit","Thread::Backtrace","Thread/Backtrace.html#method-c-limit","()","<p>Returns maximum backtrace length set by <code>--backtrace-limit</code> command-line option. The default is <code>-1</code> which …\n"],["line","CSV","CSV.html#method-i-line","()","<p>Returns the line most recently read:\n\n<pre>string = &quot;foo,0\\nbar,1\\nbaz,2\\n&quot;\npath = &#39;t.csv&#39;\nFile.write(path, ...</pre>\n"],["line","CSV::Parser","CSV/Parser.html#method-i-line","()",""],["line","IRB::Canvas","IRB/Canvas.html#method-i-line","((x1, y1), (x2, y2))",""],["line","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-line","(line_no)","<p>Returns the current line number for #io.\n<p>#line counts the number of times #gets is called.\n<p>See IO#lineno …\n"],["line","IRB::RelineInputMethod","IRB/RelineInputMethod.html#method-i-line","(line_no)","<p>Returns the current line number for #io.\n<p>#line counts the number of times #gets is called.\n<p>See IO#lineno …\n"],["line","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-line","(line_no)","<p>Returns the current line number for #io.\n<p>#line counts the number of times #gets is called.\n<p>See IO#lineno …\n"],["line","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-line","(str = '')",""],["line0","IRB::Canvas","IRB/Canvas.html#method-i-line0","(p1, p2)",""],["line_buffer","Readline","Readline.html#method-c-line_buffer","()","<p>Returns the full line that is being edited. This is useful from within the complete_proc for determining …\n"],["line_editor","Reline","Reline.html#method-c-line_editor","()",""],["line_stub","Coverage","Coverage.html#method-c-line_stub","(file)",""],["line_width","Psych::Emitter","Psych/Emitter.html#method-i-line_width","()","<p>Get the preferred line width.\n"],["line_width=","Psych::Emitter","Psych/Emitter.html#method-i-line_width-3D","(p1)","<p>Set the preferred line with to <code>width</code>.\n"],["linear_time?","Regexp","Regexp.html#method-c-linear_time-3F","(*args)","<p>Returns <code>true</code> if matching against <code>re</code> can be done in linear time to the input string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Regexp</span>.<span class=\"ruby-identifier\">linear_time?</span>(<span class=\"ruby-regexp\">/re/</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["lineno","ARGF","ARGF.html#method-i-lineno","()","<p>Returns the current line number of ARGF as a whole. This value can be set manually with ARGF.lineno= …\n"],["lineno","CSV","CSV.html#method-i-lineno","()","<p>Returns the count of the rows parsed or generated.\n<p>Parsing:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">string</span> = <span class=\"ruby-string\">&quot;foo,0\\nbar,1\\nbaz,2\\n&quot;</span>\n<span class=\"ruby-identifier\">path</span> = <span class=\"ruby-string\">&#39;t.csv&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["lineno","CSV::Parser","CSV/Parser.html#method-i-lineno","()",""],["lineno","IO","IO.html#method-i-lineno","()","<p>Returns the current line number for the stream; see Line Number.\n"],["lineno","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-lineno","()",""],["lineno","Ripper","Ripper.html#method-i-lineno","()","<p>Return line number of current parsing line. This number starts from 1.\n"],["lineno","Ripper::Filter","Ripper/Filter.html#method-i-lineno","()","<p>The line number of the current token. This value starts from 1. This method is valid only in event handlers. …\n"],["lineno","StringIO","StringIO.html#method-i-lineno","()","<p>Returns the current line number in <code>self</code>; see Line Number.\n"],["lineno","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-lineno","()","<p>Returns the line number of this frame.\n<p>For example, using <code>caller_locations.rb</code> from Thread::Backtrace::Location …\n"],["lineno","TracePoint","TracePoint.html#method-i-lineno","()","<p>Line number of the event\n"],["lineno","Zlib::GzipReader","Zlib/GzipReader.html#method-i-lineno","()","<p>The line number of the last row read from this file.\n"],["lineno=","ARGF","ARGF.html#method-i-lineno-3D","(p1)","<p>Sets the line number of ARGF as a whole to the given Integer.\n<p>ARGF sets the line number automatically …\n"],["lineno=","IO","IO.html#method-i-lineno-3D","(p1)","<p>Sets and returns the line number for the stream; see Line Number.\n"],["lineno=","StringIO","StringIO.html#method-i-lineno-3D","(p1)","<p>Sets the current line number in <code>self</code> to the given <code>new_line_number</code>; see Line Number.\n"],["lineno=","Zlib::GzipReader","Zlib/GzipReader.html#method-i-lineno-3D","(p1)","<p>Specify line number of the last row read from this file.\n"],["lines","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-i-lines","(str)",""],["lines","String","String.html#method-i-lines","(*args)","<p>Forms substrings (“lines”) of <code>self</code> according to the given arguments (see String#each_line for …\n"],["lines","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-lines","()",""],["lines","SyntaxSuggest::CleanDocument","SyntaxSuggest/CleanDocument.html#method-i-lines","()","<p>Return an array of CodeLines in the document\n"],["linger","Socket::Option","Socket/Option.html#method-c-linger","(p1, p2)","<p>Creates a new Socket::Option object for SOL_SOCKET/SO_LINGER.\n<p><em>onoff</em> should be an integer or a boolean. …\n"],["linger","Socket::Option","Socket/Option.html#method-i-linger","()","<p>Returns the linger data in <em>sockopt</em> as a pair of boolean and integer.\n\n<pre>sockopt = Socket::Option.linger(true, ...</pre>\n"],["link","File","File.html#method-c-link","(p1, p2)","<p>Creates a new name for an existing file using a hard link. Will not overwrite <em>new_name</em> if it already …\n"],["link","FileUtils","FileUtils.html#method-c-link","(src, dest, force: nil, noop: nil, verbose: nil)",""],["link","FileUtils","FileUtils.html#method-i-link","(src, dest, force: nil, noop: nil, verbose: nil)",""],["link_command","MakeMakefile","MakeMakefile.html#method-i-link_command","(ldflags, *opts)",""],["link_entry","FileUtils","FileUtils.html#method-i-link_entry","(src, dest, dereference_root = false, remove_destination = false)","<p>Creates hard links; returns <code>nil</code>.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable as paths.\n<p>If <code>src</code> is the …\n"],["link_entry","FileUtils","FileUtils.html#method-c-link_entry","(src, dest, dereference_root = false, remove_destination = false)","<p>Creates hard links; returns <code>nil</code>.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable as paths.\n<p>If <code>src</code> is the …\n"],["link_local?","IPAddr","IPAddr.html#method-i-link_local-3F","()","<p>Returns true if the ipaddr is a link-local address.  IPv4 addresses in 169.254.0.0/16 reserved by RFC …\n"],["link_to","RDoc::Markdown","RDoc/Markdown.html#method-i-link_to","(content, label = content, text = nil)","<p>Finds a link reference for <code>label</code> and creates a new link to it with\n<code>content</code> as the link text. If <code>label</code> ...\n"],["linker_args","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-linker_args","()","<p>We want to use the same linker that Ruby uses, so that the linker flags from mkmf work properly.\n"],["list","Encoding","Encoding.html#method-c-list","()","<p>Returns the list of loaded encodings.\n\n<pre>Encoding.list\n#=&gt; [#&lt;Encoding:ASCII-8BIT&gt;, #&lt;Encoding:UTF-8&gt;,\n  ...</pre>\n"],["list","Signal","Signal.html#method-c-list","()","<p>Returns a list of signal names mapped to the corresponding underlying signal numbers.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Signal</span>.<span class=\"ruby-identifier\">list</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["list","Thread","Thread.html#method-c-list","()","<p>Returns an array of Thread objects for all threads that are either runnable or stopped.\n\n<pre>Thread.new { sleep(200) ...</pre>\n"],["list","ThreadGroup","ThreadGroup.html#method-i-list","()","<p>Returns an array of all existing Thread objects that belong to this group.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ThreadGroup</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Default</span>.<span class=\"ruby-identifier\">list</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["list_files_in_directory","RDoc::RDoc","RDoc/RDoc.html#method-i-list_files_in_directory","(dir)","<p>Return a list of the files to be processed in a directory. We know that this directory doesn’t have …\n"],["list_item_from","RDoc::Markdown","RDoc/Markdown.html#method-i-list_item_from","(unparsed)","<p>Creates an RDoc::Markup::ListItem by parsing the <code>unparsed</code> content from\nthe first parsing pass.\n"],["listen","Addrinfo","Addrinfo.html#method-i-listen","(backlog=Socket::SOMAXCONN)","<p>creates a listening socket bound to self.\n"],["listen","OpenSSL::SSL::SSLServer","OpenSSL/SSL/SSLServer.html#method-i-listen","(backlog=Socket::SOMAXCONN)","<p>See TCPServer#listen for details.\n"],["listen","Socket","Socket.html#method-i-listen","(p1)","<p>Listens for connections, using the specified <code>int</code> as the backlog. A call to <em>listen</em> only applies if the …\n"],["listen","TCPServer","TCPServer.html#method-i-listen","(p1)","<p>Listens for connections, using the specified <code>int</code> as the backlog. A call to <em>listen</em> only applies if the …\n"],["listen","UNIXServer","UNIXServer.html#method-i-listen","(p1)","<p>Listens for connections, using the specified <code>int</code> as the backlog. A call to <em>listen</em> only applies if the …\n"],["literal_head?","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-literal_head-3F","(pre, post)",""],["ljust","String","String.html#method-i-ljust","(*args)","<p>Returns a left-justified copy of <code>self</code>.\n<p>If integer argument <code>size</code> is greater than the size (in characters) …\n"],["ln","FileUtils","FileUtils.html#method-c-ln","(src, dest, force: nil, noop: nil, verbose: nil)","<p>Creates hard links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["ln","FileUtils","FileUtils.html#method-i-ln","(src, dest, force: nil, noop: nil, verbose: nil)","<p>Creates hard links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["ln","OpenSSL::ASN1::ObjectId","OpenSSL/ASN1/ObjectId.html#method-i-ln","()","<p>The long name of the ObjectId, as defined in &lt;openssl/objects.h&gt;.\n"],["ln_s","FileUtils","FileUtils.html#method-i-ln_s","(src, dest, force: nil, relative: false, target_directory: true, noop: nil, verbose: nil)","<p>Creates symbolic links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["ln_s","FileUtils","FileUtils.html#method-c-ln_s","(src, dest, force: nil, relative: false, target_directory: true, noop: nil, verbose: nil)","<p>Creates symbolic links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["ln_sf","FileUtils","FileUtils.html#method-i-ln_sf","(src, dest, noop: nil, verbose: nil)","<p>Like FileUtils.ln_s, but always with keyword argument <code>force: true</code> given.\n"],["ln_sf","FileUtils","FileUtils.html#method-c-ln_sf","(src, dest, noop: nil, verbose: nil)","<p>Like FileUtils.ln_s, but always with keyword argument <code>force: true</code> given.\n"],["ln_sr","FileUtils","FileUtils.html#method-c-ln_sr","(src, dest, target_directory: true, force: nil, noop: nil, verbose: nil)","<p>Like FileUtils.ln_s, but create links relative to <code>dest</code>.\n"],["ln_sr","FileUtils","FileUtils.html#method-i-ln_sr","(src, dest, target_directory: true, force: nil, noop: nil, verbose: nil)","<p>Like FileUtils.ln_s, but create links relative to <code>dest</code>.\n"],["load","Bundler","Bundler.html#method-c-load","()",""],["load","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-load","()","<p>Loads the gem dependency file and returns self.\n"],["load","Gem::SafeYAML","Gem/SafeYAML.html#method-c-load","(input)",""],["load","Gem::Specification","Gem/Specification.html#method-c-load","(file)","<p>Loads Ruby format gemspec from <code>file</code>.\n"],["load","IRB::Locale","IRB/Locale.html#method-i-load","(file, priv=nil)",""],["load","JSON","JSON.html#method-i-load","(source, proc = nil, options = {})","<p>Returns the Ruby objects created by parsing the given <code>source</code>.\n<p>Argument <code>source</code> must be, or be convertible …\n"],["load","JSON::GenericObject","JSON/GenericObject.html#method-c-load","(source, proc = nil, opts = {})",""],["load","Kernel","Kernel.html#method-i-load","(file, wrap = false)","<p>Loads and executes the Ruby program in the file <em>filename</em>.\n<p>If the filename is an absolute path (e.g. starts …\n"],["load","Marshal","Marshal.html#method-c-load","(source, proc = nil, freeze: false)","<p>Returns the result of converting the serialized data in source into a Ruby object (possibly with associated …\n"],["load","OpenSSL::Engine","OpenSSL/Engine.html#method-c-load","(p1 = v1)","<p>This method loads engines. If <em>name</em> is nil, then all builtin engines are loaded. Otherwise, the given …\n"],["load","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-c-load","(p1)","<p>Read the chained certificates from the given input. Supports both PEM and DER encoded certificates.\n<p>PEM …\n"],["load","OptionParser","OptionParser.html#method-i-load","(filename = nil, into: nil)","<p>Loads options from file names as <code>filename</code>. Does nothing when the file is not present. Returns whether …\n"],["load","Psych","Psych.html#method-c-load","(yaml, permitted_classes: [Symbol], permitted_symbols: [], aliases: false, filename: nil, fallback: nil, symbolize_names: false, freeze: false, strict_integer: false)","<p>Load <code>yaml</code> in to a Ruby data structure.  If multiple documents are provided, the object contained in the …\n"],["load!","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-load-21","()",""],["load_all","RDoc::Store","RDoc/Store.html#method-i-load_all","()","<p>Loads all items from this store into memory.  This recreates a documentation tree for use by a generator …\n"],["load_and_instantiate","Gem::CommandManager","Gem/CommandManager.html#method-i-load_and_instantiate","(command_name)",""],["load_api_keys","Gem::ConfigFile","Gem/ConfigFile.html#method-i-load_api_keys","()",""],["load_cache","RDoc::Store","RDoc/Store.html#method-i-load_cache","()","<p>Loads cache file for this store\n"],["load_certificate","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-load_certificate","(certificate_file)","<p>Loads the given <code>certificate_file</code>\n"],["load_class","RDoc::Store","RDoc/Store.html#method-i-load_class","(klass_name)","<p>Loads ri data for <code>klass_name</code> and hooks it up to this store.\n"],["load_class_data","RDoc::Store","RDoc/Store.html#method-i-load_class_data","(klass_name)","<p>Loads ri data for <code>klass_name</code>\n"],["load_command","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-load_command","(command)","<p>Convert a command name to its implementation class if such command exists\n"],["load_data","PStore","PStore.html#method-i-load_data","(file, read_only)","<p>Load the given PStore file. If <code>read_only</code> is true, the unmarshalled Hash will be returned. If <code>read_only</code> …\n"],["load_default_cert","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-load_default_cert","()",""],["load_default_key","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-load_default_key","()",""],["load_defaults","Gem::Specification","Gem/Specification.html#method-c-load_defaults","()","<p>Loads the default specifications. It should be called only once.\n"],["load_env_plugins","Gem","Gem.html#method-c-load_env_plugins","()","<p>Find all ‘rubygems_plugin’ files in $LOAD_PATH and load them\n"],["load_file","Gem::ConfigFile","Gem/ConfigFile.html#method-i-load_file","(filename)",""],["load_file","IRB::IrbLoader","IRB/IrbLoader.html#method-i-load_file","(path, priv = nil)","<p>Loads the given file in the current session’s context and evaluates it.\n<p>See Irb#suspend_input_method …\n"],["load_file","JSON","JSON.html#method-i-load_file","(filespec, opts = {})","<p>Calls:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-identifier\">path</span>), <span class=\"ruby-identifier\">opts</span>)\n</pre>\n<p>See method #parse.\n"],["load_file","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-c-load_file","(path)",""],["load_file","Psych","Psych.html#method-c-load_file","(filename, **kwargs)","<p>Loads the document contained in <code>filename</code>.  Returns the yaml contained in <code>filename</code> as a Ruby object, or …\n"],["load_file!","JSON","JSON.html#method-i-load_file-21","(filespec, opts = {})","<p>Calls:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">JSON</span>.<span class=\"ruby-identifier\">parse!</span>(<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">read</span>(<span class=\"ruby-identifier\">path</span>, <span class=\"ruby-identifier\">opts</span>))\n</pre>\n<p>See method #parse!\n"],["load_from_binary","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-load_from_binary","(p1)","<p>Load an iseq object from binary format String object created by RubyVM::InstructionSequence.to_binary …\n"],["load_from_binary_extra_data","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-load_from_binary_extra_data","(p1)","<p>Load extra data embed into binary format String object.\n"],["load_gemdeps","Gem::RequestSet","Gem/RequestSet.html#method-i-load_gemdeps","(path, without_groups = [], installing = false)","<p>Load a dependency management file.\n"],["load_gemspec","Bundler","Bundler.html#method-c-load_gemspec","(file, validate = false)",""],["load_gemspec_uncached","Bundler","Bundler.html#method-c-load_gemspec_uncached","(file, validate = false)",""],["load_marshal","Bundler","Bundler.html#method-c-load_marshal","(data, marshal_proc: nil)",""],["load_method","RDoc::Store","RDoc/Store.html#method-i-load_method","(klass_name, method_name)","<p>Loads ri data for <code>method_name</code> in <code>klass_name</code>\n"],["load_options","RDoc::Options","RDoc/Options.html#method-c-load_options","()","<p>Loads options from .rdoc_options if the file exists, otherwise creates a new RDoc::Options instance. …\n"],["load_page","RDoc::Store","RDoc/Store.html#method-i-load_page","(page_name)","<p>Loads ri data for <code>page_name</code>\n"],["load_path_insert_index","Gem","Gem.html#method-c-load_path_insert_index","()","<p>The index to insert activated gem paths into the $LOAD_PATH. The activated gem’s paths are inserted …\n"],["load_plugins","Gem","Gem.html#method-c-load_plugins","()","<p>Find rubygems plugin files in the standard location and load them\n"],["load_private_key","OpenSSL::Engine","OpenSSL/Engine.html#method-i-load_private_key","(p1 = v1, p2 = v2)","<p>Loads the given private key identified by <em>id</em> and <em>data</em>.\n<p>An EngineError is raised of the OpenSSL::PKey is …\n"],["load_public_key","OpenSSL::Engine","OpenSSL/Engine.html#method-i-load_public_key","(p1 = v1, p2 = v2)","<p>Loads the given public key identified by <em>id</em> and <em>data</em>.\n<p>An EngineError is raised of the OpenSSL::PKey is …\n"],["load_random_file","OpenSSL::Random","OpenSSL/Random.html#method-c-load_random_file","(p1)","<p>Reads bytes from <em>filename</em> and adds them to the PRNG.\n"],["load_rdoc","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-load_rdoc","()","<p>Loads the RDoc generator\n"],["load_rdoc","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-load_rdoc","()","<p>Loads the RDoc generator\n"],["load_relative_enabled?","Gem::Installer","Gem/Installer.html#method-i-load_relative_enabled-3F","()",""],["load_specs","Gem::Source","Gem/Source.html#method-i-load_specs","(type)","<p>Loads <code>type</code> kind of specs fetching from +@uri+ if the on-disk cache is out of date.\n<p><code>type</code> is one of the …\n"],["load_stream","Psych","Psych.html#method-c-load_stream","(yaml, filename: nil, fallback: [], **kwargs)","<p>Load multiple documents given in <code>yaml</code>.  Returns the parsed documents as a list.  If a block is given, …\n"],["load_variable_map","RDoc::Parser::C","RDoc/Parser/C.html#method-i-load_variable_map","(map_name)","<p>Loads the variable map with the given <code>name</code> from the RDoc::Store, if present.\n"],["load_yaml","Gem","Gem.html#method-c-load_yaml","()","<p>Loads YAML, preferring Psych\n"],["load_yaml","RDoc","RDoc.html#method-c-load_yaml","()","<p>Loads the best available YAML library.\n"],["local","Gem::Platform","Gem/Platform.html#method-c-local","()",""],["local","Time","Time.html#method-c-local","(*args)","<p>Like Time.utc, except that the returned Time object has the local timezone, not the UTC timezone:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># With ...</span>\n</pre>\n"],["local?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-local-3F","()","<p>Is local fetching enabled?\n"],["local_address","BasicSocket","BasicSocket.html#method-i-local_address","()","<p>Returns an Addrinfo object for local address obtained by getsockname.\n<p>Note that addrinfo.protocol is filled …\n"],["local_platform","Bundler","Bundler.html#method-c-local_platform","()",""],["local_variable_defined?","Binding","Binding.html#method-i-local_variable_defined-3F","(p1)","<p>Returns <code>true</code> if a local variable <code>symbol</code> exists.\n\n<pre>def foo\n  a = 1\n  binding.local_variable_defined?(:a) ...</pre>\n"],["local_variable_get","Binding","Binding.html#method-i-local_variable_get","(p1)","<p>Returns the value of the local variable <code>symbol</code>.\n\n<pre>def foo\n  a = 1\n  binding.local_variable_get(:a) #=&gt; 1 ...</pre>\n"],["local_variable_get","IRB::WorkSpace","IRB/WorkSpace.html#method-i-local_variable_get","(name)",""],["local_variable_set","Binding","Binding.html#method-i-local_variable_set","(p1, p2)","<p>Set local variable named <code>symbol</code> as <code>obj</code>.\n\n<pre>def foo\n  a = 1\n  bind = binding\n  bind.local_variable_set(:a, ...</pre>\n"],["local_variable_set","IRB::WorkSpace","IRB/WorkSpace.html#method-i-local_variable_set","(name, value)",""],["local_variables","Binding","Binding.html#method-i-local_variables","()","<p>Returns the names of the binding’s local variables as symbols.\n\n<pre>def foo\n  a = 1\n  2.times do |n|\n  ...</pre>\n"],["local_variables","Kernel","Kernel.html#method-i-local_variables","()","<p>Returns the names of the current local variables.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fred</span> = <span class=\"ruby-value\">1</span>\n<span class=\"ruby-keyword\">for</span> <span class=\"ruby-identifier\">i</span> <span class=\"ruby-keyword\">in</span> <span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">10</span>\n   <span class=\"ruby-comment\"># ...</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">local_variables</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["local_variables","NameError","NameError.html#method-i-local_variables","()","<p>Return a list of the local variable names defined where this NameError exception was raised.\n<p>Internal …\n"],["locale","WIN32OLE","WIN32OLE.html#method-c-locale","()","<p>Returns current locale id (lcid). The default locale is WIN32OLE::LOCALE_SYSTEM_DEFAULT.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">lcid</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">locale</span>\n</pre>\n"],["locale=","WIN32OLE","WIN32OLE.html#method-c-locale-3D","(p1)","<p>Sets current locale id (lcid).\n\n<pre>WIN32OLE.locale = 1033 # set locale English(U.S)\nobj = WIN32OLE_VARIANT.new(&quot;$100,000&quot;, ...</pre>\n"],["locale_charmap","Encoding","Encoding.html#method-c-locale_charmap","()","<p>Returns the locale charmap name. It returns nil if no appropriate information.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Debian</span> <span class=\"ruby-constant\">GNU</span><span class=\"ruby-operator\">/</span><span class=\"ruby-constant\">Linux</span>\n  <span class=\"ruby-constant\">LANG</span>=<span class=\"ruby-constant\">C</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["localtime","Time","Time.html#method-i-localtime","(*args)","<p>With no argument given:\n<p>Returns <code>self</code> if <code>self</code> is a local time.\n<p>Otherwise returns a new Time in the user’s …\n"],["location","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-i-location","()",""],["location","Racc::SourceText","Racc/SourceText.html#method-i-location","()",""],["location=","ERB","ERB.html#method-i-location-3D","((filename, lineno))","<p>Sets optional filename and line number that will be used in ERB code evaluation and error reporting. …\n"],["location_of_caller","Gem","Gem.html#method-c-location_of_caller","(depth = 1)","<p>The file name and line number of the caller of the caller of this method.\n<p><code>depth</code> is how many layers up …\n"],["lock","Net::HTTP","Net/HTTP.html#method-i-lock","(path, body, initheader = nil)","<p>Sends a LOCK request to the <code>path</code> and gets a response, as an HTTPResponse object.\n"],["lock","Thread::Mutex","Thread/Mutex.html#method-i-lock","()","<p>Attempts to grab the lock and waits if it isn’t available. Raises <code>ThreadError</code> if <code>mutex</code> was locked …\n"],["lock_shift_log","Logger::LogDevice","Logger/LogDevice.html#method-i-lock_shift_log","()",""],["locked","IO::Buffer","IO/Buffer.html#method-i-locked","()","<p>Allows to process a buffer in exclusive way, for concurrency-safety. While the block is performed, the …\n"],["locked?","IO::Buffer","IO/Buffer.html#method-i-locked-3F","()","<p>If the buffer is <em>locked</em>, meaning it is inside #locked block execution. Locked buffer can’t be resized …\n"],["locked?","Thread::Mutex","Thread/Mutex.html#method-i-locked-3F","()","<p>Returns <code>true</code> if this lock is currently held by some thread.\n"],["locked_gems","Bundler","Bundler.html#method-c-locked_gems","()",""],["locked_puts","Gem::StreamUI::ThreadedDownloadReporter","Gem/StreamUI/ThreadedDownloadReporter.html#method-i-locked_puts","(message)",""],["locked_requirement_named","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-locked_requirement_named","(requirement_name)","<p>@param [String] requirement_name the spec name to search for @return [Object] the locked spec named ‘requirement_name`, …\n"],["locked_requirement_possibility_set","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-locked_requirement_possibility_set","(requirement, activated = self.activated)","<p>@param [Object] requirement the proposed requirement @param [Object] activated @return [Array] possibility …\n"],["lockfile_contents","Gem::BundlerVersionFinder","Gem/BundlerVersionFinder.html#method-c-lockfile_contents","()",""],["lockfile_version","Gem::BundlerVersionFinder","Gem/BundlerVersionFinder.html#method-c-lockfile_version","()",""],["log","BigMath","BigMath.html#method-c-log","(p1, p2)","<p>Computes the natural logarithm of <code>decimal</code> to the specified number of digits of precision, <code>numeric</code>.\n<p>If …\n"],["log","Logger","Logger.html#method-i-log","(severity, message = nil, progname = nil)",""],["log","Math","Math.html#method-c-log","(*args)","<p>Returns the base <code>base</code> logarithm of <code>x</code>.\n<p>Domain: <code>[0, INFINITY]</code>.\n<p>Range: <code>[-INFINITY, INFINITY)]</code>.\n"],["log","Syslog","Syslog.html#method-c-log","(*args)","<p>Log a message with the specified priority. Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Syslog</span>.<span class=\"ruby-identifier\">log</span>(<span class=\"ruby-constant\">Syslog</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">LOG_CRIT</span>, <span class=\"ruby-string\">&quot;Out of disk space&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["log10","Math","Math.html#method-c-log10","(p1)","<p>Returns the base 10 logarithm of <code>x</code>.\n<p>Domain: <code>[0, INFINITY]</code>.\n<p>Range: <code>[-INFINITY, INFINITY]</code>.\n"],["log2","Math","Math.html#method-c-log2","(p1)","<p>Returns the base 2 logarithm of <code>x</code>.\n<p>Domain: <code>[0, INFINITY]</code>.\n<p>Range: <code>[-INFINITY, INFINITY]</code>.\n"],["long_name","OpenSSL::ASN1::ObjectId","OpenSSL/ASN1/ObjectId.html#method-i-long_name","()","<p>The long name of the ObjectId, as defined in &lt;openssl/objects.h&gt;.\n"],["look_for_directives_in","RDoc::Parser::C","RDoc/Parser/C.html#method-i-look_for_directives_in","(context, comment)","<p>Look for directives in a normal comment block:\n\n<pre>/*\n * :title: My Awesome Project\n */</pre>\n<p>This method modifies …\n"],["look_for_directives_in","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-look_for_directives_in","(container, comment)","<p>Look for directives in a normal comment block:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># :stopdoc:</span>\n<span class=\"ruby-comment\"># Don&#39;t display comment from this point forward</span>\n</pre>\n"],["lookahead","Racc::States","Racc/States.html#method-i-lookahead","()",""],["lookup_ring","Rinda::RingFinger","Rinda/RingFinger.html#method-i-lookup_ring","(timeout=5, &block)","<p>Looks up RingServers waiting <code>timeout</code> seconds.  RingServers will be given <code>block</code> as a callback, which will …\n"],["lookup_ring_any","Rinda::RingFinger","Rinda/RingFinger.html#method-i-lookup_ring_any","(timeout=5)","<p>Returns the first found remote TupleSpace.  Any further recovered TupleSpaces can be found by calling …\n"],["loop","Kernel","Kernel.html#method-i-loop","()","<p>Repeatedly executes the block.\n<p>If no block is given, an enumerator is returned instead.\n\n<pre>loop do\n  print ...</pre>\n"],["loopback?","IPAddr","IPAddr.html#method-i-loopback-3F","()","<p>Returns true if the ipaddr is a loopback address.\n"],["lower","Racc::Grammar::PrecedenceDefinitionEnv","Racc/Grammar/PrecedenceDefinitionEnv.html#method-i-lower","()",""],["lower","Win32::SSPI::SecurityHandle","Win32/SSPI/SecurityHandle.html#method-i-lower","()",""],["lshift!","OpenSSL::BN","OpenSSL/BN.html#method-i-lshift-21","(p1)",""],["lstat","File","File.html#method-i-lstat","()","<p>Like File#stat, but does not follow the last symbolic link; instead, returns a File::Stat object for …\n"],["lstat","File","File.html#method-c-lstat","(p1)","<p>Like File::stat, but does not follow the last symbolic link; instead, returns a File::Stat object for …\n"],["lstat","Pathname","Pathname.html#method-i-lstat","()","<p>See File.lstat.\n"],["lstrip","String","String.html#method-i-lstrip","()","<p>Returns a copy of <code>self</code> with leading whitespace removed; see Whitespace in Strings:\n\n<pre>whitespace = &quot;\\x00\\t\\n\\v\\f\\r ...</pre>\n"],["lstrip!","String","String.html#method-i-lstrip-21","()","<p>Like String#lstrip, except that any modifications are made in <code>self</code>; returns <code>self</code> if any modification …\n"],["ludecomp","LUSolve","LUSolve.html#method-i-ludecomp","(a,n,zero=0,one=1)","<p>Performs LU decomposition of the n by n matrix a.\n"],["lusolve","LUSolve","LUSolve.html#method-i-lusolve","(a,b,ps,zero=0.0)","<p>Solves a*x = b for x, using LU decomposition.\n<p>a is a matrix, b is a constant vector, x is the solution …\n"],["lutime","File","File.html#method-c-lutime","(*args)","<p>Sets the access and modification times of each named file to the first two arguments. If a file is a …\n"],["lutime","Pathname","Pathname.html#method-i-lutime","(p1, p2)","<p>Update the access and modification times of the file.\n<p>Same as Pathname#utime, but does not follow symbolic …\n"],["magnitude","Complex","Complex.html#method-i-magnitude","()","<p>Returns the absolute part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">abs</span>         <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">3.0</span>, <span class=\"ruby-value\">-4.0</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["magnitude","Float","Float.html#method-i-magnitude","()",""],["magnitude","Integer","Integer.html#method-i-magnitude","()",""],["magnitude","Numeric","Numeric.html#method-i-magnitude","()","<p>Returns the absolute value of <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">abs</span>        <span class=\"ruby-comment\">#=&gt; 12</span>\n(<span class=\"ruby-value\">-34.56</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">-34.56</span>.<span class=\"ruby-identifier\">abs</span>    <span class=\"ruby-comment\">#=&gt; 34.56</span>\n</pre>\n"],["magnitude","Rational","Rational.html#method-i-magnitude","()","<p>Returns the absolute value of <code>rat</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2r</span>).<span class=\"ruby-identifier\">abs</span>    <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n(<span class=\"ruby-value\">-1</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2r</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n</pre>\n<p>Rational#magnitude is …\n"],["main","IRB::Context","IRB/Context.html#method-i-main","()","<p>The top-level workspace, see WorkSpace#main\n"],["main","RDoc::Store","RDoc/Store.html#method-i-main","()","<p>Gets the main page for this RDoc store.  This page is used as the root of the RDoc server.\n"],["main","Ractor","Ractor.html#method-c-main","()","<p>returns main ractor\n"],["main","Thread","Thread.html#method-c-main","()","<p>Returns the main thread.\n"],["main=","RDoc::Store","RDoc/Store.html#method-i-main-3D","(page)","<p>Sets the main page for this RDoc store.\n"],["main_irb","IRB::JobManager","IRB/JobManager.html#method-i-main_irb","()","<p>Returns the top level irb session.\n"],["main_loop","DRb::DRbServer","DRb/DRbServer.html#method-i-main_loop","()","<p>The main loop performed by a DRbServer’s internal thread.\n<p>Accepts a connection from a client, and …\n"],["main_thread","IRB::JobManager","IRB/JobManager.html#method-i-main_thread","()","<p>Returns the top level thread.\n"],["main_type","Net::HTTPHeader","Net/HTTPHeader.html#method-i-main_type","()","<p>Returns the leading (‘type’) part of the media type from the value of field <code>&#39;Content-Type&#39;</code> …\n"],["major_version","WIN32OLE::Type","WIN32OLE/Type.html#method-i-major_version","()","<p>Returns major version.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Word 10.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Documents&#39;</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["major_version","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-i-major_version","()","<p>Returns the type library major version.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tlib</span> = <span class=\"ruby-constant\">WIN32OLE_TYPELIB</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["make","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-make","(dest_path, results, make_dir = Dir.pwd, sitedir = nil, targets = [\"clean\", \"\", \"install\"])",""],["make_affine!","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-make_affine-21","()","<p>This method is deprecated and should not be used. This is a no-op.\n"],["make_closure","Racc::State","Racc/State.html#method-i-make_closure","(core)",""],["make_compiler","ERB","ERB.html#method-i-make_compiler","(trim_mode)","<p>Creates a new compiler for ERB.  See ERB::Compiler.new for details\n"],["make_delimiter","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-make_delimiter","(body)",""],["make_destination_dirs","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-make_destination_dirs","()",""],["make_edge","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-make_edge","(graph)","<p>@param  [DependencyGraph] graph the graph to find vertices from @return [Edge] The edge this action adds …\n"],["make_edge","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-i-make_edge","(graph)","<p>@param  [DependencyGraph] graph the graph to find vertices from @return [Edge] The edge this action adds …\n"],["make_entry","Gem::QueryUtils","Gem/QueryUtils.html#method-i-make_entry","(entry_tuples, platforms)",""],["make_expires","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-make_expires","(sec=nil)","<p>Returns an expiry Time based on <code>sec</code> which can be one of:\n<p>Numeric &mdash; <code>sec</code> seconds into the future\n<p><code>true</code> &mdash; the expiry …\n"],["make_link","Pathname","Pathname.html#method-i-make_link","(p1)","<p>Creates a hard link at <em>pathname</em>.\n<p>See File.link.\n"],["make_message","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-make_message","(message)","<p>Adds useful info about the parser to <code>message</code>\n"],["make_methods","Syslog::Logger","Syslog/Logger.html#method-c-make_methods","(meth)","<p>Builds a methods for level <code>meth</code>.\n"],["make_parser","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-make_parser","(set, platforms)",""],["make_pool","DRb::DRbConn","DRb/DRbConn.html#method-c-make_pool","()",""],["make_regexp","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-make_regexp","(schemes = nil)","<p>Returns Regexp that is default <code>self.regexp[:ABS_URI_REF]</code>, unless <code>schemes</code> is provided. Then it is a Regexp.union …\n"],["make_regexp","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-make_regexp","(schemes = nil)","<p>Returns Regexp that is default <code>self.regexp[:ABS_URI_REF]</code>, unless <code>schemes</code> is provided. Then it is a Regexp.union …\n"],["make_separator","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-make_separator","(src)",""],["make_shareable","Ractor","Ractor.html#method-c-make_shareable","(obj, copy: false)","<p>Make <code>obj</code> shareable between ractors.\n<p><code>obj</code> and all the objects it refers to will be frozen, unless they are …\n"],["make_socket","Rinda::RingServer","Rinda/RingServer.html#method-i-make_socket","(address, interface_address=nil, multicast_interface=0)","<p>Creates a socket at <code>address</code>\n<p>If <code>address</code> is multicast address then <code>interface_address</code> and <code>multicast_interface</code> …\n"],["make_switch","OptionParser","OptionParser.html#method-i-make_switch","(opts, block = nil)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["make_symlink","Pathname","Pathname.html#method-i-make_symlink","(p1)","<p>Creates a symbolic link.\n<p>See File.symlink.\n"],["make_temp_directories","Gem::Indexer","Gem/Indexer.html#method-i-make_temp_directories","()","<p>Make directories for index generation\n"],["make_tuple","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-make_tuple","(ary)","<p>Creates a Rinda::Tuple for <code>ary</code>.\n"],["make_variable_map","RDoc::Store","RDoc/Store.html#method-i-make_variable_map","(variables)","<p>Converts the variable =&gt; ClassModule map <code>variables</code> from a C parser into a variable =&gt; class name …\n"],["make_wstr","Win32::Registry::API","Win32/Registry/API.html#method-i-make_wstr","(str)",""],["makedirs","FileUtils","FileUtils.html#method-c-makedirs","(list, mode: nil, noop: nil, verbose: nil)",""],["makedirs","FileUtils","FileUtils.html#method-i-makedirs","(list, mode: nil, noop: nil, verbose: nil)",""],["makefile_config","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-makefile_config","(var_name)",""],["malloc","Fiddle","Fiddle.html#method-c-malloc","(p1)","<p>Allocate <code>size</code> bytes of memory and return the integer memory address for the allocated memory.\n"],["malloc","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-c-malloc","(types, func = nil, size = size(types), &block)","<p>Allocates a C struct with the <code>types</code> provided.\n<p>See Fiddle::Pointer.malloc for memory management issues. …\n"],["malloc","Fiddle::Pointer","Fiddle/Pointer.html#method-c-malloc","(p1, p2 = v2)","<p>Examples\n\n<pre># Automatically freeing the pointer when the block is exited - recommended\nFiddle::Pointer.malloc(size, ...</pre>\n"],["malloc_allocated_size","GC","GC.html#method-c-malloc_allocated_size","()","<p>Returns the size of memory allocated by malloc().\n<p>Only available if ruby was built with <code>CALC_EXACT_MALLOC_SIZE</code> …\n"],["malloc_allocations","GC","GC.html#method-c-malloc_allocations","()","<p>Returns the number of malloc() allocations.\n<p>Only available if ruby was built with <code>CALC_EXACT_MALLOC_SIZE</code> …\n"],["manage_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-manage_owners","(method, name, owners)",""],["many","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-many","(sym, &block)",""],["many1","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-many1","(sym, &block)",""],["map","Array","Array.html#method-i-map","()","<p>Calls the block, if given, with each element of <code>self</code>; returns a new Array whose elements are the return …\n"],["map","Enumerable","Enumerable.html#method-i-map","()","<p>Returns an array of objects returned by the block.\n<p>With a block given, calls the block with successive …\n"],["map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-map","()","<p>Like Enumerable#map, but chains operation to be lazy-evaluated.\n\n<pre>(1..Float::INFINITY).lazy.map {|i| i**2 ...</pre>\n"],["map","IO::Buffer","IO/Buffer.html#method-c-map","(*args)","<p>Create an IO::Buffer for reading from <code>file</code> by memory-mapping the file. <code>file_io</code> should be a <code>File</code> instance, …\n"],["map","Psych::Coder","Psych/Coder.html#method-i-map","(tag = @tag, style = @style)","<p>Emit a map.  The coder will be yielded to the block.\n"],["map!","Array","Array.html#method-i-map-21","()","<p>Calls the block, if given, with each element; replaces the element with the block’s return value: …\n"],["map!","Set","Set.html#method-i-map-21","()",""],["map=","Psych::Coder","Psych/Coder.html#method-i-map-3D","(map)","<p>Emit a map with <code>value</code>\n"],["map_gems_to_specs","Gem::Indexer","Gem/Indexer.html#method-i-map_gems_to_specs","(gems)",""],["mapped?","IO::Buffer","IO/Buffer.html#method-i-mapped-3F","()","<p>If the buffer is <em>mapped</em>, meaning it references memory mapped by the buffer.\n<p>Mapped buffers are either …\n"],["mapping?","Psych::Nodes::Mapping","Psych/Nodes/Mapping.html#method-i-mapping-3F","()",""],["mapping?","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-mapping-3F","()",""],["mark","Psych::Parser","Psych/Parser.html#method-i-mark","()","<p>Returns a Psych::Parser::Mark object that contains line, column, and index information.\n"],["mark_invisible","SyntaxSuggest::CodeBlock","SyntaxSuggest/CodeBlock.html#method-i-mark_invisible","()",""],["mark_invisible","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-i-mark_invisible","()","<p>Used to hide lines\n<p>The search alorithm will group lines into blocks then if those blocks are determined …\n"],["mark_version","Gem::Specification","Gem/Specification.html#method-i-mark_version","()","<p>Sets the rubygems_version to the current RubyGems version.\n"],["markup","RDoc::Text","RDoc/Text.html#method-i-markup","(text)","<p>Convert a string in markup format into HTML.\n<p>Requires the including class to implement #formatter\n"],["marshal_dump","Delegator","Delegator.html#method-i-marshal_dump","()","<p>Serialization support for the object returned by _<em>getobj</em>_.\n"],["marshal_dump","Gem::Version","Gem/Version.html#method-i-marshal_dump","()","<p>Dump only the raw version string, not the complete object. It’s a string for backwards (RubyGems …\n"],["marshal_dump","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-marshal_dump","()","<p>Dumps this AnyMethod for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Attr","RDoc/Attr.html#method-i-marshal_dump","()","<p>Dumps this Attr for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Constant","RDoc/Constant.html#method-i-marshal_dump","()","<p>Dumps this Constant for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::TopLevel","RDoc/TopLevel.html#method-i-marshal_dump","()","<p>Dumps this TopLevel for use by ri.  See also #marshal_load\n"],["marshal_load","Delegator","Delegator.html#method-i-marshal_load","(data)","<p>Reinitializes delegation from a serialized object.\n"],["marshal_load","Gem::Version","Gem/Version.html#method-i-marshal_load","(array)","<p>Load custom marshal format. It’s a string for backwards (RubyGems 1.3.5 and earlier) compatibility. …\n"],["marshal_load","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-marshal_load","(array)","<p>Loads this AnyMethod from <code>array</code>.  For a loaded AnyMethod the following methods will return cached values: …\n"],["marshal_load","RDoc::Attr","RDoc/Attr.html#method-i-marshal_load","(array)","<p>Loads this Attr from <code>array</code>.  For a loaded Attr the following methods will return cached values:\n<p>#full_name …\n"],["marshal_load","RDoc::Constant","RDoc/Constant.html#method-i-marshal_load","(array)","<p>Loads this Constant from <code>array</code>.  For a loaded Constant the following methods will return cached values: …\n"],["marshal_version","Gem","Gem.html#method-c-marshal_version","()","<p>The version of the Marshal format for your Ruby.\n"],["mask","IPAddr","IPAddr.html#method-i-mask","(prefixlen)","<p>Returns a new ipaddr built by masking IP address with the given prefixlen/netmask. (e.g. 8, 64, “255.255.255.0”, …\n"],["mask","Syslog","Syslog.html#method-c-mask","()","<p>Returns the log priority mask in effect. The mask is not reset by opening or closing syslog.\n"],["mask!","IPAddr","IPAddr.html#method-i-mask-21","(mask)","<p>Set current netmask to given mask.\n"],["mask=","Syslog","Syslog.html#method-c-mask-3D","(p1)","<p>Sets the log priority mask. A method LOG_UPTO is defined to make it easier to set mask values. Example: …\n"],["match","ACL::ACLEntry","ACL/ACLEntry.html#method-i-match","(addr)","<p>Matches <code>addr</code> against this entry.\n"],["match","ACL::ACLList","ACL/ACLList.html#method-i-match","(addr)","<p>Matches <code>addr</code> against each ACLEntry in this list.\n"],["match","Gem::Platform","Gem/Platform.html#method-c-match","(platform)",""],["match","MatchData","MatchData.html#method-i-match","(p1)","<p>Returns the matched substring corresponding to the given argument.\n<p>When non-negative argument <code>n</code> is given, …\n"],["match","OptionParser::CompletingHash","OptionParser/CompletingHash.html#method-i-match","(key)","<p>Completion for hash key.\n"],["match","Regexp","Regexp.html#method-i-match","(p1, p2 = v2)","<p>With no block given, returns the MatchData object that describes the match, if any, or <code>nil</code> if none; the …\n"],["match","Rinda::Template","Rinda/Template.html#method-i-match","(tuple)","<p>Matches this template against <code>tuple</code>.  The <code>tuple</code> must be the same size as the template.  An element with …\n"],["match","Rinda::TemplateEntry","Rinda/TemplateEntry.html#method-i-match","(tuple)","<p>Matches this TemplateEntry against <code>tuple</code>.  See Template#match for details on how a Template matches a …\n"],["match","String","String.html#method-i-match","(*args)","<p>Returns a MatchData object (or <code>nil</code>) based on <code>self</code> and the given <code>pattern</code>.\n<p>Note: also updates Regexp@Special+global+variables …\n"],["match","Symbol","Symbol.html#method-i-match","(*args)","<p>Equivalent to <code>self.to_s.match</code>, including possible updates to global variables; see String#match.\n"],["match?","CSV::MatchP","CSV/MatchP.html#method-i-match-3F","(pattern)",""],["match?","Gem::Dependency","Gem/Dependency.html#method-i-match-3F","(obj, version=nil, allow_prerelease=false)","<p>Does this dependency match the specification described by <code>name</code> and <code>version</code> or match <code>spec</code>?\n<p>NOTE:  Unlike …\n"],["match?","Gem::Licenses","Gem/Licenses.html#method-c-match-3F","(license)",""],["match?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-match-3F","(spec, allow_prerelease = false)","<p>Does this dependency request match <code>spec</code>?\n<p>NOTE:  #match? only matches prerelease versions when #dependency …\n"],["match?","Regexp","Regexp.html#method-i-match-3F","(*args)","<p>Returns <code>true</code> or <code>false</code> to indicate whether the regexp is matched or not without updating $~ and other …\n"],["match?","String","String.html#method-i-match-3F","(*args)","<p>Returns <code>true</code> or <code>false</code> based on whether a match is found for <code>self</code> and <code>pattern</code>.\n<p>Note: does not update Regexp@Special+global+variables …\n"],["match?","StringScanner","StringScanner.html#method-i-match-3F","(p1)","<p>Tests whether the given <code>pattern</code> is matched from the current scan pointer. Returns the length of the match, …\n"],["match?","Symbol","Symbol.html#method-i-match-3F","(*args)","<p>Equivalent to <code>sym.to_s.match?</code>; see String#match.\n"],["match_gem?","Gem::Platform","Gem/Platform.html#method-c-match_gem-3F","(platform, gem_name)",""],["match_length","MatchData","MatchData.html#method-i-match_length","(p1)","<p>Returns the length (in characters) of the matched substring corresponding to the given argument.\n<p>When …\n"],["match_platform!","Gem::AvailableSet","Gem/AvailableSet.html#method-i-match_platform-21","()",""],["match_platform?","Gem::NameTuple","Gem/NameTuple.html#method-i-match_platform-3F","()","<p>Indicate if this NameTuple matches the current platform.\n"],["match_platforms?","Gem::Platform","Gem/Platform.html#method-c-match_platforms-3F","(platform, platforms)",""],["match_spec?","Gem::Platform","Gem/Platform.html#method-c-match_spec-3F","(spec)",""],["match_status","Reline::KeyStroke","Reline/KeyStroke.html#method-i-match_status","(input)",""],["matched","StringScanner","StringScanner.html#method-i-matched","()","<p>Returns the last matched string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">StringScanner</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;test string&#39;</span>)\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">match?</span>(<span class=\"ruby-regexp\">/\\w+/</span>)     <span class=\"ruby-comment\"># -&gt; 4</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">matched</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["matched?","StringScanner","StringScanner.html#method-i-matched-3F","()","<p>Returns <code>true</code> if and only if the last match was successful.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">StringScanner</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;test string&#39;</span>)\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">match?</span>(<span class=\"ruby-regexp\">/\\w+/</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["matched_size","StringScanner","StringScanner.html#method-i-matched_size","()","<p>Returns the size of the most recent match in bytes, or <code>nil</code> if there was no recent match.  This is different …\n"],["matchee","NoMatchingPatternKeyError","NoMatchingPatternKeyError.html#method-i-matchee","()","<p>Return the matchee associated with this NoMatchingPatternKeyError exception.\n"],["matches?","Reline::Windows::KeyEventRecord","Reline/Windows/KeyEventRecord.html#method-i-matches-3F","(control_keys: nil, virtual_key_code: nil, char_code: nil)","<p>Verifies if the arguments match with this key event. Nil arguments are ignored, but at least one must …\n"],["matches_for_glob","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-matches_for_glob","(glob)","<p>Return all files in this gem that match for <code>glob</code>.\n"],["matches_spec?","Gem::Dependency","Gem/Dependency.html#method-i-matches_spec-3F","(spec)","<p>Does this dependency match <code>spec</code>?\n<p>NOTE:  This is not a convenience method.  Unlike #match? this method …\n"],["matches_spec?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-matches_spec-3F","(spec)","<p>Does this dependency request match <code>spec</code>?\n<p>NOTE:  #matches_spec? matches prerelease versions.  See also …\n"],["matching_specs","Gem::Dependency","Gem/Dependency.html#method-i-matching_specs","(platform_only = false)",""],["max","Array","Array.html#method-i-max","(*args)","<p>Returns one of the following:\n<p>The maximum-valued element from <code>self</code>.\n<p>A new Array of maximum-valued elements …\n"],["max","Enumerable","Enumerable.html#method-i-max","(*args)","<p>Returns the element with the maximum element according to a given criterion. The ordering of equal elements …\n"],["max","Range","Range.html#method-i-max","(*args)","<p>Returns the maximum value in <code>self</code>, using method <code>&lt;=&gt;</code> or a given block for comparison.\n<p>With no argument …\n"],["max","Thread::SizedQueue","Thread/SizedQueue.html#method-i-max","()","<p>Returns the maximum size of the queue.\n"],["max=","Thread::SizedQueue","Thread/SizedQueue.html#method-i-max-3D","(p1)","<p>Sets the maximum size of the queue to the given <code>number</code>.\n"],["max_by","Enumerable","Enumerable.html#method-i-max_by","(*args)","<p>Returns the elements for which the block returns the maximum values.\n<p>With a block given and no argument, …\n"],["max_field_size","CSV","CSV.html#method-i-max_field_size","()","<p>Returns the limit for field size; used for parsing; see {Option <code>max_field_size</code>}:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CSV</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;&#39;</span>).<span class=\"ruby-identifier\">max_field_size</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["max_field_size","CSV::Parser","CSV/Parser.html#method-i-max_field_size","()",""],["max_nesting","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-max_nesting","()","<p>This integer returns the maximum level of data structure nesting in the generated JSON, max_nesting = …\n"],["max_nesting=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-max_nesting-3D","(p1)","<p>This sets the maximum level of data structure nesting in the generated JSON to the integer depth, max_nesting …\n"],["max_retries=","Net::HTTP","Net/HTTP.html#method-i-max_retries-3D","(retries)","<p>Sets the maximum number of times to retry an idempotent request in case of Net::ReadTimeout, IOError …\n"],["max_version=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-max_version-3D","(version)","<p>Sets the upper bound of the supported SSL/TLS protocol version. See #min_version= for the possible values. …\n"],["maxgroups","Process","Process.html#method-c-maxgroups","()","<p>Returns the maximum number of GIDs allowed in the supplemental group access list.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">maxgroups</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["maxgroups=","Process","Process.html#method-c-maxgroups-3D","(p1)","<p>Sets the maximum number of GIDs allowed in the supplemental group access list.\n"],["may_quoted?","CSV::Parser","CSV/Parser.html#method-i-may_quoted-3F","()",""],["may_req_ambiguous_char_width","Reline::Core","Reline/Core.html#method-i-may_req_ambiguous_char_width","()",""],["maybe_resolve_ldflag_variable","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-maybe_resolve_ldflag_variable","(input_arg, dest_dir, crate_name)","<p>Interpolate substitution vars in the arg (i.e. $(DEFFILE))\n"],["mday","Date","Date.html#method-i-mday","()","<p>Returns the day of the month in range (1..31):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">mday</span> <span class=\"ruby-comment\"># =&gt; 3</span>\n</pre>\n<p>Date#day is an alias for …\n"],["mday","Time","Time.html#method-i-mday","()","<p>Returns the integer day of the month for <code>self</code>, in range (1..31):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["measure","Benchmark","Benchmark.html#method-i-measure","(label = \"\")","<p>Returns the time used to execute the given block as a Benchmark::Tms object. Takes <code>label</code> option.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["measure","Benchmark","Benchmark.html#method-c-measure","(label = \"\")","<p>Returns the time used to execute the given block as a Benchmark::Tms object. Takes <code>label</code> option.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["measure_total_time","GC","GC.html#method-c-measure_total_time","()","<p>Return measure_total_time flag (default: <code>true</code>). Note that measurement can affect the application performance. …\n"],["measure_total_time=","GC","GC.html#method-c-measure_total_time-3D","(flag)","<p>Enable to measure GC time. You can get the result with <code>GC.stat(:time)</code>. Note that GC time measurement …\n"],["mem_check_start","OpenSSL","OpenSSL.html#method-c-mem_check_start","()","<p>Calls CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON). Starts tracking memory allocations. See also OpenSSL.print_mem_leaks …\n"],["member?","CSV::Row","CSV/Row.html#method-i-member-3F","(header)",""],["member?","ENV","ENV.html#method-c-member-3F","(p1)","<p>ENV.has_key?, ENV.member?, and ENV.key? are aliases for ENV.include?.\n<p>Returns <code>true</code> if there is an environment …\n"],["member?","Enumerable","Enumerable.html#method-i-member-3F","(p1)","<p>Returns whether for any element <code>object == element</code>:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span>)                       <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["member?","Hash","Hash.html#method-i-member-3F","(p1)","<p>Methods #has_key?, #key?, and #member? are aliases for #include?.\n<p>Returns <code>true</code> if <code>key</code> is a key in <code>self</code> …\n"],["member?","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["member?","Range","Range.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if <code>object</code> is an element of <code>self</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span>)        <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["member?","Set","Set.html#method-i-member-3F","(o)",""],["members","Data","Data.html#method-c-members","()","<p>Returns an array of member names of the data class:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Measure</span> = <span class=\"ruby-constant\">Data</span>.<span class=\"ruby-identifier\">define</span>(<span class=\"ruby-value\">:amount</span>, <span class=\"ruby-value\">:unit</span>)\n<span class=\"ruby-constant\">Measure</span>.<span class=\"ruby-identifier\">members</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["members","Data","Data.html#method-i-members","()","<p>Returns the member names from <code>self</code> as an array:\n\n<pre>Measure = Data.define(:amount, :unit)\ndistance = Measure[10, ...</pre>\n"],["members","Struct","Struct.html#method-c-members","()","<p>Returns the member names of the Struct descendant as an array:\n\n<pre>Customer = Struct.new(:name, :address, ...</pre>\n"],["members","Struct","Struct.html#method-i-members","()","<p>Returns the member names from <code>self</code> as an array:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Customer</span> = <span class=\"ruby-constant\">Struct</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:name</span>, <span class=\"ruby-value\">:address</span>, <span class=\"ruby-value\">:zip</span>)\n<span class=\"ruby-constant\">Customer</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">members</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["memberwise","Benchmark::Tms","Benchmark/Tms.html#method-i-memberwise","(op, x)","<p>Returns a new Tms object obtained by memberwise operation <code>op</code> of the individual times for this Tms object …\n"],["memsize_of","ObjectSpace","ObjectSpace.html#method-c-memsize_of","(p1)","<p>Return consuming memory size of obj in bytes.\n<p>Note that the return size is incomplete.  You need to deal …\n"],["memsize_of_all","ObjectSpace","ObjectSpace.html#method-c-memsize_of_all","(p1 = v1)","<p>Return consuming memory size of all living objects in bytes.\n<p>If <code>klass</code> (should be Class object) is given, …\n"],["menu","Reline::LineEditor","Reline/LineEditor.html#method-i-menu","(target, list)",""],["merge","Gem::Dependency","Gem/Dependency.html#method-i-merge","(other)","<p>Merges the requirements of <code>other</code> into this dependency\n"],["merge","Hash","Hash.html#method-i-merge","(*args)","<p>Returns the new Hash formed by merging each of <code>other_hashes</code> into a copy of <code>self</code>.\n<p>Each argument in <code>other_hashes</code> …\n"],["merge","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-merge","(p1)","<p>Configure this State instance with the Hash <em>opts</em>, and return itself.\n"],["merge","RDoc::ClassModule","RDoc/ClassModule.html#method-i-merge","(class_module)","<p>Merges <code>class_module</code> into this ClassModule.\n<p>The data in <code>class_module</code> is preferred over the receiver.\n"],["merge","Set","Set.html#method-i-merge","(enum)","<p>Merges the elements of the given enumerable object to the set and\nreturns self.\n"],["merge","URI::Generic","URI/Generic.html#method-i-merge","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["merge!","ENV","ENV.html#method-c-merge-21","(*args)","<p>ENV.update is an alias for ENV.merge!.\n<p>Adds to ENV each key/value pair in the given <code>hash</code>; returns ENV: …\n"],["merge!","Hash","Hash.html#method-i-merge-21","(*args)","<p>Merges each of <code>other_hashes</code> into <code>self</code>; returns <code>self</code>.\n<p>Each argument in <code>other_hashes</code> must be a Hash.\n<p>Method …\n"],["merge!","URI::Generic","URI/Generic.html#method-i-merge-21","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["merge_key","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-merge_key","(hash, key, val)",""],["merge_options","Gem::Command","Gem/Command.html#method-i-merge_options","(new_options)","<p>Merge a set of command options with the set of default options (without modifying the default option …\n"],["merge_path","URI::Generic","URI/Generic.html#method-i-merge_path","(base, rel)","<p>Merges a base path <code>base</code>, with relative path <code>rel</code>, returns a modified base path.\n"],["message","Exception","Exception.html#method-i-message","()","<p>Returns the result of invoking <code>exception.to_s</code>. Normally this returns the exception’s message or name. …\n"],["message","Gem::Resolver::Molinillo::NoSuchDependencyError","Gem/Resolver/Molinillo/NoSuchDependencyError.html#method-i-message","()","<p>The error message for the missing dependency, including the specifications that had this dependency. …\n"],["message","Gem::RuntimeRequirementNotMetError","Gem/RuntimeRequirementNotMetError.html#method-i-message","()",""],["message","Net::ReadTimeout","Net/ReadTimeout.html#method-i-message","()",""],["message","Net::WriteTimeout","Net/WriteTimeout.html#method-i-message","()",""],["message","OptionParser::ParseError","OptionParser/ParseError.html#method-i-message","()","<p>Default stringizing method to emit standard error message.\n"],["message_for","DidYouMean::Formatter","DidYouMean/Formatter.html#method-c-message_for","(corrections)","<p>Returns a human readable string that contains <code>corrections</code>. This formatter is designed to be less verbose …\n"],["message_for","DidYouMean::Formatter","DidYouMean/Formatter.html#method-i-message_for","(corrections)",""],["message_for","DidYouMean::Formatter","DidYouMean/Formatter.html#method-c-message_for","(corrections)","<p>Returns a human readable string that contains <code>corrections</code>. This formatter is designed to be less verbose …\n"],["message_for","DidYouMean::Formatter","DidYouMean/Formatter.html#method-i-message_for","(corrections)",""],["message_for","DidYouMean::Formatter","DidYouMean/Formatter.html#method-c-message_for","(corrections)","<p>Returns a human readable string that contains <code>corrections</code>. This formatter is designed to be less verbose …\n"],["message_for","DidYouMean::Formatter","DidYouMean/Formatter.html#method-i-message_for","(corrections)",""],["message_for","ErrorHighlight::DefaultFormatter","ErrorHighlight/DefaultFormatter.html#method-c-message_for","(spot)",""],["message_imprint","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-i-message_imprint","()","<p>Returns the message imprint (digest) of the data to be timestamped.\n"],["message_imprint","OpenSSL::Timestamp::TokenInfo","OpenSSL/Timestamp/TokenInfo.html#method-i-message_imprint","()","<p>Returns the message imprint digest. For valid timestamps, this is the same value that was already given …\n"],["message_imprint=","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-i-message_imprint-3D","(p1)","<p>Set the message imprint digest.\n"],["message_loop","WIN32OLE::Event","WIN32OLE/Event.html#method-c-message_loop","()","<p>Translates and dispatches Windows message.\n"],["message_with_trees","Gem::Resolver::Molinillo::VersionConflict","Gem/Resolver/Molinillo/VersionConflict.html#method-i-message_with_trees","(opts = {})","<p>@return [String] An error message that includes requirement trees,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">which</span> <span class=\"ruby-identifier\">is</span> <span class=\"ruby-identifier\">much</span> <span class=\"ruby-identifier\">more</span> <span class=\"ruby-identifier\">detailed</span> <span class=\"ruby-operator\">&amp;</span> <span class=\"ruby-identifier\">customizable</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["metadata_satisfied?","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-metadata_satisfied-3F","(spec)",""],["method","Object","Object.html#method-i-method","(p1)","<p>Looks up the named method as a receiver in <em>obj</em>, returning a Method object (or raising NameError). The …\n"],["method","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-method","(foo, bar)","<p>This method is documented only by RDoc, except for these comments.\n<p>Click on the calling sequence to see …\n"],["method_added","Module","Module.html#method-i-method_added","(p1)","<p>Invoked as a callback whenever an instance method is added to the receiver.\n\n<pre>module Chatty\n  def self.method_added(method_name) ...</pre>\n"],["method_defined?","Module","Module.html#method-i-method_defined-3F","(*args)","<p>Returns <code>true</code> if the named method is defined by <em>mod</em>.  If <em>inherit</em> is set, the lookup will also search  …\n"],["method_file","RDoc::Store","RDoc/Store.html#method-i-method_file","(klass_name, method_name)","<p>Path to the ri data for <code>method_name</code> in <code>klass_name</code>\n"],["method_id","TracePoint","TracePoint.html#method-i-method_id","()","<p>Return the name at the definition of the method being called\n"],["method_missing","BasicObject","BasicObject.html#method-i-method_missing","(*args)","<p>Invoked by Ruby when <em>obj</em> is sent a message it cannot handle. <em>symbol</em> is the symbol for the method called, …\n"],["method_missing","DRb::DRbObject","DRb/DRbObject.html#method-i-method_missing","(msg_id, *a, &b)",""],["method_missing","DRb::DRbObject","DRb/DRbObject.html#method-i-method_missing","(msg_id, *a, &b)",""],["method_missing","DRb::ThreadObject","DRb/ThreadObject.html#method-i-method_missing","(msg, *arg, &blk)",""],["method_missing","Delegator","Delegator.html#method-i-method_missing","(m, *args, &block)",""],["method_missing","Gem::Uri","Gem/Uri.html#method-i-method_missing","(method_name, *args, &blk)",""],["method_missing","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-method_missing","(mid, *args, &block)",""],["method_missing","Ractor::MovedObject","Ractor/MovedObject.html#method-i-method_missing","(*args)",""],["method_missing","WIN32OLE","WIN32OLE.html#method-i-method_missing","(*args)","<p>Calls WIN32OLE#invoke method.\n"],["method_missing","WIN32OLE::Record","WIN32OLE/Record.html#method-i-method_missing","(*args)","<p>Returns value specified by the member name of VT_RECORD OLE variable. Or sets value specified by the …\n"],["method_names","DidYouMean::MethodNameChecker","DidYouMean/MethodNameChecker.html#method-i-method_names","()",""],["method_removed","Module","Module.html#method-i-method_removed","(p1)","<p>Invoked as a callback whenever an instance method is removed from the receiver.\n\n<pre>module Chatty\n  def self.method_removed(method_name) ...</pre>\n"],["method_undefined","Module","Module.html#method-i-method_undefined","(p1)","<p>Invoked as a callback whenever an instance method is undefined from the receiver.\n\n<pre>module Chatty\n  def ...</pre>\n"],["methods","Delegator","Delegator.html#method-i-methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this object’s and _<em>getobj</em> …\n"],["methods","Object","Object.html#method-i-methods","(*args)","<p>Returns a list of the names of public and protected methods of <em>obj</em>. This will include all the methods …\n"],["methods","WIN32OLE","WIN32OLE.html#method-i-methods","(*args)","<p>By overriding Object#methods, WIN32OLE might work well with did_you_mean gem. This is experimental.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["methods_by_type","RDoc::Context","RDoc/Context.html#method-i-methods_by_type","(section = nil)","<p>Breaks method_list into a nested hash by type (<code>&#39;class&#39;</code> or <code>&#39;instance&#39;</code>) and visibility …\n"],["methods_matching","RDoc::Context","RDoc/Context.html#method-i-methods_matching","(methods, singleton = false, &block)","<p>Yields AnyMethod and Attr entries matching the list of names in <code>methods</code>.\n"],["mfa_unauthorized?","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-mfa_unauthorized-3F","(response)",""],["min","Array","Array.html#method-i-min","(*args)","<p>Returns one of the following:\n<p>The minimum-valued element from <code>self</code>.\n<p>A new Array of minimum-valued elements …\n"],["min","DateTime","DateTime.html#method-i-min","()","<p>Returns the minute in range (0..59):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">min</span> <span class=\"ruby-comment\"># =&gt; 5</span>\n</pre>\n<p>Date#minute is an alias …\n"],["min","Enumerable","Enumerable.html#method-i-min","(*args)","<p>Returns the element with the minimum element according to a given criterion. The ordering of equal elements …\n"],["min","Range","Range.html#method-i-min","(*args)","<p>Returns the minimum value in <code>self</code>, using method <code>&lt;=&gt;</code> or a given block for comparison.\n<p>With no argument …\n"],["min","Time","Time.html#method-i-min","()","<p>Returns the integer minute of the hour for <code>self</code>, in range (0..59):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["min_by","Enumerable","Enumerable.html#method-i-min_by","(*args)","<p>Returns the elements for which the block returns the minimum values.\n<p>With a block given and no argument, …\n"],["min_version=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-min_version-3D","(version)","<p>Sets the lower bound on the supported SSL/TLS protocol version. The version may be specified by an integer …\n"],["mingw_target?","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-mingw_target-3F","()",""],["minimum_indent","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-minimum_indent","(lines)",""],["minmax","Array","Array.html#method-i-minmax","()","<p>Returns a new 2-element Array containing the minimum and maximum values from <code>self</code>, either per method …\n"],["minmax","Enumerable","Enumerable.html#method-i-minmax","()","<p>Returns a 2-element array containing the minimum and maximum elements according to a given criterion. …\n"],["minmax","Range","Range.html#method-i-minmax","()","<p>Returns a 2-element array containing the minimum and maximum value in <code>self</code>, either according to comparison …\n"],["minmax_by","Enumerable","Enumerable.html#method-i-minmax_by","()","<p>Returns a 2-element array containing the elements for which the block returns minimum and maximum values: …\n"],["minor_version","WIN32OLE::Type","WIN32OLE/Type.html#method-i-minor_version","()","<p>Returns minor version.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Word 10.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Documents&#39;</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["minor_version","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-i-minor_version","()","<p>Returns the type library minor version.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tlib</span> = <span class=\"ruby-constant\">WIN32OLE_TYPELIB</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["minute","DateTime","DateTime.html#method-i-minute","()","<p>Returns the minute in range (0..59):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">min</span> <span class=\"ruby-comment\"># =&gt; 5</span>\n</pre>\n<p>Date#minute is an alias …\n"],["missing","SyntaxSuggest::ExplainSyntax","SyntaxSuggest/ExplainSyntax.html#method-i-missing","()","<p>Returns an array of missing elements\n<p>For example this:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ExplainSyntax</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">code_lines:</span> <span class=\"ruby-identifier\">lines</span>).<span class=\"ruby-identifier\">missing</span>\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["missing","SyntaxSuggest::LeftRightLexCount","SyntaxSuggest/LeftRightLexCount.html#method-i-missing","()","<p>Returns an array of missing syntax characters or ‘“end”` or `“keyword”`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">left_right</span>.<span class=\"ruby-identifier\">missing</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["missing_extensions?","Gem::Specification","Gem/Specification.html#method-i-missing_extensions-3F","()","<p>Is this specification missing its extensions?  When this returns true you probably want to build_extensions …\n"],["missing_keyword_end","SyntaxSuggest::LeftRightLexCount","SyntaxSuggest/LeftRightLexCount.html#method-i-missing_keyword_end","()","<p>Keywords need ends and ends need keywords\n<p>If we have more keywords, there’s a missing ‘end` if we …\n"],["missing_pairs","SyntaxSuggest::LeftRightLexCount","SyntaxSuggest/LeftRightLexCount.html#method-i-missing_pairs","()","<p>Opening characters like ‘{` need closing characters # like `}`.\n<p>When a mis-match count is detected, suggest …\n"],["missing_pipe","SyntaxSuggest::LeftRightLexCount","SyntaxSuggest/LeftRightLexCount.html#method-i-missing_pipe","()","<p>Pipes come in pairs. If there’s an odd number of pipes then we are missing one\n"],["mjd","Date","Date.html#method-i-mjd","()","<p>Returns the modified Julian day number.  This is a whole number, which is adjusted by the offset as the …\n"],["mkcol","Net::HTTP","Net/HTTP.html#method-i-mkcol","(path, body = nil, initheader = nil)","<p>Sends a MKCOL request to the <code>path</code> and gets a response, as an HTTPResponse object.\n"],["mkdir","Dir","Dir.html#method-c-mkdir","(p1, p2 = v2)","<p>Makes a new directory named by <em>string</em>, with permissions specified by the optional parameter <em>anInteger</em> …\n"],["mkdir","FileUtils","FileUtils.html#method-i-mkdir","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates directories at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code> …\n"],["mkdir","FileUtils","FileUtils.html#method-c-mkdir","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates directories at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code> …\n"],["mkdir","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-mkdir","(name, mode)","<p>Creates a new directory in the tar file <code>name</code> with <code>mode</code>\n"],["mkdir","Pathname","Pathname.html#method-i-mkdir","(p1 = v1)","<p>Create the referenced directory.\n<p>See Dir.mkdir.\n"],["mkdir_p","Bundler","Bundler.html#method-c-mkdir_p","(path, options = {})",""],["mkdir_p","FileUtils","FileUtils.html#method-c-mkdir_p","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates directories at the paths in the given <code>list</code> (a single path or an array of paths), also creating …\n"],["mkdir_p","FileUtils","FileUtils.html#method-i-mkdir_p","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates directories at the paths in the given <code>list</code> (a single path or an array of paths), also creating …\n"],["mkdir_p","Gem::Commands::SetupCommand::MakeDirs","Gem/Commands/SetupCommand/MakeDirs.html#method-i-mkdir_p","(path, **opts)",""],["mkfifo","File","File.html#method-c-mkfifo","(*args)","<p>Creates a FIFO special file with name <em>file_name</em>.  <em>mode</em> specifies the FIFO’s permissions. It is modified …\n"],["mkmapexp","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-mkmapexp","(arr)",""],["mkmf_libpath","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-mkmf_libpath","()","<p>Corresponds to $(LIBPATH) in mkmf\n"],["mkpath","FileUtils","FileUtils.html#method-c-mkpath","(list, mode: nil, noop: nil, verbose: nil)",""],["mkpath","FileUtils","FileUtils.html#method-i-mkpath","(list, mode: nil, noop: nil, verbose: nil)",""],["mkpath","Pathname","Pathname.html#method-i-mkpath","(mode: nil)","<p>Creates a full path, including any intermediate directories that don’t yet exist.\n<p>See FileUtils.mkpath …\n"],["mktime","Time","Time.html#method-c-mktime","(*args)","<p>Like Time.utc, except that the returned Time object has the local timezone, not the UTC timezone:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># With ...</span>\n</pre>\n"],["mktmpdir","Dir","Dir.html#method-c-mktmpdir","(prefix_suffix=nil, *rest, **options)","<p>Dir.mktmpdir creates a temporary directory.\n<p>The directory is created with 0700 permission. Application …\n"],["mod_add","OpenSSL::BN","OpenSSL/BN.html#method-i-mod_add","(p1, p2)",""],["mod_exp","OpenSSL::BN","OpenSSL/BN.html#method-i-mod_exp","(p1, p2)",""],["mod_inverse","OpenSSL::BN","OpenSSL/BN.html#method-i-mod_inverse","(p1)",""],["mod_mul","OpenSSL::BN","OpenSSL/BN.html#method-i-mod_mul","(p1, p2)",""],["mod_sqr","OpenSSL::BN","OpenSSL/BN.html#method-i-mod_sqr","(p1)",""],["mod_sqrt","OpenSSL::BN","OpenSSL/BN.html#method-i-mod_sqrt","(p1)",""],["mod_sub","OpenSSL::BN","OpenSSL/BN.html#method-i-mod_sub","(p1, p2)",""],["mode","BigDecimal","BigDecimal.html#method-c-mode","(p1, p2 = v2)","<p>Returns an integer representing the mode settings for exception handling and rounding.\n<p>These modes control …\n"],["mode","File::Stat","File/Stat.html#method-i-mode","()","<p>Returns an integer representing the permission bits of <em>stat</em>. The meaning of the bits is platform dependent; …\n"],["modify_lines","Reline::LineEditor","Reline/LineEditor.html#method-i-modify_lines","(before)",""],["module","RDoc::Mixin","RDoc/Mixin.html#method-i-module","()","<p>Attempts to locate the included module object.  Returns the name if not known.\n<p>The scoping rules of Ruby …\n"],["module?","RDoc::ClassModule","RDoc/ClassModule.html#method-i-module-3F","()","<p>Does this object represent a module?\n"],["module?","RDoc::NormalModule","RDoc/NormalModule.html#method-i-module-3F","()","<p>This is a module, returns true\n"],["module_eval","Module","Module.html#method-i-module_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>, except that when a block is given, constant/class …\n"],["module_exec","Module","Module.html#method-i-module_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method defined in the block will belong …\n"],["module_for_detailed_message","SyntaxSuggest","SyntaxSuggest.html#method-c-module_for_detailed_message","()","<p>SyntaxSuggest.record_dir [Private]\n<p>Used to monkeypatch SyntaxError via Module.prepend\n"],["module_function","Module","Module.html#method-i-module_function","(*args)","<p>Creates module functions for the named methods. These functions may be called with the module as a receiver, …\n"],["module_names","RDoc::Store","RDoc/Store.html#method-i-module_names","()","<p>Modules cache accessor.  An Array of all the module (and class) names in the store.\n"],["modules","RDoc::Context","RDoc/Context.html#method-i-modules","()","<p>Array of modules in this context\n"],["modules_hash","RDoc::Context","RDoc/Context.html#method-i-modules_hash","()","<p>Hash of modules keyed by module name\n"],["modules_hash","RDoc::Store","RDoc/Store.html#method-i-modules_hash","()","<p>Hash of all modules known to RDoc\n"],["modulo","BigDecimal","BigDecimal.html#method-i-modulo","(p1)","<p>Returns the modulus from dividing by b.\n<p>See BigDecimal#divmod.\n"],["modulo","Float","Float.html#method-i-modulo","(p1)","<p>Returns <code>self</code> modulo <code>other</code> as a float.\n<p>For float <code>f</code> and real number <code>r</code>, these expressions are equivalent: …\n"],["modulo","Integer","Integer.html#method-i-modulo","(p1)","<p>Returns <code>self</code> modulo <code>other</code> as a real number.\n<p>For integer <code>n</code> and real number <code>r</code>, these expressions are equivalent: …\n"],["modulo","Numeric","Numeric.html#method-i-modulo","(p1)","<p>Returns <code>self</code> modulo <code>other</code> as a real number.\n<p>Of the Core and Standard Library classes, only Rational uses …\n"],["mon","Date","Date.html#method-i-mon","()","<p>Returns the month in range (1..12):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">mon</span> <span class=\"ruby-comment\"># =&gt; 2</span>\n</pre>\n<p>Date#month is an alias for Date#mon …\n"],["mon","Time","Time.html#method-i-mon","()","<p>Returns the integer month of the year for <code>self</code>, in range (1..12):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mon_check_owner","Monitor","Monitor.html#method-i-mon_check_owner","()",""],["mon_check_owner","MonitorMixin","MonitorMixin.html#method-i-mon_check_owner","()",""],["mon_enter","Monitor","Monitor.html#method-i-mon_enter","()",""],["mon_enter","MonitorMixin","MonitorMixin.html#method-i-mon_enter","()","<p>Enters exclusive section.\n"],["mon_exit","Monitor","Monitor.html#method-i-mon_exit","()",""],["mon_exit","MonitorMixin","MonitorMixin.html#method-i-mon_exit","()","<p>Leaves exclusive section.\n"],["mon_initialize","MonitorMixin","MonitorMixin.html#method-i-mon_initialize","()","<p>Initializes the MonitorMixin after being included in a class or when an object has been extended with …\n"],["mon_locked?","Monitor","Monitor.html#method-i-mon_locked-3F","()",""],["mon_locked?","MonitorMixin","MonitorMixin.html#method-i-mon_locked-3F","()","<p>Returns true if this monitor is locked by any thread\n"],["mon_owned?","Monitor","Monitor.html#method-i-mon_owned-3F","()",""],["mon_owned?","MonitorMixin","MonitorMixin.html#method-i-mon_owned-3F","()","<p>Returns true if this monitor is locked by current thread.\n"],["mon_synchronize","Monitor","Monitor.html#method-i-mon_synchronize","()",""],["mon_synchronize","MonitorMixin","MonitorMixin.html#method-i-mon_synchronize","(&b)","<p>Enters exclusive section and executes the block.  Leaves the exclusive section automatically when the …\n"],["mon_try_enter","Monitor","Monitor.html#method-i-mon_try_enter","()",""],["mon_try_enter","MonitorMixin","MonitorMixin.html#method-i-mon_try_enter","()","<p>Attempts to enter exclusive section.  Returns <code>false</code> if lock fails.\n"],["monday?","Date","Date.html#method-i-monday-3F","()","<p>Returns <code>true</code> if <code>self</code> is a Monday, <code>false</code> otherwise.\n"],["monday?","Time","Time.html#method-i-monday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Monday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">3</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-03 00:00:00 ...</span>\n</pre>\n"],["month","Date","Date.html#method-i-month","()","<p>Returns the month in range (1..12):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">mon</span> <span class=\"ruby-comment\"># =&gt; 2</span>\n</pre>\n<p>Date#month is an alias for Date#mon …\n"],["month","Time","Time.html#method-i-month","()","<p>Returns the integer month of the year for <code>self</code>, in range (1..12):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["most_specific_locked_platform?","Bundler","Bundler.html#method-c-most_specific_locked_platform-3F","(platform)",""],["mountpoint?","Pathname","Pathname.html#method-i-mountpoint-3F","()","<p>Returns <code>true</code> if <code>self</code> points to a mountpoint.\n"],["move","FileUtils","FileUtils.html#method-i-move","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)",""],["move","FileUtils","FileUtils.html#method-c-move","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)",""],["move","Net::HTTP","Net/HTTP.html#method-i-move","(path, initheader = nil)","<p>Sends a MOVE request to the <code>path</code> and gets a response, as an HTTPResponse object.\n"],["move","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-move","(port, tuple, sec=nil)","<p>Moves <code>tuple</code> to <code>port</code>.\n"],["move_completed_list","Reline::LineEditor","Reline/LineEditor.html#method-i-move_completed_list","(list, direction)",""],["move_cursor_column","Reline::ANSI","Reline/ANSI.html#method-c-move_cursor_column","(x)",""],["move_cursor_column","Reline::GeneralIO","Reline/GeneralIO.html#method-c-move_cursor_column","(val)",""],["move_cursor_column","Reline::Windows","Reline/Windows.html#method-c-move_cursor_column","(val)",""],["move_cursor_down","Reline::ANSI","Reline/ANSI.html#method-c-move_cursor_down","(x)",""],["move_cursor_down","Reline::GeneralIO","Reline/GeneralIO.html#method-c-move_cursor_down","(val)",""],["move_cursor_down","Reline::LineEditor","Reline/LineEditor.html#method-i-move_cursor_down","(val)",""],["move_cursor_down","Reline::Windows","Reline/Windows.html#method-c-move_cursor_down","(val)",""],["move_cursor_up","Reline::ANSI","Reline/ANSI.html#method-c-move_cursor_up","(x)",""],["move_cursor_up","Reline::GeneralIO","Reline/GeneralIO.html#method-c-move_cursor_up","(val)",""],["move_cursor_up","Reline::LineEditor","Reline/LineEditor.html#method-i-move_cursor_up","(val)",""],["move_cursor_up","Reline::Windows","Reline/Windows.html#method-c-move_cursor_up","(val)",""],["msg2str","Logger::Formatter","Logger/Formatter.html#method-i-msg2str","(msg)",""],["msvc_target?","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-msvc_target-3F","()",""],["mswin_link_args","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-mswin_link_args","()",""],["msys_tty?","Reline::Windows","Reline/Windows.html#method-c-msys_tty-3F","(io = @@hConsoleInputHandle)",""],["mtbl","RubyVM","RubyVM.html#method-c-mtbl","(p1, p2)",""],["mtbl2","RubyVM","RubyVM.html#method-c-mtbl2","(p1, p2)",""],["mtime","File","File.html#method-i-mtime","()","<p>Returns the modification time for <em>file</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">mtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n"],["mtime","File","File.html#method-c-mtime","(p1)","<p>Returns the modification time for the named file as a Time object.\n<p><em>file_name</em> can be an IO object.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">mtime</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mtime","File::Stat","File/Stat.html#method-i-mtime","()","<p>Returns the modification time of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">mtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n"],["mtime","Pathname","Pathname.html#method-i-mtime","()","<p>Returns the last modified time of the file.\n<p>See File.mtime.\n"],["mtime","Zlib::GzipFile","Zlib/GzipFile.html#method-i-mtime","()","<p>Returns last modification time recorded in the gzip file header.\n"],["mtime=","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-mtime-3D","(p1)","<p>Specify the modification time (<code>mtime</code>) in the gzip header. Using an Integer.\n<p>Setting the mtime in the gzip …\n"],["mu_lock","Mutex_m","Mutex_m.html#method-i-mu_lock","()","<p>See Thread::Mutex#lock\n"],["mu_locked?","Mutex_m","Mutex_m.html#method-i-mu_locked-3F","()","<p>See Thread::Mutex#locked?\n"],["mu_synchronize","Mutex_m","Mutex_m.html#method-i-mu_synchronize","(&block)","<p>See Thread::Mutex#synchronize\n"],["mu_try_lock","Mutex_m","Mutex_m.html#method-i-mu_try_lock","()","<p>See Thread::Mutex#try_lock\n"],["mu_unlock","Mutex_m","Mutex_m.html#method-i-mu_unlock","()","<p>See Thread::Mutex#unlock\n"],["mul","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-mul","(p1, p2 = v2, p3 = v3)","<p>Performs elliptic curve point multiplication.\n<p>The first form calculates <code>bn1 * point + bn2 * G</code>, where  …\n"],["mult","BigDecimal","BigDecimal.html#method-i-mult","(p1, p2)","<p>Returns the BigDecimal product of <code>self</code> and <code>value</code> with a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> …\n"],["multiline_off","Reline::LineEditor","Reline/LineEditor.html#method-i-multiline_off","()",""],["multiline_on","Reline::LineEditor","Reline/LineEditor.html#method-i-multiline_on","()",""],["multipart?","CGI::QueryExtension","CGI/QueryExtension.html#method-i-multipart-3F","()","<p>Returns whether the form contained multipart/form-data\n"],["multipart_form","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-multipart_form","(action = nil, enctype = \"multipart/form-data\")","<p>Generate a Form element with multipart encoding as a String.\n<p>Multipart encoding is used for forms that …\n"],["must_C_version","StringScanner","StringScanner.html#method-c-must_C_version","()","<p>This method is defined for backward compatibility.\n"],["mv","FileUtils","FileUtils.html#method-i-mv","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Moves entries.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should be  …\n"],["mv","FileUtils","FileUtils.html#method-c-mv","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Moves entries.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should be  …\n"],["n_indent","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-n_indent","(line)",""],["n_jobs","IRB::JobManager","IRB/JobManager.html#method-i-n_jobs","()","<p>The total number of irb sessions, used to set <code>irb_name</code> of the current Context.\n"],["n_rrconflicts","Racc::State","Racc/State.html#method-i-n_rrconflicts","()",""],["n_rrconflicts","Racc::States","Racc/States.html#method-i-n_rrconflicts","()",""],["n_significant_digits","BigDecimal","BigDecimal.html#method-i-n_significant_digits","()","<p>Returns the number of decimal significant digits in <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&quot;0&quot;</span>).<span class=\"ruby-identifier\">n_significant_digits</span>        <span class=\"ruby-operator\">...</span>\n</pre>\n"],["n_srconflicts","Racc::State","Racc/State.html#method-i-n_srconflicts","()",""],["n_srconflicts","Racc::States","Racc/States.html#method-i-n_srconflicts","()",""],["n_useless_nonterminals","Racc::Grammar","Racc/Grammar.html#method-i-n_useless_nonterminals","()",""],["n_useless_rules","Racc::Grammar","Racc/Grammar.html#method-i-n_useless_rules","()",""],["name","Encoding","Encoding.html#method-i-name","()","<p>Returns the name of the encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">name</span>      <span class=\"ruby-comment\">#=&gt; &quot;UTF-8&quot;</span>\n</pre>\n"],["name","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-name","()","<p>Name of the gem\n"],["name","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-name","()","<p>The name of this activation request’s specification\n"],["name","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-name","()","<p>The name of the gem this dependency request is requesting.\n"],["name","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-name","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#name)\n"],["name","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-name","()","<p>The name of the gem for this specification\n"],["name","Gem::UnsatisfiableDependencyError","Gem/UnsatisfiableDependencyError.html#method-i-name","()","<p>The name of the unresolved dependency\n"],["name","Method","Method.html#method-i-name","()","<p>Returns the name of the method.\n"],["name","Module","Module.html#method-i-name","()","<p>Returns the name of the module <em>mod</em>.  Returns nil for anonymous modules.\n"],["name","NameError","NameError.html#method-i-name","()","<p>Return the name associated with this NameError exception.\n"],["name","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-name","()","<p>Returns the name of the cipher which may differ slightly from the original name provided.\n"],["name","OpenSSL::Digest","OpenSSL/Digest.html#method-i-name","()","<p>Returns the sn of this Digest algorithm.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">digest</span> = <span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Digest</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;SHA512&#39;</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">digest</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["name","OpenSSL::Engine","OpenSSL/Engine.html#method-i-name","()","<p>Get the descriptive name for this engine.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Engine</span>.<span class=\"ruby-identifier\">load</span>\n<span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Engine</span>.<span class=\"ruby-identifier\">engines</span> <span class=\"ruby-comment\">#=&gt; [#&lt;OpenSSL::Engine#&gt;, ...</span>\n</pre>\n"],["name","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-name","()","<p>Method name\n<p>If the method has no assigned name, it extracts it from #call_seq.\n"],["name","Racc::OrMark","Racc/OrMark.html#method-i-name","()",""],["name","Racc::Prec","Racc/Prec.html#method-i-name","()",""],["name","Racc::UserAction","Racc/UserAction.html#method-i-name","()",""],["name","Ractor","Ractor.html#method-i-name","()","<p>The name set in Ractor.new, or <code>nil</code>.\n"],["name","Socket::Ifaddr","Socket/Ifaddr.html#method-i-name","()","<p>Returns the interface name of <em>ifaddr</em>.\n"],["name","Symbol","Symbol.html#method-i-name","()","<p>Returns a frozen string representation of <code>self</code> (not including the leading colon):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:foo</span>.<span class=\"ruby-identifier\">name</span>         <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["name","Thread","Thread.html#method-i-name","()","<p>show the name of the thread.\n"],["name","UnboundMethod","UnboundMethod.html#method-i-name","()","<p>Returns the name of the method.\n"],["name","WIN32OLE::Method","WIN32OLE/Method.html#method-i-name","()","<p>Returns the name of the method.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Workbook&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["name","WIN32OLE::Param","WIN32OLE/Param.html#method-i-name","()","<p>Returns name.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbook&#39;)\nmethod = WIN32OLE_METHOD.new(tobj, ...</pre>\n"],["name","WIN32OLE::Type","WIN32OLE/Type.html#method-i-name","()","<p>Returns OLE type name.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Application&#39;</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["name","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-i-name","()","<p>Returns the type library name.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tlib</span> = <span class=\"ruby-constant\">WIN32OLE_TYPELIB</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>)\n<span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["name","WIN32OLE::Variable","WIN32OLE/Variable.html#method-i-name","()","<p>Returns the name of variable.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;XlSheetType&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["name","Win32::Registry","Win32/Registry.html#method-i-name","()","<p>Full path of key such as ‘HKEY_CURRENT_USERSOFTWAREfoobar’.\n"],["name=","CGI::Cookie","CGI/Cookie.html#method-i-name-3D","(str)","<p>Set name of this cookie\n"],["name=","RDoc::ClassModule","RDoc/ClassModule.html#method-i-name-3D","(new_name)","<p>Allows overriding the initial name.\n<p>Used for modules and classes that are constant aliases.\n"],["name=","Thread","Thread.html#method-i-name-3D","(p1)","<p>set given name to the ruby thread. On some platform, it may set the name to pthread and/or kernel.\n"],["name_for","Gem::Resolver","Gem/Resolver.html#method-i-name_for","(dependency)",""],["name_for","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-name_for","(dependency)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#name_for)\n"],["name_for","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-name_for","(dependency)","<p>Returns the name for the given ‘dependency`. @note This method should be ’pure’, i.e. the return …\n"],["name_for_explicit_dependency_source","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-name_for_explicit_dependency_source","()","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#name_for_explicit_dependency_source)\n"],["name_for_explicit_dependency_source","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-name_for_explicit_dependency_source","()","<p>@return [String] the name of the source of explicit dependencies, i.e.\n\n<pre>those passed to {Resolver#resolve} ...</pre>\n"],["name_for_locking_dependency_source","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-name_for_locking_dependency_source","()","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#name_for_locking_dependency_source)\n"],["name_for_locking_dependency_source","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-name_for_locking_dependency_source","()","<p>@return [String] the name of the source of ‘locked’ dependencies, i.e.\n\n<pre>those passed to {Resolver#resolve} ...</pre>\n"],["name_for_path","RDoc::ClassModule","RDoc/ClassModule.html#method-i-name_for_path","()","<p>Name to use to generate the url: modules and classes that are aliases for another module or class return …\n"],["name_for_path","RDoc::Context","RDoc/Context.html#method-i-name_for_path","()","<p>Name to use to generate the url. <code>#full_name</code> by default.\n"],["name_list","Encoding","Encoding.html#method-c-name_list","()","<p>Returns the list of available encoding names.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span>.<span class=\"ruby-identifier\">name_list</span>\n<span class=\"ruby-comment\">#=&gt; [&quot;US-ASCII&quot;, &quot;ASCII-8BIT&quot;, &quot;UTF-8&quot;, ...</span>\n</pre>\n"],["name_path","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-name_path","(name)","<p>Returns the path to the trusted certificate with the given ASN.1 <code>name</code>\n"],["name_pattern","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-i-name_pattern","(args)",""],["name_prefix","RDoc::Alias","RDoc/Alias.html#method-i-name_prefix","()","<p>‘::’ for the alias of a singleton method/attribute, ‘#’ for instance-level.\n"],["name_prefix","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-name_prefix","()","<p>‘::’ for a class method/attribute, ‘#’ for an instance method.\n"],["name_tuple","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-name_tuple","()",""],["name_tuple","Gem::Specification","Gem/Specification.html#method-i-name_tuple","()","<p>Return a NameTuple that represents this Specification\n"],["named_captures","MatchData","MatchData.html#method-i-named_captures","()","<p>Returns a hash of the named captures; each key is a capture name; each value is its captured string or …\n"],["named_captures","Regexp","Regexp.html#method-i-named_captures","()","<p>Returns a hash representing named captures of <code>self</code> (see Named Captures):\n<p>Each key is the name of a named …\n"],["named_captures","StringScanner","StringScanner.html#method-i-named_captures","()","<p>Returns a hash of string variables matching the regular expression.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">scan</span> = <span class=\"ruby-constant\">StringScanner</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;foobarbaz&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["names","Encoding","Encoding.html#method-i-names","()","<p>Returns the list of name and aliases of the encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">WINDOWS_31J</span>.<span class=\"ruby-identifier\">names</span>  <span class=\"ruby-comment\">#=&gt; [&quot;Windows-31J&quot;, ...</span>\n</pre>\n"],["names","MatchData","MatchData.html#method-i-names","()","<p>Returns an array of the capture names (see Named Captures):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(?&lt;foo&gt;.)(?&lt;bar&gt;.)(?&lt;baz&gt;.)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;hoge&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["names","Regexp","Regexp.html#method-i-names","()","<p>Returns an array of names of captures (see Named Captures):\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/(?&lt;foo&gt;.)(?&lt;bar&gt;.)(?&lt;baz&gt;.)/</span>.<span class=\"ruby-identifier\">names</span> <span class=\"ruby-comment\"># =&gt; [&quot;foo&quot;, ...</span>\n</pre>\n"],["names_to_exclude","DidYouMean::MethodNameChecker","DidYouMean/MethodNameChecker.html#method-i-names_to_exclude","()",""],["nan?","BigDecimal","BigDecimal.html#method-i-nan-3F","()","<p>Returns True if the value is Not a Number.\n"],["nan?","Float","Float.html#method-i-nan-3F","()","<p>Returns <code>true</code> if <code>self</code> is a NaN, <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">-1.0</span>     <span class=\"ruby-comment\">#=&gt; -1.0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">nan?</span>       <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">0.0</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">0.0</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["nary","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-nary","(o)",""],["native","IPAddr","IPAddr.html#method-i-native","()","<p>Returns a new ipaddr built by converting the IPv6 address into a native IPv4 address.  If the IP address …\n"],["native_thread_id","Thread","Thread.html#method-i-native_thread_id","()","<p>Return the native thread ID which is used by the Ruby thread.\n<p>The ID depends on the OS. (not POSIX thread …\n"],["need_convert?","CSV::FieldsConverter","CSV/FieldsConverter.html#method-i-need_convert-3F","()",""],["need_gvl?","Fiddle::Function","Fiddle/Function.html#method-i-need_gvl-3F","()","<p>Whether GVL is needed to call this function\n"],["need_keeper?","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-need_keeper-3F","()","<p>Checks the tuplespace to see if it needs cleaning.\n"],["need_static_convert?","CSV::FieldsConverter","CSV/FieldsConverter.html#method-i-need_static_convert-3F","()",""],["needs","Gem","Gem.html#method-c-needs","()",""],["negative?","Float","Float.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>float</code> is less than 0.\n"],["negative?","Numeric","Numeric.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>self</code> is less than 0, <code>false</code> otherwise.\n"],["negative?","OpenSSL::BN","OpenSSL/BN.html#method-i-negative-3F","()",""],["negative?","Rational","Rational.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>rat</code> is less than 0.\n"],["nest","PrettyPrint","PrettyPrint.html#method-i-nest","(indent)","<p>Increases left margin after newline with <code>indent</code> for line breaks added in the block.\n"],["nesting","Module","Module.html#method-c-nesting","()","<p>Returns the list of <code>Modules</code> nested at the point of call.\n\n<pre>module M1\n  module M2\n    $a = Module.nesting ...</pre>\n"],["netmask","IPAddr","IPAddr.html#method-i-netmask","()","<p>Returns the netmask in string format e.g. 255.255.0.0\n"],["netmask","Socket::Ifaddr","Socket/Ifaddr.html#method-i-netmask","()","<p>Returns the netmask address of <em>ifaddr</em>. nil is returned if netmask is not available in <em>ifaddr</em>.\n"],["new","ACL","ACL.html#method-c-new","(list=nil, order = DENY_ALLOW)","<p>Creates a new ACL from <code>list</code> with an evaluation <code>order</code> of DENY_ALLOW or ALLOW_DENY.\n<p>An ACL <code>list</code> is an Array …\n"],["new","ACL::ACLEntry","ACL/ACLEntry.html#method-c-new","(str)","<p>Creates a new entry using <code>str</code>.\n<p><code>str</code> may be “*” or “all” to match any address, an IP …\n"],["new","ACL::ACLList","ACL/ACLList.html#method-c-new","()","<p>Creates an empty ACLList\n"],["new","Addrinfo","Addrinfo.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>returns a new instance of Addrinfo. The instance contains sockaddr, family, socktype, protocol. sockaddr …\n"],["new","Array","Array.html#method-c-new","(p1 = v1, p2 = v2)","<p>Returns a new Array.\n<p>With no block and no arguments, returns a new empty Array object.\n<p>With no block and …\n"],["new","BasicObject","BasicObject.html#method-c-new","()","<p>Returns a new BasicObject.\n"],["new","Benchmark::Tms","Benchmark/Tms.html#method-c-new","(utime = 0.0, stime = 0.0, cutime = 0.0, cstime = 0.0, real = 0.0, label = nil)","<p>Returns an initialized Tms object which has <code>utime</code> as the user CPU time, <code>stime</code> as the system CPU time, …\n"],["new","CGI","CGI.html#method-c-new","(options = {})","<p>Create a new CGI instance.\n<p><code>tag_maker</code> &mdash; This is the same as using the <code>options_hash</code> form with the value <code>{</code> …\n"],["new","CGI::Cookie","CGI/Cookie.html#method-c-new","(name = \"\", *value)","<p>Create a new CGI::Cookie object.\n<p><code>name_string</code> &mdash; The name of the cookie; in this form, there is no #domain …\n"],["new","CGI::Session","CGI/Session.html#method-c-new","(request, option={})","<p>Create a new CGI::Session object for <code>request</code>.\n<p><code>request</code> is an instance of the <code>CGI</code> class (see cgi.rb). <code>option</code> …\n"],["new","CGI::Session::FileStore","CGI/Session/FileStore.html#method-c-new","(session, option={})","<p>Create a new FileStore instance.\n<p>This constructor is used internally by CGI::Session.  The user does not …\n"],["new","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-c-new","(session, option=nil)","<p>Create a new MemoryStore instance.\n<p><code>session</code> is the session this instance is associated with. <code>option</code> is …\n"],["new","CGI::Session::NullStore","CGI/Session/NullStore.html#method-c-new","(session, option=nil)","<p>Create a new NullStore instance.\n<p><code>session</code> is the session this instance is associated with. <code>option</code> is a …\n"],["new","CGI::Session::PStore","CGI/Session/PStore.html#method-c-new","(session, option={})","<p>Create a new CGI::Session::PStore instance\n<p>This constructor is used internally by CGI::Session.  The user …\n"],["new","CSV","CSV.html#method-c-new","(data, col_sep: \",\", row_sep: :auto, quote_char: '\"', field_size_limit: nil, max_field_size: nil, converters: nil, unconverted_fields: nil, headers: false, return_headers: false, write_headers: nil, header_converters: nil, skip_blanks: false, force_quotes: false, skip_lines: nil, liberal_parsing: false, internal_encoding: nil, external_encoding: nil, encoding: nil, nil_value: nil, empty_value: \"\", strip: false, quote_empty: true, write_converters: nil, write_nil_value: nil, write_empty_value: \"\")","<p>Returns the new CSV object created using <code>string</code> or <code>io</code> and the specified <code>options</code>.\n<p>Argument <code>string</code> should …\n"],["new","CSV::FieldsConverter","CSV/FieldsConverter.html#method-c-new","(options={})","<p>A CSV::FieldsConverter is a data structure for storing the fields converter properties to be passed as …\n"],["new","CSV::MalformedCSVError","CSV/MalformedCSVError.html#method-c-new","(message, line_number)",""],["new","CSV::Parser","CSV/Parser.html#method-c-new","(input, options)",""],["new","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-c-new","(inputs, encoding, row_separator, chunk_size: 8192)",""],["new","CSV::Parser::Scanner","CSV/Parser/Scanner.html#method-c-new","(*args)",""],["new","CSV::Row","CSV/Row.html#method-c-new","(headers, fields, header_row = false)","<p>Returns the new CSV::Row instance constructed from arguments <code>headers</code> and <code>fields</code>; both should be Arrays …\n"],["new","CSV::Table","CSV/Table.html#method-c-new","(array_of_rows, headers: nil)","<p>Returns a new CSV::Table object.\n<p>Argument <code>array_of_rows</code> must be an Array of CSV::Row objects.\n<p>Argument …\n"],["new","CSV::Writer","CSV/Writer.html#method-c-new","(output, options)",""],["new","Class","Class.html#method-i-new","(*args)","<p>Calls #allocate to create a new object of <em>class</em>’s class, then invokes that object’s #initialize …\n"],["new","Class","Class.html#method-c-new","(*args)","<p>Creates a new anonymous (unnamed) class with the given superclass (or Object if no parameter is given). …\n"],["new","CoreExtensions::TCPSocketExt::Initializer","CoreExtensions/TCPSocketExt/Initializer.html#method-c-new","(host, serv, *rest)",""],["new","DRb::DRbArray","DRb/DRbArray.html#method-c-new","(ary)","<p>Creates a new DRbArray that either dumps or wraps all the items in the Array <code>ary</code> so they can be loaded …\n"],["new","DRb::DRbObject","DRb/DRbObject.html#method-c-new","(obj, uri=nil)","<p>Create a new remote object stub.\n<p><code>obj</code> is the (local) object we want to create a stub for.  Normally this …\n"],["new","DRb::DRbObject","DRb/DRbObject.html#method-c-new","(obj, uri=nil)","<p>Create a new remote object stub.\n<p><code>obj</code> is the (local) object we want to create a stub for.  Normally this …\n"],["new","DRb::DRbRemoteError","DRb/DRbRemoteError.html#method-c-new","(error)","<p>Creates a new remote error that wraps the Exception <code>error</code>\n"],["new","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-new","(uri, soc, config, is_established)","<p>Create a DRb::DRbSSLSocket instance.\n<p><code>uri</code> is the URI we are connected to. <code>soc</code> is the tcp socket we are …\n"],["new","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-c-new","(config)","<p>Create a new DRb::DRbSSLSocket::SSLConfig instance\n<p>The DRb::DRbSSLSocket will take either a <code>config</code> Hash …\n"],["new","DRb::DRbServer","DRb/DRbServer.html#method-c-new","(uri=nil, front=nil, config_or_acl=nil)","<p>Create a new DRbServer instance.\n<p><code>uri</code> is the URI to bind to.  This is normally of the form ‘druby://&lt;hostname&gt;:&lt;port&gt;’ …\n"],["new","DRb::DRbUnknown","DRb/DRbUnknown.html#method-c-new","(err, buf)","<p>Create a new DRbUnknown object.\n<p><code>buf</code> is a string containing a marshalled object that could not be unmarshalled. …\n"],["new","DRb::DRbUnknownError","DRb/DRbUnknownError.html#method-c-new","(unknown)","<p>Create a new DRbUnknownError for the DRb::DRbUnknown object <code>unknown</code>\n"],["new","DRb::ExtServ","DRb/ExtServ.html#method-c-new","(there, name, server=nil)",""],["new","DRb::ExtServManager","DRb/ExtServManager.html#method-c-new","()",""],["new","DRb::GW","DRb/GW.html#method-c-new","()","<p>Creates a new GW\n"],["new","DRb::ThreadObject","DRb/ThreadObject.html#method-c-new","(&blk)",""],["new","DRb::TimerIdConv","DRb/TimerIdConv.html#method-c-new","(keeping=600)","<p>Creates a new TimerIdConv which will hold objects for <code>keeping</code> seconds.\n"],["new","DRb::WeakIdConv","DRb/WeakIdConv.html#method-c-new","()",""],["new","DRb::WeakIdConv::WeakSet","DRb/WeakIdConv/WeakSet.html#method-c-new","()",""],["new","Data","Data.html#method-c-new","(*args)","<p>Constructors for classes defined with ::define accept both positional and keyword arguments.\n\n<pre>Measure = ...</pre>\n"],["new","Date","Date.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Returns a new Date object constructed from the given arguments:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2022</span>).<span class=\"ruby-identifier\">to_s</span>        <span class=\"ruby-comment\"># =&gt; &quot;2022-01-01&quot; ...</span>\n</pre>\n"],["new","DateTime","DateTime.html#method-c-new","(*args)","<p>Same as DateTime.new.\n"],["new","Delegator","Delegator.html#method-c-new","(obj)","<p>Pass in the <em>obj</em> to delegate method calls to.  All methods supported by <em>obj</em> will be delegated to.\n"],["new","DidYouMean::ClassNameChecker","DidYouMean/ClassNameChecker.html#method-c-new","(exception)",""],["new","DidYouMean::ClassNameChecker::ClassName","DidYouMean/ClassNameChecker/ClassName.html#method-c-new","(name, namespace = '')",""],["new","DidYouMean::KeyErrorChecker","DidYouMean/KeyErrorChecker.html#method-c-new","(key_error)",""],["new","DidYouMean::MethodNameChecker","DidYouMean/MethodNameChecker.html#method-c-new","(exception)",""],["new","DidYouMean::NameErrorCheckers","DidYouMean/NameErrorCheckers.html#method-c-new","(exception)",""],["new","DidYouMean::NullChecker","DidYouMean/NullChecker.html#method-c-new","(*)",""],["new","DidYouMean::PatternKeyNameChecker","DidYouMean/PatternKeyNameChecker.html#method-c-new","(no_matching_pattern_key_error)",""],["new","DidYouMean::RequirePathChecker","DidYouMean/RequirePathChecker.html#method-c-new","(exception)",""],["new","DidYouMean::SpellChecker","DidYouMean/SpellChecker.html#method-c-new","(dictionary:)",""],["new","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-c-new","(dictionary:, separator: '/', augment: nil)",""],["new","DidYouMean::VariableNameChecker","DidYouMean/VariableNameChecker.html#method-c-new","(exception)",""],["new","Digest::Instance","Digest/Instance.html#method-i-new","()","<p>Returns a new, initialized copy of the digest object.  Equivalent to digest_obj.clone().reset().\n"],["new","Digest::SHA2","Digest/SHA2.html#method-c-new","(bitlen = 256)","<p>Create a new SHA2 hash object with a given bit length.\n<p>Valid bit lengths are 256, 384 and 512.\n"],["new","Dir","Dir.html#method-c-new","(name, encoding: nil)","<p>Returns a new directory object for the named directory.\n<p>The optional <em>encoding</em> keyword argument specifies …\n"],["new","ERB","ERB.html#method-c-new","(str, safe_level=NOT_GIVEN, legacy_trim_mode=NOT_GIVEN, legacy_eoutvar=NOT_GIVEN, trim_mode: nil, eoutvar: '_erbout')","<p>Constructs a new ERB object with the template specified in <em>str</em>.\n<p>An ERB object works by building a chunk …\n"],["new","Encoding::Converter","Encoding/Converter.html#method-c-new","(*args)","<p>possible options elements:\n\n<pre>hash form:\n  :invalid =&gt; nil            # raise error on invalid byte sequence ...</pre>\n"],["new","Enumerator","Enumerator.html#method-c-new","(*args)","<p>Creates a new Enumerator object, which can be used as an Enumerable.\n<p>Iteration is defined by the given …\n"],["new","Enumerator::Chain","Enumerator/Chain.html#method-c-new","(*args)","<p>Generates a new enumerator object that iterates over the elements of given enumerable objects in sequence. …\n"],["new","Enumerator::Lazy","Enumerator/Lazy.html#method-c-new","(*args)","<p>Creates a new Lazy enumerator. When the enumerator is actually enumerated (e.g. by calling #force),  …\n"],["new","Enumerator::Product","Enumerator/Product.html#method-c-new","(*args, p2 = {})","<p>Generates a new enumerator object that generates a Cartesian product of given enumerable objects.\n\n<pre>e = ...</pre>\n"],["new","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-c-new","(node, point_type: :name, name: nil)",""],["new","Exception","Exception.html#method-c-new","(*args)","<p>Construct a new Exception object, optionally passing in a message.\n"],["new","Fiber","Fiber.html#method-c-new","(*args)","<p>Creates new Fiber. Initially, the fiber is not running and can be resumed with #resume. Arguments to …\n"],["new","Fiber::Pool","Fiber/Pool.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3)",""],["new","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-c-new","(addr, types, func = nil)","<p>Wraps the C pointer <code>addr</code> as a C struct with the given <code>types</code>.\n<p>When the instance is garbage collected, the …\n"],["new","Fiddle::Closure","Fiddle/Closure.html#method-c-new","(*args)","<p>Construct a new Closure object.\n<p><code>ret</code> is the C type to be returned\n<p><code>args</code> is an Array of arguments, passed …\n"],["new","Fiddle::Closure::BlockCaller","Fiddle/Closure/BlockCaller.html#method-c-new","(ctype, args, abi = Fiddle::Function::DEFAULT, &block)","<p>Description\n<p>Construct a new BlockCaller object.\n<p><code>ctype</code> is the C type to be returned\n"],["new","Fiddle::CompositeHandler","Fiddle/CompositeHandler.html#method-c-new","(handlers)","<p>Create a new handler with the open <code>handlers</code>\n<p>Used internally by Fiddle::Importer.dlload\n"],["new","Fiddle::Function","Fiddle/Function.html#method-c-new","(p1, p2, p3, p4 = v4, p5 = {})","<p>Constructs a Function object.\n<p><code>ptr</code> is a referenced function, of a Fiddle::Handle\n<p><code>args</code> is an Array of arguments, …\n"],["new","Fiddle::Handle","Fiddle/Handle.html#method-c-new","(p1 = v1, p2 = v2)","<p>Create a new handler that opens <code>library</code> with <code>flags</code>.\n<p>If no <code>library</code> is specified or <code>nil</code> is given, DEFAULT …\n"],["new","Fiddle::Pinned","Fiddle/Pinned.html#method-c-new","(p1)","<p>Create a new pinned object reference.  The Fiddle::Pinned instance will prevent the GC from moving <code>object</code> …\n"],["new","Fiddle::Pointer","Fiddle/Pointer.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Create a new pointer to <code>address</code> with an optional <code>size</code> and <code>freefunc</code>.\n<p><code>freefunc</code> will be called when the instance …\n"],["new","Fiddle::StructArray","Fiddle/StructArray.html#method-c-new","(ptr, type, initial_values)",""],["new","File","File.html#method-c-new","(*args)","<p>Opens the file at the given <code>path</code> according to the given <code>mode</code>; creates and returns a new File object for …\n"],["new","File::Stat","File/Stat.html#method-c-new","(p1)","<p>Create a File::Stat object for the given file name (raising an exception if the file doesn’t exist). …\n"],["new","FrozenError","FrozenError.html#method-c-new","(*args, p2 = {})","<p>Construct a new FrozenError exception. If given the <em>receiver</em> parameter may subsequently be examined using …\n"],["new","Gem::AvailableSet","Gem/AvailableSet.html#method-c-new","()",""],["new","Gem::BasicSpecification","Gem/BasicSpecification.html#method-c-new","()",""],["new","Gem::Command","Gem/Command.html#method-c-new","(command, summary=nil, defaults={})","<p>Initializes a generic gem command named <code>command</code>.  <code>summary</code> is a short description displayed in ‘gem help …\n"],["new","Gem::CommandManager","Gem/CommandManager.html#method-c-new","()","<p>Register all the subcommands supported by the gem command.\n"],["new","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-c-new","()",""],["new","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-c-new","()",""],["new","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-c-new","()",""],["new","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-c-new","()",""],["new","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-c-new","()",""],["new","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-c-new","()",""],["new","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-c-new","()",""],["new","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-c-new","()",""],["new","Gem::Commands::FetchCommand","Gem/Commands/FetchCommand.html#method-c-new","()",""],["new","Gem::Commands::GenerateIndexCommand","Gem/Commands/GenerateIndexCommand.html#method-c-new","()",""],["new","Gem::Commands::HelpCommand","Gem/Commands/HelpCommand.html#method-c-new","()",""],["new","Gem::Commands::InfoCommand","Gem/Commands/InfoCommand.html#method-c-new","()",""],["new","Gem::Commands::InstallCommand","Gem/Commands/InstallCommand.html#method-c-new","()",""],["new","Gem::Commands::ListCommand","Gem/Commands/ListCommand.html#method-c-new","()",""],["new","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-c-new","()",""],["new","Gem::Commands::MirrorCommand","Gem/Commands/MirrorCommand.html#method-c-new","()",""],["new","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-c-new","()",""],["new","Gem::Commands::OutdatedCommand","Gem/Commands/OutdatedCommand.html#method-c-new","()",""],["new","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-c-new","()",""],["new","Gem::Commands::PristineCommand","Gem/Commands/PristineCommand.html#method-c-new","()",""],["new","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-c-new","()",""],["new","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-c-new","(name = \"query\", summary = \"Query gem information in local or remote repositories\")",""],["new","Gem::Commands::RdocCommand","Gem/Commands/RdocCommand.html#method-c-new","()",""],["new","Gem::Commands::SearchCommand","Gem/Commands/SearchCommand.html#method-c-new","()",""],["new","Gem::Commands::ServerCommand","Gem/Commands/ServerCommand.html#method-c-new","()",""],["new","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-c-new","()",""],["new","Gem::Commands::SigninCommand","Gem/Commands/SigninCommand.html#method-c-new","()",""],["new","Gem::Commands::SignoutCommand","Gem/Commands/SignoutCommand.html#method-c-new","()",""],["new","Gem::Commands::SourcesCommand","Gem/Commands/SourcesCommand.html#method-c-new","()",""],["new","Gem::Commands::SpecificationCommand","Gem/Commands/SpecificationCommand.html#method-c-new","()",""],["new","Gem::Commands::StaleCommand","Gem/Commands/StaleCommand.html#method-c-new","()",""],["new","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-c-new","()",""],["new","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-c-new","()",""],["new","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-c-new","()",""],["new","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-c-new","()",""],["new","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-c-new","()",""],["new","Gem::ConfigFile","Gem/ConfigFile.html#method-c-new","(args)","<p>Create the config file object.  <code>args</code> is the list of arguments from the command line.\n<p>The following command …\n"],["new","Gem::ConflictError","Gem/ConflictError.html#method-c-new","(target, conflicts)",""],["new","Gem::ConsoleUI","Gem/ConsoleUI.html#method-c-new","()","<p>The Console UI has no arguments as it defaults to reading input from stdin, output to stdout and warnings …\n"],["new","Gem::Dependency","Gem/Dependency.html#method-c-new","(name, *requirements)","<p>Constructs a dependency with <code>name</code> and <code>requirements</code>. The last argument can optionally be the dependency …\n"],["new","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-c-new","(options = {})","<p>Creates a new installer instance.\n<p>Options are:\n<p>:cache_dir &mdash; Alternate repository path to store .gem files …\n"],["new","Gem::DependencyList","Gem/DependencyList.html#method-c-new","(development = false)","<p>Creates a new DependencyList.  If <code>development</code> is true, development dependencies will be included.\n"],["new","Gem::DependencyResolutionError","Gem/DependencyResolutionError.html#method-c-new","(conflict)",""],["new","Gem::Doctor","Gem/Doctor.html#method-c-new","(gem_repository, dry_run = false)","<p>Creates a new Gem::Doctor that will clean up <code>gem_repository</code>.  Only one gem repository may be cleaned …\n"],["new","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-new","(spec, build_args = spec.build_args)","<p>Creates a new extension builder for <code>spec</code>.  If the <code>spec</code> does not yet have build arguments, saved, set …\n"],["new","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-c-new","()",""],["new","Gem::Ext::CargoBuilder::DylibNotFoundError","Gem/Ext/CargoBuilder/DylibNotFoundError.html#method-c-new","(dir)",""],["new","Gem::FilePermissionError","Gem/FilePermissionError.html#method-c-new","(directory)",""],["new","Gem::GemRunner","Gem/GemRunner.html#method-c-new","()",""],["new","Gem::ImpossibleDependenciesError","Gem/ImpossibleDependenciesError.html#method-c-new","(request, conflicts)",""],["new","Gem::Indexer","Gem/Indexer.html#method-c-new","(directory, options = {})","<p>Create an indexer that will index the gems in <code>directory</code>.\n"],["new","Gem::Installer","Gem/Installer.html#method-c-new","(package, options={})","<p>Constructs an Installer instance that will install the gem at <code>package</code> which can either be a path or an …\n"],["new","Gem::Installer::FakePackage","Gem/Installer/FakePackage.html#method-c-new","(spec)",""],["new","Gem::List","Gem/List.html#method-c-new","(value = nil, tail = nil)",""],["new","Gem::MissingSpecError","Gem/MissingSpecError.html#method-c-new","(name, requirement, extra_message=nil)",""],["new","Gem::MissingSpecVersionError","Gem/MissingSpecVersionError.html#method-c-new","(name, requirement, specs)",""],["new","Gem::MockGemUi","Gem/MockGemUi.html#method-c-new","(input = \"\")",""],["new","Gem::MockGemUi::InputEOFError","Gem/MockGemUi/InputEOFError.html#method-c-new","(question)",""],["new","Gem::MockGemUi::TermError","Gem/MockGemUi/TermError.html#method-c-new","(exit_code)",""],["new","Gem::NameTuple","Gem/NameTuple.html#method-c-new","(name, version, platform=\"ruby\")",""],["new","Gem::Package","Gem/Package.html#method-c-new","(gem, security_policy = nil)","<p>Creates a new Gem::Package for the file at <code>gem</code>. <code>gem</code> can also be provided as an IO object.\n<p>If <code>gem</code> is an …\n"],["new","Gem::Package::DigestIO","Gem/Package/DigestIO.html#method-c-new","(io, digests)","<p>Creates a new DigestIO instance.  Using ::wrap is recommended, see the ::wrap documentation for documentation …\n"],["new","Gem::Package::FormatError","Gem/Package/FormatError.html#method-c-new","(message, source = nil)",""],["new","Gem::Package::Old","Gem/Package/Old.html#method-c-new","(gem, security_policy)","<p>Creates a new old-format package reader for <code>gem</code>.  Old-format packages cannot be written.\n"],["new","Gem::Package::PathError","Gem/Package/PathError.html#method-c-new","(destination, destination_dir)",""],["new","Gem::Package::SymlinkError","Gem/Package/SymlinkError.html#method-c-new","(name, destination, destination_dir)",""],["new","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-new","(vals)","<p>Creates a new TarHeader using <code>vals</code>\n"],["new","Gem::Package::TarReader","Gem/Package/TarReader.html#method-c-new","(io)","<p>Creates a new TarReader on <code>io</code> and yields it to the block, if given.\n"],["new","Gem::Package::TarReader","Gem/Package/TarReader.html#method-c-new","(io)","<p>Creates a new tar file reader on <code>io</code> which needs to respond to #pos, #eof?, #read, #getc and #pos=\n"],["new","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-c-new","(header, io)","<p>Creates a new tar entry for <code>header</code> that will be read from <code>io</code>\n"],["new","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-c-new","(io)","<p>Creates a new TarWriter that will write to <code>io</code>\n"],["new","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-c-new","(io)","<p>Creates a new TarWriter, yielding it if a block is given\n"],["new","Gem::Package::TarWriter::BoundedStream","Gem/Package/TarWriter/BoundedStream.html#method-c-new","(io, limit)","<p>Wraps <code>io</code> and allows up to <code>limit</code> bytes to be written\n"],["new","Gem::Package::TarWriter::RestrictedStream","Gem/Package/TarWriter/RestrictedStream.html#method-c-new","(io)","<p>Creates a new RestrictedStream wrapping <code>io</code>\n"],["new","Gem::PackageTask","Gem/PackageTask.html#method-c-new","(gem_spec)","<p>Create a Gem Package task library.  Automatically define the gem if a block is given.  If no block is …\n"],["new","Gem::PathSupport","Gem/PathSupport.html#method-c-new","(env)","<p>Constructor. Takes a single argument which is to be treated like a hashtable, or defaults to ENV, the …\n"],["new","Gem::Platform","Gem/Platform.html#method-c-new","(arch)",""],["new","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-c-new","(name, version)",""],["new","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-c-new","(proxy=nil, dns=nil, headers={})","<p>Initialize a remote fetcher using the source URI and possible proxy information.\n<p><code>proxy</code>\n<p>[String]: explicit …\n"],["new","Gem::RemoteFetcher::FetchError","Gem/RemoteFetcher/FetchError.html#method-c-new","(message, uri)",""],["new","Gem::Request","Gem/Request.html#method-c-new","(uri, request_class, last_modified, pool)",""],["new","Gem::RequestSet","Gem/RequestSet.html#method-c-new","(*deps)","<p>Creates a RequestSet for a list of Gem::Dependency objects, <code>deps</code>.  You can then #resolve and #install …\n"],["new","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-c-new","(set, path)","<p>Creates a new GemDependencyAPI that will add dependencies to the Gem::RequestSet <code>set</code> based on the dependency …\n"],["new","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-c-new","(request_set, gem_deps_file, dependencies)",""],["new","Gem::RequestSet::Lockfile::ParseError","Gem/RequestSet/Lockfile/ParseError.html#method-c-new","(message, column, line, path)","<p>Raises a ParseError with the given <code>message</code> which was encountered at a <code>line</code> and <code>column</code> while parsing. …\n"],["new","Gem::RequestSet::Lockfile::Parser","Gem/RequestSet/Lockfile/Parser.html#method-c-new","(tokenizer, set, platforms, filename = nil)","<p>Parses lockfiles\n"],["new","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-c-new","(input, filename = nil, line = 0, pos = 0)",""],["new","Gem::Requirement","Gem/Requirement.html#method-c-new","(*requirements)","<p>Constructs a requirement from <code>requirements</code>. Requirements can be Strings, Gem::Versions, or Arrays of …\n"],["new","Gem::Resolver","Gem/Resolver.html#method-c-new","(needed, set = nil)","<p>Create Resolver object which will resolve the tree starting with <code>needed</code> Dependency objects.\n<p><code>set</code> is an …\n"],["new","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-c-new","(dep_uri = \"https://index.rubygems.org/info/\")","<p>Creates a new APISet that will retrieve gems from <code>uri</code> using the RubyGems API URL <code>dep_uri</code> which is described …\n"],["new","Gem::Resolver::APISpecification","Gem/Resolver/APISpecification.html#method-c-new","(set, api_data)","<p>Creates an APISpecification for the given <code>set</code> from the rubygems.org <code>api_data</code>.\n<p>See guides.rubygems.org/rubygems-org-api/#misc_methods …\n"],["new","Gem::Resolver::APISpecification","Gem/Resolver/APISpecification.html#method-c-new","(set, api_data)",""],["new","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-c-new","(spec, request)","<p>Creates a new ActivationRequest that will activate <code>spec</code>.  The parent <code>request</code> is used to provide diagnostics …\n"],["new","Gem::Resolver::BestSet","Gem/Resolver/BestSet.html#method-c-new","(sources = Gem.sources)","<p>Creates a BestSet for the given <code>sources</code> or Gem::sources if none are specified.  <code>sources</code> must be a Gem::SourceList …\n"],["new","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-c-new","(*sets)","<p>Creates a new ComposedSet containing <code>sets</code>.  Use Gem::Resolver::compose_sets instead.\n"],["new","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-c-new","(dependency, activated, failed_dep=dependency)","<p>Creates a new resolver conflict when <code>dependency</code> is in conflict with an already <code>activated</code> specification. …\n"],["new","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-c-new","(dependency, requester)","<p>Creates a new DependencyRequest for <code>dependency</code> from <code>requester</code>. +requester may be nil if the request came …\n"],["new","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-c-new","(set, name, version, source, platform)","<p>An IndexSpecification is created from the index format described in ‘gem help generate_index`.\n<p>The <code>set</code> …\n"],["new","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-c-new","(domain)","<p>Creates a new InstallerSet that will look for gems in <code>domain</code>.\n"],["new","Gem::Resolver::LockSet","Gem/Resolver/LockSet.html#method-c-new","(sources)","<p>Creates a new LockSet from the given <code>sources</code>\n"],["new","Gem::Resolver::LockSpecification","Gem/Resolver/LockSpecification.html#method-c-new","(set, name, version, sources, platform)",""],["new","Gem::Resolver::Molinillo::CircularDependencyError","Gem/Resolver/Molinillo/CircularDependencyError.html#method-c-new","(vertices)","<p>Initializes a new error with the given circular vertices. @param [Array&lt;DependencyGraph::Vertex&gt;] …\n"],["new","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-c-new","()","<p>Initializes an empty dependency graph\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-c-new","(origin, destination, requirement)","<p>Initialize an action to add an edge to a dependency graph @param [String] origin the name of the origin …\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-c-new","(origin_name, destination_name, requirement)","<p>Initialize an action to add an edge to a dependency graph @param [String] origin_name the name of the …\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html#method-c-new","(name)","<p>Initialize an action to detach a vertex from a dependency graph @param [String] name the name of the …\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-c-new","()","<p>Initializes an empty log\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::Tag","Gem/Resolver/Molinillo/DependencyGraph/Tag.html#method-c-new","(tag)","<p>Initialize an action to tag a state of a dependency graph @param [Object] tag an opaque tag\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-c-new","(name, payload)","<p>Initializes a vertex with the given name and payload. @param [String] name see {#name} @param [Object] …\n"],["new","Gem::Resolver::Molinillo::NoSuchDependencyError","Gem/Resolver/Molinillo/NoSuchDependencyError.html#method-c-new","(dependency, required_by = [])","<p>Initializes a new error with the given missing dependency. @param [Object] dependency @see {#dependency} …\n"],["new","Gem::Resolver::Molinillo::Resolver","Gem/Resolver/Molinillo/Resolver.html#method-c-new","(specification_provider, resolver_ui)","<p>Initializes a new resolver. @param  [SpecificationProvider] specification_provider\n\n<pre>see {#specification_provider}</pre>\n"],["new","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-c-new","(specification_provider, resolver_ui, requested, base)","<p>Initializes a new resolution. @param [SpecificationProvider] specification_provider\n\n<pre>see {#specification_provider}</pre>\n"],["new","Gem::Resolver::Molinillo::VersionConflict","Gem/Resolver/Molinillo/VersionConflict.html#method-c-new","(conflicts, specification_provider)","<p>Initializes a new error with the given version conflicts. @param [{String =&gt; Resolution::Conflict …\n"],["new","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-c-new","()","<p>Creates a new RequirementList.\n"],["new","Gem::Resolver::SourceSet","Gem/Resolver/SourceSet.html#method-c-new","()","<p>Creates a SourceSet for the given <code>sources</code> or Gem::sources if none are specified.  <code>sources</code> must be a  …\n"],["new","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-c-new","(set, spec, source = nil)","<p>A SpecSpecification is created for a <code>set</code> for a Gem::Specification in <code>spec</code>.  The <code>source</code> is either where …\n"],["new","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-c-new","()","<p>Sets default instance variables for the specification.\n"],["new","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-c-new","()",""],["new","Gem::S3URISigner","Gem/S3URISigner.html#method-c-new","(uri)",""],["new","Gem::S3URISigner::ConfigurationError","Gem/S3URISigner/ConfigurationError.html#method-c-new","(message)",""],["new","Gem::S3URISigner::InstanceProfileError","Gem/S3URISigner/InstanceProfileError.html#method-c-new","(message)",""],["new","Gem::Security::Policy","Gem/Security/Policy.html#method-c-new","(name, policy = {}, opt = {})","<p>Create a new Gem::Security::Policy object with the given mode and options.\n"],["new","Gem::Security::Signer","Gem/Security/Signer.html#method-c-new","(key, cert_chain, passphrase = nil, options = {})","<p>Creates a new signer with an RSA <code>key</code> or path to a key, and a certificate <code>chain</code> containing X509 certificates, …\n"],["new","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-c-new","(dir, permissions = DEFAULT_PERMISSIONS)","<p>Creates a new TrustDir using <code>dir</code> where the directory and file permissions will be checked according to …\n"],["new","Gem::SilentUI","Gem/SilentUI.html#method-c-new","()","<p>The SilentUI has no arguments as it does not use any stream.\n"],["new","Gem::Source","Gem/Source.html#method-c-new","(uri)","<p>Creates a new Source which will use the index located at <code>uri</code>.\n"],["new","Gem::Source::Git","Gem/Source/Git.html#method-c-new","(name, repository, reference, submodules = false)","<p>Creates a new git gem source for a gems from loaded from <code>repository</code> at the given <code>reference</code>.  The <code>name</code> …\n"],["new","Gem::Source::Lock","Gem/Source/Lock.html#method-c-new","(source)","<p>Creates a new Lock source that wraps <code>source</code> and moves it earlier in the sort list.\n"],["new","Gem::Source::SpecificFile","Gem/Source/SpecificFile.html#method-c-new","(file)","<p>Creates a new SpecificFile for the gem in <code>file</code>\n"],["new","Gem::Source::Vendor","Gem/Source/Vendor.html#method-c-new","(path)","<p>Creates a new Vendor source for a gem that was unpacked at <code>path</code>.\n"],["new","Gem::SourceFetchProblem","Gem/SourceFetchProblem.html#method-c-new","(source, error)","<p>Creates a new SourceFetchProblem for the given <code>source</code> and <code>error</code>.\n"],["new","Gem::SourceList","Gem/SourceList.html#method-c-new","()","<p>Creates a new SourceList\n"],["new","Gem::SpecFetcher","Gem/SpecFetcher.html#method-c-new","(sources = nil)","<p>Creates a new SpecFetcher.  Ordinarily you want to use the default fetcher from Gem::SpecFetcher::fetcher …\n"],["new","Gem::SpecificGemNotFoundException","Gem/SpecificGemNotFoundException.html#method-c-new","(name, version, errors=nil)","<p>Creates a new SpecificGemNotFoundException for a gem with the given <code>name</code> and <code>version</code>.  Any <code>errors</code> encountered …\n"],["new","Gem::Specification","Gem/Specification.html#method-c-new","(name = nil, version = nil)","<p>Specification constructor. Assigns the default values to the attributes and yields itself for further …\n"],["new","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-c-new","(specification)",""],["new","Gem::StreamUI","Gem/StreamUI.html#method-c-new","(in_stream, out_stream, err_stream=STDERR, usetty=true)","<p>Creates a new StreamUI wrapping <code>in_stream</code> for user input, <code>out_stream</code> for standard output, <code>err_stream</code> …\n"],["new","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-c-new","(out_stream, *args)","<p>The silent download reporter ignores all arguments\n"],["new","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = nil)","<p>Creates a silent progress reporter that ignores all input arguments.\n"],["new","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = \"complete\")","<p>Creates a new progress reporter that will write to <code>out_stream</code> for <code>size</code> items.  Shows the given <code>initial_message</code> …\n"],["new","Gem::StreamUI::ThreadedDownloadReporter","Gem/StreamUI/ThreadedDownloadReporter.html#method-c-new","(out_stream, *args)","<p>Creates a new threaded download reporter that will display on <code>out_stream</code>.  The other arguments are ignored. …\n"],["new","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = \"complete\")","<p>Creates a new progress reporter that will write to <code>out_stream</code> for <code>size</code> items.  Shows the given <code>initial_message</code> …\n"],["new","Gem::SystemExitException","Gem/SystemExitException.html#method-c-new","(exit_code)","<p>Creates a new SystemExitException with the given <code>exit_code</code>\n"],["new","Gem::Uninstaller","Gem/Uninstaller.html#method-c-new","(gem, options = {})","<p>Constructs an uninstaller that will uninstall <code>gem</code>\n"],["new","Gem::UnknownCommandError","Gem/UnknownCommandError.html#method-c-new","(unknown_command)",""],["new","Gem::UnknownCommandSpellChecker","Gem/UnknownCommandSpellChecker.html#method-c-new","(error)",""],["new","Gem::UnsatisfiableDependencyError","Gem/UnsatisfiableDependencyError.html#method-c-new","(dep, platform_mismatch=nil)","<p>Creates a new UnsatisfiableDependencyError for the unsatisfiable Gem::Resolver::DependencyRequest <code>dep</code> …\n"],["new","Gem::Uri","Gem/Uri.html#method-c-new","(source_uri)",""],["new","Gem::UriFormatter","Gem/UriFormatter.html#method-c-new","(uri)","<p>Creates a new URI formatter for <code>uri</code>.\n"],["new","Gem::Version","Gem/Version.html#method-c-new","(version)","<p>Constructs a Version from the <code>version</code> string.  A version string is a series of digits or ASCII letters …\n"],["new","GetoptLong","GetoptLong.html#method-c-new","(*arguments)","<p>Returns a new GetoptLong object based on the given <code>arguments</code>. See Options.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;getoptlong&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","Hash","Hash.html#method-c-new","(*args)","<p>Returns a new empty Hash object.\n<p>The initial default value and initial default proc for the new hash depend …\n"],["new","IO","IO.html#method-c-new","(p1, p2 = v2, p3 = {})","<p>Creates and returns a new IO object (file stream) from a file descriptor.\n<p>IO.new may be useful for interaction …\n"],["new","IO::Buffer","IO/Buffer.html#method-c-new","(*args)","<p>Create a new zero-filled IO::Buffer of <code>size</code> bytes. By default, the buffer will be <em>internal</em>: directly …\n"],["new","IPAddr","IPAddr.html#method-c-new","(addr = '::', family = Socket::AF_UNSPEC)","<p>Creates a new ipaddr object either from a human readable IP address representation in string, or from …\n"],["new","IRB::Canvas","IRB/Canvas.html#method-c-new","((h, w))",""],["new","IRB::Color::SymbolState","IRB/Color/SymbolState.html#method-c-new","()",""],["new","IRB::Context","IRB/Context.html#method-c-new","(irb, workspace = nil, input_method = nil)","<p>Creates a new IRB context.\n<p>The optional <code>input_method</code> argument:\n<p><code>nil</code> &mdash; uses stdin or Reline or Readline\n"],["new","IRB::FileInputMethod","IRB/FileInputMethod.html#method-c-new","(file)","<p>Creates a new input method object\n"],["new","IRB::Frame","IRB/Frame.html#method-c-new","()","<p>Creates a new stack frame\n"],["new","IRB::Frame::FrameOverflow","IRB/Frame/FrameOverflow.html#method-c-new","()",""],["new","IRB::Frame::FrameUnderflow","IRB/Frame/FrameUnderflow.html#method-c-new","()",""],["new","IRB::InputMethod","IRB/InputMethod.html#method-c-new","(file = STDIN_FILE_NAME)","<p>Creates a new input method object\n"],["new","IRB::Inspector","IRB/Inspector.html#method-c-new","(inspect_proc, init_proc = nil)","<p>Creates a new inspector object, using the given <code>inspect_proc</code> when output return values in irb.\n"],["new","IRB::Irb","IRB/Irb.html#method-c-new","(workspace = nil, input_method = nil)","<p>Creates a new irb session\n"],["new","IRB::JobManager","IRB/JobManager.html#method-c-new","()","<p>Creates a new JobManager object\n"],["new","IRB::Locale","IRB/Locale.html#method-c-new","(locale = nil)",""],["new","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-c-new","(prefix, base_notifier)","<p>Creates a new Notifier object\n"],["new","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-c-new","(prefix, base_notifier)","<p>Create a new composite notifier object with the given <code>prefix</code>, and <code>base_notifier</code> to use for output.\n"],["new","IRB::Notifier::ErrUndefinedNotifier","IRB/Notifier/ErrUndefinedNotifier.html#method-c-new","(val)",""],["new","IRB::Notifier::ErrUnrecognizedLevel","IRB/Notifier/ErrUnrecognizedLevel.html#method-c-new","(val)",""],["new","IRB::Notifier::LeveledNotifier","IRB/Notifier/LeveledNotifier.html#method-c-new","(base, level, prefix)","<p>Create a new leveled notifier with the given <code>base</code>, and <code>prefix</code> to send to AbstractNotifier.new\n<p>The given …\n"],["new","IRB::Notifier::NoMsgNotifier","IRB/Notifier/NoMsgNotifier.html#method-c-new","()","<p>Creates a new notifier that should not be used to output messages.\n"],["new","IRB::OutputMethod::NotImplementedError","IRB/OutputMethod/NotImplementedError.html#method-c-new","(val)",""],["new","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-c-new","()","<p>Creates a new input method object using Readline\n"],["new","IRB::ReidlineInputMethod","IRB/ReidlineInputMethod.html#method-c-new","()",""],["new","IRB::RelineInputMethod","IRB/RelineInputMethod.html#method-c-new","()","<p>Creates a new input method object using Reline\n"],["new","IRB::RubyModel","IRB/RubyModel.html#method-c-new","()",""],["new","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-c-new","()","<p>Creates a new input method object\n"],["new","IRB::Vec","IRB/Vec.html#method-c-new","(x, y, z)",""],["new","IRB::WorkSpace","IRB/WorkSpace.html#method-c-new","(*main)","<p>Creates a new workspace.\n<p>set self to main if specified, otherwise inherit main from TOPLEVEL_BINDING. …\n"],["new","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-c-new","(p1 = v1)","<p>Instantiates a new State object, configured by <em>opts</em>.\n<p><em>opts</em> can have the following keys:\n<p><strong>indent</strong>: a string …\n"],["new","JSON::Ext::Parser","JSON/Ext/Parser.html#method-c-new","(p1, p2 = {})","<p>Creates a new JSON::Ext::Parser instance for the string <em>source</em>.\n<p>Creates a new JSON::Ext::Parser instance …\n"],["new","KeyError","KeyError.html#method-c-new","(p1 = v1, p2 = {})","<p>Construct a new <code>KeyError</code> exception with the given message, receiver and key.\n"],["new","Logger","Logger.html#method-c-new","(logdev, shift_age = 0, shift_size = 1048576, level: DEBUG, progname: nil, formatter: nil, datetime_format: nil, binmode: false, shift_period_suffix: '%Y%m%d')","<p>With the single argument <code>logdev</code>, returns a new logger with all default options:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Logger</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.log&#39;</span>) <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["new","Logger::Formatter","Logger/Formatter.html#method-c-new","()",""],["new","Logger::LogDevice","Logger/LogDevice.html#method-c-new","(log = nil, shift_age: nil, shift_size: nil, shift_period_suffix: nil, binmode: false)",""],["new","Module","Module.html#method-c-new","()","<p>Creates a new anonymous module. If a block is given, it is passed the module object, and the block is …\n"],["new","MonitorMixin","MonitorMixin.html#method-c-new","(...)","<p>Use <code>extend MonitorMixin</code> or <code>include MonitorMixin</code> instead of this constructor.  Have look at the examples …\n"],["new","MonitorMixin::ConditionVariable","MonitorMixin/ConditionVariable.html#method-c-new","(monitor)",""],["new","NameError","NameError.html#method-c-new","(*args, p2 = {})","<p>Construct a new NameError exception. If given the <em>name</em> parameter may subsequently be examined using the …\n"],["new","Net::HTTP","Net/HTTP.html#method-c-new","(address, port = nil)","<p>Creates a new Net::HTTP object for the specified server address, without opening the TCP connection or …\n"],["new","Net::HTTP","Net/HTTP.html#method-c-new","(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil, p_no_proxy = nil)","<p>Returns a new Net::HTTP object <code>http</code> (but does not open a TCP connection or HTTP session).\n<p><strong>No Proxy</strong>\n<p>With …\n"],["new","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-c-new","(m, reqbody, resbody, uri_or_path, initheader = nil)",""],["new","Net::HTTPRequest","Net/HTTPRequest.html#method-c-new","(path, initheader = nil)","<p>Creates an HTTP request object for <code>path</code>.\n<p><code>initheader</code> are the default headers to use.  Net::HTTP adds Accept-Encoding …\n"],["new","Net::ReadTimeout","Net/ReadTimeout.html#method-c-new","(io = nil)",""],["new","Net::WriteAdapter","Net/WriteAdapter.html#method-c-new","(writer)",""],["new","Net::WriteTimeout","Net/WriteTimeout.html#method-c-new","(io = nil)",""],["new","NoMatchingPatternKeyError","NoMatchingPatternKeyError.html#method-c-new","(p1 = v1, p2 = {})","<p>Construct a new <code>NoMatchingPatternKeyError</code> exception with the given message, matchee and key.\n"],["new","NoMethodError","NoMethodError.html#method-c-new","(*args, p2 = {})","<p>Construct a NoMethodError exception for a method of the given name called with the given arguments.  …\n"],["new","OLEProperty","OLEProperty.html#method-c-new","(obj, dispid, gettypes, settypes)",""],["new","OpenSSL::ASN1::ASN1Data","OpenSSL/ASN1/ASN1Data.html#method-c-new","(p1, p2, p3)","<p><em>value</em>: Please have a look at Constructive and Primitive to see how Ruby types are mapped to ASN.1 types …\n"],["new","OpenSSL::ASN1::Constructive","OpenSSL/ASN1/Constructive.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p><em>value</em>: is mandatory.\n<p><em>tag</em>: optional, may be specified for tagged values. If no <em>tag</em> is specified, the UNIVERSAL …\n"],["new","OpenSSL::ASN1::Primitive","OpenSSL/ASN1/Primitive.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p><em>value</em>: is mandatory.\n<p><em>tag</em>: optional, may be specified for tagged values. If no <em>tag</em> is specified, the UNIVERSAL …\n"],["new","OpenSSL::BN","OpenSSL/BN.html#method-c-new","(p1, p2 = v2)","<p>Construct a new OpenSSL BIGNUM object.\n<p>If <code>bn</code> is an Integer or OpenSSL::BN, a new instance of OpenSSL::BN …\n"],["new","OpenSSL::Buffering","OpenSSL/Buffering.html#method-c-new","(*)","<p>Creates an instance of OpenSSL’s buffering IO module.\n"],["new","OpenSSL::Buffering::Buffer","OpenSSL/Buffering/Buffer.html#method-c-new","()",""],["new","OpenSSL::Cipher","OpenSSL/Cipher.html#method-c-new","(p1)","<p>The string must contain a valid cipher name like “aes-256-cbc”.\n<p>A list of cipher names is available …\n"],["new","OpenSSL::Config","OpenSSL/Config.html#method-c-new","(p1 = v1)","<p>Creates an instance of OpenSSL::Config from the content of the file specified by <em>filename</em>.\n<p>This can be …\n"],["new","OpenSSL::Digest","OpenSSL/Digest.html#method-c-new","(p1, p2 = v2)","<p>Creates a Digest instance based on <em>string</em>, which is either the ln (long name) or sn (short name) of a …\n"],["new","OpenSSL::HMAC","OpenSSL/HMAC.html#method-c-new","(p1, p2)","<p>Returns an instance of OpenSSL::HMAC set with the key and digest algorithm to be used. The instance represents …\n"],["new","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-c-new","(p1 = v1)","<p>Parameters\n<p><em>request</em> - optional raw request, either in PEM or DER format.\n\n"],["new","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-c-new","(p1 = v1)","<p>Creates a new BasicResponse. If <em>der_string</em> is given, decodes <em>der_string</em> as DER.\n"],["new","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates a new OpenSSL::OCSP::CertificateId for the given <em>subject</em> and <em>issuer</em> X509 certificates.  The  …\n"],["new","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-c-new","(p1 = v1)","<p>Creates a new OpenSSL::OCSP::Request.  The request may be created empty or from a <em>request_der</em> string. …\n"],["new","OpenSSL::OCSP::Response","OpenSSL/OCSP/Response.html#method-c-new","(p1 = v1)","<p>Creates a new OpenSSL::OCSP::Response.  The response may be created empty or from a <em>response_der</em> string. …\n"],["new","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-c-new","(p1)","<p>Creates a new SingleResponse from <em>der_string</em>.\n"],["new","OpenSSL::PKCS12","OpenSSL/PKCS12.html#method-c-new","(p1 = v1, p2 = v2)","<p>Parameters\n<p><em>str</em> - Must be a DER encoded PKCS12 string.\n<p><em>pass</em> - string\n"],["new","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-c-new","(p1 = v1)","<p>Many methods in this class aren’t documented.\n"],["new","OpenSSL::PKCS7::RecipientInfo","OpenSSL/PKCS7/RecipientInfo.html#method-c-new","(p1)",""],["new","OpenSSL::PKCS7::SignerInfo","OpenSSL/PKCS7/SignerInfo.html#method-c-new","(p1, p2, p3)",""],["new","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-c-new","(p1 = v1)","<p>Creates a new instance of OpenSSL::PKey::DH.\n<p>If called without arguments, an empty instance without any …\n"],["new","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-c-new","(p1 = v1, p2 = v2)","<p>Creates a new DSA instance by reading an existing key from <em>string</em>.\n<p>If called without arguments, creates …\n"],["new","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-c-new","(p1 = v1, p2 = v2)","<p>Creates a new EC object from given arguments.\n"],["new","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a new EC::Group object.\n<p>If the first argument is :GFp or :GF2m, creates a new curve with given …\n"],["new","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-c-new","(p1, p2 = v2)","<p>Creates a new instance of OpenSSL::PKey::EC::Point. If the only argument is an instance of EC::Point …\n"],["new","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-c-new","()","<p>Because PKey is an abstract class, actually calling this method explicitly will raise a NotImplementedError …\n"],["new","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-c-new","(p1 = v1, p2 = v2)","<p>Generates or loads an RSA keypair.\n<p>If called without arguments, creates a new instance with no key components …\n"],["new","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-c-new","(version = nil)","<p>Creates a new SSL context.\n<p>If an argument is given, #ssl_version= is called with the value. Note that …\n"],["new","OpenSSL::SSL::SSLServer","OpenSSL/SSL/SSLServer.html#method-c-new","(svr, ctx)","<p>Creates a new instance of SSLServer.\n<p><em>srv</em> is an instance of TCPServer.\n<p><em>ctx</em> is an instance of OpenSSL::SSL::SSLContext …\n"],["new","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-c-new","(p1, p2 = v2)","<p>Creates a new SSL socket from <em>io</em> which must be a real IO object (not an IO-like object that responds …\n"],["new","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-c-new","(p1)","<p>Creates a new Session object from an instance of SSLSocket or DER/PEM encoded String.\n"],["new","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-c-new","(p1 = v1)","<p>When creating a Request with the <code>File</code> or <code>string</code> parameter, the corresponding <code>File</code> or <code>string</code> must be DER-encoded. …\n"],["new","OpenSSL::Timestamp::Response","OpenSSL/Timestamp/Response.html#method-c-new","(p1)","<p>Creates a Response from a <code>File</code> or <code>string</code> parameter, the corresponding <code>File</code> or <code>string</code> must be DER-encoded. …\n"],["new","OpenSSL::Timestamp::TokenInfo","OpenSSL/Timestamp/TokenInfo.html#method-c-new","(p1)","<p>Creates a TokenInfo from a <code>File</code> or <code>string</code> parameter, the corresponding <code>File</code> or <code>string</code> must be DER-encoded. …\n"],["new","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-c-new","(p1, p2 = v2)",""],["new","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates an X509 extension.\n<p>The extension may be created from <em>der</em> data or from an extension <em>oid</em> and <em>value</em> …\n"],["new","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)",""],["new","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-c-new","(p1 = v1, p2 = v2)","<p>Creates a new Name.\n<p>A name may be created from a DER encoded string <em>der</em>, an Array representing a <em>distinguished_name</em> …\n"],["new","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-c-new","(*args)",""],["new","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-c-new","(*args)","<p>Creates a new X509::Store.\n"],["new","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Sets up a StoreContext for a verification of the X.509 certificate <em>cert</em>.\n"],["new","OpenStruct","OpenStruct.html#method-c-new","(hash=nil)","<p>Creates a new OpenStruct object.  By default, the resulting OpenStruct object will have no attributes. …\n"],["new","OpenURI::HTTPError","OpenURI/HTTPError.html#method-c-new","(message, io)",""],["new","OpenURI::HTTPRedirect","OpenURI/HTTPRedirect.html#method-c-new","(message, io, uri)",""],["new","OptionParser","OptionParser.html#method-c-new","(banner = nil, width = 32, indent = ' ' * 4)","<p>Initializes the instance and yields itself if called with a block.\n<p><code>banner</code> &mdash; Banner message.\n<p><code>width</code> &mdash; Summary …\n"],["new","OptionParser","OptionParser.html#method-i-new","()","<p>Pushes a new List.\n"],["new","OptionParser::Arguable","OptionParser/Arguable.html#method-c-new","(*args)",""],["new","OptionParser::List","OptionParser/List.html#method-c-new","()","<p>Just initializes all instance variables.\n"],["new","OptionParser::ParseError","OptionParser/ParseError.html#method-c-new","(*args, additional: nil)",""],["new","OptionParser::Switch","OptionParser/Switch.html#method-c-new","(pattern = nil, conv = nil, short = nil, long = nil, arg = nil, desc = ([] if short or long), block = nil, &_block)",""],["new","PStore","PStore.html#method-c-new","(file, thread_safe = false)","<p>Returns a new PStore object.\n<p>Argument <code>file</code> is the path to the file in which objects are to be stored; …\n"],["new","Pathname","Pathname.html#method-c-new","(p1)","<p>Create a Pathname object from the given String (or String-like object). If <code>path</code> contains a NULL character …\n"],["new","PrettyPrint","PrettyPrint.html#method-c-new","(output=''.dup, maxwidth=79, newline=\"\\n\", &genspace)","<p>Creates a buffer for pretty printing.\n<p><code>output</code> is an output target. If it is not specified, ” is …\n"],["new","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-c-new","(output, maxwidth=nil, newline=nil)","<p>Create a PrettyPrint::SingleLine object\n<p>Arguments:\n<p><code>output</code> - String (or similar) to store rendered text. …\n"],["new","Proc","Proc.html#method-c-new","(*args)","<p>Creates a new Proc object, bound to the current context.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">proc</span> = <span class=\"ruby-constant\">Proc</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-string\">&quot;hello&quot;</span> }\n<span class=\"ruby-identifier\">proc</span>.<span class=\"ruby-identifier\">call</span>   <span class=\"ruby-comment\">#=&gt; &quot;hello&quot;</span>\n</pre>\n"],["new","Psych::AliasesNotEnabled","Psych/AliasesNotEnabled.html#method-c-new","()",""],["new","Psych::AnchorNotDefined","Psych/AnchorNotDefined.html#method-c-new","(anchor_name)",""],["new","Psych::ClassLoader::Restricted","Psych/ClassLoader/Restricted.html#method-c-new","(classes, symbols)",""],["new","Psych::Coder","Psych/Coder.html#method-c-new","(tag)",""],["new","Psych::DisallowedClass","Psych/DisallowedClass.html#method-c-new","(action, klass_name)",""],["new","Psych::Emitter","Psych/Emitter.html#method-c-new","(p1, p2 = v2)","<p>Create a new Psych::Emitter that writes to <code>io</code>.\n"],["new","Psych::Handler::DumperOptions","Psych/Handler/DumperOptions.html#method-c-new","()",""],["new","Psych::Handlers::Recorder","Psych/Handlers/Recorder.html#method-c-new","()",""],["new","Psych::Nodes::Alias","Psych/Nodes/Alias.html#method-c-new","(anchor)","<p>Create a new Alias that points to an <code>anchor</code>\n"],["new","Psych::Nodes::Document","Psych/Nodes/Document.html#method-c-new","(version = [], tag_directives = [], implicit = false)","<p>Create a new Psych::Nodes::Document object.\n<p><code>version</code> is a list indicating the YAML version. <code>tags_directives</code> …\n"],["new","Psych::Nodes::Mapping","Psych/Nodes/Mapping.html#method-c-new","(anchor = nil, tag = nil, implicit = true, style = BLOCK)","<p>Create a new Psych::Nodes::Mapping object.\n<p><code>anchor</code> is the anchor associated with the map or <code>nil</code>. <code>tag</code> is …\n"],["new","Psych::Nodes::Node","Psych/Nodes/Node.html#method-c-new","()","<p>Create a new Psych::Nodes::Node\n"],["new","Psych::Nodes::Scalar","Psych/Nodes/Scalar.html#method-c-new","(value, anchor = nil, tag = nil, plain = true, quoted = false, style = ANY)","<p>Create a new Psych::Nodes::Scalar object.\n<p><code>value</code> is the string value of the scalar <code>anchor</code> is an associated …\n"],["new","Psych::Nodes::Sequence","Psych/Nodes/Sequence.html#method-c-new","(anchor = nil, tag = nil, implicit = true, style = BLOCK)","<p>Create a new object representing a YAML sequence.\n<p><code>anchor</code> is the anchor associated with the sequence or …\n"],["new","Psych::Nodes::Stream","Psych/Nodes/Stream.html#method-c-new","(encoding = UTF8)","<p>Create a new Psych::Nodes::Stream node with an <code>encoding</code> that defaults to Psych::Nodes::Stream::UTF8. …\n"],["new","Psych::Parser","Psych/Parser.html#method-c-new","(handler = Handler.new)","<p>Creates a new Psych::Parser instance with <code>handler</code>.  YAML events will be called on <code>handler</code>.  See Psych::Parser …\n"],["new","Psych::ScalarScanner","Psych/ScalarScanner.html#method-c-new","(class_loader, strict_integer: false)","<p>Create a new scanner\n"],["new","Psych::Streaming::ClassMethods","Psych/Streaming/ClassMethods.html#method-i-new","(io)","<p>Create a new streaming emitter.  Emitter will print to <code>io</code>.  See Psych::Stream for an example.\n"],["new","Psych::SyntaxError","Psych/SyntaxError.html#method-c-new","(file, line, col, offset, problem, context)",""],["new","Psych::TreeBuilder","Psych/TreeBuilder.html#method-c-new","()","<p>Create a new TreeBuilder instance\n"],["new","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-c-new","(block)",""],["new","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-c-new","(io, options = {})",""],["new","Psych::Visitors::RestrictedYAMLTree","Psych/Visitors/RestrictedYAMLTree.html#method-c-new","(emitter, ss, options)",""],["new","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-c-new","(ss, class_loader, symbolize_names: false, freeze: false)",""],["new","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-c-new","(emitter, ss, options)",""],["new","RDoc::Alias","RDoc/Alias.html#method-c-new","(text, old_name, new_name, comment, singleton = false)","<p>Creates a new Alias with a token stream of <code>text</code> that aliases <code>old_name</code> to <code>new_name</code>, has <code>comment</code> and is …\n"],["new","RDoc::AnyMethod","RDoc/AnyMethod.html#method-c-new","(text, name)","<p>Creates a new AnyMethod with a token stream <code>text</code> and <code>name</code>\n"],["new","RDoc::Attr","RDoc/Attr.html#method-c-new","(text, name, rw, comment, singleton = false)","<p>Creates a new Attr with body <code>text</code>, <code>name</code>, read/write status <code>rw</code> and <code>comment</code>.  <code>singleton</code> marks this as a …\n"],["new","RDoc::ClassModule","RDoc/ClassModule.html#method-c-new","(name, superclass = nil)","<p>Creates a new ClassModule with <code>name</code> with optional <code>superclass</code>\n<p>This is a constructor for subclasses, and …\n"],["new","RDoc::CodeObject","RDoc/CodeObject.html#method-c-new","()","<p>Creates a new CodeObject that will document itself and its children\n"],["new","RDoc::Comment","RDoc/Comment.html#method-c-new","(text = nil, location = nil, language = nil)","<p>Creates a new comment with <code>text</code> that is found in the RDoc::TopLevel <code>location</code>.\n"],["new","RDoc::Constant","RDoc/Constant.html#method-c-new","(name, value, comment)","<p>Creates a new constant with <code>name</code>, <code>value</code> and <code>comment</code>\n"],["new","RDoc::Context","RDoc/Context.html#method-c-new","()","<p>Creates an unnamed empty context with public current visibility\n"],["new","RDoc::CrossReference","RDoc/CrossReference.html#method-c-new","(context)","<p>Allows cross-references to be created based on the given <code>context</code> (RDoc::Context).\n"],["new","RDoc::ERBIO","RDoc/ERBIO.html#method-c-new","(str, safe_level = nil, legacy_trim_mode = nil, legacy_eoutvar = 'io', trim_mode: nil, eoutvar: 'io')","<p>Defaults <code>eoutvar</code> to ‘io’, otherwise is identical to ERB’s initialize\n"],["new","RDoc::Markdown","RDoc/Markdown.html#method-c-new","(extensions = DEFAULT_EXTENSIONS, debug = false)","<p>Creates a new markdown parser that enables the given <code>extensions</code>.\n"],["new","RDoc::Markup","RDoc/Markup.html#method-c-new","(attribute_manager = nil)","<p>Take a block of text and use various heuristics to determine its structure (paragraphs, lists, and so …\n"],["new","RDoc::MethodAttr","RDoc/MethodAttr.html#method-c-new","(text, name)","<p>Creates a new MethodAttr from token stream <code>text</code> and method or attribute name <code>name</code>.\n<p>Usually this is called …\n"],["new","RDoc::Mixin","RDoc/Mixin.html#method-c-new","(name, comment)","<p>Creates a new Mixin for <code>name</code> with <code>comment</code>\n"],["new","RDoc::Parser","RDoc/Parser.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Creates a new Parser storing <code>top_level</code>, <code>file_name</code>, <code>content</code>, <code>options</code> and <code>stats</code> in instance variables. …\n"],["new","RDoc::Parser::C","RDoc/Parser/C.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Prepares for parsing a C file.  See RDoc::Parser#initialize for details on the arguments.\n"],["new","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-c-new","(code)",""],["new","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-c-new","(code)",""],["new","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Creates a new Ruby parser.\n"],["new","RDoc::Parser::Simple","RDoc/Parser/Simple.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Prepare to parse a plain file\n"],["new","RDoc::RDoc","RDoc/RDoc.html#method-c-new","()","<p>Creates a new RDoc::RDoc instance.  Call #document to parse files and generate documentation.\n"],["new","RDoc::Require","RDoc/Require.html#method-c-new","(name, comment)","<p>Creates a new Require that loads <code>name</code> with <code>comment</code>\n"],["new","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-new","(spec, generate_rdoc = false, generate_ri = true)","<p>Creates a new documentation generator for <code>spec</code>.  RDoc and ri data generation can be enabled or disabled …\n"],["new","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-new","(spec, generate_rdoc = false, generate_ri = true)","<p>Creates a new documentation generator for <code>spec</code>.  RDoc and ri data generation can be enabled or disabled …\n"],["new","RDoc::Servlet","RDoc/Servlet.html#method-c-new","(server, stores, cache, mount_path = nil, extra_doc_dirs = [])","<p>Creates a new WEBrick servlet.\n<p>Use <code>mount_path</code> when mounting the servlet somewhere other than /.\n<p>Use <code>extra_doc_dirs</code> …\n"],["new","RDoc::Stats","RDoc/Stats.html#method-c-new","(store, num_files, verbosity = 1)","<p>Creates a new Stats that will have <code>num_files</code>.  <code>verbosity</code> defaults to 1 which will create an RDoc::Stats::Normal …\n"],["new","RDoc::Store","RDoc/Store.html#method-c-new","(path = nil, type = nil)","<p>Creates a new Store of <code>type</code> that will load or save to <code>path</code>\n"],["new","RDoc::Store::MissingFileError","RDoc/Store/MissingFileError.html#method-c-new","(store, file, name)","<p>Creates a new MissingFileError for the missing <code>file</code> for the given <code>name</code> that should have been in the  …\n"],["new","RDoc::Task","RDoc/Task.html#method-c-new","(name = :rdoc)","<p>Create an RDoc task with the given name. See the RDoc::Task class overview for documentation.\n"],["new","RDoc::TomDoc","RDoc/TomDoc.html#method-c-new","()","<p>Creates a new TomDoc parser.  See also RDoc::Markup::parse\n"],["new","RDoc::TopLevel","RDoc/TopLevel.html#method-c-new","(absolute_name, relative_name = absolute_name)","<p>Creates a new TopLevel for the file at <code>absolute_name</code>.  If documentation is being generated outside the …\n"],["new","Racc::ActionTable","Racc/ActionTable.html#method-c-new","(rt, st)",""],["new","Racc::DebugFlags","Racc/DebugFlags.html#method-c-new","(parse = false, rule = false, token = false, state = false, la = false, prec = false, conf = false)",""],["new","Racc::Goto","Racc/Goto.html#method-c-new","(ident, sym, from, to)",""],["new","Racc::Grammar","Racc/Grammar.html#method-c-new","(debug_flags = DebugFlags.new)",""],["new","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-c-new","()",""],["new","Racc::Grammar::PrecedenceDefinitionEnv","Racc/Grammar/PrecedenceDefinitionEnv.html#method-c-new","(g)",""],["new","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-c-new","(debug_flags = DebugFlags.new)",""],["new","Racc::GrammarFileParser::Result","Racc/GrammarFileParser/Result.html#method-c-new","(grammar)",""],["new","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-c-new","(str, filename = '-')",""],["new","Racc::ISet","Racc/ISet.html#method-c-new","(a = [])",""],["new","Racc::Item","Racc/Item.html#method-c-new","(rule, la)",""],["new","Racc::LocationPointer","Racc/LocationPointer.html#method-c-new","(rule, i, sym)",""],["new","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-c-new","(states, debug_flags = DebugFlags.new)",""],["new","Racc::OrMark","Racc/OrMark.html#method-c-new","(lineno)",""],["new","Racc::ParserClassGenerator","Racc/ParserClassGenerator.html#method-c-new","(states)",""],["new","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-c-new","(states, params)",""],["new","Racc::ParserFileGenerator::Params","Racc/ParserFileGenerator/Params.html#method-c-new","()",""],["new","Racc::Prec","Racc/Prec.html#method-c-new","(symbol, lineno)",""],["new","Racc::RRconflict","Racc/RRconflict.html#method-c-new","(sid, high, low, tok)",""],["new","Racc::Reduce","Racc/Reduce.html#method-c-new","(rule)",""],["new","Racc::Rule","Racc/Rule.html#method-c-new","(target, syms, act)",""],["new","Racc::SRconflict","Racc/SRconflict.html#method-c-new","(sid, shift, reduce)",""],["new","Racc::Shift","Racc/Shift.html#method-c-new","(goto)",""],["new","Racc::SourceText","Racc/SourceText.html#method-c-new","(text, filename, lineno)",""],["new","Racc::State","Racc/State.html#method-c-new","(ident, core)",""],["new","Racc::StateTransitionTable","Racc/StateTransitionTable.html#method-c-new","(states)",""],["new","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-c-new","(states)",""],["new","Racc::States","Racc/States.html#method-c-new","(grammar, debug_flags = DebugFlags.new)",""],["new","Racc::Sym","Racc/Sym.html#method-c-new","(value, dummyp)",""],["new","Racc::SymbolTable","Racc/SymbolTable.html#method-c-new","()",""],["new","Racc::UserAction","Racc/UserAction.html#method-c-new","(src, proc)",""],["new","Ractor","Ractor.html#method-c-new","(*args, name: nil, &block)","<p>Create a new Ractor with args and a block.\n<p>A block (Proc) will be isolated (can’t access to outer …\n"],["new","Random","Random.html#method-c-new","(*args)","<p>Creates a new PRNG using <code>seed</code> to set the initial state. If <code>seed</code> is omitted, the generator is initialized …\n"],["new","Range","Range.html#method-c-new","(p1, p2, p3 = v3)","<p>Returns a new range based on the given objects <code>begin</code> and <code>end</code>. Optional argument <code>exclude_end</code> determines …\n"],["new","Regexp","Regexp.html#method-c-new","(*args)","<p>With argument <code>string</code> given, returns a new regexp with the given string and options:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">r</span> = <span class=\"ruby-constant\">Regexp</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","Reline::Config","Reline/Config.html#method-c-new","()",""],["new","Reline::Core","Reline/Core.html#method-c-new","()",""],["new","Reline::History","Reline/History.html#method-c-new","(config)",""],["new","Reline::KeyActor::Base","Reline/KeyActor/Base.html#method-c-new","()",""],["new","Reline::KeyStroke","Reline/KeyStroke.html#method-c-new","(config)",""],["new","Reline::KillRing","Reline/KillRing.html#method-c-new","(max = 1024)",""],["new","Reline::KillRing::RingBuffer","Reline/KillRing/RingBuffer.html#method-c-new","(max = 1024)",""],["new","Reline::LineEditor","Reline/LineEditor.html#method-c-new","(config, encoding)",""],["new","Reline::LineEditor::Dialog","Reline/LineEditor/Dialog.html#method-c-new","(name, config, proc_scope)",""],["new","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-c-new","(line_editor, config, proc_to_exec, context)",""],["new","Reline::Windows::KeyEventRecord","Reline/Windows/KeyEventRecord.html#method-c-new","(virtual_key_code, char_code, control_key_state)",""],["new","Reline::Windows::Win32API","Reline/Windows/Win32API.html#method-c-new","(dllname, func, import, export = \"0\", calltype = :stdcall)",""],["new","Resolv","Resolv.html#method-c-new","(resolvers=[Hosts.new, DNS.new])","<p>Creates a new Resolv using <code>resolvers</code>.\n"],["new","Resolv::DNS","Resolv/DNS.html#method-c-new","(config_info=nil)","<p>Creates a new DNS resolver.\n<p><code>config_info</code> can be:\n<p>nil &mdash; Uses /etc/resolv.conf.\n"],["new","Resolv::DNS::Resource::DomainName","Resolv/DNS/Resource/DomainName.html#method-c-new","(name)","<p>Creates a new DomainName from <code>name</code>.\n"],["new","Resolv::DNS::Resource::Generic","Resolv/DNS/Resource/Generic.html#method-c-new","(data)","<p>Creates a new generic resource.\n"],["new","Resolv::DNS::Resource::HINFO","Resolv/DNS/Resource/HINFO.html#method-c-new","(cpu, os)","<p>Creates a new HINFO running <code>os</code> on <code>cpu</code>.\n"],["new","Resolv::DNS::Resource::IN::A","Resolv/DNS/Resource/IN/A.html#method-c-new","(address)","<p>Creates a new A for <code>address</code>.\n"],["new","Resolv::DNS::Resource::IN::AAAA","Resolv/DNS/Resource/IN/AAAA.html#method-c-new","(address)","<p>Creates a new AAAA for <code>address</code>.\n"],["new","Resolv::DNS::Resource::IN::SRV","Resolv/DNS/Resource/IN/SRV.html#method-c-new","(priority, weight, port, target)","<p>Create a SRV resource record.\n<p>See the documentation for #priority, #weight, #port and #target for <code>priority</code> …\n"],["new","Resolv::DNS::Resource::IN::WKS","Resolv/DNS/Resource/IN/WKS.html#method-c-new","(address, protocol, bitmap)",""],["new","Resolv::DNS::Resource::LOC","Resolv/DNS/Resource/LOC.html#method-c-new","(version, ssize, hprecision, vprecision, latitude, longitude, altitude)",""],["new","Resolv::DNS::Resource::MINFO","Resolv/DNS/Resource/MINFO.html#method-c-new","(rmailbx, emailbx)",""],["new","Resolv::DNS::Resource::MX","Resolv/DNS/Resource/MX.html#method-c-new","(preference, exchange)","<p>Creates a new MX record with <code>preference</code>, accepting mail at <code>exchange</code>.\n"],["new","Resolv::DNS::Resource::SOA","Resolv/DNS/Resource/SOA.html#method-c-new","(mname, rname, serial, refresh, retry_, expire, minimum)","<p>Creates a new SOA record.  See the attr documentation for the details of each argument.\n"],["new","Resolv::DNS::Resource::TXT","Resolv/DNS/Resource/TXT.html#method-c-new","(first_string, *rest_strings)",""],["new","Resolv::Hosts","Resolv/Hosts.html#method-c-new","(filename = DefaultFileName)","<p>Creates a new Resolv::Hosts, using <code>filename</code> for its data source.\n"],["new","Resolv::LOC::Alt","Resolv/LOC/Alt.html#method-c-new","(altitude)",""],["new","Resolv::LOC::Coord","Resolv/LOC/Coord.html#method-c-new","(coordinates,orientation)",""],["new","Resolv::LOC::Size","Resolv/LOC/Size.html#method-c-new","(scalar)",""],["new","Resolv::MDNS","Resolv/MDNS.html#method-c-new","(config_info=nil)","<p>Creates a new one-shot Multicast DNS (mDNS) resolver.\n<p><code>config_info</code> can be:\n<p>nil &mdash; Uses the default mDNS addresses …\n"],["new","Rinda::DRbObjectTemplate","Rinda/DRbObjectTemplate.html#method-c-new","(uri=nil, ref=nil)","<p>Creates a new DRbObjectTemplate that will match against <code>uri</code> and <code>ref</code>.\n"],["new","Rinda::NotifyTemplateEntry","Rinda/NotifyTemplateEntry.html#method-c-new","(place, event, tuple, expires=nil)","<p>Creates a new NotifyTemplateEntry that watches <code>place</code> for +event+s that match <code>tuple</code>.\n"],["new","Rinda::RingFinger","Rinda/RingFinger.html#method-c-new","(broadcast_list=@@broadcast_list, port=Ring_PORT)","<p>Creates a new RingFinger that will look for RingServers at <code>port</code> on the addresses in <code>broadcast_list</code>.\n<p>If …\n"],["new","Rinda::RingProvider","Rinda/RingProvider.html#method-c-new","(klass, front, desc, renewer = nil)","<p>Creates a RingProvider that will provide a <code>klass</code> service running on <code>front</code>, with a <code>description</code>.  <code>renewer</code> …\n"],["new","Rinda::RingServer","Rinda/RingServer.html#method-c-new","(ts, addresses=[Socket::INADDR_ANY], port=Ring_PORT)","<p>Advertises <code>ts</code> on the given <code>addresses</code> at <code>port</code>.\n<p>If <code>addresses</code> is omitted only the UDP broadcast address is …\n"],["new","Rinda::SimpleRenewer","Rinda/SimpleRenewer.html#method-c-new","(sec=180)","<p>Creates a new SimpleRenewer that keeps an object alive for another <code>sec</code> seconds.\n"],["new","Rinda::Tuple","Rinda/Tuple.html#method-c-new","(ary_or_hash)","<p>Creates a new Tuple from <code>ary_or_hash</code> which must be an Array or Hash.\n"],["new","Rinda::TupleBag::TupleBin","Rinda/TupleBag/TupleBin.html#method-c-new","()",""],["new","Rinda::TupleEntry","Rinda/TupleEntry.html#method-c-new","(ary, sec=nil)","<p>Creates a TupleEntry based on <code>ary</code> with an optional renewer or expiry time <code>sec</code>.\n<p>A renewer must implement …\n"],["new","Rinda::TupleSpace","Rinda/TupleSpace.html#method-c-new","(period=60)","<p>Creates a new TupleSpace.  <code>period</code> is used to control how often to look for dead tuples after modifications …\n"],["new","Rinda::TupleSpaceProxy","Rinda/TupleSpaceProxy.html#method-c-new","(ts)","<p>Creates a new TupleSpaceProxy to wrap <code>ts</code>.\n"],["new","Rinda::WaitTemplateEntry","Rinda/WaitTemplateEntry.html#method-c-new","(place, ary, expires=nil)",""],["new","Ripper","Ripper.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Create a new Ripper object. <em>src</em> must be a String, an IO, or an Object which has #gets method.\n<p>This method …\n"],["new","Ripper::Filter","Ripper/Filter.html#method-c-new","(src, filename = '-', lineno = 1)","<p>Creates a new Ripper::Filter instance, passes parameters <code>src</code>, <code>filename</code>, and <code>lineno</code> to Ripper::Lexer.new …\n"],["new","Ripper::Lexer::Elem","Ripper/Lexer/Elem.html#method-c-new","(pos, event, tok, state, message = nil)",""],["new","Ripper::Lexer::State","Ripper/Lexer/State.html#method-c-new","(i)",""],["new","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-new","(p1, *args, p3 = {})","<p>Takes <code>source</code>, a String of Ruby code and compiles it to an InstructionSequence.\n<p>Optionally takes <code>file</code>, …\n"],["new","SOCKSSocket","SOCKSSocket.html#method-c-new","(host, serv)",""],["new","SOCKSSocket","SOCKSSocket.html#method-c-new","(p1, p2)","<p>Opens a SOCKS connection to <code>host</code> via the SOCKS server.\n<p>The SOCKS server configuration varies by implementation …\n"],["new","Set","Set.html#method-c-new","(enum = nil)","<p>Creates a new set containing the elements of the given enumerable\nobject.\n<p>If a block is given, the elements …\n"],["new","SignalException","SignalException.html#method-c-new","(*args)","<p>Construct a new SignalException object.  <code>sig_name</code> should be a known signal name.\n"],["new","Socket","Socket.html#method-c-new","(p1, p2, p3 = v3)","<p>Creates a new socket object.\n<p><em>domain</em> should be a communications domain such as: :INET, :INET6, :UNIX, etc. …\n"],["new","Socket::AncillaryData","Socket/AncillaryData.html#method-c-new","(p1, p2, p3, p4)","<p><em>family</em> should be an integer, a string or a symbol.\n<p>Socket::AF_INET, “AF_INET”, “INET”, …\n"],["new","Socket::Option","Socket/Option.html#method-c-new","(p1, p2, p3, p4)","<p>Returns a new Socket::Option object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">sockopt</span> = <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Option</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:INET</span>, <span class=\"ruby-value\">:SOCKET</span>, <span class=\"ruby-value\">:KEEPALIVE</span>, [<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">pack</span>(<span class=\"ruby-string\">&quot;i&quot;</span>)) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","Socket::UDPSource","Socket/UDPSource.html#method-c-new","(remote_address, local_address, &reply_proc)","<p><code>remote_address</code> is an Addrinfo object.\n<p><code>local_address</code> is an Addrinfo object.\n<p><code>reply_proc</code> is a Proc used to …\n"],["new","String","String.html#method-c-new","(p1 = v1, p2 = {})","<p>Returns a new String that is a copy of <code>string</code>.\n<p>With no arguments, returns the empty string with the Encoding …\n"],["new","StringIO","StringIO.html#method-c-new","(*args)","<p>Note that <code>mode</code> defaults to <code>&#39;r&#39;</code> if <code>string</code> is frozen.\n<p>Returns a new StringIO instance formed from …\n"],["new","StringScanner","StringScanner.html#method-c-new","(p1, p2 = v2)","<p>Creates a new StringScanner object to scan over the given <code>string</code>.\n<p>If <code>fixed_anchor</code> is <code>true</code>, <code>\\A</code> always matches …\n"],["new","Struct","Struct.html#method-c-new","(p1, *args, p3 = {})","<p><code>Struct.new</code> returns a new subclass of <code>Struct</code>.  The new subclass:\n<p>May be anonymous, or may have the name …\n"],["new","SyntaxError","SyntaxError.html#method-c-new","(*args)","<p>Construct a SyntaxError exception.\n"],["new","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-c-new","(code_lines:, block:)",""],["new","SyntaxSuggest::BlockExpand","SyntaxSuggest/BlockExpand.html#method-c-new","(code_lines:)",""],["new","SyntaxSuggest::CaptureCodeContext","SyntaxSuggest/CaptureCodeContext.html#method-c-new","(blocks:, code_lines:)",""],["new","SyntaxSuggest::CleanDocument","SyntaxSuggest/CleanDocument.html#method-c-new","(source:)",""],["new","SyntaxSuggest::Cli","SyntaxSuggest/Cli.html#method-c-new","(argv:, exit_obj: Kernel, io: $stdout, env: ENV)","<p>ARGV is Everything passed to the executable, does not include executable name\n<p>All other intputs are dependency …\n"],["new","SyntaxSuggest::CodeBlock","SyntaxSuggest/CodeBlock.html#method-c-new","(lines: [])",""],["new","SyntaxSuggest::CodeFrontier","SyntaxSuggest/CodeFrontier.html#method-c-new","(code_lines:, unvisited: UnvisitedLines.new(code_lines: code_lines))",""],["new","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-c-new","(line:, index:, lex:)",""],["new","SyntaxSuggest::CodeSearch","SyntaxSuggest/CodeSearch.html#method-c-new","(source, record_dir: DEFAULT_VALUE)",""],["new","SyntaxSuggest::DisplayCodeWithLineNumbers","SyntaxSuggest/DisplayCodeWithLineNumbers.html#method-c-new","(lines:, highlight_lines: [], terminal: false)",""],["new","SyntaxSuggest::DisplayInvalidBlocks","SyntaxSuggest/DisplayInvalidBlocks.html#method-c-new","(code_lines:, blocks:, io: $stderr, filename: nil, terminal: DEFAULT_VALUE)",""],["new","SyntaxSuggest::ExplainSyntax","SyntaxSuggest/ExplainSyntax.html#method-c-new","(code_lines:)",""],["new","SyntaxSuggest::LeftRightLexCount","SyntaxSuggest/LeftRightLexCount.html#method-c-new","()",""],["new","SyntaxSuggest::LexAll","SyntaxSuggest/LexAll.html#method-c-new","(source:, source_lines: nil)",""],["new","SyntaxSuggest::LexValue","SyntaxSuggest/LexValue.html#method-c-new","(line, type, token, state, last_lex = nil)",""],["new","SyntaxSuggest::MiniStringIO","SyntaxSuggest/MiniStringIO.html#method-c-new","(isatty: $stderr.isatty)",""],["new","SyntaxSuggest::ParseBlocksFromIndentLine","SyntaxSuggest/ParseBlocksFromIndentLine.html#method-c-new","(code_lines:)",""],["new","SyntaxSuggest::PathnameFromMessage","SyntaxSuggest/PathnameFromMessage.html#method-c-new","(message, io: $stderr)",""],["new","SyntaxSuggest::PriorityEngulfQueue","SyntaxSuggest/PriorityEngulfQueue.html#method-c-new","()",""],["new","SyntaxSuggest::PriorityQueue","SyntaxSuggest/PriorityQueue.html#method-c-new","()",""],["new","SyntaxSuggest::UnvisitedLines","SyntaxSuggest/UnvisitedLines.html#method-c-new","(code_lines:)",""],["new","Syslog::Logger","Syslog/Logger.html#method-c-new","(program_name = 'ruby', facility = nil)","<p>Fills in variables for Logger compatibility.  If this is the first instance of Syslog::Logger, <code>program_name</code> …\n"],["new","SystemCallError","SystemCallError.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>If <em>errno</em> corresponds to a known system error code, constructs the appropriate Errno class for that error, …\n"],["new","SystemExit","SystemExit.html#method-c-new","(*args)","<p>Create a new <code>SystemExit</code> exception with the given status and message. Status is true, false, or an integer. …\n"],["new","TCPServer","TCPServer.html#method-c-new","(p1 = v1, p2)","<p>Creates a new server socket bound to <em>port</em>.\n<p>If <em>hostname</em> is given, the socket is bound to it.\n\n<pre>serv = TCPServer.new(&quot;127.0.0.1&quot;, ...</pre>\n"],["new","TCPSocket","TCPSocket.html#method-c-new","(p1, p2, p3 = v3, p4 = v4, p5 = {})","<p>Opens a TCP connection to <code>remote_host</code> on <code>remote_port</code>.  If <code>local_host</code> and <code>local_port</code> are specified, then …\n"],["new","TCPSocket","TCPSocket.html#method-c-new","(host, serv, *rest)",""],["new","Tempfile","Tempfile.html#method-c-new","(basename=\"\", tmpdir=nil, mode: 0, **options)","<p>Creates a file in the underlying file system; returns a new Tempfile object based on that file.\n<p>If possible, …\n"],["new","Thread","Thread.html#method-c-new","(*args)","<p>Creates a new thread executing the given block.\n<p>Any <code>args</code> given to ::new will be passed to the block:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">arr</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","Thread::ConditionVariable","Thread/ConditionVariable.html#method-c-new","()","<p>Creates a new condition variable instance.\n"],["new","Thread::Mutex","Thread/Mutex.html#method-c-new","()","<p>Creates a new Mutex\n"],["new","Thread::Queue","Thread/Queue.html#method-c-new","(p1 = v1)","<p>Creates a new queue instance, optionally using the contents of an <code>enumerable</code> for its initial state.\n<p>Example: …\n"],["new","Thread::SizedQueue","Thread/SizedQueue.html#method-c-new","(p1)","<p>Creates a fixed-length queue with a maximum size of <code>max</code>.\n"],["new","Time","Time.html#method-c-new","(year = (now = true), mon = (str = year; nil), mday = nil, hour = nil, min = nil, sec = nil, zone = nil, in: nil, precision: 9)","<p>Returns a new Time object based on the given arguments, by default in the local timezone.\n<p>With no positional …\n"],["new","TracePoint","TracePoint.html#method-c-new","(*events)","<p>Returns a new TracePoint object, not enabled by default.\n<p>Next, in order to activate the trace, you must …\n"],["new","UDPSocket","UDPSocket.html#method-c-new","(p1 = v1)","<p>Creates a new UDPSocket object.\n<p><em>address_family</em> should be an integer, a string or a symbol: Socket::AF_INET …\n"],["new","UNIXServer","UNIXServer.html#method-c-new","(p1)","<p>Creates a new UNIX server socket bound to <em>path</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;socket&#39;</span>\n\n<span class=\"ruby-identifier\">serv</span> = <span class=\"ruby-constant\">UNIXServer</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>)\n<span class=\"ruby-identifier\">s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","UNIXSocket","UNIXSocket.html#method-c-new","(p1)","<p>Creates a new UNIX client socket connected to <em>path</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;socket&#39;</span>\n\n<span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">UNIXSocket</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","URI::FTP","URI/FTP.html#method-c-new","(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = nil, arg_check = false)","<p>Description\n<p>Creates a new URI::FTP object from generic URL components with no syntax checking.\n<p>Unlike build(), …\n"],["new","URI::Generic","URI/Generic.html#method-c-new","(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = DEFAULT_PARSER, arg_check = false)","<p>Args\n<p><code>scheme</code> &mdash; Protocol scheme, i.e. ‘http’,‘ftp’,‘mailto’ and so on.\n<p><code>userinfo</code> &mdash; User …\n"],["new","URI::LDAP","URI/LDAP.html#method-c-new","(*arg)","<p>Description\n<p>Creates a new URI::LDAP object from generic URI components as per RFC 2396. No LDAP-specific …\n"],["new","URI::MailTo","URI/MailTo.html#method-c-new","(*arg)","<p>Description\n<p>Creates a new URI::MailTo object from generic URL components with no syntax checking.\n<p>This …\n"],["new","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-c-new","(opts = {})","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Parser</span>.<span class=\"ruby-identifier\">new</span>([<span class=\"ruby-identifier\">opts</span>])\n</pre>\n<p>Args\n"],["new","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-c-new","(opts = {})","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Parser</span>.<span class=\"ruby-identifier\">new</span>([<span class=\"ruby-identifier\">opts</span>])\n</pre>\n<p>Args\n"],["new","UncaughtThrowError","UncaughtThrowError.html#method-c-new","(*args)","<p>Document-class: UncaughtThrowError\n<p>Raised when <code>throw</code> is called with a <em>tag</em> which does not have corresponding …\n"],["new","WIN32OLE","WIN32OLE.html#method-c-new","(p1, p2 = v2, *args, p4 = {})","<p>Returns a new WIN32OLE object(OLE Automation object). The first argument server specifies OLE Automation …\n"],["new","WIN32OLE::Event","WIN32OLE/Event.html#method-c-new","(*args)","<p>Returns OLE event object. The first argument specifies WIN32OLE object. The second argument specifies …\n"],["new","WIN32OLE::Method","WIN32OLE/Method.html#method-c-new","(p1, p2)","<p>Returns a new WIN32OLE_METHOD object which represents the information about OLE method. The first argument …\n"],["new","WIN32OLE::Param","WIN32OLE/Param.html#method-c-new","(p1, p2)","<p>Returns WIN32OLE_PARAM object which represents OLE parameter information. 1st argument should be WIN32OLE_METHOD …\n"],["new","WIN32OLE::Record","WIN32OLE/Record.html#method-c-new","(p1, p2)","<p>Returns WIN32OLE_RECORD object. The first argument is struct name (String or Symbol). The second parameter …\n"],["new","WIN32OLE::Type","WIN32OLE/Type.html#method-c-new","(p1, p2)","<p>Returns a new WIN32OLE_TYPE object. The first argument <em>typelib</em> specifies OLE type library name. The second …\n"],["new","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-c-new","(*args)","<p>Returns a new WIN32OLE_TYPELIB object.\n<p>The first argument <em>typelib</em>  specifies OLE type library name or …\n"],["new","WIN32OLE::Variant","WIN32OLE/Variant.html#method-c-new","(*args)","<p>Returns Ruby object wrapping OLE variant. The first argument specifies Ruby object to convert OLE variant …\n"],["new","WeakRef","WeakRef.html#method-c-new","(orig)","<p>Creates a weak reference to <code>orig</code>\n"],["new","Win32::Registry","Win32/Registry.html#method-c-new","(hkey, parent, keyname, disposition)","<p>initialize\n"],["new","Win32::Registry::Error","Win32/Registry/Error.html#method-c-new","(code)",""],["new","Win32::Registry::PredefinedKey","Win32/Registry/PredefinedKey.html#method-c-new","(hkey, keyname)",""],["new","Win32::SSPI::Identity","Win32/SSPI/Identity.html#method-c-new","(user = nil, domain = nil, password = nil)",""],["new","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-c-new","(user = nil, domain = nil)","<p>Creates a new instance ready for authentication as the given user in the given domain. Defaults to current …\n"],["new","Win32::SSPI::SSPIResult","Win32/SSPI/SSPIResult.html#method-c-new","(value)",""],["new","Win32::SSPI::SecurityBuffer","Win32/SSPI/SecurityBuffer.html#method-c-new","(buffer = nil)",""],["new","XMP","XMP.html#method-c-new","(bind = nil)","<p>Creates a new XMP object.\n<p>The top-level binding or, optional <code>bind</code> parameter will be used when creating …\n"],["new","XMP::StringInputMethod","XMP/StringInputMethod.html#method-c-new","()","<p>Creates a new StringInputMethod object\n"],["new","YAML::Store","YAML/Store.html#method-c-new","( *o )","<p>Creates a new YAML::Store object, which will store data in <code>file_name</code>. If the file does not already exist, …\n"],["new","Zlib::Deflate","Zlib/Deflate.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a new deflate stream for compression. If a given argument is nil, the default value of that argument …\n"],["new","Zlib::GzipReader","Zlib/GzipReader.html#method-c-new","(p1, p2 = {})","<p>Creates a GzipReader object associated with <code>io</code>. The GzipReader object reads gzipped data from <code>io</code>, and …\n"],["new","Zlib::GzipWriter","Zlib/GzipWriter.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates a GzipWriter object associated with <code>io</code>. <code>level</code> and <code>strategy</code> should be the same as the arguments …\n"],["new","Zlib::Inflate","Zlib/Inflate.html#method-c-new","(p1 = v1)","<p>Creates a new inflate stream for decompression.  <code>window_bits</code> sets the size of the history buffer and …\n"],["new_alias_name","IRB::MethodExtender","IRB/MethodExtender.html#method-i-new_alias_name","(name, prefix = \"__alias_of__\", postfix = \"__\")","<p>Returns a unique method name to use as an alias for the given <code>name</code>.\n<p>Usually returns <code>#{prefix}#{name}#{postfix}&lt;num&gt;</code> …\n"],["new_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-new_comment","(text = nil, location = nil, language = nil)",""],["new_comment","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-new_comment","(comment, line_no = nil)","<p>Creates a comment with the correct format\n"],["new_cond","Monitor","Monitor.html#method-i-new_cond","()",""],["new_cond","MonitorMixin","MonitorMixin.html#method-i-new_cond","()","<p>Creates a new MonitorMixin::ConditionVariable associated with the Monitor object.\n"],["new_ntoh","IPAddr","IPAddr.html#method-c-new_ntoh","(addr)","<p>Creates a new ipaddr containing the given network byte ordered string form of an IP address.\n"],["new_offset","DateTime","DateTime.html#method-i-new_offset","(p1 = v1)","<p>Duplicates self and resets its offset.\n\n<pre>d = DateTime.new(2001,2,3,4,5,6,&#39;-02:00&#39;)\n                     ...</pre>\n"],["new_seed","Random","Random.html#method-c-new_seed","()","<p>Returns an arbitrary seed value. This is used by Random.new when no seed value is specified as an argument. …\n"],["new_start","Date","Date.html#method-i-new_start","(p1 = v1)","<p>Returns a copy of <code>self</code> with the given <code>start</code> value:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d0</span> = <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)\n<span class=\"ruby-identifier\">d0</span>.<span class=\"ruby-identifier\">julian?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-identifier\">d1</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new_toplevel","ERB","ERB.html#method-i-new_toplevel","(vars = nil)","<p>Returns a new binding each time <strong>near</strong> TOPLEVEL_BINDING for runs that do not specify a binding.\n"],["new_vertex_set","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-new_vertex_set","()",""],["new_with","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with","(uri, ref)","<p>Creates a DRb::DRbObject given the reference information to the remote host <code>uri</code> and object <code>ref</code>.\n"],["new_with","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with","(uri, ref)","<p>Creates a DRb::DRbObject given the reference information to the remote host <code>uri</code> and object <code>ref</code>.\n"],["new_with_uri","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with_uri","(uri)","<p>Create a new DRbObject from a URI alone.\n"],["new_with_uri","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with_uri","(uri)","<p>Create a new DRbObject from a URI alone.\n"],["newobj","Net::HTTP","Net/HTTP.html#method-c-newobj","(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil, p_no_proxy = nil)",""],["next","Date","Date.html#method-i-next","()","<p>Returns a new Date object representing the following day:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">to_s</span>      <span class=\"ruby-comment\"># =&gt; &quot;2001-02-03&quot; ...</span>\n</pre>\n"],["next","Enumerator","Enumerator.html#method-i-next","()","<p>Returns the next object in the enumerator, and move the internal position forward.  When the position …\n"],["next","Integer","Integer.html#method-i-next","()","<p>Returns the successor integer of <code>self</code> (equivalent to <code>self + 1</code>):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">succ</span>  <span class=\"ruby-comment\">#=&gt; 2</span>\n<span class=\"ruby-value\">-1</span>.<span class=\"ruby-identifier\">succ</span> <span class=\"ruby-comment\">#=&gt; 0</span>\n</pre>\n<p>Integer#next …\n"],["next","Racc::LocationPointer","Racc/LocationPointer.html#method-i-next","()",""],["next","String","String.html#method-i-next","()","<p>Returns the successor to <code>self</code>. The successor is calculated by incrementing characters.\n<p>The first character …\n"],["next","Symbol","Symbol.html#method-i-next","()","<p>Equivalent to <code>self.to_s.succ.to_sym</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:foo</span>.<span class=\"ruby-identifier\">succ</span> <span class=\"ruby-comment\"># =&gt; :fop</span>\n</pre>\n<p>Symbol#next is an alias for Symbol#succ.\n"],["next!","String","String.html#method-i-next-21","()","<p>Equivalent to String#succ, but modifies <code>self</code> in place; returns <code>self</code>.\n<p>String#next! is an alias for String#succ! …\n"],["next5","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-next5","()","<p>Returns the oldest five entries from the list.\n"],["next_day","Date","Date.html#method-i-next_day","(p1 = v1)","<p>Equivalent to Date#+ with argument <code>n</code>.\n"],["next_down","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-next_down","()",""],["next_float","Float","Float.html#method-i-next_float","()","<p>Returns the next-larger representable Float.\n<p>These examples show the internally stored values (64-bit …\n"],["next_history","Reline::LineEditor","Reline/LineEditor.html#method-i-next_history","(key, arg: 1)",""],["next_indent_line","SyntaxSuggest::CodeFrontier","SyntaxSuggest/CodeFrontier.html#method-i-next_indent_line","()",""],["next_line","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-next_line","()",""],["next_month","Date","Date.html#method-i-next_month","(p1 = v1)","<p>Equivalent to #>> with argument <code>n</code>.\n"],["next_rotate_time","Logger::Period","Logger/Period.html#method-i-next_rotate_time","(now, shift_age)",""],["next_token","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-next_token","()",""],["next_token","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-i-next_token","()",""],["next_token","Racc::Parser","Racc/Parser.html#method-i-next_token","()","<p>The method to fetch next token. If you use #do_parse method, you must implement #next_token.\n<p>The format …\n"],["next_up","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-next_up","()",""],["next_update","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-next_update","()",""],["next_update","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-next_update","()",""],["next_update=","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-next_update-3D","(p1)",""],["next_values","Enumerator","Enumerator.html#method-i-next_values","()","<p>Returns the next object as an array in the enumerator, and move the internal position forward.  When …\n"],["next_year","Date","Date.html#method-i-next_year","(p1 = v1)","<p>Equivalent to #>> with argument <code>n * 12</code>.\n"],["nfa","Racc::Grammar","Racc/Grammar.html#method-i-nfa","()",""],["nfa","Racc::States","Racc/States.html#method-i-nfa","()","<p>NFA (Non-deterministic Finite Automaton) Computation\n"],["nil?","NilClass","NilClass.html#method-i-nil-3F","()","<p>Only the object <em>nil</em> responds <code>true</code> to <code>nil?</code>.\n"],["nil?","Object","Object.html#method-i-nil-3F","()","<p>Only the object <em>nil</em> responds <code>true</code> to <code>nil?</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">nil?</span>   <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">nil?</span>          <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["nil_versions_are_discouraged!","Gem::Version","Gem/Version.html#method-c-nil_versions_are_discouraged-21","()",""],["nkf","NKF","NKF.html#method-c-nkf","(p1, p2)","<p>Convert <em>str</em> and return converted result. Conversion details are specified by <em>opt</em> as String.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;nkf&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["nlink","File::Stat","File/Stat.html#method-i-nlink","()","<p>Returns the number of hard links to <em>stat</em>.\n\n<pre>File.stat(&quot;testfile&quot;).nlink             #=&gt; 1\nFile.link(&quot;testfile&quot;, ...</pre>\n"],["nlsolve","Newton","Newton.html#method-i-nlsolve","(f,x)","<p>See also Newton\n"],["nobits?","Integer","Integer.html#method-i-nobits-3F","(p1)","<p>Returns <code>true</code> if no bit that is set (=1) in <code>mask</code> is also set in <code>self</code>; returns <code>false</code> otherwise.\n<p>Example …\n"],["nobits?","Ripper::Lexer::State","Ripper/Lexer/State.html#method-i-nobits-3F","(i)",""],["node_id","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-node_id","()","<p>Returns an internal node_id number. Note that this is an API for ruby internal use, debugging, and research. …\n"],["node_id_for_backtrace_location","RubyVM::AbstractSyntaxTree","RubyVM/AbstractSyntaxTree.html#method-c-node_id_for_backtrace_location","(backtrace_location)","<p>Returns the node id for the given backtrace location.\n\n<pre>begin\n  raise\nrescue =&gt;  e\n  loc = e.backtrace_locations.first ...</pre>\n"],["noecho","Gem::MockGemUi::TTY","Gem/MockGemUi/TTY.html#method-i-noecho","()",""],["noecho","IO","IO.html#method-i-noecho","()","<p>Yields <code>self</code> with disabling echo back.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">STDIN</span>.<span class=\"ruby-identifier\">noecho</span>(<span class=\"ruby-operator\">&amp;</span><span class=\"ruby-value\">:gets</span>)\n</pre>\n<p>will read and return a line without echo back. …\n"],["non_aliases","RDoc::ClassModule","RDoc/ClassModule.html#method-i-non_aliases","()","<p>Returns the classes and modules that are not constants aliasing another class or module. For use by formatters …\n"],["non_nil_attributes","Gem::Specification","Gem/Specification.html#method-c-non_nil_attributes","()","<p>Specification attributes that must be non-nil\n"],["nonassoc","Racc::Grammar::PrecedenceDefinitionEnv","Racc/Grammar/PrecedenceDefinitionEnv.html#method-i-nonassoc","(*syms)",""],["nonblock","IO","IO.html#method-i-nonblock","(p1 = v1)","<p>Yields <code>self</code> in non-blocking mode.\n<p>When <code>false</code> is given as an argument, <code>self</code> is yielded in blocking mode. …\n"],["nonblock=","IO","IO.html#method-i-nonblock-3D","(p1)","<p>Enables non-blocking mode on a stream when set to <code>true</code>, and blocking mode when set to <code>false</code>.\n<p>This method …\n"],["nonblock?","IO","IO.html#method-i-nonblock-3F","()","<p>Returns <code>true</code> if an IO object is in non-blocking mode.\n"],["nonce","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-i-nonce","()","<p>Returns the nonce (number used once) that the server shall include in its response.\n"],["nonce","OpenSSL::Timestamp::TokenInfo","OpenSSL/Timestamp/TokenInfo.html#method-i-nonce","()","<p>If the timestamp token is valid then this field contains the same nonce that was passed to the timestamp …\n"],["nonce=","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-i-nonce-3D","(p1)","<p>Sets the nonce (number used once) that the server shall include in its response. If the nonce is set, …\n"],["none?","Array","Array.html#method-i-none-3F","(*args)","<p>Returns <code>true</code> if no element of <code>self</code> meet a given criterion.\n<p>With no block given and no argument, returns …\n"],["none?","Enumerable","Enumerable.html#method-i-none-3F","(*args)","<p>Returns whether no element meets a given criterion.\n<p>With no argument and no block, returns whether no …\n"],["none?","Gem::Requirement","Gem/Requirement.html#method-i-none-3F","()","<p>true if this gem has no requirements.\n"],["nonterminal?","Racc::Sym","Racc/Sym.html#method-i-nonterminal-3F","()",""],["nonterminal_base","Racc::Grammar","Racc/Grammar.html#method-i-nonterminal_base","()",""],["nonterminals","Racc::SymbolTable","Racc/SymbolTable.html#method-i-nonterminals","()",""],["nonzero?","BigDecimal","BigDecimal.html#method-i-nonzero-3F","()","<p>Returns self if the value is non-zero, nil otherwise.\n"],["nonzero?","Numeric","Numeric.html#method-i-nonzero-3F","()","<p>Returns <code>self</code> if <code>self</code> is not a zero value, <code>nil</code> otherwise; uses method <code>zero?</code> for the evaluation.\n<p>The returned …\n"],["normal_char","Reline::LineEditor","Reline/LineEditor.html#method-i-normal_char","(key)",""],["normalize","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-normalize","(str)",""],["normalize","Gem::Specification","Gem/Specification.html#method-i-normalize","()","<p>Normalize the list of files so that:\n<p>All file lists have redundancies removed.\n<p>Files referenced in the …\n"],["normalize","Gem::UriFormatter","Gem/UriFormatter.html#method-i-normalize","()","<p>Normalize the URI by adding “http://” if it is missing.\n"],["normalize","IRB::Vec","IRB/Vec.html#method-i-normalize","()",""],["normalize","RDoc::Comment","RDoc/Comment.html#method-i-normalize","()","<p>Normalizes the text.  See RDoc::Text#normalize_comment for details\n"],["normalize","URI::Generic","URI/Generic.html#method-i-normalize","()","<p>Returns normalized URI.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;uri&#39;</span>\n\n<span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&quot;HTTP://my.EXAMPLE.com&quot;</span>).<span class=\"ruby-identifier\">normalize</span>\n<span class=\"ruby-comment\">#=&gt; #&lt;URI::HTTP http://my.example.com/&gt;</span>\n</pre>\n"],["normalize!","URI::Generic","URI/Generic.html#method-i-normalize-21","()","<p>Destructive version of #normalize.\n"],["normalize_comment","RDoc::Text","RDoc/Text.html#method-i-normalize_comment","(text)","<p>Strips hashes, expands tabs then flushes <code>text</code> to the left\n"],["normalize_converters","CSV","CSV.html#method-i-normalize_converters","(converters)",""],["normalize_path","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-normalize_path","(path)",""],["normalize_path","Gem::Package","Gem/Package.html#method-i-normalize_path","(pathname)",""],["normalize_yaml_input","Gem::Specification","Gem/Specification.html#method-c-normalize_yaml_input","(input)","<p>Make sure the YAML specification is properly formatted with dashes\n"],["normalized_file_list","RDoc::RDoc","RDoc/RDoc.html#method-i-normalized_file_list","(relative_files, force_doc = false, exclude_pattern = nil)","<p>Given a list of files and directories, create a list of all the Ruby files they contain.\n<p>If <code>force_doc</code> …\n"],["normalized_linux_version","Gem::Platform","Gem/Platform.html#method-i-normalized_linux_version","()",""],["not!","IO::Buffer","IO/Buffer.html#method-i-not-21","()","<p>Modify the source buffer in place by applying the binary NOT operation to the source.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-constant\">IO</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Buffer</span>.<span class=\"ruby-identifier\">for</span>(<span class=\"ruby-string\">&quot;1234567890&quot;</span>).<span class=\"ruby-identifier\">dup</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["not_after","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-not_after","()",""],["not_after=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-not_after-3D","(p1)",""],["not_before","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-not_before","()",""],["not_before=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-not_before-3D","(p1)",""],["not_empty?","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-i-not_empty-3F","()","<p>Opposite of ‘empty?` (note: different than `visible?`)\n"],["not_found","RDoc::Servlet","RDoc/Servlet.html#method-i-not_found","(generator, req, res, message = nil)","<p>Returns a 404 page built by <code>generator</code> for <code>req</code> on <code>res</code>.\n"],["note","RDoc::Markdown","RDoc/Markdown.html#method-i-note","(label)","<p>Stores <code>label</code> as a note and fills in previously unknown note references.\n"],["note_for","RDoc::Markdown","RDoc/Markdown.html#method-i-note_for","(ref)","<p>Creates a new link for the footnote <code>reference</code> and adds the reference to\nthe note order list for proper ...\n"],["notes","RDoc::Markdown","RDoc/Markdown.html#method-i-notes","","<p>Enables the notes extension\n"],["notice","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-notice","()",""],["notify","Rinda::NotifyTemplateEntry","Rinda/NotifyTemplateEntry.html#method-i-notify","(ev)","<p>Called by TupleSpace to notify this NotifyTemplateEntry of a new event.\n"],["notify","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-notify","(event, tuple, sec=nil)","<p>Registers for notifications of <code>event</code>.  Returns a NotifyTemplateEntry. See NotifyTemplateEntry for examples …\n"],["notify","Rinda::TupleSpaceProxy","Rinda/TupleSpaceProxy.html#method-i-notify","(ev, tuple, sec=nil)","<p>Registers for notifications of event <code>ev</code> on the proxied TupleSpace. See TupleSpace#notify\n"],["notify?","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-notify-3F","()","<p>A wrapper method used to determine whether notifications are enabled.\n<p>Defaults to <code>true</code>.\n"],["notify?","IRB::Notifier::LeveledNotifier","IRB/Notifier/LeveledNotifier.html#method-i-notify-3F","()","<p>Whether to output messages to the output method, depending on the level of this notifier object.\n"],["notify?","IRB::Notifier::NoMsgNotifier","IRB/Notifier/NoMsgNotifier.html#method-i-notify-3F","()","<p>Ensures notifications are ignored, see AbstractNotifier#notify? for more information.\n"],["notify_event","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-notify_event","(event, tuple)","<p>Notifies all registered listeners for <code>event</code> of a status change of <code>tuple</code>.\n"],["notify_observers","DRb::DRbObservable","DRb/DRbObservable.html#method-i-notify_observers","(*arg)","<p>Notifies observers of a change in state.  See also Observable#notify_observers\n"],["notify_observers","Observable","Observable.html#method-i-notify_observers","(*arg)","<p>Notify observers of a change in state <strong>if</strong> this object’s changed state is <code>true</code>.\n<p>This will invoke the …\n"],["now","DateTime","DateTime.html#method-c-now","(p1 = v1)","<p>Creates a DateTime object denoting the present time.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">now</span>              <span class=\"ruby-comment\">#=&gt; #&lt;DateTime: 2011-06-11T21:20:44+09:00 ...</span>\n</pre>\n"],["now","Time","Time.html#method-c-now","(in: nil)","<p>Creates a new Time object from the current system time. This is the same as Time.new without arguments. …\n"],["npn_protocol","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-npn_protocol","()","<p>Returns the protocol string that was finally selected by the client during the handshake.\n"],["nprocessors","Etc","Etc.html#method-c-nprocessors","()","<p>Returns the number of online processors.\n<p>The result is intended as the number of processes to use all …\n"],["nread","IO","IO.html#method-i-nread","()","<p>Returns number of bytes that can be read without blocking. Returns zero if no information available. …\n"],["nsec","Time","Time.html#method-i-nsec","()","<p>Returns the number of nanoseconds in the subseconds part of <code>self</code> in the range (0..999_999_999); lower-order …\n"],["nt_max","Racc::SymbolTable","Racc/SymbolTable.html#method-i-nt_max","()",""],["ntop","IPAddr","IPAddr.html#method-c-ntop","(addr)","<p>Convert a network byte ordered string form of an IP address into human readable form.\n"],["null","Gem::NameTuple","Gem/NameTuple.html#method-c-null","()","<p>A null NameTuple, ie name=nil, version=0\n"],["null","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-null","(&block)",""],["null=","Racc::Rule","Racc/Rule.html#method-i-null-3D","(n)",""],["null=","Racc::Sym","Racc/Sym.html#method-i-null-3D","(n)",""],["null?","Fiddle::Pointer","Fiddle/Pointer.html#method-i-null-3F","()","<p>Returns <code>true</code> if this is a null pointer.\n"],["null?","IO::Buffer","IO/Buffer.html#method-i-null-3F","()","<p>If the buffer was freed with #free or was never allocated in the first place.\n"],["nullable?","Racc::Rule","Racc/Rule.html#method-i-nullable-3F","()",""],["nullable?","Racc::Sym","Racc/Sym.html#method-i-nullable-3F","()",""],["num_bits","OpenSSL::BN","OpenSSL/BN.html#method-i-num_bits","()",""],["num_bytes","OpenSSL::BN","OpenSSL/BN.html#method-i-num_bytes","()",""],["num_waiting","Thread::Queue","Thread/Queue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["num_waiting","Thread::SizedQueue","Thread/SizedQueue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["numerator","Complex","Complex.html#method-i-numerator","()","<p>Returns the numerator.\n\n<pre>    1   2       3+4i  &lt;-  numerator\n    - + -i  -&gt;  ----\n    2   3        6    ...</pre>\n"],["numerator","Float","Float.html#method-i-numerator","()","<p>Returns the numerator.  The result is machine dependent.\n\n<pre>n = 0.3.numerator    #=&gt; 5404319552844595\nd = ...</pre>\n"],["numerator","Integer","Integer.html#method-i-numerator","()","<p>Returns self.\n"],["numerator","Numeric","Numeric.html#method-i-numerator","()","<p>Returns the numerator.\n"],["numerator","Rational","Rational.html#method-i-numerator","()","<p>Returns the numerator.\n\n<pre>Rational(7).numerator        #=&gt; 7\nRational(7, 1).numerator     #=&gt; 7\nRational(9, ...</pre>\n"],["oauth_basic?","Gem::Uri","Gem/Uri.html#method-i-oauth_basic-3F","()",""],["object_address_group","PP::PPMethods","PP/PPMethods.html#method-i-object_address_group","(obj, &block)","<p>A convenience method, like object_group, but also reformats the Object’s object_id.\n"],["object_class","RDoc::TopLevel","RDoc/TopLevel.html#method-i-object_class","()","<p>Returns the NormalClass “Object”, creating it if not found.\n<p>Records <code>self</code> as a location in “Object”. …\n"],["object_group","PP::PPMethods","PP/PPMethods.html#method-i-object_group","(obj)","<p>A convenience method which is same as follows:\n\n<pre>group(1, &#39;#&lt;&#39; + obj.class.name, &#39;&gt;&#39;) { ... }</pre>\n"],["object_id","Object","Object.html#method-i-object_id","()","<p>Returns an integer identifier for <code>obj</code>.\n<p>The same number will be returned on all calls to <code>object_id</code> for …\n"],["object_nl","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-object_nl","()","<p>This string is put at the end of a line that holds a JSON object (or Hash).\n"],["object_nl=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-object_nl-3D","(p1)","<p>This string is put at the end of a line that holds a JSON object (or Hash).\n"],["ocsp_uris","OpenSSL::X509::Extension::AuthorityInfoAccess","OpenSSL/X509/Extension/AuthorityInfoAccess.html#method-i-ocsp_uris","()","<p>Get the URIs for OCSP from the certificate’s authority information access extension exteension, as …\n"],["oct","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-oct","(num, len)",""],["oct","String","String.html#method-i-oct","()","<p>Interprets the leading substring of <code>self</code> as a string of octal digits (with an optional sign) and returns …\n"],["oct_or_256based","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-oct_or_256based","(str)",""],["odd?","Integer","Integer.html#method-i-odd-3F","()","<p>Returns <code>true</code> if <code>int</code> is an odd number.\n"],["odd?","OpenSSL::BN","OpenSSL/BN.html#method-i-odd-3F","()",""],["of","RubyVM::AbstractSyntaxTree","RubyVM/AbstractSyntaxTree.html#method-c-of","(body, keep_script_lines: false, error_tolerant: false, keep_tokens: false)","<p>Returns AST nodes of the given <em>proc</em> or <em>method</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RubyVM</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AbstractSyntaxTree</span>.<span class=\"ruby-identifier\">of</span>(<span class=\"ruby-identifier\">proc</span> {<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">2</span>})\n<span class=\"ruby-comment\"># =&gt; #&lt;RubyVM::AbstractSyntaxTree::Node:SCOPE@1:35-1:42&gt; ...</span>\n</pre>\n"],["of","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-of","(p1)","<p>Returns the instruction sequence containing the given proc or method.\n<p>For example, using irb:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># a proc ...</span>\n</pre>\n"],["off_event","WIN32OLE::Event","WIN32OLE/Event.html#method-i-off_event","(p1 = v1)","<p>removes the callback of event.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ie</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;InternetExplorer.Application&#39;</span>)\n<span class=\"ruby-identifier\">ev</span> = <span class=\"ruby-constant\">WIN32OLE_EVENT</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">ie</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["offset","DateTime","DateTime.html#method-i-offset","()","<p>Returns the offset.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-string\">&#39;04pm+0730&#39;</span>).<span class=\"ruby-identifier\">offset</span>        <span class=\"ruby-comment\">#=&gt; (5/16)</span>\n</pre>\n"],["offset","MatchData","MatchData.html#method-i-offset","(p1)","<p>Returns a 2-element array containing the beginning and ending offsets (in characters) of the specified …\n"],["offset_vtbl","WIN32OLE::Method","WIN32OLE/Method.html#method-i-offset_vtbl","()","<p>Returns the offset ov VTBL.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Workbooks&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["oflush","IO","IO.html#method-i-oflush","()","<p>Flushes output buffer in kernel.\n<p>You must require ‘io/console’ to use this method.\n"],["oid","OpenSSL::ASN1::ObjectId","OpenSSL/ASN1/ObjectId.html#method-i-oid","()","<p>Returns a String representing the Object Identifier in the dot notation, e.g. “1.2.3.4.5”\n"],["oid","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-oid","()","<p>Returns the short name of the OID associated with <em>pkey</em>.\n"],["oid","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-i-oid","()",""],["oid","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-oid","()",""],["oid=","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-i-oid-3D","(p1)",""],["oid=","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-oid-3D","(p1)",""],["ok?","Gem::DependencyList","Gem/DependencyList.html#method-i-ok-3F","()","<p>Are all the dependencies in the list satisfied?\n"],["ok?","Win32::SSPI::SSPIResult","Win32/SSPI/SSPIResult.html#method-i-ok-3F","()",""],["ok_to_remove?","Gem::DependencyList","Gem/DependencyList.html#method-i-ok_to_remove-3F","(full_name, check_dev=true)","<p>It is ok to remove a gemspec from the dependency list?\n<p>If removing the gemspec creates breaks a currently …\n"],["oldest_supported_version","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-oldest_supported_version","()","<p>Oldest version we support downgrading to. This is the version that originally ships with the first patch …\n"],["ole_activex_initialize","WIN32OLE","WIN32OLE.html#method-i-ole_activex_initialize","()","<p>Initialize WIN32OLE object(ActiveX Control) by calling IPersistMemory::InitNew.\n<p>Before calling OLE method, …\n"],["ole_classes","WIN32OLE::Type","WIN32OLE/Type.html#method-c-ole_classes","(p1)","<p>Returns array of WIN32OLE_TYPE objects defined by the <em>typelib</em> type library. This method will be OBSOLETE …\n"],["ole_classes","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-i-ole_classes","()","<p>Returns the type library file path.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tlib</span> = <span class=\"ruby-constant\">WIN32OLE_TYPELIB</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ole_free","WIN32OLE","WIN32OLE.html#method-i-ole_free","()","<p>invokes Release method of Dispatch interface of WIN32OLE object. Usually, you do not need to call this …\n"],["ole_free","WIN32OLE","WIN32OLE.html#method-c-ole_free","(p1)","<p>Invokes Release method of Dispatch interface of WIN32OLE object. You should not use this method because …\n"],["ole_func_methods","WIN32OLE","WIN32OLE.html#method-i-ole_func_methods","()","<p>Returns the array of WIN32OLE_METHOD object . The element of the array is property (settable) of WIN32OLE …\n"],["ole_get_methods","WIN32OLE","WIN32OLE.html#method-i-ole_get_methods","()","<p>Returns the array of WIN32OLE_METHOD object . The element of the array is property (gettable) of WIN32OLE …\n"],["ole_instance_variable_get","WIN32OLE::Record","WIN32OLE/Record.html#method-i-ole_instance_variable_get","(p1)","<p>Returns value specified by the member name of VT_RECORD OLE object. If the member name is not correct, …\n"],["ole_instance_variable_set","WIN32OLE::Record","WIN32OLE/Record.html#method-i-ole_instance_variable_set","(p1, p2)","<p>Sets value specified by the member name of VT_RECORD OLE object. If the member name is not correct,  …\n"],["ole_method","WIN32OLE","WIN32OLE.html#method-i-ole_method","(p1)","<p>Returns WIN32OLE_METHOD object corresponding with method specified by 1st argument.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">excel</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Excel.Application&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ole_method_help","WIN32OLE","WIN32OLE.html#method-i-ole_method_help","(p1)","<p>Returns WIN32OLE_METHOD object corresponding with method specified by 1st argument.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">excel</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Excel.Application&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ole_methods","WIN32OLE","WIN32OLE.html#method-i-ole_methods","()","<p>Returns the array of WIN32OLE_METHOD object. The element is OLE method of WIN32OLE object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">excel</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Excel.Application&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ole_methods","WIN32OLE::Type","WIN32OLE/Type.html#method-i-ole_methods","()","<p>Returns array of WIN32OLE_METHOD objects which represent OLE method defined in OLE type library.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ole_methods_safely","WIN32OLE","WIN32OLE.html#method-i-ole_methods_safely","()",""],["ole_obj_help","WIN32OLE","WIN32OLE.html#method-i-ole_obj_help","()","<p>Returns WIN32OLE_TYPE object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">excel</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Excel.Application&#39;</span>)\n<span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-identifier\">excel</span>.<span class=\"ruby-identifier\">ole_type</span>\n</pre>\n"],["ole_put_methods","WIN32OLE","WIN32OLE.html#method-i-ole_put_methods","()","<p>Returns the array of WIN32OLE_METHOD object . The element of the array is property (settable) of WIN32OLE …\n"],["ole_query_interface","WIN32OLE","WIN32OLE.html#method-i-ole_query_interface","(p1)","<p>Returns WIN32OLE object for a specific dispatch or dual interface specified by iid.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ie</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;InternetExplorer.Application&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ole_reference_count","WIN32OLE","WIN32OLE.html#method-c-ole_reference_count","(p1)","<p>Returns reference counter of Dispatch interface of WIN32OLE object. You should not use this method because …\n"],["ole_respond_to?","WIN32OLE","WIN32OLE.html#method-i-ole_respond_to-3F","(p1)","<p>Returns true when OLE object has OLE method, otherwise returns false.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ie</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;InternetExplorer.Application&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ole_show_help","WIN32OLE","WIN32OLE.html#method-c-ole_show_help","(p1, p2 = v2)","<p>Displays helpfile. The 1st argument specifies WIN32OLE_TYPE object or WIN32OLE_METHOD object or helpfile. …\n"],["ole_type","WIN32OLE","WIN32OLE.html#method-i-ole_type","()","<p>Returns WIN32OLE_TYPE object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">excel</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Excel.Application&#39;</span>)\n<span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-identifier\">excel</span>.<span class=\"ruby-identifier\">ole_type</span>\n</pre>\n"],["ole_type","WIN32OLE::Param","WIN32OLE/Param.html#method-i-ole_type","()","<p>Returns OLE type of WIN32OLE_PARAM object(parameter of OLE method).\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["ole_type","WIN32OLE::Type","WIN32OLE/Type.html#method-i-ole_type","()","<p>returns type of OLE class.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Application&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ole_type","WIN32OLE::Variable","WIN32OLE/Variable.html#method-i-ole_type","()","<p>Returns OLE type string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;XlSheetType&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ole_type_detail","WIN32OLE::Param","WIN32OLE/Param.html#method-i-ole_type_detail","()","<p>Returns detail information of type of argument.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["ole_type_detail","WIN32OLE::Variable","WIN32OLE/Variable.html#method-i-ole_type_detail","()","<p>Returns detail information of type. The information is array of type.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;DirectX ...</pre>\n"],["ole_typelib","WIN32OLE","WIN32OLE.html#method-i-ole_typelib","()","<p>Returns the WIN32OLE_TYPELIB object. The object represents the type library which contains the WIN32OLE …\n"],["ole_typelib","WIN32OLE::Type","WIN32OLE/Type.html#method-i-ole_typelib","()","<p>Returns the WIN32OLE_TYPELIB object which is including the WIN32OLE_TYPE object. If it is not found, …\n"],["ole_types","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-i-ole_types","()","<p>Returns the type library file path.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tlib</span> = <span class=\"ruby-constant\">WIN32OLE_TYPELIB</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["on","OptionParser","OptionParser.html#method-i-on","(*opts, &block)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["on_CHAR","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_CHAR","(tok, data)",""],["on_alias_error","SyntaxSuggest::RipperErrors","SyntaxSuggest/RipperErrors.html#method-i-on_alias_error","(msg)",""],["on_assign_error","SyntaxSuggest::RipperErrors","SyntaxSuggest/RipperErrors.html#method-i-on_assign_error","(msg)",""],["on_backref","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_backref","(tok, data)",""],["on_class_name_error","SyntaxSuggest::RipperErrors","SyntaxSuggest/RipperErrors.html#method-i-on_class_name_error","(msg)",""],["on_comma","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_comma","(tok, data)",""],["on_comment","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_comment","(tok, data)",""],["on_connect","Net::HTTP","Net/HTTP.html#method-i-on_connect","()",""],["on_const","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_const","(tok, data)",""],["on_curve?","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-on_curve-3F","()",""],["on_cvar","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_cvar","(tok, data)",""],["on_default","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_default","(event, tok, data)",""],["on_default","Ripper::Filter","Ripper/Filter.html#method-i-on_default","(event, token, data)","<p>This method is called when some event handler is undefined. <code>event</code> is :on_XXX, <code>token</code> is the scanned token, …\n"],["on_error","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-i-on_error","(tok, val, _values)",""],["on_error","Racc::Parser","Racc/Parser.html#method-i-on_error","(t, val, vstack)","<p>This method is called when a parse error is found.\n<p>ERROR_TOKEN_ID is an internal ID of token which caused …\n"],["on_event","WIN32OLE::Event","WIN32OLE/Event.html#method-i-on_event","(*args)","<p>Defines the callback event. If argument is omitted, this method defines the callback of all events.  …\n"],["on_event_with_outargs","WIN32OLE::Event","WIN32OLE/Event.html#method-i-on_event_with_outargs","(*args)","<p>Defines the callback of event. If you want modify argument in callback, you could use this method instead …\n"],["on_falling_indent","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-on_falling_indent","()",""],["on_float","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_float","(tok, data)",""],["on_gvar","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_gvar","(tok, data)",""],["on_head","OptionParser","OptionParser.html#method-i-on_head","(*opts, &block)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["on_heredoc_beg","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_heredoc_beg","(tok, data)",""],["on_heredoc_end","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_heredoc_end","(tok, data)",""],["on_ident","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_ident","(tok, data)",""],["on_ignored_nl","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_ignored_nl","(tok, data)",""],["on_ignored_sp","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_ignored_sp","(tok, data)",""],["on_imaginary","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_imaginary","(tok, data)",""],["on_int","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_int","(tok, data)",""],["on_ivar","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_ivar","(tok, data)",""],["on_kw","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_kw","(tok, data)",""],["on_lbrace","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_lbrace","(tok, data)",""],["on_lbracket","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_lbracket","(tok, data)",""],["on_lparen","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_lparen","(tok, data)",""],["on_nl","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_nl","(tok, data)",""],["on_op","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_op","(tok, data)",""],["on_param_error","SyntaxSuggest::RipperErrors","SyntaxSuggest/RipperErrors.html#method-i-on_param_error","(msg)",""],["on_parse_error","SyntaxSuggest::RipperErrors","SyntaxSuggest/RipperErrors.html#method-i-on_parse_error","(msg)","<p>Comes from ripper, called on every parse error, msg is a string\n"],["on_period","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_period","(tok, data)",""],["on_rational","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_rational","(tok, data)",""],["on_rbrace","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_rbrace","(tok, data)",""],["on_rbracket","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_rbracket","(tok, data)",""],["on_rparen","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_rparen","(tok, data)",""],["on_sp","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_sp","(tok, data)",""],["on_symbeg","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_symbeg","(tok, data)",""],["on_tail","OptionParser","OptionParser.html#method-i-on_tail","(*opts, &block)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["on_tstring_beg","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_tstring_beg","(tok, data)",""],["on_tstring_end","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_tstring_end","(tok, data)",""],["on_variables","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_variables","(event, tok, data)",""],["on_windows?","PStore","PStore.html#method-i-on_windows-3F","()",""],["once_writer","Racc::Sym","Racc/Sym.html#method-c-once_writer","(nm)",""],["one?","Array","Array.html#method-i-one-3F","(*args)","<p>Returns <code>true</code> if exactly one element of <code>self</code> meets a given criterion.\n<p>With no block given and no argument, …\n"],["one?","Enumerable","Enumerable.html#method-i-one-3F","(*args)","<p>Returns whether exactly one element meets a given criterion.\n<p>With no argument and no block, returns whether …\n"],["one?","OpenSSL::BN","OpenSSL/BN.html#method-i-one-3F","()",""],["ongoing_visibility=","RDoc::Context","RDoc/Context.html#method-i-ongoing_visibility-3D","(visibility)","<p>Changes the visibility for new methods to <code>visibility</code>\n"],["opaque=","URI::Generic","URI/Generic.html#method-i-opaque-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["open","CSV","CSV.html#method-c-open","(filename, mode=\"r\", **options)","<p>possible options elements:\n\n<pre>keyword form:\n  :invalid =&gt; nil      # raise error on invalid byte sequence ...</pre>\n"],["open","DRb::DRbProtocol","DRb/DRbProtocol.html#method-i-open","(uri, config, first=true)","<p>Open a client connection to <code>uri</code> with the configuration <code>config</code>.\n<p>The DRbProtocol module asks each registered …\n"],["open","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-open","(uri, config, first=true)","<p>Open a client connection to <code>uri</code> with the configuration <code>config</code>.\n<p>The DRbProtocol module asks each registered …\n"],["open","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-open","(uri, config)","<p>Return an DRb::DRbSSLSocket instance as a client-side connection, with the SSL connected.  This is called …\n"],["open","Dir","Dir.html#method-c-open","(name, encoding: nil, &block)","<p>The optional <em>encoding</em> keyword argument specifies the encoding of the directory. If not specified, the …\n"],["open","File","File.html#method-c-open","(*args)","<p>Creates a new File object, via File.new with the given arguments.\n<p>With no block given, returns the File …\n"],["open","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-c-open","(header, io, &block)","<p>Creates a new tar entry for <code>header</code> that will be read from <code>io</code> If a block is given, the entry is yielded …\n"],["open","IO","IO.html#method-c-open","(*args)","<p>Creates a new IO object, via IO.new with the given arguments.\n<p>With no block given, returns the IO object. …\n"],["open","IRB::FileInputMethod","IRB/FileInputMethod.html#method-c-open","(file, &block)",""],["open","IRB::MagicFile","IRB/MagicFile.html#method-c-open","(path)",""],["open","Kernel","Kernel.html#method-i-open","(*args)","<p>Creates an IO object connected to the given stream, file, or subprocess.\n<p>Required string argument <code>path</code> …\n"],["open","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-c-open","(remote_host, remote_port, local_host=nil, local_port=nil, context: nil)","<p>Creates a new instance of SSLSocket. <em>remote</em>host_ and <em>remote</em>port_ are used to open TCPSocket. If <em>local</em> …\n"],["open","OpenURI::OpenRead","OpenURI/OpenRead.html#method-i-open","(*rest, &block)","<p>OpenURI::OpenRead#open provides ‘open’ for URI::HTTP and URI::FTP.\n<p>OpenURI::OpenRead#open takes optional …\n"],["open","PTY","PTY.html#method-c-open","()","<p>Allocates a pty (pseudo-terminal).\n<p>In the block form, yields an array of two elements (<code>master_io, slave_file</code> …\n"],["open","Pathname","Pathname.html#method-i-open","(p1 = v1, p2 = v2, p3 = v3)","<p>Opens the file for reading or writing.\n<p>See File.open.\n"],["open","Resolv::DNS","Resolv/DNS.html#method-c-open","(*args)","<p>Creates a new DNS resolver.  See Resolv::DNS.new for argument details.\n<p>Yields the created DNS resolver …\n"],["open","StringIO","StringIO.html#method-c-open","(*args)","<p>Note that <code>mode</code> defaults to <code>&#39;r&#39;</code> if <code>string</code> is frozen.\n<p>Creates a new StringIO instance formed from …\n"],["open","Syslog","Syslog.html#method-c-open","(p1 = v1, p2 = v2, p3 = v3)","<p>Open the syslog facility. Raises a runtime exception if it is already open.\n<p>Can be called with or without …\n"],["open","Tempfile","Tempfile.html#method-c-open","(*args, **kw)","<p>Creates a new Tempfile.\n<p>This method is not recommended and exists mostly for backward compatibility.  …\n"],["open","Tempfile","Tempfile.html#method-i-open","()","<p>Opens or reopens the file with mode “r+”.\n"],["open","URI","URI.html#method-c-open","(name, *rest, &block)","<p>Allows the opening of various resources including URIs.\n<p>If the first argument responds to the ‘open’ …\n"],["open","Win32::Registry","Win32/Registry.html#method-c-open","(hkey, subkey, desired = KEY_READ, opt = REG_OPTION_RESERVED)","<p>— Registry.open(key, subkey, desired = KEY_READ, opt = REG_OPTION_RESERVED)\n<p>— Registry.open(key, subkey, …\n"],["open","Win32::Registry","Win32/Registry.html#method-i-open","(subkey, desired = KEY_READ, opt = REG_OPTION_RESERVED, &blk)","<p>Same as Win32::Registry.open (self, subkey, desired, opt)\n"],["open","Zlib::GzipReader","Zlib/GzipReader.html#method-c-open","(*args)","<p>Opens a file specified by <code>filename</code> as a gzipped file, and returns a GzipReader object associated with …\n"],["open","Zlib::GzipWriter","Zlib/GzipWriter.html#method-c-open","(*args)","<p>Opens a file specified by <code>filename</code> for writing gzip compressed data, and returns a GzipWriter object …\n"],["open!","Syslog","Syslog.html#method-c-open-21","(*args)","<p>Closes and then reopens the syslog.\n<p>Arguments are the same as for open().\n"],["open?","Win32::Registry","Win32/Registry.html#method-i-open-3F","()","<p>Returns if key is not closed.\n"],["open_and_lock_file","PStore","PStore.html#method-i-open_and_lock_file","(filename, read_only)","<p>Open the specified filename (either in read-only mode or in read-write mode) and lock it for reading …\n"],["open_cert","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-open_cert","(certificate_file)",""],["open_editor","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-open_editor","(path)",""],["open_file","Gem","Gem.html#method-c-open_file","(path, flags, &block)","<p>Open a file with given flags, and on Windows protect access with flock\n"],["open_gem","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-open_gem","(name)",""],["open_logfile","Logger::LogDevice","Logger/LogDevice.html#method-i-open_logfile","(filename)",""],["open_private_key","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-open_private_key","(key_file)",""],["open_server","DRb::DRbProtocol","DRb/DRbProtocol.html#method-i-open_server","(uri, config, first=true)","<p>Open a server listening for connections at <code>uri</code> with configuration <code>config</code>.\n<p>The DRbProtocol module asks …\n"],["open_server","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-open_server","(uri, config, first=true)","<p>Open a server listening for connections at <code>uri</code> with configuration <code>config</code>.\n<p>The DRbProtocol module asks …\n"],["open_server","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-open_server","(uri, config)","<p>Returns a DRb::DRbSSLSocket instance as a server-side connection, with the SSL connected.  This is called …\n"],["opendir","Pathname","Pathname.html#method-i-opendir","()","<p>Opens the referenced directory.\n<p>See Dir.open.\n"],["opened?","Syslog","Syslog.html#method-c-opened-3F","()","<p>Returns true if the syslog is open.\n"],["operating_system_defaults","Gem","Gem.html#method-c-operating_system_defaults","()","<p>Default options for gem commands for Ruby packagers.\n<p>The options here should be structured as an array …\n"],["option","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-option","(sym, default = nil, &block)",""],["option_is_deprecated?","Gem::Command","Gem/Command.html#method-i-option_is_deprecated-3F","(option)",""],["option_list","RDoc::Task","RDoc/Task.html#method-i-option_list","()","<p>List of options that will be supplied to RDoc\n"],["optional?","WIN32OLE::Param","WIN32OLE/Param.html#method-i-optional-3F","()","<p>Returns true if argument is optional.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Workbook&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["options","FileUtils","FileUtils.html#method-c-options","()","<p>Returns an array of the string keyword names:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">options</span>.<span class=\"ruby-identifier\">take</span>(<span class=\"ruby-value\">3</span>) <span class=\"ruby-comment\"># =&gt; [&quot;noop&quot;, &quot;verbose&quot;, &quot;force&quot;]</span>\n</pre>\n"],["options","Net::HTTP","Net/HTTP.html#method-i-options","(path, initheader = nil)","<p>Sends a OPTIONS request to the <code>path</code> and gets a response, as an HTTPResponse object.\n"],["options","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-options","()","<p>Gets various OpenSSL options.\n"],["options","OptionParser::Arguable","OptionParser/Arguable.html#method-i-options","()","<p>Actual OptionParser object, automatically created if nonexistent.\n<p>If called with a block, yields the  …\n"],["options","RDoc::CodeObject","RDoc/CodeObject.html#method-i-options","()","<p>The options instance from the store this CodeObject is attached to, or a default options instance if …\n"],["options","Regexp","Regexp.html#method-i-options","()","<p>Returns an integer whose bits show the options set in <code>self</code>.\n<p>The option bits are:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Regexp</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">IGNORECASE</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["options","Syslog","Syslog.html#method-c-options","()","<p>Returns the options bitmask used in the last call to open()\n"],["options=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-options-3D","(p1)","<p>Sets various OpenSSL options.\n"],["options=","OptionParser::Arguable","OptionParser/Arguable.html#method-i-options-3D","(opt)","<p>Sets OptionParser object, when <code>opt</code> is <code>false</code> or <code>nil</code>, methods OptionParser::Arguable#options and OptionParser::Arguable#options= …\n"],["options_of","FileUtils","FileUtils.html#method-c-options_of","(mid)","<p>Returns an array of the string keyword name for method <code>mid</code>; the argument may be a string or a symbol: …\n"],["optname","Socket::Option","Socket/Option.html#method-i-optname","()","<p>returns the socket option name as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Option</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:INET6</span>, <span class=\"ruby-value\">:IPV6</span>, <span class=\"ruby-value\">:RECVPKTINFO</span>, [<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">pack</span>(<span class=\"ruby-string\">&quot;i!&quot;</span>)).<span class=\"ruby-identifier\">optname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["or!","IO::Buffer","IO/Buffer.html#method-i-or-21","(p1)","<p>Modify the source buffer in place by applying the binary OR operation to the source, using the mask, …\n"],["ord","Integer","Integer.html#method-i-ord","()","<p>Returns the <code>int</code> itself.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">97</span>.<span class=\"ruby-identifier\">ord</span>   <span class=\"ruby-comment\">#=&gt; 97</span>\n</pre>\n<p>This method is intended for compatibility to character literals …\n"],["ord","String","String.html#method-i-ord","()","<p>Returns the integer ordinal of the first character of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;h&#39;</span>.<span class=\"ruby-identifier\">ord</span>         <span class=\"ruby-comment\"># =&gt; 104</span>\n<span class=\"ruby-string\">&#39;hello&#39;</span>.<span class=\"ruby-identifier\">ord</span>     <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["order","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-order","()","<p>Returns the order of the group.\n<p>See the OpenSSL documentation for EC_GROUP_get_order()\n"],["order","OptionParser","OptionParser.html#method-i-order","(*argv, into: nil, &nonopt)","<p>Parses command line arguments <code>argv</code> in order. When a block is given, each non-option argument is yielded. …\n"],["order!","OptionParser","OptionParser.html#method-i-order-21","(argv = default_argv, into: nil, &nonopt)","<p>Same as #order, but removes switches destructively. Non-option arguments remain in <code>argv</code>.\n"],["order!","OptionParser::Arguable","OptionParser/Arguable.html#method-i-order-21","(&blk)","<p>Parses <code>self</code> destructively in order and returns <code>self</code> containing the rest arguments left unparsed.\n"],["ordering","OpenSSL::Timestamp::TokenInfo","OpenSSL/Timestamp/TokenInfo.html#method-i-ordering","()","<p>If the ordering field is missing, or if the ordering field is present and set to false, then the genTime …\n"],["ordering=","GetoptLong","GetoptLong.html#method-i-ordering-3D","(ordering)","<p>Sets the ordering; see Ordering; returns the new ordering.\n<p>If the given <code>ordering</code> is <code>PERMUTE</code> and environment …\n"],["ordinal","Date","Date.html#method-c-ordinal","(p1 = v1, p2 = v2, p3 = v3)","<p>Returns a new Date object formed fom the arguments.\n<p>With no arguments, returns the date for January 1, …\n"],["ordinal","DateTime","DateTime.html#method-c-ordinal","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7)","<p>Creates a DateTime object denoting the given ordinal date.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">ordinal</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">34</span>) <span class=\"ruby-comment\">#=&gt; #&lt;DateTime: 2001-02-03T00:00:00+00:00 ...</span>\n</pre>\n"],["orig_initialize","RDoc::Markdown","RDoc/Markdown.html#method-i-orig_initialize","(extensions = DEFAULT_EXTENSIONS, debug = false)","<p>TODO remove when kpeg 0.10 is released\n"],["orig_name","Zlib::GzipFile","Zlib/GzipFile.html#method-i-orig_name","()","<p>Returns original filename recorded in the gzip file header, or <code>nil</code> if original filename is not present. …\n"],["orig_name=","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-orig_name-3D","(p1)","<p>Specify the original name (<code>str</code>) in the gzip header.\n"],["origin","URI::HTTP","URI/HTTP.html#method-i-origin","()","<p>Description\n<p>Returns the origin for an HTTP uri, as defined in datatracker.ietf.org/doc/html/rfc6454.\n<p>Example: …\n"],["original_env","Bundler","Bundler.html#method-c-original_env","()","<p>@return [Hash] Environment present before Bundler was activated\n"],["original_exec","Bundler","Bundler.html#method-c-original_exec","(*args)","<p>Run a ‘Kernel.exec` to a subcommand with the environment present before Bundler was activated\n"],["original_message","DidYouMean::Correctable","DidYouMean/Correctable.html#method-i-original_message","()","<p>just for compatibility\n"],["original_name","Method","Method.html#method-i-original_name","()","<p>Returns the original name of the method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">C</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">foo</span>; <span class=\"ruby-keyword\">end</span>\n  <span class=\"ruby-keyword\">alias</span> <span class=\"ruby-identifier\">bar</span> <span class=\"ruby-identifier\">foo</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">C</span>.<span class=\"ruby-identifier\">instance_method</span>(<span class=\"ruby-value\">:bar</span>).<span class=\"ruby-identifier\">original_name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["original_name","UnboundMethod","UnboundMethod.html#method-i-original_name","()","<p>Returns the original name of the method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">C</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">foo</span>; <span class=\"ruby-keyword\">end</span>\n  <span class=\"ruby-keyword\">alias</span> <span class=\"ruby-identifier\">bar</span> <span class=\"ruby-identifier\">foo</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">C</span>.<span class=\"ruby-identifier\">instance_method</span>(<span class=\"ruby-value\">:bar</span>).<span class=\"ruby-identifier\">original_name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["original_system","Bundler","Bundler.html#method-c-original_system","(*args)","<p>Run subcommand with the environment present before Bundler was activated\n"],["os_code","Zlib::GzipFile","Zlib/GzipFile.html#method-i-os_code","()","<p>Returns OS code number recorded in the gzip file header.\n"],["otp","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-otp","()","<p>The OTP code from the command options or from the user’s configuration.\n"],["out","CGI","CGI.html#method-i-out","(options = \"text/html\")","<p>Print an HTTP header and body to $DEFAULT_OUTPUT ($&gt;)\n<p><code>content_type_string</code> &mdash; If a string is passed, it …\n"],["outact","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-outact","(f, t, act)",""],["outdated","Gem::Specification","Gem/Specification.html#method-c-outdated","()","<p>Return a list of all outdated local gem names.  This method is HEAVY as it must go fetch specifications …\n"],["outdated_and_latest_version","Gem::Specification","Gem/Specification.html#method-c-outdated_and_latest_version","()","<p>Enumerates the outdated local gems yielding the local specification and the latest remote version.\n<p>This …\n"],["output","Gem::MockGemUi","Gem/MockGemUi.html#method-i-output","()",""],["output","Gem::Resolver","Gem/Resolver.html#method-i-output","()",""],["output","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-output","()","<p>The {IO} object that should be used to print output. ‘STDOUT`, by default.\n<p>@return [IO]\n"],["output","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-output","(out)",""],["output=","Readline","Readline.html#method-c-output-3D","(p1)","<p>Specifies a File object <code>output</code> that is output stream for Readline.readline method.\n"],["output=","Reline::ANSI","Reline/ANSI.html#method-c-output-3D","(val)",""],["output=","Reline::Core","Reline/Core.html#method-i-output-3D","(val)",""],["output?","WIN32OLE::Param","WIN32OLE/Param.html#method-i-output-3F","()","<p>Returns true if argument is output.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Internet Controls&#39;</span>, <span class=\"ruby-string\">&#39;DWebBrowserEvents&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["output_conflict","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-output_conflict","(out)","<p>Warnings\n"],["output_flag_file","RDoc::RDoc","RDoc/RDoc.html#method-i-output_flag_file","(op_dir)","<p>Return the path name of the flag file in an output directory.\n"],["output_modifier_proc=","Reline::Core","Reline/Core.html#method-i-output_modifier_proc-3D","(p)",""],["output_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-output_name","(context)","<p>Name for output to HTML.  For class methods the full name with a “.” is used like <code>SomeClass.method_name</code> …\n"],["output_query_results","Gem::QueryUtils","Gem/QueryUtils.html#method-i-output_query_results","(spec_tuples)",""],["output_rule","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-output_rule","(out)","<p>Rules\n"],["output_state","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-output_state","(out)","<p>States\n"],["output_token","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-output_token","(out)","<p>Tokens\n"],["output_useless","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-output_useless","(out)",""],["output_versions","Gem::QueryUtils","Gem/QueryUtils.html#method-i-output_versions","(output, versions)",""],["outrrconf","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-outrrconf","(f, confs)",""],["outsrconf","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-outsrconf","(f, confs)",""],["owned?","File","File.html#method-c-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used id of the calling process is the owner of …\n"],["owned?","File::Stat","File/Stat.html#method-i-owned-3F","()","<p>Returns <code>true</code> if the effective user id of the process is the same as the owner of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">owned?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["owned?","FileTest","FileTest.html#method-i-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used id of the calling process is the owner of …\n"],["owned?","Pathname","Pathname.html#method-i-owned-3F","()","<p>See FileTest.owned?.\n"],["owned?","Thread::Mutex","Thread/Mutex.html#method-i-owned-3F","()","<p>Returns <code>true</code> if this lock is currently held by current thread.\n"],["owner","Method","Method.html#method-i-owner","()","<p>Returns the class or module on which this method is defined. In other words,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">meth</span>.<span class=\"ruby-identifier\">owner</span>.<span class=\"ruby-identifier\">instance_methods</span>(<span class=\"ruby-keyword\">false</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-identifier\">meth</span>.<span class=\"ruby-identifier\">name</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["owner","UnboundMethod","UnboundMethod.html#method-i-owner","()","<p>Returns the class or module on which this method is defined. In other words,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">meth</span>.<span class=\"ruby-identifier\">owner</span>.<span class=\"ruby-identifier\">instance_methods</span>(<span class=\"ruby-keyword\">false</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-identifier\">meth</span>.<span class=\"ruby-identifier\">name</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["p","Kernel","Kernel.html#method-i-p","(*args)","<p>For each object <code>obj</code>, executes:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$stdout</span>.<span class=\"ruby-identifier\">write</span>(<span class=\"ruby-identifier\">obj</span>.<span class=\"ruby-identifier\">inspect</span>, <span class=\"ruby-string\">&quot;\\n&quot;</span>)\n</pre>\n<p>With one object given, returns the object; …\n"],["pack","Array","Array.html#method-i-pack","(fmt, buffer: nil)","<p>Formats each element in <code>self</code> into a binary string; returns that string. See Packed Data.\n"],["pack","Racc::States","Racc/States.html#method-i-pack","(state)",""],["pack_sockaddr_in","Socket","Socket.html#method-c-pack_sockaddr_in","(p1, p2)","<p>Packs <em>port</em> and <em>host</em> as an AF_INET/AF_INET6 sockaddr string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">sockaddr_in</span>(<span class=\"ruby-value\">80</span>, <span class=\"ruby-string\">&quot;127.0.0.1&quot;</span>)\n<span class=\"ruby-comment\">#=&gt; &quot;\\x02\\x00\\x00P\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; ...</span>\n</pre>\n"],["pack_sockaddr_un","Socket","Socket.html#method-c-pack_sockaddr_un","(p1)","<p>Packs <em>path</em> as an AF_UNIX sockaddr string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">sockaddr_un</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>) <span class=\"ruby-comment\">#=&gt; &quot;\\x01\\x00/tmp/sock\\x00\\x00...&quot;</span>\n</pre>\n"],["packdw","Win32::Registry::API","Win32/Registry/API.html#method-i-packdw","(dw)",""],["packhandle","Win32::Registry::API","Win32/Registry/API.html#method-i-packhandle","(h)",""],["packqw","Win32::Registry::API","Win32/Registry/API.html#method-i-packqw","(qw)",""],["padding=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-padding-3D","(p1)","<p>Enables or disables padding. By default encryption operations are padded using standard block padding …\n"],["padding_space_with_escape_sequences","Reline::LineEditor","Reline/LineEditor.html#method-i-padding_space_with_escape_sequences","(str, width)",""],["page","RDoc::Store","RDoc/Store.html#method-i-page","(name)","<p>Returns the RDoc::TopLevel that is a text file and has the given <code>name</code>\n"],["page_file","RDoc::Store","RDoc/Store.html#method-i-page_file","(page_name)","<p>Path to the ri data for <code>page_name</code>\n"],["page_name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-page_name","()","<p>Base name of this file without the extension\n"],["pair","Socket","Socket.html#method-c-pair","(p1, p2, p3 = v3)","<p>Creates a pair of sockets connected each other.\n<p><em>domain</em> should be a communications domain such as: :INET, …\n"],["pair","UNIXSocket","UNIXSocket.html#method-c-pair","(p1 = v1, p2 = v2)","<p>Creates a pair of sockets connected to each other.\n<p><em>socktype</em> should be a socket type such as: :STREAM, …\n"],["paragraph","RDoc::Markdown","RDoc/Markdown.html#method-i-paragraph","(parts)","<p>Creates an RDoc::Markup::Paragraph from <code>parts</code> and including\nextension-specific behavior\n"],["param_list","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-param_list","()","<p>A list of this method’s method and yield parameters.  <code>call-seq</code> params are preferred over parsed method …\n"],["param_seq","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-param_seq","()","<p>Pretty parameter list for this method.  If the method’s parameters were given by <code>call-seq</code> it is preferred …\n"],["parameters","Method","Method.html#method-i-parameters","()","<p>Returns the parameter information of this method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">foo</span>(<span class=\"ruby-identifier\">bar</span>); <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:foo</span>).<span class=\"ruby-identifier\">parameters</span> <span class=\"ruby-comment\">#=&gt; [[:req, ...</span>\n</pre>\n"],["parameters","Proc","Proc.html#method-i-parameters","(p1 = {})","<p>Returns the parameter information of this proc.  If the lambda keyword is provided and not nil, treats …\n"],["parameters","TracePoint","TracePoint.html#method-i-parameters","()","<p>Return the parameters definition of the method or block that the current hook belongs to. Format is the …\n"],["parameters","UnboundMethod","UnboundMethod.html#method-i-parameters","()","<p>Returns the parameter information of this method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">foo</span>(<span class=\"ruby-identifier\">bar</span>); <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:foo</span>).<span class=\"ruby-identifier\">parameters</span> <span class=\"ruby-comment\">#=&gt; [[:req, ...</span>\n</pre>\n"],["params","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-params","()","<p>Stores all parameters of key to the hash INSECURE: PRIVATE INFORMATIONS CAN LEAK OUT!!! Don’t use …\n"],["params","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-params","()","<p>Stores all parameters of key to the hash INSECURE: PRIVATE INFORMATIONS CAN LEAK OUT!!! Don’t use …\n"],["params","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-params","()","<p>THIS METHOD IS INSECURE, PRIVATE INFORMATION CAN LEAK OUT!!!\n<p>Stores all parameters of key to the hash. …\n"],["params","WIN32OLE::Method","WIN32OLE/Method.html#method-i-params","()","<p>returns array of WIN32OLE_PARAM object corresponding with method parameters.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["params","Zlib::Deflate","Zlib/Deflate.html#method-i-params","(p1, p2)","<p>Changes the parameters of the deflate stream to allow changes between different types of data that require …\n"],["params=","CGI::QueryExtension","CGI/QueryExtension.html#method-i-params-3D","(hash)","<p>Set all the parameters.\n"],["params_ok?","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-params_ok-3F","()","<p>Validates the Diffie-Hellman parameters associated with this instance. It checks whether a safe prime …\n"],["paranoid","Gem::Indexer","Gem/Indexer.html#method-i-paranoid","(path, extension)","<p>Ensure <code>path</code> and path with <code>extension</code> are identical.\n"],["parent","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-parent","()","<p>Return the ActivationRequest that contained the dependency that we were activated for.\n"],["parent","Pathname","Pathname.html#method-i-parent","()","<p>Returns the parent directory.\n<p>This is same as <code>self + &#39;..&#39;</code>.\n"],["parent","RDoc::CodeObject","RDoc/CodeObject.html#method-i-parent","()","<p>Our parent CodeObject.  The parent may be missing for classes loaded from legacy RI data stores.\n"],["parent_file_name","RDoc::CodeObject","RDoc/CodeObject.html#method-i-parent_file_name","()","<p>File name of our parent\n"],["parent_name","RDoc::CodeObject","RDoc/CodeObject.html#method-i-parent_name","()","<p>Name of our parent\n"],["parent_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-parent_name","()","<p>Name of our parent with special handling for un-marshaled methods\n"],["parent_of","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-parent_of","(requirement)","<p>@param [Object] requirement @return [Object] the requirement that led to ‘requirement` being added\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">to</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parse","CGI","CGI.html#method-c-parse","(query)","<p>Parse an HTTP query string into a hash of key=&gt;value pairs.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">params</span> = <span class=\"ruby-constant\">CGI</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-string\">&quot;query_string&quot;</span>)\n  <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["parse","CGI::Cookie","CGI/Cookie.html#method-c-parse","(raw_cookie)","<p>Parse a raw cookie string into a hash of cookie-name=&gt;Cookie pairs.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">cookies</span> = <span class=\"ruby-constant\">CGI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Cookie</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-string\">&quot;raw_cookie_string&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parse","CSV","CSV.html#method-c-parse","(str, **options, &block)","<p>Parses <code>string</code> or <code>io</code> using the specified <code>options</code>.\n<p>Argument <code>string</code> should be a String object; it will be …\n"],["parse","CSV::Parser","CSV/Parser.html#method-i-parse","(&block)",""],["parse","Date","Date.html#method-c-parse","(p1 = v1, p2 = v2, p3 = v3, p4 = {})","<p><strong>Note</strong>: This method recognizes many forms in <code>string</code>, but it is not a validator. For formats, see “Specialized …\n"],["parse","DateTime","DateTime.html#method-c-parse","(p1 = v1, p2 = v2, p3 = v3, p4 = {})","<p>Parses the given representation of date and time, and creates a DateTime object.\n<p>This method <strong>does</strong> <strong>not</strong> …\n"],["parse","Gem::RequestSet::Lockfile::Parser","Gem/RequestSet/Lockfile/Parser.html#method-i-parse","()",""],["parse","Gem::Requirement","Gem/Requirement.html#method-c-parse","(obj)","<p>Parse <code>obj</code>, returning an <code>[op, version]</code> pair. <code>obj</code> can be a String or a Gem::Version.\n<p>If <code>obj</code> is a String …\n"],["parse","Gem::Resolver::APISet::GemParser","Gem/Resolver/APISet/GemParser.html#method-i-parse","(line)",""],["parse","Gem::Uri","Gem/Uri.html#method-c-parse","(uri)","<p>Parses uri, returning the original uri if it’s invalid\n"],["parse","Gem::Uri","Gem/Uri.html#method-i-parse","(uri)",""],["parse","JSON","JSON.html#method-i-parse","(source, opts = {})","<p>Returns the Ruby objects created by parsing the given <code>source</code>.\n<p>Argument <code>source</code> contains the String to be …\n"],["parse","JSON::Ext::Parser","JSON/Ext/Parser.html#method-i-parse","()","<p>Parses the current JSON text <em>source</em> and returns the complete data structure as a result. It raises JSON::ParseError …\n"],["parse","OpenSSL::Config","OpenSSL/Config.html#method-c-parse","(p1)","<p>Parses a given <em>string</em> as a blob that contains configuration for OpenSSL.\n"],["parse","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-c-parse","(str, template=OBJECT_TYPE_TEMPLATE)",""],["parse","OptionParser","OptionParser.html#method-i-parse","(*argv, into: nil)","<p>Parses command line arguments <code>argv</code> in order when environment variable POSIXLY_CORRECT is set, and in …\n"],["parse","OptionParser::Switch::NoArgument","OptionParser/Switch/NoArgument.html#method-i-parse","(arg, argv)","<p>Raises an exception if any arguments given.\n"],["parse","OptionParser::Switch::OptionalArgument","OptionParser/Switch/OptionalArgument.html#method-i-parse","(arg, argv, &error)","<p>Parses argument if given, or uses default value.\n"],["parse","OptionParser::Switch::PlacedArgument","OptionParser/Switch/PlacedArgument.html#method-i-parse","(arg, argv, &error)","<p>Returns nil if argument is not present or begins with ‘-’ and is not ‘-’.\n"],["parse","OptionParser::Switch::RequiredArgument","OptionParser/Switch/RequiredArgument.html#method-i-parse","(arg, argv)","<p>Raises an exception if argument is not present.\n"],["parse","Psych","Psych.html#method-c-parse","(yaml, filename: nil)","<p>Parse a YAML string in <code>yaml</code>.  Returns the Psych::Nodes::Document. <code>filename</code> is used in the exception message …\n"],["parse","Psych::Parser","Psych/Parser.html#method-i-parse","(yaml, path = yaml.respond_to?(:path) ? yaml.path : \"<unknown>\")","<p>Parse the YAML document contained in <code>yaml</code>.  Events will be called on the handler set on the parser instance. …\n"],["parse","RDoc::ClassModule","RDoc/ClassModule.html#method-i-parse","(comment_location)","<p>Parses <code>comment_location</code> into an RDoc::Markup::Document composed of multiple RDoc::Markup::Documents with …\n"],["parse","RDoc::Comment","RDoc/Comment.html#method-i-parse","()","<p>Parses the comment into an RDoc::Markup::Document.  The parsed document is cached until the text is changed. …\n"],["parse","RDoc::Markdown","RDoc/Markdown.html#method-c-parse","(markdown)","<p>Parses the <code>markdown</code> document into an RDoc::Document using the default\nextensions.\n"],["parse","RDoc::Markdown","RDoc/Markdown.html#method-i-parse","(markdown)","<p>Parses <code>markdown</code> into an RDoc::Document\n"],["parse","RDoc::Markup","RDoc/Markup.html#method-c-parse","(str)","<p>Parses <code>str</code> into an RDoc::Markup::Document.\n"],["parse","RDoc::Options","RDoc/Options.html#method-i-parse","(argv)","<p>Parses command line options.\n"],["parse","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-c-parse","(code)",""],["parse","RDoc::RD","RDoc/RD.html#method-c-parse","(rd)","<p>Parses <code>rd</code> source and returns an RDoc::Markup::Document.  If the <code>=begin</code> or <code>=end</code> lines are missing they …\n"],["parse","RDoc::Text","RDoc/Text.html#method-i-parse","(text, format = 'rdoc')","<p>Normalizes <code>text</code> then builds a RDoc::Markup::Document from it\n"],["parse","RDoc::TomDoc","RDoc/TomDoc.html#method-c-parse","(text)","<p>Parses TomDoc from text\n<p>text &mdash; A String containing TomDoc-format text.\n\n<p>Examples\n"],["parse","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-c-parse","(src, filename = '-', lineno = 1)",""],["parse","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-i-parse","(src, filename = '-', lineno = 1)",""],["parse","Ripper","Ripper.html#method-i-parse","()","<p>Start parsing and returns the value of the root action.\n"],["parse","Ripper","Ripper.html#method-c-parse","(src, filename = '(ripper)', lineno = 1)","<p>Parses the given Ruby program read from <code>src</code>. <code>src</code> must be a String or an IO or a object with a #gets method. …\n"],["parse","Ripper::Filter","Ripper/Filter.html#method-i-parse","(init = nil)","<p>Starts the parser. <code>init</code> is a data accumulator and is passed to the next event handler (as of Enumerable#inject …\n"],["parse","RubyVM::AbstractSyntaxTree","RubyVM/AbstractSyntaxTree.html#method-c-parse","(string, keep_script_lines: false, error_tolerant: false, keep_tokens: false)","<p>Parses the given <em>string</em> into an abstract syntax tree, returning the root node of that tree.\n\n<pre>RubyVM::AbstractSyntaxTree.parse(&quot;x ...</pre>\n"],["parse","SyntaxSuggest::Cli","SyntaxSuggest/Cli.html#method-i-parse","()",""],["parse","Time","Time.html#method-c-parse","(date, now=self.now)","<p>Takes a string representation of a Time and attempts to parse it using a heuristic.\n<p>This method **does …\n"],["parse","URI","URI.html#method-c-parse","(uri)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-identifier\">uri_str</span>)\n</pre>\n<p>Args\n"],["parse","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-parse","(uri)","<p>Args\n<p><code>uri</code> &mdash; String\n\n<p>Description\n"],["parse","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-parse","(uri)","<p>Args\n<p><code>uri</code> &mdash; String\n\n<p>Description\n"],["parse!","Gem::Uri","Gem/Uri.html#method-c-parse-21","(uri)","<p>Parses uri, raising if it’s invalid\n"],["parse!","Gem::Uri","Gem/Uri.html#method-i-parse-21","(uri)",""],["parse!","JSON","JSON.html#method-i-parse-21","(source, opts = {})","<p>Calls\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-identifier\">source</span>, <span class=\"ruby-identifier\">opts</span>)\n</pre>\n<p>with <code>source</code> and possibly modified <code>opts</code>.\n"],["parse!","OptionParser","OptionParser.html#method-i-parse-21","(argv = default_argv, into: nil)","<p>Same as #parse, but removes switches destructively. Non-option arguments remain in <code>argv</code>.\n"],["parse!","OptionParser::Arguable","OptionParser/Arguable.html#method-i-parse-21","()","<p>Parses <code>self</code> destructively and returns <code>self</code> containing the rest arguments left unparsed.\n"],["parse_aia_asn1","OpenSSL::X509::Extension::AuthorityInfoAccess","OpenSSL/X509/Extension/AuthorityInfoAccess.html#method-i-parse_aia_asn1","()",""],["parse_alias","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_alias","(context, single, tk, comment)","<p>Parses an <code>alias</code> in <code>context</code> with <code>comment</code>\n"],["parse_attr","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_attr","(context, single, tk, comment)","<p>Creates an RDoc::Attr for the name following <code>tk</code>, setting the comment to <code>comment</code>.\n"],["parse_attr_accessor","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_attr_accessor","(context, single, tk, comment)","<p>Creates an RDoc::Attr for each attribute listed after <code>tk</code>, setting the comment for each to <code>comment</code>.\n"],["parse_bind_options","Fiddle::Importer","Fiddle/Importer.html#method-i-parse_bind_options","(opts)",""],["parse_call_parameters","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_call_parameters","(tk)","<p>Extracts call parameters from the token stream.\n"],["parse_class","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_class","(container, single, tk, comment)","<p>Parses a class in <code>context</code> with <code>comment</code>\n"],["parse_column_end","CSV::Parser","CSV/Parser.html#method-i-parse_column_end","()",""],["parse_column_value","CSV::Parser","CSV/Parser.html#method-i-parse_column_value","()",""],["parse_comment","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_comment","(container, tk, comment)","<p>Generates an RDoc::Method or RDoc::Attr from <code>comment</code> by looking for :method: or :attr: directives in …\n"],["parse_comment_tomdoc","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_comment_tomdoc","(container, tk, comment)","<p>Creates an RDoc::Method on <code>container</code> from <code>comment</code> if there is a Signature section in the comment\n"],["parse_config","OpenSSL::Config","OpenSSL/Config.html#method-c-parse_config","(p1)","<p>Parses the configuration data read from <em>io</em> and returns the whole content as a Hash.\n"],["parse_constant","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_constant","(container, tk, comment, ignore_constants = false)","<p>Parses a constant in <code>context</code> with <code>comment</code>.  If <code>ignore_constants</code> is true, no found constants will be added …\n"],["parse_constant_visibility","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_constant_visibility","(container, single, tk)","<p>Parses a Module#private_constant or Module#public_constant call from <code>tk</code>.\n"],["parse_ctype","Fiddle::CParser","Fiddle/CParser.html#method-i-parse_ctype","(ty, tymap=nil)","<p>Given a String of C type <code>ty</code>, returns the corresponding Fiddle constant.\n<p><code>ty</code> can also accept an Array of …\n"],["parse_date","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-parse_date","(date)","<p>Parse date in ISO-8601, RFC-2822, or default of Git\n"],["parse_dependency","Gem::Resolver::APISet::GemParser","Gem/Resolver/APISet/GemParser.html#method-i-parse_dependency","(string)",""],["parse_dn","URI::LDAP","URI/LDAP.html#method-i-parse_dn","()","<p>Private method to cleanup <code>dn</code> from using the <code>path</code> component attribute.\n"],["parse_dot_doc_file","RDoc::RDoc","RDoc/RDoc.html#method-i-parse_dot_doc_file","(in_dir, filename)","<p>The .document file contains a list of file and directory name patterns, representing candidates for documentation. …\n"],["parse_entries","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-parse_entries","()","<p>Parses the entries in the ChangeLog.\n<p>Returns an Array of each ChangeLog entry in order of parsing.\n<p>A ChangeLog …\n"],["parse_entries","RDoc::Parser::ChangeLog::Git","RDoc/Parser/ChangeLog/Git.html#method-i-parse_entries","()",""],["parse_file","Psych","Psych.html#method-c-parse_file","(filename, fallback: false)","<p>Parse a file at <code>filename</code>. Returns the Psych::Nodes::Document.\n<p>Raises a Psych::SyntaxError when a YAML …\n"],["parse_file","RDoc::RDoc","RDoc/RDoc.html#method-i-parse_file","(filename)","<p>Parses <code>filename</code> and returns an RDoc::TopLevel\n"],["parse_file","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-c-parse_file","(filename)",""],["parse_file","RubyVM::AbstractSyntaxTree","RubyVM/AbstractSyntaxTree.html#method-c-parse_file","(pathname, keep_script_lines: false, error_tolerant: false, keep_tokens: false)","<p>Reads the file from <em>pathname</em>, then parses it like ::parse, returning the root node of the abstract syntax …\n"],["parse_files","RDoc::RDoc","RDoc/RDoc.html#method-i-parse_files","(files)","<p>Parse each file on the command line, recursively entering directories.\n"],["parse_files_matching","RDoc::Parser","RDoc/Parser.html#method-c-parse_files_matching","(regexp)","<p>Record which file types this parser can understand.\n<p>It is ok to call this multiple times.\n"],["parse_gem","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-i-parse_gem","(string)",""],["parse_headers","CSV::Parser","CSV/Parser.html#method-i-parse_headers","(row)",""],["parse_info","RDoc::Parser::ChangeLog::Git","RDoc/Parser/ChangeLog/Git.html#method-i-parse_info","(info)",""],["parse_int","Psych::ScalarScanner","Psych/ScalarScanner.html#method-i-parse_int","(string)","<p>Parse and return an int from <code>string</code>\n"],["parse_keyseq","Reline::Config","Reline/Config.html#method-i-parse_keyseq","(str)",""],["parse_line","CSV","CSV.html#method-c-parse_line","(line, **options)","<p>Returns the data created by parsing the first line of <code>string</code> or <code>io</code> using the specified <code>options</code>.\n<p>Argument …\n"],["parse_meta_attr","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_meta_attr","(context, single, tk, comment)","<p>Parses a meta-programmed attribute and creates an RDoc::Attr.\n<p>To create foo and bar attributes on class …\n"],["parse_meta_method","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_meta_method","(container, single, tk, comment)","<p>Parses a meta-programmed method\n"],["parse_method","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_method","(container, single, tk, comment)","<p>Parses a normal method defined by <code>def</code>\n"],["parse_method_dummy","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_method_dummy","(container)","<p>Parses a method that needs to be ignored.\n"],["parse_method_or_yield_parameters","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_method_or_yield_parameters","(method = nil, modifiers = RDoc::METHOD_MODIFIERS)","<p>Extracts <code>yield</code> parameters from <code>method</code>\n"],["parse_method_parameters","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_method_parameters","(method)","<p>Capture the method’s parameters. Along the way, look for a comment containing:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># yields: ....</span>\n</pre>\n<p>and add …\n"],["parse_method_params_and_body","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_method_params_and_body","(container, single, meth, added_container)","<p>Parses the parameters and body of <code>meth</code>\n"],["parse_module","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_module","(container, single, tk, comment)","<p>Parses an RDoc::NormalModule in <code>container</code> with <code>comment</code>\n"],["parse_no_quote","CSV::Parser","CSV/Parser.html#method-i-parse_no_quote","(&block)",""],["parse_openssl","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-c-parse_openssl","(str, template=OBJECT_TYPE_TEMPLATE)","<p>Parses the string representation of a distinguished name. Two different forms are supported:\n<p>OpenSSL format …\n"],["parse_option_string","Racc::DebugFlags","Racc/DebugFlags.html#method-c-parse_option_string","(s)",""],["parse_printf_format","IRB::OutputMethod","IRB/OutputMethod.html#method-i-parse_printf_format","(format, opts)","<p>Returns an array of the given <code>format</code> and <code>opts</code> to be used by Kernel#sprintf, if there was a successful …\n"],["parse_query","URI::LDAP","URI/LDAP.html#method-i-parse_query","()","<p>Private method to cleanup <code>attributes</code>, <code>scope</code>, <code>filter</code>, and <code>extensions</code> from using the <code>query</code> component attribute. …\n"],["parse_quotable_loose","CSV::Parser","CSV/Parser.html#method-i-parse_quotable_loose","(&block)",""],["parse_quotable_robust","CSV::Parser","CSV/Parser.html#method-i-parse_quotable_robust","(&block)",""],["parse_quoted_column_value","CSV::Parser","CSV/Parser.html#method-i-parse_quoted_column_value","()",""],["parse_require","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_require","(context, comment)","<p>Parses an RDoc::Require in <code>context</code> containing <code>comment</code>\n"],["parse_rescue","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_rescue","()","<p>Parses a rescue\n"],["parse_rfc2253","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-c-parse_rfc2253","(str, template=OBJECT_TYPE_TEMPLATE)","<p>Parses the UTF-8 string representation of a distinguished name, according to RFC 2253.\n<p>See also #to_utf8 …\n"],["parse_row_end","CSV::Parser","CSV/Parser.html#method-i-parse_row_end","()",""],["parse_signature","Fiddle::CParser","Fiddle/CParser.html#method-i-parse_signature","(signature, tymap=nil)","<p>Parses a C prototype signature\n<p>If Hash <code>tymap</code> is provided, the return value and the arguments from the …\n"],["parse_statements","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_statements","(container, single = NORMAL, current_method = nil, comment = new_comment(''))","<p>The core of the Ruby parser.\n"],["parse_stream","Psych","Psych.html#method-c-parse_stream","(yaml, filename: nil, &block)","<p>Parse a YAML string in <code>yaml</code>.  Returns the Psych::Nodes::Stream. This method can handle multiple YAML …\n"],["parse_struct_signature","Fiddle::CParser","Fiddle/CParser.html#method-i-parse_struct_signature","(signature, tymap=nil)","<p>Parses a C struct’s members\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;fiddle/import&#39;</span>\n\n<span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">Fiddle</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">CParser</span>\n  <span class=\"ruby-comment\">#=&gt; Object ...</span>\n</pre>\n"],["parse_symbol_arg","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_symbol_arg","(no = nil)","<p>Parse up to <code>no</code> symbol arguments\n"],["parse_symbol_in_arg","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_symbol_in_arg","()","<p>Returns symbol text from the next token\n"],["parse_time","Psych::ScalarScanner","Psych/ScalarScanner.html#method-i-parse_time","(string)","<p>Parse and return a Time from <code>string</code>\n"],["parse_top_level_statements","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_top_level_statements","(container)","<p>Parses statements in the top-level <code>container</code>\n"],["parse_unquoted_column_value","CSV::Parser","CSV/Parser.html#method-i-parse_unquoted_column_value","()",""],["parse_user_code","Racc::GrammarFileParser","Racc/GrammarFileParser.html#method-i-parse_user_code","()","<p>User Code Block\n"],["parse_visibility","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_visibility","(container, single, tk)","<p>Determines the visibility in <code>container</code> from <code>tk</code>\n"],["parse_yield","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_yield","(context, single, tk, method)","<p>Determines the block parameter for <code>context</code>\n"],["parser","CSV","CSV.html#method-i-parser","()",""],["parser","Gem::Command","Gem/Command.html#method-i-parser","()","<p>Create on demand parser.\n"],["parser","Psych","Psych.html#method-c-parser","()","<p>Returns a default parser\n"],["parser","SyntaxSuggest::Cli","SyntaxSuggest/Cli.html#method-i-parser","()",""],["parser","URI::Generic","URI/Generic.html#method-i-parser","()","<p>Returns the parser to be used.\n<p>Unless a URI::Parser is defined, DEFAULT_PARSER is used.\n"],["parser=","RDoc::TopLevel","RDoc/TopLevel.html#method-i-parser-3D","(val)",""],["parser_class","Racc::Grammar","Racc/Grammar.html#method-i-parser_class","()",""],["parser_class","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-parser_class","(classname, superclass)",""],["parser_class","Racc::StateTransitionTable","Racc/StateTransitionTable.html#method-i-parser_class","()",""],["parser_enumerator","CSV","CSV.html#method-i-parser_enumerator","()",""],["parser_fields_converter","CSV","CSV.html#method-i-parser_fields_converter","()",""],["parser_file","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-parser_file","()",""],["parser_options","CSV","CSV.html#method-i-parser_options","()",""],["partition","Enumerable","Enumerable.html#method-i-partition","()","<p>With a block given, returns an array of two arrays:\n<p>The first having those elements for which the block …\n"],["partition","String","String.html#method-i-partition","(p1)","<p>Returns a 3-element array of substrings of <code>self</code>.\n<p>Matches a pattern against <code>self</code>, scanning from the beginning. …\n"],["pass","Thread","Thread.html#method-c-pass","()","<p>Give the thread scheduler a hint to pass execution to another thread. A running thread may or may not …\n"],["passwd","Etc","Etc.html#method-c-passwd","()","<p>Provides a convenient Ruby iterator which executes a block for each entry in the <code>/etc/passwd</code> file.\n<p>The …\n"],["password","URI::Generic","URI/Generic.html#method-i-password","()","<p>Returns the password component (without URI decoding).\n"],["password=","URI::Generic","URI/Generic.html#method-i-password-3D","(password)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["password?","Gem::Uri","Gem/Uri.html#method-i-password-3F","()",""],["password_field","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-password_field","(name = \"\", value = nil, size = 40, maxlength = nil)","<p>Generate a Password Input element as a string.\n<p><code>name</code> is the name of the input field.  <code>value</code> is its default …\n"],["patch","Net::HTTP","Net/HTTP.html#method-i-patch","(path, data, initheader = nil, dest = nil)","<p>Sends a PATCH request to the <code>path</code> and gets a response, as an HTTPResponse object.\n"],["path","ARGF","ARGF.html#method-i-path","()","<p>Returns the current filename. “-” is returned when the current file is STDIN.\n<p>For example:\n\n<pre>$ ...</pre>\n"],["path","CSV","CSV.html#method-i-path","()",""],["path","Dir","Dir.html#method-i-path","()","<p>Returns the path parameter passed to <em>dir</em>’s constructor.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;..&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">path</span>   <span class=\"ruby-comment\">#=&gt; &quot;..&quot;</span>\n</pre>\n"],["path","File","File.html#method-c-path","(p1)","<p>Returns the string representation of the path\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">path</span>(<span class=\"ruby-string\">&quot;/dev/null&quot;</span>)          <span class=\"ruby-comment\">#=&gt; &quot;/dev/null&quot;</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">path</span>(<span class=\"ruby-constant\">Pathname</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>)) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["path","Gem","Gem.html#method-c-path","()",""],["path","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-path","(from, to)","<p>Returns the path between two vertices @raise [ArgumentError] if there is no path between the vertices …\n"],["path","IO","IO.html#method-i-path","()","<p>Returns the path associated with the IO, or <code>nil</code> if there is no path associated with the IO. It is not …\n"],["path","PStore","PStore.html#method-i-path","()","<p>Returns the string file path used to create the store:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">store</span>.<span class=\"ruby-identifier\">path</span> <span class=\"ruby-comment\"># =&gt; &quot;flat.store&quot;</span>\n</pre>\n"],["path","RDoc::ClassModule","RDoc/ClassModule.html#method-i-path","()","<p>Path to this class or module for use with HTML generator output.\n"],["path","RDoc::Constant","RDoc/Constant.html#method-i-path","()","<p>Path to this constant for use with HTML generator output.\n"],["path","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-path","()","<p>Path to this method for use with HTML generator output.\n"],["path","RDoc::TopLevel","RDoc/TopLevel.html#method-i-path","()","<p>Path to this file for use with HTML generator output.\n"],["path","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-path","()","<p>Returns the path of this instruction sequence.\n<p><code>&lt;compiled&gt;</code> if the iseq was evaluated from a string. …\n"],["path","Tempfile","Tempfile.html#method-i-path","()","<p>Returns the full path name of the temporary file. This will be nil if #unlink has been called.\n"],["path","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-path","()","<p>Returns the file name of this frame. This will generally be an absolute path, unless the frame is in …\n"],["path","TracePoint","TracePoint.html#method-i-path","()","<p>Path of the file being run\n"],["path","UNIXSocket","UNIXSocket.html#method-i-path","()","<p>Returns the path of the local address of unixsocket.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">UNIXServer</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">path</span> <span class=\"ruby-comment\">#=&gt; &quot;/tmp/sock&quot;</span>\n</pre>\n"],["path","URI::FTP","URI/FTP.html#method-i-path","()","<p>Returns the path from an FTP URI.\n<p>RFC 1738 specifically states that the path for an FTP URI does not include …\n"],["path","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-i-path","()","<p>Returns the type library file path.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tlib</span> = <span class=\"ruby-constant\">WIN32OLE_TYPELIB</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["path2class","Psych::ClassLoader","Psych/ClassLoader.html#method-i-path2class","(p1)","<p>Convert <code>path</code> string to a class\n"],["path=","CGI::Cookie","CGI/Cookie.html#method-i-path-3D","(str)","<p>Set path for which this cookie applies\n"],["path=","URI::Generic","URI/Generic.html#method-i-path-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["path_ok?","Gem::Uninstaller","Gem/Uninstaller.html#method-i-path_ok-3F","(gem_dir, spec)","<p>Is <code>spec</code> in <code>gem_dir</code>?\n"],["path_separator","Gem","Gem.html#method-c-path_separator","()","<p>How String Gem paths should be split.  Overridable for esoteric platforms.\n"],["path_to?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-path_to-3F","(other)","<p>Is there a path from ‘self` to `other` following edges in the dependency graph? @return whether there …\n"],["pathconf","IO","IO.html#method-i-pathconf","(p1)","<p>Returns pathname configuration variable using fpathconf().\n<p><em>name</em> should be a constant under <code>Etc</code> which begins …\n"],["paths","Gem","Gem.html#method-c-paths","()","<p>Retrieve the PathSupport object that RubyGems uses to lookup files.\n"],["paths=","Gem","Gem.html#method-c-paths-3D","(env)","<p>Initialize the filesystem paths to use from <code>env</code>. <code>env</code> is a hash-like object (typically ENV) that is queried …\n"],["pattern","OptionParser::Switch","OptionParser/Switch.html#method-c-pattern","()",""],["pattern","OptionParser::Switch::NoArgument","OptionParser/Switch/NoArgument.html#method-c-pattern","()",""],["pause","RubyVM::MJIT","RubyVM/MJIT.html#method-c-pause","(wait: true)","<p>Stop generating JITed code.\n"],["pbkdf2_hmac","OpenSSL::KDF","OpenSSL/KDF.html#method-c-pbkdf2_hmac","(p1, p2 = {})","<p>PKCS #5 PBKDF2 (Password-Based Key Derivation Function 2) in combination with HMAC. Takes <em>pass</em>, <em>salt</em> …\n"],["pbkdf2_hmac","OpenSSL::PKCS5","OpenSSL/PKCS5.html#method-i-pbkdf2_hmac","(pass, salt, iter, keylen, digest)","<p>OpenSSL::PKCS5.pbkdf2_hmac has been renamed to OpenSSL::KDF.pbkdf2_hmac. This method is provided for …\n"],["pbkdf2_hmac_sha1","OpenSSL::PKCS5","OpenSSL/PKCS5.html#method-i-pbkdf2_hmac_sha1","(pass, salt, iter, keylen)",""],["peek","Enumerator","Enumerator.html#method-i-peek","()","<p>Returns the next object in the enumerator, but doesn’t move the internal position forward.  If the …\n"],["peek","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-peek","()",""],["peek","StringScanner","StringScanner.html#method-i-peek","(p1)","<p>Extracts a string corresponding to <code>string[pos,len]</code>, without advancing the scan pointer.\n\n<pre>s = StringScanner.new(&#39;test ...</pre>\n"],["peek","SyntaxSuggest::PriorityEngulfQueue","SyntaxSuggest/PriorityEngulfQueue.html#method-i-peek","()",""],["peek","SyntaxSuggest::PriorityQueue","SyntaxSuggest/PriorityQueue.html#method-i-peek","()",""],["peek","SyntaxSuggest::UnvisitedLines","SyntaxSuggest/UnvisitedLines.html#method-i-peek","()",""],["peek_read","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-peek_read","()","<p>Peek equivalent for get_tkread\n"],["peek_result","Coverage","Coverage.html#method-c-peek_result","()","<p>Returns a hash that contains filename as key and coverage array as value. This is the same as ‘Coverage.result(stop: …\n"],["peek_tk","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-peek_tk","()","<p>Peek at the next token, but don’t remove it from the stream\n"],["peek_values","Enumerator","Enumerator.html#method-i-peek_values","()","<p>Returns the next object as an array, similar to Enumerator#next_values, but doesn’t move the internal …\n"],["peep","StringScanner","StringScanner.html#method-i-peep","(p1)","<p>Equivalent to #peek. This method is obsolete; use #peek instead.\n"],["peer_cert","Net::HTTP","Net/HTTP.html#method-i-peer_cert","()","<p>Returns the X.509 certificates the server presented.\n"],["peer_cert","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-peer_cert","()","<p>The X509 certificate for this socket’s peer.\n"],["peer_cert_chain","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-peer_cert_chain","()","<p>The X509 certificate chain for this socket’s peer.\n"],["peer_finished_message","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-peer_finished_message","()","<p>Returns the last <strong>Finished</strong> message received\n"],["peeraddr","IPSocket","IPSocket.html#method-i-peeraddr","(*args)","<p>Returns the remote address as an array which contains address_family, port, hostname and numeric_address. …\n"],["peeraddr","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-peeraddr","()",""],["peeraddr","UNIXSocket","UNIXSocket.html#method-i-peeraddr","()","<p>Returns the remote address as an array which contains address_family and unix_path.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">serv</span> = <span class=\"ruby-constant\">UNIXServer</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["peg_parse","RDoc::Markdown","RDoc/Markdown.html#method-i-peg_parse","(markdown)","<p>The internal kpeg parse method\n"],["pending","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-pending","()","<p>The number of bytes that are immediately available for reading.\n"],["pending_interrupt?","Thread","Thread.html#method-i-pending_interrupt-3F","(*args)","<p>Returns whether or not the asynchronous queue is empty for the target thread.\n<p>If <code>error</code> is given, then …\n"],["pending_interrupt?","Thread","Thread.html#method-c-pending_interrupt-3F","(*args)","<p>Returns whether or not the asynchronous queue is empty.\n<p>Since Thread::handle_interrupt can be used to …\n"],["percent_doc","RDoc::Stats","RDoc/Stats.html#method-i-percent_doc","()","<p>Calculates the percentage of items documented.\n"],["permutation","Array","Array.html#method-i-permutation","(*args)","<p>When invoked with a block, yield all permutations of elements of <code>self</code>; returns <code>self</code>. The order of permutations …\n"],["permute","OptionParser","OptionParser.html#method-i-permute","(*argv, into: nil)","<p>Parses command line arguments <code>argv</code> in permutation mode and returns list of non-option arguments. When …\n"],["permute!","OptionParser","OptionParser.html#method-i-permute-21","(argv = default_argv, into: nil)","<p>Same as #permute, but removes switches destructively. Non-option arguments remain in <code>argv</code>.\n"],["permute!","OptionParser::Arguable","OptionParser/Arguable.html#method-i-permute-21","()","<p>Parses <code>self</code> destructively in permutation mode and returns <code>self</code> containing the rest arguments left unparsed. …\n"],["pfamily","Addrinfo","Addrinfo.html#method-i-pfamily","()","<p>returns the protocol family as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">pfamily</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PF_INET</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["phase","Complex","Complex.html#method-i-phase","()","<p>Returns the angle part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">arg</span>  <span class=\"ruby-comment\">#=&gt; 1.5707963267948966</span>\n</pre>\n"],["phase","Float","Float.html#method-i-phase","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["phase","Numeric","Numeric.html#method-i-phase","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["pick_best!","Gem::AvailableSet","Gem/AvailableSet.html#method-i-pick_best-21","()",""],["pid","IO","IO.html#method-i-pid","()","<p>Returns the process ID of a child process associated with the stream, which will have been set by IO#popen …\n"],["pid","Process","Process.html#method-c-pid","()","<p>Returns the process id of this process. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">pid</span>   <span class=\"ruby-comment\">#=&gt; 27415</span>\n</pre>\n"],["pid","Process::Status","Process/Status.html#method-i-pid","()","<p>Returns the process ID that this status object represents.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fork</span> { <span class=\"ruby-identifier\">exit</span> }   <span class=\"ruby-comment\">#=&gt; 26569</span>\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span>    <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["pid","StringIO","StringIO.html#method-i-pid","()","<p>Returns <code>nil</code>.  Just for compatibility to IO.\n"],["pin_gem_source","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-pin_gem_source","(name, type = :default, source = nil)","<p>Pins the gem <code>name</code> to the given <code>source</code>.  Adding a gem with the same name from a different <code>source</code> will …\n"],["pipe","IO","IO.html#method-c-pipe","(p1 = v1, p2 = v2, p3 = {})","<p>Creates a pair of pipe endpoints, <code>read_io</code> and <code>write_io</code>, connected to each other.\n<p>If argument <code>enc_string</code> …\n"],["pipe?","File","File.html#method-c-pipe-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a pipe, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">mkfifo</span>(<span class=\"ruby-string\">&#39;tmp/fifo&#39;</span>)\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">pipe?</span>(<span class=\"ruby-string\">&#39;tmp/fifo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pipe?","File::Stat","File/Stat.html#method-i-pipe-3F","()","<p>Returns <code>true</code> if the operating system supports pipes and <em>stat</em> is a pipe; <code>false</code> otherwise.\n"],["pipe?","FileTest","FileTest.html#method-i-pipe-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a pipe, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">mkfifo</span>(<span class=\"ruby-string\">&#39;tmp/fifo&#39;</span>)\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">pipe?</span>(<span class=\"ruby-string\">&#39;tmp/fifo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pipe?","Pathname","Pathname.html#method-i-pipe-3F","()","<p>See FileTest.pipe?.\n"],["pipeline","Open3","Open3.html#method-i-pipeline","(*cmds)","<p>Open3.pipeline starts a list of commands as a pipeline. It waits for the completion of the commands. …\n"],["pipeline","Open3","Open3.html#method-c-pipeline","(*cmds)","<p>Open3.pipeline starts a list of commands as a pipeline. It waits for the completion of the commands. …\n"],["pipeline_r","Open3","Open3.html#method-c-pipeline_r","(*cmds, &block)","<p>Open3.pipeline_r starts a list of commands as a pipeline with a pipe which connects to stdout of the …\n"],["pipeline_r","Open3","Open3.html#method-i-pipeline_r","(*cmds, &block)","<p>Open3.pipeline_r starts a list of commands as a pipeline with a pipe which connects to stdout of the …\n"],["pipeline_rw","Open3","Open3.html#method-i-pipeline_rw","(*cmds, &block)","<p>Open3.pipeline_rw starts a list of commands as a pipeline with pipes which connect to stdin of the first …\n"],["pipeline_rw","Open3","Open3.html#method-c-pipeline_rw","(*cmds, &block)","<p>Open3.pipeline_rw starts a list of commands as a pipeline with pipes which connect to stdin of the first …\n"],["pipeline_start","Open3","Open3.html#method-c-pipeline_start","(*cmds, &block)","<p>Open3.pipeline_start starts a list of commands as a pipeline. No pipes are created for stdin of the first …\n"],["pipeline_start","Open3","Open3.html#method-i-pipeline_start","(*cmds, &block)","<p>Open3.pipeline_start starts a list of commands as a pipeline. No pipes are created for stdin of the first …\n"],["pipeline_w","Open3","Open3.html#method-i-pipeline_w","(*cmds, &block)","<p>Open3.pipeline_w starts a list of commands as a pipeline with a pipe which connects to stdin of the first …\n"],["pipeline_w","Open3","Open3.html#method-c-pipeline_w","(*cmds, &block)","<p>Open3.pipeline_w starts a list of commands as a pipeline with a pipe which connects to stdin of the first …\n"],["pkcs5_keyivgen","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-pkcs5_keyivgen","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Generates and sets the key/IV based on a password.\n<p><strong>WARNING</strong>: This method is only PKCS5 v1.5 compliant when …\n"],["pkg_config","MakeMakefile","MakeMakefile.html#method-i-pkg_config","(pkg, *options)","<p>Returns compile/link information about an installed library in a tuple of <code>[cflags, ldflags, libs]</code>, by …\n"],["platform","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-platform","()","<p>Platform of the gem\n"],["platform","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-platform","(*platforms)","<p>Block form for restricting gems to a set of platforms.\n<p>The gem dependencies platform is different from …\n"],["platform","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-platform","()","<p>The platform of this activation request’s specification\n"],["platform","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-platform","()","<p>The platform this gem works on.\n"],["platform","Gem::Specification","Gem/Specification.html#method-i-platform","()","<p>The platform this gem runs on.  See Gem::Platform for details.\n"],["platform=","Gem::Specification","Gem/Specification.html#method-i-platform-3D","(platform)","<p>The platform this gem runs on.\n<p>This is usually Gem::Platform::RUBY or Gem::Platform::CURRENT.\n<p>Most gems …\n"],["platform_defaults","Gem","Gem.html#method-c-platform_defaults","()","<p>Default options for gem commands for Ruby implementers.\n<p>The options here should be structured as an array …\n"],["platform_specific_rustc_args","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-platform_specific_rustc_args","(dest_dir, flags = [])",""],["platforms","Gem","Gem.html#method-c-platforms","()","<p>Array of platforms this RubyGems supports.\n"],["platforms","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-platforms","(*platforms)","<p>Block form for restricting gems to a particular set of platforms.  See #platform.\n"],["platforms=","Gem","Gem.html#method-c-platforms-3D","(platforms)","<p>Set array of platforms this RubyGems supports (primarily for testing).\n"],["plausible_dimensions","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-plausible_dimensions","(input)",""],["plugin_suffix_pattern","Gem","Gem.html#method-c-plugin_suffix_pattern","()","<p>Glob pattern for require-able plugin suffixes.\n"],["plugin_suffix_regexp","Gem","Gem.html#method-c-plugin_suffix_regexp","()","<p>Regexp for require-able plugin suffixes.\n"],["plugindir","Gem","Gem.html#method-c-plugindir","(install_dir=Gem.dir)","<p>The path were rubygems plugins are to be installed.\n"],["plugins","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-plugins","()","<p>Returns the list of plugins in this spec.\n"],["point","Readline","Readline.html#method-c-point","()","<p>Returns the index of the current cursor position in <code>Readline.line_buffer</code>.\n<p>The index in <code>Readline.line_buffer</code> …\n"],["point=","Readline","Readline.html#method-c-point-3D","(p1)","<p>Set the index of the current cursor position in <code>Readline.line_buffer</code>.\n<p>Raises NotImplementedError if the …\n"],["point_conversion_form","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-point_conversion_form","()","<p>Returns the form how EC::Point data is encoded as ASN.1.\n<p>See also #point_conversion_form=.\n"],["point_conversion_form=","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-point_conversion_form-3D","(p1)","<p>Sets the form how EC::Point data is encoded as ASN.1 as defined in X9.62.\n<p><em>format</em> can be one of these: …\n"],["pointer","StringScanner","StringScanner.html#method-i-pointer","()","<p>Returns the byte position of the scan pointer.  In the ‘reset’ position, this value is zero. …\n"],["pointer=","StringScanner","StringScanner.html#method-i-pointer-3D","(p1)","<p>Sets the byte position of the scan pointer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">StringScanner</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;test string&#39;</span>)\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">pos</span> = <span class=\"ruby-value\">7</span>            <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pointer_out","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-pointer_out","(out, ptr)",""],["polar","Complex","Complex.html#method-c-polar","(p1, p2 = v2)","<p>Returns a complex object which denotes the given polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">0</span>)            <span class=\"ruby-comment\">#=&gt; (3.0+0.0i) ...</span>\n</pre>\n"],["polar","Complex","Complex.html#method-i-polar","()","<p>Returns an array; [cmp.abs, cmp.arg].\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">polar</span>  <span class=\"ruby-comment\">#=&gt; [2.23606797749979, 1.1071487177940904]</span>\n</pre>\n"],["polar","Numeric","Numeric.html#method-i-polar","()","<p>Returns an array; [num.abs, num.arg].\n"],["policy_id","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-i-policy_id","()","<p>Returns the ‘short name’ of the object identifier that represents the timestamp policy under …\n"],["policy_id","OpenSSL::Timestamp::TokenInfo","OpenSSL/Timestamp/TokenInfo.html#method-i-policy_id","()","<p>Returns the timestamp policy object identifier of the policy this timestamp was created under. If status …\n"],["policy_id=","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-i-policy_id-3D","(p1)","<p>Allows to set the object identifier that represents the timestamp policy under which the server shall …\n"],["pools_for","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-pools_for","(proxy)",""],["pop","Array","Array.html#method-i-pop","(*args)","<p>Removes and returns trailing elements.\n<p>When no argument is given and <code>self</code> is not empty, removes and returns …\n"],["pop","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-pop","()",""],["pop","Rinda::NotifyTemplateEntry","Rinda/NotifyTemplateEntry.html#method-i-pop","()","<p>Retrieves a notification.  Raises RequestExpiredError when this NotifyTemplateEntry expires.\n"],["pop","SyntaxSuggest::CodeFrontier","SyntaxSuggest/CodeFrontier.html#method-i-pop","()","<p>Returns a code block with the largest indentation possible\n"],["pop","SyntaxSuggest::PriorityEngulfQueue","SyntaxSuggest/PriorityEngulfQueue.html#method-i-pop","()",""],["pop","SyntaxSuggest::PriorityQueue","SyntaxSuggest/PriorityQueue.html#method-i-pop","()",""],["pop","SyntaxSuggest::UnvisitedLines","SyntaxSuggest/UnvisitedLines.html#method-i-pop","()",""],["pop","Thread::Queue","Thread/Queue.html#method-i-pop","(non_block = false, timeout: nil)","<p>Retrieves data from the queue.\n<p>If the queue is empty, the calling thread is suspended until data is pushed …\n"],["pop","Thread::SizedQueue","Thread/SizedQueue.html#method-i-pop","(non_block = false, timeout: nil)","<p>Retrieves data from the queue.\n<p>If the queue is empty, the calling thread is suspended until data is pushed …\n"],["pop!","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-pop-21","(graph)","<p>Pops the most recent action from the log and undoes the action @param [DependencyGraph] graph @return …\n"],["pop_inspect_key","PP::PPMethods","PP/PPMethods.html#method-i-pop_inspect_key","(id)","<p>Removes an object from the set of objects being pretty printed.\n"],["pop_possibility_state","Gem::Resolver::Molinillo::DependencyState","Gem/Resolver/Molinillo/DependencyState.html#method-i-pop_possibility_state","()","<p>Removes a possibility from ‘self` @return [PossibilityState] a state with a single possibility,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">possibility</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pop_token","RDoc::TokenStream","RDoc/TokenStream.html#method-i-pop_token","()","<p>Remove the last token from the collected tokens\n"],["pop_workspace","IRB::Context","IRB/Context.html#method-i-pop_workspace","()","<p>Removes the last element from the current #workspaces stack and returns it, or <code>nil</code> if the current workspace …\n"],["popen","Gem::Util","Gem/Util.html#method-c-popen","(*command)","<p>This calls IO.popen and reads the result\n"],["popen","IO","IO.html#method-c-popen","(*args)","<p>Executes the given command <code>cmd</code> as a subprocess whose $stdin and $stdout are connected to a new stream …\n"],["popen2","Open3","Open3.html#method-i-popen2","(*cmd, &block)","<p>Open3.popen2 is similar to Open3.popen3 except that it doesn’t create a pipe for the standard error …\n"],["popen2","Open3","Open3.html#method-c-popen2","(*cmd, &block)","<p>Open3.popen2 is similar to Open3.popen3 except that it doesn’t create a pipe for the standard error …\n"],["popen2e","Open3","Open3.html#method-c-popen2e","(*cmd, &block)","<p>Open3.popen2e is similar to Open3.popen3 except that it merges the standard output stream and the standard …\n"],["popen2e","Open3","Open3.html#method-i-popen2e","(*cmd, &block)","<p>Open3.popen2e is similar to Open3.popen3 except that it merges the standard output stream and the standard …\n"],["popen3","Open3","Open3.html#method-i-popen3","(*cmd, &block)","<p>Open stdin, stdout, and stderr streams and start external executable. In addition, a thread to wait for …\n"],["popen3","Open3","Open3.html#method-c-popen3","(*cmd, &block)","<p>Open stdin, stdout, and stderr streams and start external executable. In addition, a thread to wait for …\n"],["popup_menu","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-popup_menu","(name = \"\", *values)","<p>Generate a Select element as a string.\n<p><code>name</code> is the name of the element.  The <code>values</code> are the options that …\n"],["port=","URI::Generic","URI/Generic.html#method-i-port-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["pos","ARGF","ARGF.html#method-i-pos","()","<p>Returns the current offset (in bytes) of the current file in ARGF.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["pos","Dir","Dir.html#method-i-pos","()","<p>Returns the current position in <em>dir</em>. See also Dir#seek.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">tell</span>   <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">read</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pos","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-pos","()","<p>The position in the tar entry\n"],["pos","IO","IO.html#method-i-pos","()","<p>Returns the current position (in bytes) in <code>self</code> (see Position):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">tell</span> <span class=\"ruby-comment\"># =&gt; 0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pos","StringIO","StringIO.html#method-i-pos","()","<p>Returns the current position (in bytes); see Position.\n<p>StringIO#tell is an alias for StringIO#pos.\n"],["pos","StringScanner","StringScanner.html#method-i-pos","()","<p>Returns the byte position of the scan pointer.  In the ‘reset’ position, this value is zero. …\n"],["pos","Zlib::GzipReader","Zlib/GzipReader.html#method-i-pos","()","<p>Total number of output bytes output so far.\n"],["pos","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-pos","()","<p>Total number of input bytes read so far.\n"],["pos=","ARGF","ARGF.html#method-i-pos-3D","(p1)","<p>Seeks to the position given by <em>position</em> (in bytes) in ARGF.\n<p>For example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">pos</span> = <span class=\"ruby-value\">17</span>\n<span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["pos=","Dir","Dir.html#method-i-pos-3D","(p1)","<p>Synonym for Dir#seek, but returns the position parameter.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)   <span class=\"ruby-comment\">#=&gt; #&lt;Dir:0x401b3c40&gt; ...</span>\n</pre>\n"],["pos=","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-pos-3D","(new_pos)","<p>Seek to the position in the tar entry\n"],["pos=","IO","IO.html#method-i-pos-3D","(p1)","<p>Seeks to the given <code>new_position</code> (in bytes); see Position:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">tell</span>     <span class=\"ruby-comment\"># =&gt; 0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">pos</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pos=","StringIO","StringIO.html#method-i-pos-3D","(p1)","<p>Sets the current position (in bytes); see Position.\n"],["pos=","StringScanner","StringScanner.html#method-i-pos-3D","(p1)","<p>Sets the byte position of the scan pointer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">StringScanner</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;test string&#39;</span>)\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">pos</span> = <span class=\"ruby-value\">7</span>            <span class=\"ruby-operator\">...</span>\n</pre>\n"],["positive?","Float","Float.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>float</code> is greater than 0.\n"],["positive?","Numeric","Numeric.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>self</code> is greater than 0, <code>false</code> otherwise.\n"],["positive?","Rational","Rational.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>rat</code> is greater than 0.\n"],["possibilities","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-possibilities","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#possibilities)\n"],["possibilities_for_requirement","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-possibilities_for_requirement","(requirement, activated = self.activated)","<p>Checks a proposed requirement with any existing locked requirement before generating an array of possibilities …\n"],["possibility","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-possibility","()","<p>@return [Object] the current possibility that the resolution is trying\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">activate</span>\n</pre>\n"],["possibility","Gem::Resolver::Molinillo::Resolver::Resolution::Conflict","Gem/Resolver/Molinillo/Resolver/Resolution/Conflict.html#method-i-possibility","()","<p>@return [Object] a spec that was unable to be activated due to a conflict\n"],["possibility_satisfies_requirements?","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-possibility_satisfies_requirements-3F","(possibility, requirements)","<p>@param [Object] possibility a single possibility @param [Array] requirements an array of requirements …\n"],["possible_paths","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-possible_paths","(states)",""],["post","Net::HTTP","Net/HTTP.html#method-i-post","(path, data, initheader = nil, dest = nil)","<p>Posts <code>data</code> (must be a String) to <code>path</code>. <code>header</code> must be a Hash like { ‘Accept’ =&gt; ‘<strong>/</strong>’, …\n"],["post","Net::HTTP","Net/HTTP.html#method-c-post","(url, data, header = nil)","<p>Posts data to a host; returns a Net::HTTPResponse object.\n<p>Argument <code>url</code> must be a URL; argument <code>data</code> must …\n"],["post2","Net::HTTP","Net/HTTP.html#method-i-post2","(path, data, initheader = nil)",""],["post_build","Gem","Gem.html#method-c-post_build","(&hook)","<p>Adds a post-build hook that will be passed an Gem::Installer instance when Gem::Installer#install is …\n"],["post_connection_check","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-post_connection_check","(hostname)","<p>Perform hostname verification following RFC 6125.\n<p>This method MUST be called after calling #connect to …\n"],["post_form","Net::HTTP","Net/HTTP.html#method-c-post_form","(url, params)","<p>Posts data to a host; returns a Net::HTTPResponse object.\n<p>Argument <code>url</code> must be a URI; argument <code>data</code> must …\n"],["post_install","Gem","Gem.html#method-c-post_install","(&hook)","<p>Adds a post-install hook that will be passed an Gem::Installer instance when Gem::Installer#install is …\n"],["post_match","MatchData","MatchData.html#method-i-post_match","()","<p>Returns the substring of the target string from the end of the first match in <code>self</code> (that is, <code>self[0]</code> …\n"],["post_match","StringScanner","StringScanner.html#method-i-post_match","()","<p>Returns the <strong><em>post</strong>-match</em> (in the regular expression sense) of the last scan.\n\n<pre>s = StringScanner.new(&#39;test ...</pre>\n"],["post_reset","Gem","Gem.html#method-c-post_reset","(&hook)","<p>Adds a hook that will get run after Gem::Specification.reset is run.\n"],["post_uninstall","Gem","Gem.html#method-c-post_uninstall","(&hook)","<p>Adds a post-uninstall hook that will be passed a Gem::Uninstaller instance and the spec that was uninstalled …\n"],["pow","Integer","Integer.html#method-i-pow","(*args)","<p>Returns (modular) exponentiation as:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">pow</span>(<span class=\"ruby-identifier\">b</span>)     <span class=\"ruby-comment\">#=&gt; same as a**b</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">pow</span>(<span class=\"ruby-identifier\">b</span>, <span class=\"ruby-identifier\">m</span>)  <span class=\"ruby-comment\">#=&gt; same as (a**b) % m, ...</span>\n</pre>\n"],["power","BigDecimal","BigDecimal.html#method-i-power","(p1, p2 = v2)","<p>Returns the value raised to the power of n.\n<p>Note that n must be an Integer.\n<p>Also available as the operator …\n"],["pp","IRB::ColorPrinter","IRB/ColorPrinter.html#method-c-pp","(obj, out = $>, width = screen_width)",""],["pp","IRB::ColorPrinter","IRB/ColorPrinter.html#method-i-pp","(obj)",""],["pp","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-pp","(*objs)","<p>Same as #ppx, except it uses the #prefix given during object initialization. See OutputMethod#ppx for …\n"],["pp","IRB::OutputMethod","IRB/OutputMethod.html#method-i-pp","(*objs)","<p>Prints the given <code>objs</code> calling Object#inspect on each.\n<p>See #puts for more detail.\n"],["pp","Kernel","Kernel.html#method-i-pp","(*objs)","<p>prints arguments in pretty form.\n<p>pp returns argument(s).\n"],["pp","Kernel","Kernel.html#method-c-pp","(*objs)","<p>prints arguments in pretty form.\n<p>pp returns argument(s).\n"],["pp","PP","PP.html#method-c-pp","(obj, out=$>, width=width_for(out))","<p>Outputs <code>obj</code> to <code>out</code> in pretty printed format of <code>width</code> columns in width.\n<p>If <code>out</code> is omitted, <code>$&gt;</code> is assumed. …\n"],["pp","PP::PPMethods","PP/PPMethods.html#method-i-pp","(obj)","<p>Adds <code>obj</code> to the pretty printing buffer using Object#pretty_print or Object#pretty_print_cycle.\n<p>Object#pretty_print_cycle …\n"],["pp_hash","PP::PPMethods","PP/PPMethods.html#method-i-pp_hash","(obj)","<p>A pretty print for a Hash\n"],["pp_object","PP::PPMethods","PP/PPMethods.html#method-i-pp_object","(obj)","<p>A present standard failsafe for pretty printing any given Object\n"],["ppid","Process","Process.html#method-c-ppid","()","<p>Returns the process id of the parent of this process. Returns untrustworthy value on Win32/64. Not available …\n"],["ppx","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-ppx","(prefix, *objs)","<p>Same as #pp, except it concatenates the given <code>prefix</code> with the #prefix given during object initialization. …\n"],["ppx","IRB::OutputMethod","IRB/OutputMethod.html#method-i-ppx","(prefix, *objs)","<p>Prints the given <code>objs</code> calling Object#inspect on each and appending the given <code>prefix</code>.\n<p>See #puts for more …\n"],["pre_input_hook","Readline","Readline.html#method-c-pre_input_hook","()","<p>Returns a Proc object <code>proc</code> to call after the first prompt has been printed and just before readline starts …\n"],["pre_input_hook=","Readline","Readline.html#method-c-pre_input_hook-3D","(p1)","<p>Specifies a Proc object <code>proc</code> to call after the first prompt has been printed and just before readline …\n"],["pre_input_hook=","Reline::Core","Reline/Core.html#method-i-pre_input_hook-3D","(p)",""],["pre_install","Gem","Gem.html#method-c-pre_install","(&hook)","<p>Adds a pre-install hook that will be passed an Gem::Installer instance when Gem::Installer#install is …\n"],["pre_install_checks","Gem::Installer","Gem/Installer.html#method-i-pre_install_checks","()","<p>Performs various checks before installing the gem such as the install repository is writable and its …\n"],["pre_match","MatchData","MatchData.html#method-i-pre_match","()","<p>Returns the substring of the target string from its beginning up to the first match in <code>self</code> (that is, …\n"],["pre_match","StringScanner","StringScanner.html#method-i-pre_match","()","<p>Returns the <strong><em>pre</strong>-match</em> (in the regular expression sense) of the last scan.\n\n<pre>s = StringScanner.new(&#39;test ...</pre>\n"],["pre_reset","Gem","Gem.html#method-c-pre_reset","(&hook)","<p>Adds a hook that will get run before Gem::Specification.reset is run.\n"],["pre_uninstall","Gem","Gem.html#method-c-pre_uninstall","(&hook)","<p>Adds a pre-uninstall hook that will be passed an Gem::Uninstaller instance and the spec that will be …\n"],["pread","IO","IO.html#method-i-pread","(p1, p2, p3 = v3)","<p>Behaves like IO#readpartial, except that it:\n<p>Reads at the given <code>offset</code> (in bytes).\n<p>Disregards, and does …\n"],["pread","IO::Buffer","IO/Buffer.html#method-i-pread","(*args)","<p>Read at most <code>length</code> bytes from <code>io</code> into the buffer, starting at <code>from</code>, and put it in buffer starting from …\n"],["prec","Racc::Rule","Racc/Rule.html#method-i-prec","(sym, &block)",""],["precedence","Racc::Rule","Racc/Rule.html#method-i-precedence","()",""],["precedence=","Racc::Rule","Racc/Rule.html#method-i-precedence-3D","(sym)",""],["precedence_table","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-precedence_table","(&block)",""],["precision","BigDecimal","BigDecimal.html#method-i-precision","()","<p>Returns the number of decimal digits in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&quot;0&quot;</span>).<span class=\"ruby-identifier\">precision</span>         <span class=\"ruby-comment\"># =&gt; 0</span>\n<span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&quot;1&quot;</span>).<span class=\"ruby-identifier\">precision</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["precision_scale","BigDecimal","BigDecimal.html#method-i-precision_scale","()","<p>Returns a 2-length array; the first item is the result of BigDecimal#precision and the second one is …\n"],["precs","BigDecimal","BigDecimal.html#method-i-precs","()","<p>Returns an Array of two Integer values that represent platform-dependent internal storage properties. …\n"],["pred","Integer","Integer.html#method-i-pred","()","<p>Returns the predecessor of <code>self</code> (equivalent to <code>self - 1</code>):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">pred</span>  <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-value\">-1</span>.<span class=\"ruby-identifier\">pred</span> <span class=\"ruby-comment\">#=&gt; -2</span>\n</pre>\n<p>Related: Integer#succ …\n"],["predecessors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-predecessors","()","<p>@return [Array&lt;Vertex&gt;] the vertices of {#graph} that have an edge with\n\n<pre>`self` as their {Edge#destination}</pre>\n"],["preferred_gemfile_name","Bundler","Bundler.html#method-c-preferred_gemfile_name","()",""],["prefetch","Gem::AvailableSet","Gem/AvailableSet.html#method-i-prefetch","(reqs)",""],["prefetch","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-i-prefetch","(reqs)","<p>A hint run by the resolver to allow the Set to fetch data for DependencyRequests <code>reqs</code>.\n"],["prefetch","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-prefetch","(reqs)","<p>Prefetches <code>reqs</code> in all sets.\n"],["prefetch","Gem::Resolver::GitSet","Gem/Resolver/GitSet.html#method-i-prefetch","(reqs)","<p>Prefetches specifications from the git repositories in this set.\n"],["prefetch","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-prefetch","(reqs)",""],["prefetch","Gem::Resolver::Set","Gem/Resolver/Set.html#method-i-prefetch","(reqs)","<p>The #prefetch method may be overridden, but this is not necessary.  This default implementation does …\n"],["prefix","Gem","Gem.html#method-c-prefix","()","<p>The directory prefix this RubyGems was installed at. If your prefix is in a standard location (ie, rubygems …\n"],["prefix","IPAddr","IPAddr.html#method-i-prefix","()","<p>Returns the prefix length in bits for the ipaddr.\n"],["prefix=","IPAddr","IPAddr.html#method-i-prefix-3D","(prefix)","<p>Sets the prefix length in bits\n"],["prep","Reline::ANSI","Reline/ANSI.html#method-c-prep","()",""],["prep","Reline::GeneralIO","Reline/GeneralIO.html#method-c-prep","()",""],["prep","Reline::Windows","Reline/Windows.html#method-c-prep","()",""],["prepare","CSV::Parser","CSV/Parser.html#method-i-prepare","()","<p>A set of tasks to prepare the file in order to parse it\n"],["prepare","CSV::Writer","CSV/Writer.html#method-i-prepare","()",""],["prepare_backslash","CSV::Parser","CSV/Parser.html#method-i-prepare_backslash","()",""],["prepare_force_quotes_fields","CSV::Writer","CSV/Writer.html#method-i-prepare_force_quotes_fields","(force_quotes)",""],["prepare_format","CSV::Writer","CSV/Writer.html#method-i-prepare_format","()",""],["prepare_header","CSV::Parser","CSV/Parser.html#method-i-prepare_header","()",""],["prepare_header","CSV::Writer","CSV/Writer.html#method-i-prepare_header","()",""],["prepare_line","CSV::Parser","CSV/Parser.html#method-i-prepare_line","()",""],["prepare_output","CSV::Writer","CSV/Writer.html#method-i-prepare_output","()",""],["prepare_parser","CSV::Parser","CSV/Parser.html#method-i-prepare_parser","()",""],["prepare_quote_character","CSV::Parser","CSV/Parser.html#method-i-prepare_quote_character","()",""],["prepare_quoted","CSV::Parser","CSV/Parser.html#method-i-prepare_quoted","()",""],["prepare_separators","CSV::Parser","CSV/Parser.html#method-i-prepare_separators","()",""],["prepare_skip_lines","CSV::Parser","CSV/Parser.html#method-i-prepare_skip_lines","()",""],["prepare_strip","CSV::Parser","CSV/Parser.html#method-i-prepare_strip","()",""],["prepare_unquoted","CSV::Parser","CSV/Parser.html#method-i-prepare_unquoted","()",""],["prepare_variable","CSV::Parser","CSV/Parser.html#method-i-prepare_variable","()",""],["preparing_gem_layout_for","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-preparing_gem_layout_for","(version)",""],["prepend","Array","Array.html#method-i-prepend","(*args)","<p>Prepends the given <code>objects</code> to <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">unshift</span>(<span class=\"ruby-value\">:bam</span>, <span class=\"ruby-value\">:bat</span>) <span class=\"ruby-comment\"># =&gt; [:bam, :bat, :foo, ...</span>\n</pre>\n"],["prepend","Gem::List","Gem/List.html#method-c-prepend","(list, value)",""],["prepend","Gem::List","Gem/List.html#method-i-prepend","(value)",""],["prepend","Module","Module.html#method-i-prepend","(*args)","<p>Invokes Module.prepend_features on each parameter in reverse order.\n"],["prepend","OptionParser::List","OptionParser/List.html#method-i-prepend","(*args)","<p>Inserts <code>switch</code> at the head of the list, and associates short, long and negated long options. Arguments …\n"],["prepend","String","String.html#method-i-prepend","(*args)","<p>Prepends each string in <code>other_strings</code> to <code>self</code> and returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">prepend</span>(<span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-string\">&#39;baz&#39;</span>) <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["prepend_destdir_if_present","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-prepend_destdir_if_present","(path)",""],["prepend_features","Module","Module.html#method-i-prepend_features","(p1)","<p>When this module is prepended in another, Ruby calls #prepend_features in this module, passing it the …\n"],["prepended","CoreExtensions::TCPSocketExt","CoreExtensions/TCPSocketExt.html#method-c-prepended","(base)",""],["prepended","Module","Module.html#method-i-prepended","(p1)","<p>The equivalent of <code>included</code>, but for prepended modules.\n\n<pre>module A\n  def self.prepended(mod)\n    puts &quot;#{self} ...</pre>\n"],["prerelease","Gem::QueryUtils","Gem/QueryUtils.html#method-i-prerelease","()",""],["prerelease=","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-prerelease-3D","(allow_prerelease)","<p>When <code>allow_prerelease</code> is set to <code>true</code> prereleases gems are allowed to match dependencies.\n"],["prerelease=","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-prerelease-3D","(allow_prerelease)",""],["prerelease?","Gem::Dependency","Gem/Dependency.html#method-i-prerelease-3F","()","<p>Does this dependency require a prerelease?\n"],["prerelease?","Gem::NameTuple","Gem/NameTuple.html#method-i-prerelease-3F","()","<p>Indicate if this NameTuple is for a prerelease version.\n"],["prerelease?","Gem::Requirement","Gem/Requirement.html#method-i-prerelease-3F","()","<p>A requirement is a prerelease if any of the versions inside of it are prereleases\n"],["prerelease?","Gem::Version","Gem/Version.html#method-i-prerelease-3F","()","<p>A version is considered a prerelease if it contains a letter.\n"],["pressed?","IO","IO.html#method-i-pressed-3F","(p1)",""],["pretty","CGI::Util","CGI/Util.html#method-i-pretty","(string, shift = \" \")","<p>Prettify (indent) an HTML string.\n<p><code>string</code> is the HTML string to indent.  <code>shift</code> is the indentation unit …\n"],["pretty_generate","JSON","JSON.html#method-i-pretty_generate","(obj, opts = nil)","<p>Arguments <code>obj</code> and <code>opts</code> here are the same as arguments <code>obj</code> and <code>opts</code> in JSON.generate.\n<p>Default options are: …\n"],["pretty_host","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-pretty_host","(host)",""],["pretty_inspect","Kernel","Kernel.html#method-i-pretty_inspect","()","<p>Returns a pretty printed object as a string.\n<p>In order to use this method you must first require the PP …\n"],["pretty_name","RDoc::Alias","RDoc/Alias.html#method-i-pretty_name","()",""],["pretty_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-pretty_name","()","<p>Method/attribute name with class/instance indicator\n"],["pretty_new_name","RDoc::Alias","RDoc/Alias.html#method-i-pretty_new_name","()","<p>New name with prefix ‘::’ or ‘#’.\n"],["pretty_old_name","RDoc::Alias","RDoc/Alias.html#method-i-pretty_old_name","()","<p>Old name with prefix ‘::’ or ‘#’.\n"],["pretty_print","OpenSSL::BN","OpenSSL/BN.html#method-i-pretty_print","(q)",""],["pretty_print","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-pretty_print","(q)",""],["pretty_print","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-pretty_print","(q)",""],["pretty_print","Ripper::Lexer::Elem","Ripper/Lexer/Elem.html#method-i-pretty_print","(q)",""],["pretty_print","Ripper::Lexer::State","Ripper/Lexer/State.html#method-i-pretty_print","(q)",""],["pretty_print","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-pretty_print","(q)",""],["pretty_print_children","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-pretty_print_children","(q, names = [])",""],["prev_day","Date","Date.html#method-i-prev_day","(p1 = v1)","<p>Equivalent to Date#- with argument <code>n</code>.\n"],["prev_float","Float","Float.html#method-i-prev_float","()","<p>Returns the next-smaller representable Float.\n<p>These examples show the internally stored values (64-bit …\n"],["prev_month","Date","Date.html#method-i-prev_month","(p1 = v1)","<p>Equivalent to #<< with argument <code>n</code>.\n"],["prev_year","Date","Date.html#method-i-prev_year","(p1 = v1)","<p>Equivalent to #<< with argument <code>n * 12</code>.\n"],["previous_history","Reline::LineEditor","Reline/LineEditor.html#method-i-previous_history","(key, arg: 1)",""],["previous_period_end","Logger::Period","Logger/Period.html#method-i-previous_period_end","(now, shift_age)",""],["primary","Rinda::RingFinger","Rinda/RingFinger.html#method-c-primary","()","<p>Returns the first advertised TupleSpace.\n"],["prime?","OpenSSL::BN","OpenSSL/BN.html#method-i-prime-3F","(*args)","<p>Performs a Miller-Rabin probabilistic primality test for <code>bn</code>.\n<p><strong><code>checks</code> parameter is deprecated in version</strong> …\n"],["prime_fasttest?","OpenSSL::BN","OpenSSL/BN.html#method-i-prime_fasttest-3F","(*args)","<p>Performs a Miller-Rabin probabilistic primality test for <code>bn</code>.\n<p><strong>Deprecated in version 3.0.</strong> Use #prime? instead. …\n"],["primitive_convert","Encoding::Converter","Encoding/Converter.html#method-i-primitive_convert","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = {})","<p>possible opt elements:\n\n<pre>hash form:\n  :partial_input =&gt; true           # source buffer may be part of larger ...</pre>\n"],["primitive_errinfo","Encoding::Converter","Encoding/Converter.html#method-i-primitive_errinfo","()","<p>primitive_errinfo returns important information regarding the last error as a 5-element array:\n\n<pre>[result, ...</pre>\n"],["print","ARGF","ARGF.html#method-i-print","(*args)","<p>Writes the given objects to the stream; returns <code>nil</code>. Appends the output record separator <code>$OUTPUT_RECORD_SEPARATOR</code> …\n"],["print","CGI","CGI.html#method-i-print","(*options)","<p>Print an argument or list of arguments to the default output stream\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">cgi</span> = <span class=\"ruby-constant\">CGI</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">cgi</span>.<span class=\"ruby-identifier\">print</span>    <span class=\"ruby-comment\"># default: ...</span>\n</pre>\n"],["print","Gem::SilentUI::NullIO","Gem/SilentUI/NullIO.html#method-i-print","(*args)",""],["print","IO","IO.html#method-i-print","(*args)","<p>Writes the given objects to the stream; returns <code>nil</code>. Appends the output record separator <code>$OUTPUT_RECORD_SEPARATOR</code> …\n"],["print","IO::generic_writable","IO/generic_writable.html#method-i-print","(*args)","<p>See IO#print.\n"],["print","IRB::Locale","IRB/Locale.html#method-i-print","(*opts)",""],["print","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-print","(*opts)","<p>See OutputMethod#print for more detail.\n"],["print","IRB::OutputMethod","IRB/OutputMethod.html#method-i-print","(*opts)","<p>Open this method to implement your own output method, raises a NotImplementedError if you don’t define …\n"],["print","IRB::StdioOutputMethod","IRB/StdioOutputMethod.html#method-i-print","(*opts)","<p>Prints the given <code>opts</code> to standard output, see IO#print for more information.\n"],["print","Kernel","Kernel.html#method-i-print","(*args)","<p>Equivalent to <code>$stdout.print(*objects)</code>, this method is the straightforward way to write to <code>$stdout</code>.\n<p>Writes …\n"],["print","Net::WriteAdapter","Net/WriteAdapter.html#method-i-print","(str)",""],["print","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-print","(*args)","<p>Writes <em>args</em> to the stream.\n<p>See IO#print for full details.\n"],["print","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-print","(*args)","<p>Same as IO.\n"],["print_atab","Racc::States","Racc/States.html#method-i-print_atab","(idx, tab)","<p>for debug\n"],["print_command","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-print_command","()",""],["print_mem_leaks","OpenSSL","OpenSSL.html#method-c-print_mem_leaks","()","<p>For debugging the Ruby/OpenSSL library. Calls CRYPTO_mem_leaks_fp(stderr). Prints detected memory leaks …\n"],["print_tab","Racc::States","Racc/States.html#method-i-print_tab","(idx, rel, tab)",""],["print_tab_i","Racc::States","Racc/States.html#method-i-print_tab_i","(idx, rel, tab, i)","<p>for debug\n"],["print_usage","IRB","IRB.html#method-c-print_usage","()","<p>Outputs the irb help message, see IRB@Command+line+options.\n"],["printb","Racc::States","Racc/States.html#method-i-printb","(i)","<p>for debug\n"],["printf","ARGF","ARGF.html#method-i-printf","(*args)","<p>Formats and writes <code>objects</code> to the stream.\n<p>For details on <code>format_string</code>, see Format Specifications.\n"],["printf","IO","IO.html#method-i-printf","(*args)","<p>Formats and writes <code>objects</code> to the stream.\n<p>For details on <code>format_string</code>, see Format Specifications.\n"],["printf","IO::generic_writable","IO/generic_writable.html#method-i-printf","(*args)","<p>See IO#printf.\n"],["printf","IRB::Locale","IRB/Locale.html#method-i-printf","(*opts)",""],["printf","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-printf","(format, *opts)","<p>See OutputMethod#printf for more detail.\n"],["printf","IRB::OutputMethod","IRB/OutputMethod.html#method-i-printf","(format, *opts)","<p>Extends IO#printf to format the given <code>opts</code> for Kernel#sprintf using #parse_printf_format\n"],["printf","Kernel","Kernel.html#method-i-printf","(*args)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">io</span>.<span class=\"ruby-identifier\">write</span>(<span class=\"ruby-identifier\">sprintf</span>(<span class=\"ruby-identifier\">format_string</span>, <span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">objects</span>))\n</pre>\n<p>For details on <code>format_string</code>, see Format Specifications …\n"],["printf","Net::WriteAdapter","Net/WriteAdapter.html#method-i-printf","(*args)",""],["printf","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-printf","(s, *args)","<p>Formats and writes to the stream converting parameters under control of the format string.\n<p>See Kernel#sprintf …\n"],["printf","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-printf","(*args)","<p>Same as IO.\n"],["printn","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-printn","(*opts)","<p>See OutputMethod#printn for more detail.\n"],["printn","IRB::OutputMethod","IRB/OutputMethod.html#method-i-printn","(*opts)","<p>Prints the given <code>opts</code>, with a newline delimiter.\n"],["prioritize!","Gem::BundlerVersionFinder","Gem/BundlerVersionFinder.html#method-c-prioritize-21","(specs)",""],["prioritizes_bundler?","Gem::Dependency","Gem/Dependency.html#method-i-prioritizes_bundler-3F","()",""],["priority","Thread","Thread.html#method-i-priority","()","<p>Returns the priority of <em>thr</em>. Default is inherited from the current thread which creating the new thread, …\n"],["priority=","Thread","Thread.html#method-i-priority-3D","(p1)","<p>Sets the priority of <em>thr</em> to <em>integer</em>. Higher-priority threads will run more frequently than lower-priority …\n"],["private","Module","Module.html#method-i-private","(*args)","<p>With no arguments, sets the default visibility for subsequently defined methods to private. With arguments, …\n"],["private?","IPAddr","IPAddr.html#method-i-private-3F","()","<p>Returns true if the ipaddr is a private address.  IPv4 addresses in 10.0.0.0/8, 172.16.0.0/12 and 192.168.0.0/16 …\n"],["private?","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-private-3F","()","<p>Indicates whether this DH instance has a private key associated with it or not. The private key may be …\n"],["private?","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-private-3F","()","<p>Indicates whether this DSA instance has a private key associated with it or not. The private key may …\n"],["private?","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-private-3F","()","<p>Returns whether this EC instance has a private key. The private key (BN) can be retrieved with EC#private_key …\n"],["private?","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-private-3F","()","<p>Does this keypair contain a private key?\n"],["private_call?","NoMethodError","NoMethodError.html#method-i-private_call-3F","()","<p>Return true if the caused method was called as private.\n"],["private_class_method","Module","Module.html#method-i-private_class_method","(*args)","<p>Makes existing class methods private. Often used to hide the default constructor <code>new</code>.\n<p>String arguments …\n"],["private_constant","Module","Module.html#method-i-private_constant","(*args)","<p>Makes a list of existing constants private.\n"],["private_decrypt","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-private_decrypt","(data, padding = PKCS1_PADDING)","<p>Decrypt <code>string</code>, which has been encrypted with the public key, with the private key. <code>padding</code> defaults …\n"],["private_encrypt","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-private_encrypt","(string, padding = PKCS1_PADDING)","<p>Encrypt <code>string</code> with the private key.  <code>padding</code> defaults to PKCS1_PADDING, which is known to be insecure …\n"],["private_instance_methods","Module","Module.html#method-i-private_instance_methods","(*args)","<p>Returns a list of the private instance methods defined in <em>mod</em>. If the optional parameter is <code>false</code>, the …\n"],["private_key","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-private_key","()","<p>See the OpenSSL documentation for EC_KEY_get0_private_key()\n"],["private_key=","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-private_key-3D","(p1)","<p>See the OpenSSL documentation for EC_KEY_set_private_key()\n"],["private_key?","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-private_key-3F","()","<p>Returns whether this EC instance has a private key. The private key (BN) can be retrieved with EC#private_key …\n"],["private_method_defined?","Module","Module.html#method-i-private_method_defined-3F","(*args)","<p>Returns <code>true</code> if the named private method is defined by <em>mod</em>.  If <em>inherit</em> is set, the lookup will also …\n"],["private_methods","Object","Object.html#method-i-private_methods","(*args)","<p>Returns the list of private methods accessible to <em>obj</em>. If the <em>all</em> parameter is set to <code>false</code>, only those …\n"],["private_to_der","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-private_to_der","(*args)","<p>Serializes the private key to DER-encoded PKCS #8 format. If called without arguments, unencrypted PKCS …\n"],["private_to_pem","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-private_to_pem","(*args)","<p>Serializes the private key to PEM-encoded PKCS #8 format. See #private_to_der for more details.\n"],["proc","Kernel","Kernel.html#method-i-proc","()","<p>Equivalent to Proc.new.\n"],["proc","Racc::UserAction","Racc/UserAction.html#method-c-proc","(pr = nil, &block)",""],["proc?","Racc::UserAction","Racc/UserAction.html#method-i-proc-3F","()",""],["process","Reline::KillRing","Reline/KillRing.html#method-i-process","()",""],["process_args","Gem::CommandManager","Gem/CommandManager.html#method-i-process_args","(args, build_args=nil)",""],["process_auto_indent","Reline::LineEditor","Reline/LineEditor.html#method-i-process_auto_indent","()",""],["process_insert","Reline::LineEditor","Reline/LineEditor.html#method-i-process_insert","(force: false)",""],["process_key","Reline::LineEditor","Reline/LineEditor.html#method-i-process_key","(key, method_symbol)",""],["process_key_event","Reline::Windows","Reline/Windows.html#method-c-process_key_event","(repeat_count, virtual_key_code, virtual_scan_code, char_code, control_key_state)",""],["process_topmost_state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-process_topmost_state","()","<p>Processes the topmost available {RequirementState} on the stack @return [void]\n"],["process_wait","Fiber::Scheduler","Fiber/Scheduler.html#method-i-process_wait","(p1, p2)","<p>Invoked by Process::Status.wait in order to wait for a specified process. See that method description …\n"],["produce","Enumerator","Enumerator.html#method-c-produce","(p1 = v1)","<p>Creates an infinite enumerator from any block, just called over and over.  The result of the previous …\n"],["product","Array","Array.html#method-i-product","(*args)","<p>Computes and returns or yields all combinations of elements from all the Arrays, including both <code>self</code> …\n"],["product","Enumerator","Enumerator.html#method-c-product","(*args, p2 = {}, &block)","<p>Generates a new enumerator object that generates a Cartesian product of given enumerable objects.  This …\n"],["progid","WIN32OLE::Type","WIN32OLE/Type.html#method-i-progid","()","<p>Returns ProgID if it exists. If not found, then returns nil.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel ...</pre>\n"],["progids","WIN32OLE::Type","WIN32OLE/Type.html#method-c-progids","()","<p>Returns array of ProgID.\n"],["program_name","OptionParser","OptionParser.html#method-i-program_name","()","<p>Program name to be emitted in error message and default banner, defaults to $0.\n"],["progress_rate","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-progress_rate","()","<p>How often progress should be conveyed to the user via {#indicate_progress}, in seconds. A third of a …\n"],["progress_reporter","Gem::StreamUI","Gem/StreamUI.html#method-i-progress_reporter","(*args)","<p>Return a progress reporter object chosen from the current verbosity.\n"],["prompt_mode=","IRB::Context","IRB/Context.html#method-i-prompt_mode-3D","(mode)","<p>Sets the <code>mode</code> of the prompt in this context.\n<p>See IRB@Customizing+the+IRB+Prompt for more information. …\n"],["prompt_proc=","Reline::Core","Reline/Core.html#method-i-prompt_proc-3D","(p)",""],["prompting?","IRB::Context","IRB/Context.html#method-i-prompting-3F","()","<p>Whether #verbose? is <code>true</code>, and <code>input_method</code> is either StdioInputMethod or RelineInputMethod or ReadlineInputMethod …\n"],["proper_subset?","Set","Set.html#method-i-proper_subset-3F","(set)","<p>Returns true if the set is a proper subset of the given set.\n"],["proper_superset?","Set","Set.html#method-i-proper_superset-3F","(set)","<p>Returns true if the set is a proper superset of the given set.\n"],["propfind","Net::HTTP","Net/HTTP.html#method-i-propfind","(path, body = nil, initheader = {'Depth' => '0'})","<p>Sends a PROPFIND request to the <code>path</code> and gets a response, as an HTTPResponse object.\n"],["proppatch","Net::HTTP","Net/HTTP.html#method-i-proppatch","(path, body, initheader = nil)","<p>Sends a PROPPATCH request to the <code>path</code> and gets a response, as an HTTPResponse object.\n"],["protected","Module","Module.html#method-i-protected","(*args)","<p>With no arguments, sets the default visibility for subsequently defined methods to protected. With arguments, …\n"],["protected_instance_methods","Module","Module.html#method-i-protected_instance_methods","(*args)","<p>Returns a list of the protected instance methods defined in <em>mod</em>. If the optional parameter is <code>false</code>, …\n"],["protected_method_defined?","Module","Module.html#method-i-protected_method_defined-3F","(*args)","<p>Returns <code>true</code> if the named protected method is defined <em>mod</em>.  If <em>inherit</em> is set, the lookup will also search …\n"],["protected_methods","Delegator","Delegator.html#method-i-protected_methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this object’s and _<em>getobj</em> …\n"],["protected_methods","Object","Object.html#method-i-protected_methods","(*args)","<p>Returns the list of protected methods accessible to <em>obj</em>. If the <em>all</em> parameter is set to <code>false</code>, only those …\n"],["protocol","Addrinfo","Addrinfo.html#method-i-protocol","()","<p>returns the socket type as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">protocol</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">IPPROTO_TCP</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["provide","Rinda::RingProvider","Rinda/RingProvider.html#method-i-provide","()","<p>Advertises this service on the primary remote TupleSpace.\n"],["proxy?","Net::HTTP","Net/HTTP.html#method-i-proxy-3F","()","<p>True if requests for this connection will be proxied\n"],["proxy_address","Net::HTTP","Net/HTTP.html#method-i-proxy_address","()","<p>The address of the proxy server, if one is configured.\n"],["proxy_auth_get","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-c-proxy_auth_get","(http, path, user = nil, domain = nil)","<p>Given a connection and a request path, performs authentication as the current user and returns the response …\n"],["proxy_basic_auth","Net::HTTPHeader","Net/HTTPHeader.html#method-i-proxy_basic_auth","(account, password)","<p>Set Proxy-Authorization: header for “Basic” authorization.\n"],["proxy_class?","Net::HTTP","Net/HTTP.html#method-c-proxy_class-3F","()","<p>returns true if self is a class which was created by HTTP::Proxy.\n"],["proxy_for","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-proxy_for","(proxy, uri)",""],["proxy_from_env?","Net::HTTP","Net/HTTP.html#method-i-proxy_from_env-3F","()","<p>True if the proxy for this connection is determined from the environment\n"],["proxy_pass","Net::HTTP","Net/HTTP.html#method-i-proxy_pass","()","<p>The password of the proxy server, if one is configured.\n"],["proxy_port","Net::HTTP","Net/HTTP.html#method-i-proxy_port","()","<p>The port of the proxy server, if one is configured.\n"],["proxy_uri","Gem::Request","Gem/Request.html#method-i-proxy_uri","()",""],["proxy_user","Net::HTTP","Net/HTTP.html#method-i-proxy_user","()","<p>The username of the proxy server, if one is configured.\n"],["proxyaddr","Net::HTTP","Net/HTTP.html#method-i-proxyaddr","()",""],["proxyport","Net::HTTP","Net/HTTP.html#method-i-proxyport","()",""],["prune","Find","Find.html#method-c-prune","()","<p>Skips the current file or directory, restarting the loop with the next entry. If the current file is …\n"],["prune","Find","Find.html#method-i-prune","()","<p>Skips the current file or directory, restarting the loop with the next entry. If the current file is …\n"],["prune_engulf","SyntaxSuggest::PriorityEngulfQueue","SyntaxSuggest/PriorityEngulfQueue.html#method-i-prune_engulf","(block)",""],["ptr","Fiddle::Pointer","Fiddle/Pointer.html#method-i-ptr","()","<p>Returns a new Fiddle::Pointer instance that is a dereferenced pointer for this pointer.\n<p>Analogous to the …\n"],["ptr_bug!","Racc::LocationPointer","Racc/LocationPointer.html#method-i-ptr_bug-21","()",""],["public","Module","Module.html#method-i-public","(*args)","<p>With no arguments, sets the default visibility for subsequently defined methods to public. With arguments, …\n"],["public?","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-public-3F","()","<p>Indicates whether this DH instance has a public key associated with it or not. The public key may be …\n"],["public?","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-public-3F","()","<p>Indicates whether this DSA instance has a public key associated with it or not. The public key may be …\n"],["public?","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-public-3F","()","<p>Returns whether this EC instance has a public key. The public key (EC::Point) can be retrieved with  …\n"],["public?","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-public-3F","()","<p>The return value is always <code>true</code> since every private key is also a public key.\n"],["public_class_method","Module","Module.html#method-i-public_class_method","(*args)","<p>Makes a list of existing class methods public.\n<p>String arguments are converted to symbols. An Array of …\n"],["public_constant","Module","Module.html#method-i-public_constant","(*args)","<p>Makes a list of existing constants public.\n"],["public_decrypt","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-public_decrypt","(string, padding = PKCS1_PADDING)","<p>Decrypt <code>string</code>, which has been encrypted with the private key, with the public key.  <code>padding</code> defaults …\n"],["public_encrypt","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-public_encrypt","(data, padding = PKCS1_PADDING)","<p>Encrypt <code>string</code> with the public key.  <code>padding</code> defaults to PKCS1_PADDING, which is known to be insecure …\n"],["public_instance_method","Module","Module.html#method-i-public_instance_method","(p1)","<p>Similar to <em>instance_method</em>, searches public method only.\n"],["public_instance_methods","Module","Module.html#method-i-public_instance_methods","(*args)","<p>Returns a list of the public instance methods defined in <em>mod</em>. If the optional parameter is <code>false</code>, the …\n"],["public_key","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-public_key","()","<p>Returns the public key associated with the SPKI, an instance of OpenSSL::PKey.\n"],["public_key","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-public_key","()","<p>Returns a new DH instance that carries just the DH parameters.\n<p>Contrary to the method name, the returned …\n"],["public_key","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-public_key","()","<p>Returns a new DSA instance that carries just the DSA parameters and the public key.\n<p>This method is provided …\n"],["public_key","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-public_key","()","<p>See the OpenSSL documentation for EC_KEY_get0_public_key()\n"],["public_key","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-public_key","()","<p>Returns a new RSA instance that carries just the public key components.\n<p>This method is provided for backwards …\n"],["public_key","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-public_key","()",""],["public_key","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-public_key","()",""],["public_key=","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-public_key-3D","(p1)","<p>Parameters\n<p><em>pub</em> - the public key to be set for this instance\n\n<p>Sets the public key to be associated with the …\n"],["public_key=","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-public_key-3D","(p1)","<p>See the OpenSSL documentation for EC_KEY_set_public_key()\n"],["public_key=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-public_key-3D","(p1)",""],["public_key=","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-public_key-3D","(p1)",""],["public_key?","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-public_key-3F","()","<p>Returns whether this EC instance has a public key. The public key (EC::Point) can be retrieved with  …\n"],["public_method","Object","Object.html#method-i-public_method","(p1)","<p>Similar to <em>method</em>, searches public method only.\n"],["public_method_defined?","Module","Module.html#method-i-public_method_defined-3F","(*args)","<p>Returns <code>true</code> if the named public method is defined by <em>mod</em>.  If <em>inherit</em> is set, the lookup will also search …\n"],["public_methods","Delegator","Delegator.html#method-i-public_methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this object’s and _<em>getobj</em> …\n"],["public_methods","Object","Object.html#method-i-public_methods","(*args)","<p>Returns the list of public methods accessible to <em>obj</em>. If the <em>all</em> parameter is set to <code>false</code>, only those …\n"],["public_send","Object","Object.html#method-i-public_send","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments specified. Unlike send, public_send …\n"],["public_to_der","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-public_to_der","()","<p>Serializes the public key to DER-encoded X.509 SubjectPublicKeyInfo format.\n"],["public_to_pem","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-public_to_pem","()","<p>Serializes the public key to PEM-encoded X.509 SubjectPublicKeyInfo format.\n"],["purpose=","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-purpose-3D","(p1)","<p>Sets the store’s default verification purpose. If specified, the verifications on the store will …\n"],["purpose=","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-purpose-3D","(p1)","<p>Sets the purpose of the context. This overrides the default value set by Store#purpose=.\n<p>See also the …\n"],["push","Array","Array.html#method-i-push","(*args)","<p>Appends trailing elements.\n<p>Appends each argument in <code>objects</code> to <code>self</code>;  returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["push","CSV::Row","CSV/Row.html#method-i-push","(*args)","<p>Appends each of the given <code>values</code> to <code>self</code> as a field; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;Name,Name,Name\\nFoo,Bar,Baz\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["push","CSV::Table","CSV/Table.html#method-i-push","(*rows)","<p>A shortcut for appending multiple rows. Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rows</span>.<span class=\"ruby-identifier\">each</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">row</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-keyword\">self</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-identifier\">row</span> }\n</pre>\n<p>Each argument may …\n"],["push","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-push","(value)",""],["push","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-push","(object)",""],["push","Reline::History","Reline/History.html#method-i-push","(*val)",""],["push","Rinda::TupleBag","Rinda/TupleBag.html#method-i-push","(tuple)","<p>Add <code>tuple</code> to the TupleBag.\n"],["push","SyntaxSuggest::CodeSearch","SyntaxSuggest/CodeSearch.html#method-i-push","(block, name:)",""],["push","SyntaxSuggest::PriorityEngulfQueue","SyntaxSuggest/PriorityEngulfQueue.html#method-i-push","(block)",""],["push","Thread::Queue","Thread/Queue.html#method-i-push","(p1)","<p>Pushes the given <code>object</code> to the queue.\n"],["push","Thread::SizedQueue","Thread/SizedQueue.html#method-i-push","(object, non_block = false, timeout: nil)","<p>Pushes <code>object</code> to the queue.\n<p>If there is no space left in the queue, waits until space becomes available, …\n"],["push_action","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-push_action","(graph, action)","<p>Adds the given action to the log, running the action @param [DependencyGraph] graph @param [Action] action …\n"],["push_initial_state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-push_initial_state","()","<p>Creates and pushes the initial state for the resolution, based upon the {#requested} dependencies @return …\n"],["push_inspect_key","PP::PPMethods","PP/PPMethods.html#method-i-push_inspect_key","(id)","<p>Adds the object_id <code>id</code> to the set of objects being pretty printed, so as to not repeat objects.\n"],["push_state_for_requirements","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-push_state_for_requirements","(new_requirements, requires_sort = true, new_activated = activated)","<p>Pushes a new {DependencyState} that encapsulates both existing and new requirements @param [Array] new_requirements …\n"],["push_workspace","IRB::Context","IRB/Context.html#method-i-push_workspace","(*_main)","<p>Creates a new workspace with the given object or binding, and appends it onto the current #workspaces …\n"],["put","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-put","(src, convert_line = false)","<p>Low Level Routines\n"],["put_state_transition_table","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-put_state_transition_table","(f)","<p>State Transition Table Serialization\n"],["putback","Encoding::Converter","Encoding/Converter.html#method-i-putback","(*args)","<p>Put back the bytes which will be converted.\n<p>The bytes are caused by invalid_byte_sequence error. When …\n"],["putc","ARGF","ARGF.html#method-i-putc","(p1)","<p>Writes a character to the stream. See Character IO.\n<p>If <code>object</code> is numeric, converts to integer if necessary, …\n"],["putc","IO","IO.html#method-i-putc","(p1)","<p>Writes a character to the stream. See Character IO.\n<p>If <code>object</code> is numeric, converts to integer if necessary, …\n"],["putc","Kernel","Kernel.html#method-i-putc","(p1)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$stdout</span>.<span class=\"ruby-identifier\">putc</span>(<span class=\"ruby-identifier\">int</span>)\n</pre>\n<p>See IO#putc for important information regarding multi-byte characters. …\n"],["putc","StringIO","StringIO.html#method-i-putc","(p1)","<p>See IO#putc.\n"],["putc","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-putc","(p1)","<p>Same as IO.\n"],["puts","ARGF","ARGF.html#method-i-puts","(*args)","<p>Writes the given <code>objects</code> to the stream, which must be open for writing; returns <code>nil</code>.\\ Writes a newline …\n"],["puts","CSV","CSV.html#method-i-puts","(row)",""],["puts","Gem::SilentUI::NullIO","Gem/SilentUI/NullIO.html#method-i-puts","(*args)",""],["puts","IO","IO.html#method-i-puts","(*args)","<p>Writes the given <code>objects</code> to the stream, which must be open for writing; returns <code>nil</code>.\\ Writes a newline …\n"],["puts","IO::generic_writable","IO/generic_writable.html#method-i-puts","(*args)","<p>See IO#puts.\n"],["puts","IRB::Locale","IRB/Locale.html#method-i-puts","(*opts)",""],["puts","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-puts","(*objs)","<p>See OutputMethod#puts for more detail.\n"],["puts","IRB::OutputMethod","IRB/OutputMethod.html#method-i-puts","(*objs)","<p>Calls #print on each element in the given <code>objs</code>, followed by a newline character.\n"],["puts","Kernel","Kernel.html#method-i-puts","(*args)","<p>Equivalent to\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$stdout</span>.<span class=\"ruby-identifier\">puts</span>(<span class=\"ruby-identifier\">objects</span>)\n</pre>\n"],["puts","Net::WriteAdapter","Net/WriteAdapter.html#method-i-puts","(str = '')",""],["puts","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-puts","(*args)","<p>Writes <em>args</em> to the stream along with a record separator.\n<p>See IO#puts for full details.\n"],["puts","SyntaxSuggest::MiniStringIO","SyntaxSuggest/MiniStringIO.html#method-i-puts","(value = $/, **)",""],["puts","XMP","XMP.html#method-i-puts","(exps)","<p>Evaluates the given <code>exps</code>, for example:\n\n<pre>require &#39;irb/xmp&#39;\nx = XMP.new\n\nx.puts &#39;{:a =&gt; 1, :b =&gt; 2, :c =&gt; ...</pre>\n"],["puts","XMP::StringInputMethod","XMP/StringInputMethod.html#method-i-puts","(exps)","<p>Concatenates all expressions in this printer, separated by newlines.\n<p>An Encoding::CompatibilityError is …\n"],["puts","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-puts","(*args)","<p>Same as IO.\n"],["pwd","Dir","Dir.html#method-c-pwd","()","<p>Returns the path to the current working directory of this process as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">chdir</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["pwd","FileUtils","FileUtils.html#method-i-pwd","()","<p>Returns a string containing the path to the current directory:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">pwd</span> <span class=\"ruby-comment\"># =&gt; &quot;/rdoc/fileutils&quot;</span>\n</pre>\n<p>FileUtils.getwd …\n"],["pwd","FileUtils","FileUtils.html#method-c-pwd","()","<p>Returns a string containing the path to the current directory:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">pwd</span> <span class=\"ruby-comment\"># =&gt; &quot;/rdoc/fileutils&quot;</span>\n</pre>\n<p>FileUtils.getwd …\n"],["pwd","Pathname","Pathname.html#method-c-pwd","()","<p>Returns the current working directory as a Pathname.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Pathname</span>.<span class=\"ruby-identifier\">getwd</span>\n    <span class=\"ruby-comment\">#=&gt; #&lt;Pathname:/home/zzak/projects/ruby&gt;</span>\n</pre>\n"],["pwrite","IO","IO.html#method-i-pwrite","(p1, p2)","<p>Behaves like IO#write, except that it:\n<p>Writes at the given <code>offset</code> (in bytes).\n<p>Disregards, and does not …\n"],["pwrite","IO::Buffer","IO/Buffer.html#method-i-pwrite","(*args)","<p>Writes <code>length</code> bytes from buffer into <code>io</code>, starting at <code>offset</code> in the buffer. If an error occurs, return …\n"],["query=","URI::Generic","URI/Generic.html#method-i-query-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["quiet","RDoc::Options","RDoc/Options.html#method-i-quiet","()","<p>Don’t display progress as we process the files\n"],["quiet=","RDoc::Options","RDoc/Options.html#method-i-quiet-3D","(bool)","<p>Set quietness to <code>bool</code>\n"],["quo","BigDecimal","BigDecimal.html#method-i-quo","(p1, p2 = v2)","<p>Divide by the specified value.\n<p>digits &mdash; If specified and less than the number of significant digits of the …\n"],["quo","Complex","Complex.html#method-i-quo","(p1)","<p>Performs division.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; ((1/1)+(0/1)*i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["quo","Float","Float.html#method-i-quo","(p1)","<p>Returns the quotient from dividing <code>self</code> by <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">quo</span>(<span class=\"ruby-value\">2</span>)              <span class=\"ruby-comment\"># =&gt; 1.57</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">quo</span>(<span class=\"ruby-value\">-2</span>)  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["quo","Numeric","Numeric.html#method-i-quo","(p1)","<p>Returns the most exact division (rational for integers, float for floats).\n"],["quo","Rational","Rational.html#method-i-quo","(p1)","<p>Performs division.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (1/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["quote","CSV::Writer","CSV/Writer.html#method-i-quote","(field, i)",""],["quote","Regexp","Regexp.html#method-c-quote","(p1)","<p>Returns a new string that escapes any characters that have special meaning in a regular expression:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["quote_char","CSV","CSV.html#method-i-quote_char","()","<p>Returns the encoded quote character; used for parsing and writing; see {Option <code>quote_char</code>}:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CSV</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;&#39;</span>).<span class=\"ruby-identifier\">quote_char</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["quote_character","CSV::Parser","CSV/Parser.html#method-i-quote_character","()",""],["quote_field","CSV::Writer","CSV/Writer.html#method-i-quote_field","(field)",""],["quote_string","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-quote_string","(str, charset)",""],["quoted_insert","Reline::LineEditor","Reline/LineEditor.html#method-i-quoted_insert","(str, arg: 1)",""],["quoting_detection_proc","Readline","Readline.html#method-c-quoting_detection_proc","()","<p>Returns the quoting detection Proc object.\n"],["quoting_detection_proc=","Readline","Readline.html#method-c-quoting_detection_proc-3D","(p1)","<p>Specifies a Proc object <code>proc</code> to determine if a character in the user’s input is escaped. It should …\n"],["racc_accept","Racc::Parser","Racc/Parser.html#method-i-racc_accept","()",""],["racc_e_pop","Racc::Parser","Racc/Parser.html#method-i-racc_e_pop","(state, tstack, vstack)",""],["racc_next_state","Racc::Parser","Racc/Parser.html#method-i-racc_next_state","(curstate, state)",""],["racc_print_stacks","Racc::Parser","Racc/Parser.html#method-i-racc_print_stacks","(t, v)",""],["racc_print_states","Racc::Parser","Racc/Parser.html#method-i-racc_print_states","(s)",""],["racc_read_token","Racc::Parser","Racc/Parser.html#method-i-racc_read_token","(t, tok, val)","<p>For debugging output\n"],["racc_reduce","Racc::Parser","Racc/Parser.html#method-i-racc_reduce","(toks, sim, tstack, vstack)",""],["racc_shift","Racc::Parser","Racc/Parser.html#method-i-racc_shift","(tok, tstack, vstack)",""],["racc_token2str","Racc::Parser","Racc/Parser.html#method-i-racc_token2str","(tok)",""],["radio_button","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-radio_button","(name = \"\", value = nil, checked = nil)","<p>Generates a radio-button Input element.\n<p><code>name</code> is the name of the input field.  <code>value</code> is the value of the …\n"],["radio_group","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-radio_group","(name = \"\", *values)","<p>Generate a sequence of radio button Input elements, as a String.\n<p>This works the same as #checkbox_group() …\n"],["raise","Delegator","Delegator.html#method-i-raise","","<p>Use #__raise__ if your Delegator does not have a object to delegate the #raise method call.\n"],["raise","Fiber","Fiber.html#method-i-raise","(*args)","<p>Raises an exception in the fiber at the point at which the last <code>Fiber.yield</code> was called. If the fiber …\n"],["raise","Kernel","Kernel.html#method-i-raise","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a RuntimeError if <code>$!</code> is <code>nil</code>.  With a single  …\n"],["raise","Thread","Thread.html#method-i-raise","(*args)","<p>Raises an exception from the given thread. The caller does not have to be <code>thr</code>. See Kernel#raise for more …\n"],["raise_error_unless_state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-raise_error_unless_state","(conflicts)","<p>Raises a VersionConflict error, or any underlying error, if there is no current state @return [void] …\n"],["raised_exception","TracePoint","TracePoint.html#method-i-raised_exception","()","<p>Value from exception raised on the <code>:raise</code> event\n"],["rand","Kernel","Kernel.html#method-i-rand","(*args)","<p>If called without an argument, or if <code>max.to_i.abs == 0</code>, rand returns a pseudo-random floating point number …\n"],["rand","OpenSSL::BN","OpenSSL/BN.html#method-c-rand","(p1, p2 = v2, p3 = v3)","<p>Generates a cryptographically strong pseudo-random number of <code>bits</code>.\n<p>See also the man page BN_rand(3).\n"],["rand","Random","Random.html#method-i-rand","(*args)","<p>When <code>max</code> is an Integer, <code>rand</code> returns a random integer greater than or equal to zero and less than <code>max</code> …\n"],["rand","Random","Random.html#method-c-rand","(*args)","<p>Returns a random number using the Ruby system PRNG.\n<p>See also Random#rand.\n"],["rand","Random::Formatter","Random/Formatter.html#method-i-rand","(*args)","<p>Generates formatted random number from raw random bytes. See Random#rand.\n"],["rand_range","OpenSSL::BN","OpenSSL/BN.html#method-c-rand_range","(p1)","<p>Generates a cryptographically strong pseudo-random number in the range 0…<code>range</code>.\n<p>See also the man page …\n"],["random_add","OpenSSL::Random","OpenSSL/Random.html#method-c-random_add","(p1, p2)","<p>Mixes the bytes from <em>str</em> into the Pseudo Random Number Generator(PRNG) state.\n<p>Thus, if the data from  …\n"],["random_bytes","OpenSSL::Random","OpenSSL/Random.html#method-c-random_bytes","(p1)","<p>Generates a String with <em>length</em> number of cryptographically strong pseudo-random bytes.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Random</span>.<span class=\"ruby-identifier\">random_bytes</span>(<span class=\"ruby-value\">12</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["random_bytes","Random::Formatter","Random/Formatter.html#method-i-random_bytes","(n=nil)","<p>Generate a random binary string.\n<p>The argument <em>n</em> specifies the length of the result string.\n<p>If <em>n</em> is not …\n"],["random_iv","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-random_iv","()","<p>Generate a random IV with OpenSSL::Random.random_bytes and sets it to the cipher, and returns it.\n<p>You …\n"],["random_key","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-random_key","()","<p>Generate a random key with OpenSSL::Random.random_bytes and sets it to the cipher, and returns it.\n<p>You …\n"],["random_number","Random::Formatter","Random/Formatter.html#method-i-random_number","(*args)","<p>Generates formatted random number from raw random bytes. See Random#rand.\n"],["range","Net::HTTPHeader","Net/HTTPHeader.html#method-i-range","()","<p>Returns an array of Range objects that represent the value of field <code>&#39;Range&#39;</code>, or <code>nil</code> if there …\n"],["range=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-range-3D","(r, e = nil)",""],["range_length","Net::HTTPHeader","Net/HTTPHeader.html#method-i-range_length","()","<p>Returns the integer representing length of the value of field <code>&#39;Content-Range&#39;</code>, or <code>nil</code> if no such …\n"],["rassoc","Array","Array.html#method-i-rassoc","(p1)","<p>Returns the first element in <code>self</code> that is an Array whose second element <code>==</code> <code>obj</code>:\n\n<pre>a = [{foo: 0}, [2, 4], ...</pre>\n"],["rassoc","ENV","ENV.html#method-c-rassoc","(p1)","<p>Returns a 2-element Array containing the name and value of the <strong>first</strong> <strong>found</strong> environment variable that …\n"],["rassoc","Hash","Hash.html#method-i-rassoc","(p1)","<p>Returns a new 2-element Array consisting of the key and value of the first-found entry whose value is …\n"],["rationalize","Complex","Complex.html#method-i-rationalize","(*args)","<p>Returns the value as a rational if possible (the imaginary part should be exactly zero).\n\n<pre>Complex(1.0/3, ...</pre>\n"],["rationalize","Float","Float.html#method-i-rationalize","(*args)","<p>Returns a simpler approximation of the value (flt-|eps| &lt;= result &lt;= flt+|eps|).  If the optional …\n"],["rationalize","Integer","Integer.html#method-i-rationalize","(*args)","<p>Returns the value as a rational.  The optional argument <code>eps</code> is always ignored.\n"],["rationalize","NilClass","NilClass.html#method-i-rationalize","(*args)","<p>Returns zero as a rational.  The optional argument <code>eps</code> is always ignored.\n"],["rationalize","Rational","Rational.html#method-i-rationalize","(*args)","<p>Returns a simpler approximation of the value if the optional argument <code>eps</code> is given (rat-|eps| &lt;= result …\n"],["raw","IO","IO.html#method-i-raw","(*args)","<p>Yields <code>self</code> within raw mode, and returns the result of the block.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">STDIN</span>.<span class=\"ruby-identifier\">raw</span>(<span class=\"ruby-operator\">&amp;</span><span class=\"ruby-value\">:gets</span>)\n</pre>\n<p>will read and return …\n"],["raw!","IO","IO.html#method-i-raw-21","(*args)","<p>Enables raw mode, and returns <code>io</code>.\n<p>If the terminal mode needs to be back, use <code>io.raw { ... }</code>.\n<p>See IO#raw …\n"],["raw_cookie","CGI::QueryExtension","CGI/QueryExtension.html#method-i-raw_cookie","()","<p>Get the raw cookies as a string.\n"],["raw_cookie2","CGI::QueryExtension","CGI/QueryExtension.html#method-i-raw_cookie2","()","<p>Get the raw RFC2965 cookies as a string.\n"],["raw_data","GC::Profiler","GC/Profiler.html#method-c-raw_data","()","<p>Returns an Array of individual raw profile data Hashes ordered from earliest to latest by <code>:GC_INVOKE_TIME</code> …\n"],["raw_encoding","CSV","CSV.html#method-i-raw_encoding","()","<p>Returns the encoding of the internal IO object.\n"],["raw_spec","Gem::Package","Gem/Package.html#method-c-raw_spec","(path, security_policy = nil)","<p>Extracts the Gem::Specification and raw metadata from the .gem file at <code>path</code>.\n"],["rb_config","Gem::Installer","Gem/Installer.html#method-i-rb_config","()",""],["rb_config_env","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-rb_config_env","()",""],["rb_scan_args","RDoc::Parser::C","RDoc/Parser/C.html#method-i-rb_scan_args","(method_body)","<p>Extracts parameters from the <code>method_body</code> and returns a method parameter string.  Follows 1.9.3dev’s …\n"],["rdev","File::Stat","File/Stat.html#method-i-rdev","()","<p>Returns an integer representing the device type on which <em>stat</em> resides. Returns <code>nil</code> if the operating system …\n"],["rdev_major","File::Stat","File/Stat.html#method-i-rdev_major","()","<p>Returns the major part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/fd1&quot;</span>).<span class=\"ruby-identifier\">rdev_major</span>   <span class=\"ruby-comment\">#=&gt; 2</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/tty&quot;</span>).<span class=\"ruby-identifier\">rdev_major</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rdev_minor","File::Stat","File/Stat.html#method-i-rdev_minor","()","<p>Returns the minor part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/fd1&quot;</span>).<span class=\"ruby-identifier\">rdev_minor</span>   <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/tty&quot;</span>).<span class=\"ruby-identifier\">rdev_minor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rdoc_installed?","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-rdoc_installed-3F","()","<p>Is rdoc documentation installed?\n"],["rdoc_installed?","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-rdoc_installed-3F","()","<p>Is rdoc documentation installed?\n"],["rdoc_options","Gem::Specification","Gem/Specification.html#method-i-rdoc_options","()","<p>Specifies the rdoc options to be used when generating API documentation.\n<p>Usage:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">rdoc_options</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-string\">&#39;--title&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rdoc_options=","Gem::Specification","Gem/Specification.html#method-i-rdoc_options-3D","(options)","<p>Sets rdoc_options to <code>value</code>, ensuring it is an array.\n"],["rdoc_target","RDoc::Task","RDoc/Task.html#method-i-rdoc_target","()",""],["rdoc_task_description","RDoc::Task","RDoc/Task.html#method-i-rdoc_task_description","()","<p>Task description for the rdoc task or its renamed equivalent\n"],["rdoc_task_name","RDoc::Task","RDoc/Task.html#method-i-rdoc_task_name","()",""],["re_exchange","Process::GID","Process/GID.html#method-c-re_exchange","()","<p>Exchange real and effective group IDs and return the new effective group ID. Not available on all platforms. …\n"],["re_exchange","Process::UID","Process/UID.html#method-c-re_exchange","()","<p>Exchange real and effective user IDs and return the new effective user ID. Not available on all platforms. …\n"],["re_exchangeable?","Process::GID","Process/GID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective group IDs of a process may be exchanged on the current platform. …\n"],["re_exchangeable?","Process::UID","Process/UID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective user IDs of a process may be exchanged on the current platform. …\n"],["re_sign","Gem::Security","Gem/Security.html#method-c-re_sign","(expired_certificate, private_key, age = ONE_YEAR, extensions = EXTENSIONS)","<p>Signs <code>expired_certificate</code> with <code>private_key</code> if the keys match and the expired certificate was self-signed. …\n"],["re_sign_cert","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-re_sign_cert","(cert, cert_path, private_key)",""],["re_sign_cert","Gem::Security::Signer","Gem/Security/Signer.html#method-c-re_sign_cert","(expired_cert, expired_cert_path, private_key)","<p>Attempts to re-sign an expired cert with a given private key\n"],["reachable_objects_from","ObjectSpace","ObjectSpace.html#method-c-reachable_objects_from","(p1)","<p>MRI specific feature &mdash; Return all reachable objects from ‘obj’.\n\n<p>This method returns all reachable objects …\n"],["reachable_objects_from_root","ObjectSpace","ObjectSpace.html#method-c-reachable_objects_from_root","()","<p>MRI specific feature &mdash; Return all reachable objects from root.\n\n"],["read","ARGF","ARGF.html#method-i-read","(p1 = v1, p2 = v2)","<p>Reads <em>length</em> bytes from ARGF. The files named on the command line are concatenated and treated as a single …\n"],["read","CSV","CSV.html#method-c-read","(path, **options)","<p>Opens the given <code>source</code> with the given <code>options</code> (see CSV.open), reads the source (see CSV#read), and returns …\n"],["read","CSV","CSV.html#method-i-read","()","<p>Forms the remaining rows from <code>self</code> into:\n<p>A CSV::Table object, if headers are in use.\n<p>An Array of Arrays …\n"],["read","Dir","Dir.html#method-i-read","()","<p>Reads the next entry from <em>dir</em> and returns it as a string. Returns <code>nil</code> at the end of the stream.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["read","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-read","(len = nil)","<p>Reads <code>len</code> bytes from the tar file entry, or the rest of the entry if nil\n"],["read","IO","IO.html#method-c-read","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Opens the stream, reads and returns some or all of its content, and closes the stream; returns <code>nil</code> if …\n"],["read","IO","IO.html#method-i-read","(p1 = v1, p2 = v2)","<p>Reads bytes from the stream; the stream must be opened for reading (see Access Modes):\n<p>If <code>maxlen</code> is <code>nil</code> …\n"],["read","IO::Buffer","IO/Buffer.html#method-i-read","(*args)","<p>Read at most <code>length</code> bytes from <code>io</code> into the buffer, starting at <code>offset</code>. If an error occurs, return <code>-errno</code> …\n"],["read","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-read","(size=nil, buf=nil)","<p>Reads <em>size</em> bytes from the stream.  If <em>buf</em> is provided it must reference a string which will receive the …\n"],["read","OpenSSL::PKey","OpenSSL/PKey.html#method-c-read","(p1, p2 = v2)","<p>Reads a DER or PEM encoded string from <em>string</em> or <em>io</em> and returns an instance of the appropriate PKey class. …\n"],["read","OpenURI::OpenRead","OpenURI/OpenRead.html#method-i-read","(options={})","<p>OpenURI::OpenRead#read([ options ]) reads a content referenced by self and returns the content as string. …\n"],["read","Pathname","Pathname.html#method-i-read","(p1 = v1, p2 = v2, p3 = v3)","<p>Returns all data from the file, or the first <code>N</code> bytes if specified.\n<p>See File.read.\n"],["read","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-read","(len)",""],["read","Reline::Config","Reline/Config.html#method-i-read","(file = nil)",""],["read","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-read","(tuple, sec=nil)","<p>Reads <code>tuple</code>, but does not remove it.\n"],["read","Rinda::TupleSpaceProxy","Rinda/TupleSpaceProxy.html#method-i-read","(tuple, sec=nil, &block)","<p>Reads <code>tuple</code> from the proxied TupleSpace.  See TupleSpace#read.\n"],["read","Rinda::WaitTemplateEntry","Rinda/WaitTemplateEntry.html#method-i-read","(tuple)",""],["read","StringIO","StringIO.html#method-i-read","(*args)","<p>See IO#read.\n"],["read","Win32::Registry","Win32/Registry.html#method-i-read","(name, *rtype)","<p>Read a registry value named name and return array of [ type, data ]. When name is nil, the ‘default’ …\n"],["read","Zlib::GzipReader","Zlib/GzipReader.html#method-i-read","(p1 = v1)","<p>See Zlib::GzipReader documentation for a description.\n"],["read_2nd_character_of_key_sequence","Reline::Core","Reline/Core.html#method-i-read_2nd_character_of_key_sequence","(keyseq_timeout, buffer, c, block)",""],["read_all","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-read_all","(tuple)","<p>Returns all tuples matching <code>tuple</code>.  Does not remove the found tuples.\n"],["read_all","Rinda::TupleSpaceProxy","Rinda/TupleSpaceProxy.html#method-i-read_all","(tuple)","<p>Reads all tuples matching <code>tuple</code> from the proxied TupleSpace.  See TupleSpace#read_all.\n"],["read_bin","Win32::Registry","Win32/Registry.html#method-i-read_bin","(name)","<p>Read a REG_SZ(read_s), REG_DWORD(read_i), or REG_BINARY(read_bin) registry value named name.\n<p>If the values …\n"],["read_binary","Gem","Gem.html#method-c-read_binary","(path)","<p>Safely read a file in binary mode on all platforms.\n"],["read_body","Net::HTTPResponse","Net/HTTPResponse.html#method-i-read_body","(dest = nil, &block)","<p>Gets the entity body returned by the remote HTTP server.\n<p>If a block is given, the body is passed to the …\n"],["read_checksums","Gem::Package","Gem/Package.html#method-i-read_checksums","(gem)","<p>Reads and loads checksums.yaml.gz from the tar file <code>gem</code>\n"],["read_chunk","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-i-read_chunk","()",""],["read_directive","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-read_directive","(allowed)","<p>Directives are modifier comments that can appear after class, module, or method names. For example:\n\n<pre>def ...</pre>\n"],["read_documentation_modifiers","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-read_documentation_modifiers","(context, allowed)","<p>Handles directives following the definition for <code>context</code> (any RDoc::CodeObject) if the directives are …\n"],["read_escaped_key","Reline::Core","Reline/Core.html#method-i-read_escaped_key","(keyseq_timeout, c, block)",""],["read_file","Bundler","Bundler.html#method-c-read_file","(file)",""],["read_file","RDoc::Encoding","RDoc/Encoding.html#method-c-read_file","(filename, encoding, force_transcode = false)","<p>Reads the contents of <code>filename</code> and handles any encoding directives in the file.\n<p>The content will be converted …\n"],["read_from_cmdline","CGI::QueryExtension","CGI/QueryExtension.html#method-i-read_from_cmdline","()","<p>offline mode. read name=value pairs on standard input.\n"],["read_i","Win32::Registry","Win32/Registry.html#method-i-read_i","(name)","<p>Read a REG_SZ(read_s), REG_DWORD(read_i), or REG_BINARY(read_bin) registry value named name.\n<p>If the values …\n"],["read_io","Reline::Core","Reline/Core.html#method-i-read_io","(keyseq_timeout, &block)","<p>GNU Readline waits for “keyseq-timeout” milliseconds to see if the ESC is followed by a character, …\n"],["read_lines","Reline::Config","Reline/Config.html#method-i-read_lines","(lines, file = nil)",""],["read_multipart","CGI::QueryExtension","CGI/QueryExtension.html#method-i-read_multipart","(boundary, content_length)","<p>Parses multipart form elements according to\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">http</span><span class=\"ruby-value\">:/</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">www</span>.<span class=\"ruby-identifier\">w3</span>.<span class=\"ruby-identifier\">org</span><span class=\"ruby-operator\">/</span><span class=\"ruby-constant\">TR</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">html401</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">interact</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">forms</span>.<span class=\"ruby-identifier\">html</span><span class=\"ruby-comment\">#h-17.13.4.2</span>\n</pre>\n"],["read_nonblock","ARGF","ARGF.html#method-i-read_nonblock","(p1, p2 = v2, p3 = {})","<p>Reads at most <em>maxlen</em> bytes from the ARGF stream in non-blocking mode.\n"],["read_nonblock","IO","IO.html#method-i-read_nonblock","(len, buf = nil, exception: true)","<p>Reads at most <em>maxlen</em> bytes from <em>ios</em> using the read(2) system call after O_NONBLOCK is set for the underlying …\n"],["read_nonblock","IO::generic_readable","IO/generic_readable.html#method-i-read_nonblock","(p1, p2 = v2, p3 = {})","<p>Similar to #read, but raises <code>EOFError</code> at end of string unless the +exception: false+ option is passed …\n"],["read_nonblock","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-read_nonblock","(maxlen, buf=nil, exception: true)","<p>Reads at most <em>maxlen</em> bytes in the non-blocking manner.\n<p>When no data can be read without blocking it raises …\n"],["read_s","Resolv::SZ","Resolv/SZ.html#method-i-read_s","(key)","<p>ad hoc workaround for broken registry\n"],["read_s","Win32::Registry","Win32/Registry.html#method-i-read_s","(name)","<p>Read a REG_SZ(read_s), REG_DWORD(read_i), or REG_BINARY(read_bin) registry value named name.\n<p>If the values …\n"],["read_s_expand","Win32::Registry","Win32/Registry.html#method-i-read_s_expand","(name)","<p>Read a REG_SZ or REG_EXPAND_SZ registry value named name.\n<p>If the value type is REG_EXPAND_SZ, environment …\n"],["read_smime","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-c-read_smime","(p1)",""],["read_status_line","Net::HTTPResponse","Net/HTTPResponse.html#method-c-read_status_line","(sock)",""],["read_timeout=","Net::HTTP","Net/HTTP.html#method-i-read_timeout-3D","(sec)","<p>Sets the read timeout, in seconds, for <code>self</code> to integer <code>sec</code>; the initial value is 60.\n<p>Argument <code>sec</code> must …\n"],["readable?","File","File.html#method-c-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective user and group id of this process. See eaccess(3). …\n"],["readable?","File::Stat","File/Stat.html#method-i-readable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the effective user id of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">readable?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["readable?","FileTest","FileTest.html#method-i-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective user and group id of this process. See eaccess(3). …\n"],["readable?","Pathname","Pathname.html#method-i-readable-3F","()","<p>See FileTest.readable?.\n"],["readable_after_eof?","IRB::InputMethod","IRB/InputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to read.\n<p>See IO#eof for more information. …\n"],["readable_after_eof?","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to read.\n<p>See IO#eof for more information. …\n"],["readable_after_eof?","IRB::RelineInputMethod","IRB/RelineInputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to read.\n<p>See IO#eof for more information. …\n"],["readable_after_eof?","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to read.\n<p>See IO#eof for more information. …\n"],["readable_real?","File","File.html#method-c-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user and group id of this process. See access(3). …\n"],["readable_real?","File::Stat","File/Stat.html#method-i-readable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the real user id of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">readable_real?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["readable_real?","FileTest","FileTest.html#method-i-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user and group id of this process. See access(3). …\n"],["readable_real?","Pathname","Pathname.html#method-i-readable_real-3F","()","<p>See FileTest.readable_real?.\n"],["readagain_bytes","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-readagain_bytes","()","<p>Returns the bytes to be read again when Encoding::InvalidByteSequenceError occurs.\n"],["readbyte","ARGF","ARGF.html#method-i-readbyte","()","<p>Reads the next 8-bit byte from ARGF and returns it as an Integer. Raises an EOFError after the last byte …\n"],["readbyte","IO","IO.html#method-i-readbyte","()","<p>Reads and returns the next byte (in range 0..255) from the stream; raises EOFError if already at end-of-stream. …\n"],["readbyte","IO::generic_readable","IO/generic_readable.html#method-i-readbyte","()","<p>Like <code>getbyte</code>, but raises an exception if already at end-of-stream; see Byte IO.\n"],["readbyte","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readbyte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["readchar","ARGF","ARGF.html#method-i-readchar","()","<p>Reads the next character from ARGF and returns it as a String. Raises an EOFError after the last character …\n"],["readchar","IO","IO.html#method-i-readchar","()","<p>Reads and returns the next 1-character string from the stream; raises EOFError if already at end-of-stream. …\n"],["readchar","IO::generic_readable","IO/generic_readable.html#method-i-readchar","()","<p>Like <code>getc</code>, but raises an exception if already at end-of-stream; see Character IO.\n"],["readchar","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-readchar","()","<p>Reads a one-character string from the stream.  Raises an EOFError at end of file.\n"],["readchar","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readchar","()","<p>See Zlib::GzipReader documentation for a description.\n"],["readline","ARGF","ARGF.html#method-i-readline","(*args)","<p>Returns the next line from the current file in ARGF.\n<p>By default lines are assumed to be separated by  …\n"],["readline","CSV","CSV.html#method-i-readline","()",""],["readline","IO","IO.html#method-i-readline","(*args)","<p>Reads a line as with IO#gets, but raises EOFError if already at end-of-stream.\n<p>Optional keyword argument …\n"],["readline","IO::generic_readable","IO/generic_readable.html#method-i-readline","(*args)","<p>Reads a line as with IO#gets, but raises EOFError if already at end-of-file; see Line IO.\n"],["readline","IRB::Locale","IRB/Locale.html#method-i-readline","(*rs)",""],["readline","Kernel","Kernel.html#method-i-readline","(*args)","<p>Equivalent to method Kernel#gets, except that it raises an exception if called at end-of-stream:\n\n<pre>$ cat ...</pre>\n"],["readline","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-readline","(eol=$/)","<p>Reads a line from the stream which is separated by <em>eol</em>.\n<p>Raises EOFError if at end of file.\n"],["readline","Readline","Readline.html#method-c-readline","(p1 = v1, p2 = v2)","<p>Shows the <code>prompt</code> and reads the inputted line with line editing. The inputted line is added to the history …\n"],["readline","Reline::Core","Reline/Core.html#method-i-readline","(prompt = '', add_hist = false)",""],["readline","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readline","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["readlines","ARGF","ARGF.html#method-i-readlines","(*args)","<p>Reads each file in ARGF in its entirety, returning an Array containing lines from the files. Lines are …\n"],["readlines","CSV","CSV.html#method-c-readlines","(path, **options)","<p>Alias for CSV.read.\n"],["readlines","CSV","CSV.html#method-i-readlines","()",""],["readlines","IO","IO.html#method-i-readlines","(*args)","<p>Reads and returns all remaining line from the stream; does not modify <code>$_</code>. See Line IO.\n<p>With no arguments …\n"],["readlines","IO","IO.html#method-c-readlines","(p1, p2 = v2, p3 = v3, p4 = {})","<p>Returns an array of all lines read from the stream.\n<p>When called from class IO (but not subclasses of  …\n"],["readlines","Kernel","Kernel.html#method-i-readlines","(*args)","<p>Returns an array containing the lines returned by calling Kernel#gets until the end-of-stream is reached; …\n"],["readlines","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-readlines","(eol=$/)","<p>Reads lines from the stream which are separated by <em>eol</em>.\n<p>See also #gets\n"],["readlines","Pathname","Pathname.html#method-i-readlines","(p1 = v1, p2 = v2, p3 = v3)","<p>Returns all the lines from the file.\n<p>See File.readlines.\n"],["readlines","StringIO","StringIO.html#method-i-readlines","(*args)","<p>See IO#readlines.\n"],["readlines","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readlines","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["readlink","File","File.html#method-c-readlink","(p1)","<p>Returns the name of the file referenced by the given link. Not available on all platforms.\n\n<pre>File.symlink(&quot;testfile&quot;, ...</pre>\n"],["readlink","Pathname","Pathname.html#method-i-readlink","()","<p>Read symbolic link.\n<p>See File.readlink.\n"],["readmultiline","Reline::Core","Reline/Core.html#method-i-readmultiline","(prompt = '', add_hist = false, &confirm_multiline_termination)",""],["readonly?","IO::Buffer","IO/Buffer.html#method-i-readonly-3F","()","<p>If the buffer is <em>read only</em>, meaning the buffer cannot be modified using #set_value, #set_string or #copy …\n"],["readpartial","ARGF","ARGF.html#method-i-readpartial","(*args)","<p>Reads at most <em>maxlen</em> bytes from the ARGF stream.\n<p>If the optional <em>outbuf</em> argument is present, it must reference …\n"],["readpartial","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-readpartial","(maxlen = nil, outbuf = \"\".b)",""],["readpartial","IO","IO.html#method-i-readpartial","(*args)","<p>Reads up to <code>maxlen</code> bytes from the stream; returns a string (either a new string or the given <code>out_string</code> …\n"],["readpartial","IO::generic_readable","IO/generic_readable.html#method-i-readpartial","(*args)","<p>Similar to #read, but raises <code>EOFError</code> at end of string instead of returning <code>nil</code>, as well as IO#sysread …\n"],["readpartial","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-readpartial","(maxlen, buf=nil)","<p>Reads at most <em>maxlen</em> bytes from the stream.  If <em>buf</em> is provided it must reference a string which will …\n"],["readpartial","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readpartial","(p1, p2 = v2)","<p>Reads at most <em>maxlen</em> bytes from the gziped stream but it blocks only if <em>gzipreader</em> has no data immediately …\n"],["reads","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-reads","(re)",""],["ready?","IO","IO.html#method-i-ready-3F","()","<p>Returns a truthy value if input available without blocking, or a falsy value.\n<p>You must require ‘io/wait’ …\n"],["real","Complex","Complex.html#method-i-real","()","<p>Returns the real part.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">real</span>      <span class=\"ruby-comment\">#=&gt; 7</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">9</span>, <span class=\"ruby-value\">-4</span>).<span class=\"ruby-identifier\">real</span>  <span class=\"ruby-comment\">#=&gt; 9</span>\n</pre>\n"],["real","Numeric","Numeric.html#method-i-real","()","<p>Returns self.\n"],["real?","Complex","Complex.html#method-i-real-3F","()","<p>Returns false, even if the complex number has no imaginary part.\n"],["real?","Numeric","Numeric.html#method-i-real-3F","()","<p>Returns <code>true</code> if <code>num</code> is a real number (i.e. not Complex).\n"],["real_load","IRB::Locale","IRB/Locale.html#method-i-real_load","(path, priv)",""],["realdirpath","File","File.html#method-c-realdirpath","(*args)","<p>Returns the real (absolute) pathname of <em>pathname</em> in the actual filesystem. The real pathname doesn’t …\n"],["realdirpath","Pathname","Pathname.html#method-i-realdirpath","(p1 = v1)","<p>Returns the real (absolute) pathname of <code>self</code> in the actual filesystem.\n<p>Does not contain symlinks or useless …\n"],["realloc","Fiddle","Fiddle.html#method-c-realloc","(p1, p2)","<p>Change the size of the memory allocated at the memory location <code>addr</code> to <code>size</code> bytes.  Returns the memory …\n"],["really_verbose","Gem::ConfigFile","Gem/ConfigFile.html#method-i-really_verbose","()","<p>Really verbose mode gives you extra output.\n"],["realpath","File","File.html#method-c-realpath","(*args)","<p>Returns the real (absolute) pathname of <em>pathname</em> in the actual filesystem not containing symlinks or …\n"],["realpath","Pathname","Pathname.html#method-i-realpath","(p1 = v1)","<p>Returns the real (absolute) pathname for <code>self</code> in the actual filesystem.\n<p>Does not contain symlinks or useless …\n"],["realtime","Benchmark","Benchmark.html#method-i-realtime","()","<p>Returns the elapsed real time used to execute the given block.\n"],["realtime","Benchmark","Benchmark.html#method-c-realtime","()","<p>Returns the elapsed real time used to execute the given block.\n"],["reason","LocalJumpError","LocalJumpError.html#method-i-reason","()","<p>The reason this block was terminated: :break, :redo, :retry, :next, :return, or :noreason.\n"],["reason","OptionParser::ParseError","OptionParser/ParseError.html#method-i-reason","()","<p>Returns error reason. Override this for I18N.\n"],["receive","Ractor","Ractor.html#method-i-receive","()","<p>same as Ractor.receive\n"],["receive","Ractor","Ractor.html#method-c-receive","()","<p>Receive an incoming message from the current Ractor’s incoming port’s queue, which was sent there …\n"],["receive_if","Ractor","Ractor.html#method-c-receive_if","(&b)","<p>Receive only a specific message.\n<p>Instead of Ractor.receive, Ractor.receive_if can provide a pattern by …\n"],["receive_if","Ractor","Ractor.html#method-i-receive_if","(&b)",""],["receiver","Binding","Binding.html#method-i-receiver","()","<p>Returns the bound receiver of the binding object.\n"],["receiver","FrozenError","FrozenError.html#method-i-receiver","()","<p>Return the receiver associated with this FrozenError exception.\n"],["receiver","KeyError","KeyError.html#method-i-receiver","()","<p>Return the receiver associated with this KeyError exception.\n"],["receiver","Method","Method.html#method-i-receiver","()","<p>Returns the bound receiver of the method object.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:map</span>).<span class=\"ruby-identifier\">receiver</span> <span class=\"ruby-comment\"># =&gt; 1..3</span>\n</pre>\n"],["receiver","NameError","NameError.html#method-i-receiver","()","<p>Return the receiver associated with this NameError exception.\n"],["recipients","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-recipients","()",""],["record","SyntaxSuggest::CodeSearch","SyntaxSuggest/CodeSearch.html#method-i-record","(block:, name: \"record\")","<p>Used for debugging\n"],["record_depth","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-record_depth","(stack)",""],["record_dir","SyntaxSuggest","SyntaxSuggest.html#method-c-record_dir","(dir)","<p>SyntaxSuggest.record_dir [Private]\n<p>Used to generate a unique directory to record search steps for debugging …\n"],["record_location","RDoc::CodeObject","RDoc/CodeObject.html#method-i-record_location","(top_level)","<p>Records the RDoc::TopLevel (file) where this code object was defined\n"],["record_location","RDoc::Context","RDoc/Context.html#method-i-record_location","(top_level)","<p>Record <code>top_level</code> as a file <code>self</code> is in.\n"],["record_path","Racc::States","Racc/States.html#method-i-record_path","(begst, rule)",""],["record_requirements","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-record_requirements","(reqs)",""],["recover","OptionParser::ParseError","OptionParser/ParseError.html#method-i-recover","(argv)","<p>Pushes back erred argument(s) to <code>argv</code>.\n"],["rect","Complex","Complex.html#method-i-rect","()","<p>Returns a complex object which denotes the given rectangular form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">rectangular</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n</pre>\n"],["rect","Complex","Complex.html#method-c-rect","(p1, p2 = v2)","<p>Returns a complex object which denotes the given rectangular form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">rectangular</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n</pre>\n"],["rect","Numeric","Numeric.html#method-i-rect","()","<p>Returns an array; [num, 0].\n"],["rectangular","Complex","Complex.html#method-c-rectangular","(p1, p2 = v2)","<p>Returns a complex object which denotes the given rectangular form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">rectangular</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n</pre>\n"],["rectangular","Complex","Complex.html#method-i-rectangular","()","<p>Returns an array; [cmp.real, cmp.imag].\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">rectangular</span>  <span class=\"ruby-comment\">#=&gt; [1, 2]</span>\n</pre>\n"],["rectangular","Numeric","Numeric.html#method-i-rectangular","()","<p>Returns an array; [num, 0].\n"],["recursive_predecessors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-recursive_predecessors","()","<p>@return [Set&lt;Vertex&gt;] the vertices of {#graph} where ‘self` is a\n\n<pre>{#descendent?}</pre>\n"],["recursive_successors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-recursive_successors","()","<p>@return [Set&lt;Vertex&gt;] the vertices of {#graph} where ‘self` is an\n\n<pre>{#ancestor?}</pre>\n"],["recv","BasicSocket","BasicSocket.html#method-i-recv","(*args)","<p>Receives a message.\n<p><em>maxlen</em> is the maximum number of bytes to receive.\n<p><em>flags</em> should be a bitwise OR of  …\n"],["recv","Ractor","Ractor.html#method-i-recv","()",""],["recv","Ractor","Ractor.html#method-c-recv","()",""],["recv_io","UNIXSocket","UNIXSocket.html#method-i-recv_io","(p1 = v1, p2 = v2)","<p>Example\n\n<pre>UNIXServer.open(&quot;/tmp/sock&quot;) {|serv|\n  UNIXSocket.open(&quot;/tmp/sock&quot;) {|c|\n    s = serv.accept\n ...</pre>\n"],["recv_nonblock","BasicSocket","BasicSocket.html#method-i-recv_nonblock","(len, flag = 0, str = nil, exception: true)","<p>Receives up to <em>maxlen</em> bytes from <code>socket</code> using recvfrom(2) after O_NONBLOCK is set for the underlying …\n"],["recvfrom","IPSocket","IPSocket.html#method-i-recvfrom","(*args)","<p>Receives a message and return the message as a string and an address which the message come from.\n<p><em>maxlen</em> …\n"],["recvfrom","Socket","Socket.html#method-i-recvfrom","(*args)","<p>Receives up to <em>maxlen</em> bytes from <code>socket</code>. <em>flags</em> is zero or more of the <code>MSG_</code> options. The first element …\n"],["recvfrom","UNIXSocket","UNIXSocket.html#method-i-recvfrom","(*args)","<p>Receives a message via <em>unixsocket</em>.\n<p><em>maxlen</em> is the maximum number of bytes to receive.\n<p><em>flags</em> should be a …\n"],["recvfrom_nonblock","Socket","Socket.html#method-i-recvfrom_nonblock","(len, flag = 0, str = nil, exception: true)","<p>Receives up to <em>maxlen</em> bytes from <code>socket</code> using recvfrom(2) after O_NONBLOCK is set for the underlying …\n"],["recvfrom_nonblock","UDPSocket","UDPSocket.html#method-i-recvfrom_nonblock","(len, flag = 0, outbuf = nil, exception: true)","<p>Receives up to <em>maxlen</em> bytes from <code>udpsocket</code> using recvfrom(2) after O_NONBLOCK is set for the underlying …\n"],["recvmsg","BasicSocket","BasicSocket.html#method-i-recvmsg","(dlen = nil, flags = 0, clen = nil, scm_rights: false)","<p>recvmsg receives a message using recvmsg(2) system call in blocking manner.\n<p><em>maxmesglen</em> is the maximum …\n"],["recvmsg_nonblock","BasicSocket","BasicSocket.html#method-i-recvmsg_nonblock","(dlen = nil, flags = 0, clen = nil, scm_rights: false, exception: true)","<p>recvmsg receives a message using recvmsg(2) system call in non-blocking manner.\n<p>It is similar to BasicSocket#recvmsg …\n"],["redact","Gem::Uri","Gem/Uri.html#method-c-redact","(uri)","<p>Parses and redacts uri\n"],["redact_credentials_from","Gem::Uri","Gem/Uri.html#method-i-redact_credentials_from","(text)",""],["redacted","Gem::Uri","Gem/Uri.html#method-i-redacted","()",""],["redisplay","Readline","Readline.html#method-c-redisplay","()","<p>Change what’s displayed on the screen to reflect the current contents.\n<p>See GNU Readline’s rl_redisplay …\n"],["reduce","Enumerable","Enumerable.html#method-i-reduce","(p1 = v1, p2 = v2)","<p>Returns an object formed from operands via either:\n<p>A method named by <code>symbol</code>.\n<p>A block to which each operand …\n"],["reduce","Racc::ActionTable","Racc/ActionTable.html#method-i-reduce","(i)",""],["reduce_n","Racc::ActionTable","Racc/ActionTable.html#method-i-reduce_n","()",""],["reduce_table","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-reduce_table","(grammar)",""],["ref","Fiddle::Pinned","Fiddle/Pinned.html#method-i-ref","()","<p>Return the object that this pinned instance references.\n"],["ref","Fiddle::Pointer","Fiddle/Pointer.html#method-i-ref","()","<p>Returns a new Fiddle::Pointer instance that is a reference pointer for this pointer.\n<p>Analogous to the …\n"],["reference","RDoc::Markdown","RDoc/Markdown.html#method-i-reference","(label, link)","<p>Stores <code>label</code> as a reference to <code>link</code> and fills in previously unknown\nlink references.\n"],["refine","Module","Module.html#method-i-refine","(p1)","<p>Refine <em>mod</em> in the receiver.\n<p>Returns a module, where refined methods are defined.\n"],["refined_class","Refinement","Refinement.html#method-i-refined_class","()","<p>Return the class refined by the receiver.\n"],["refinements","Module","Module.html#method-i-refinements","()","<p>Returns an array of modules defined within the receiver.\n\n<pre>module A\n  refine Integer do\n  end\n\n  refine ...</pre>\n"],["refresh","Gem","Gem.html#method-c-refresh","()","<p>Refresh available gems from disk.\n"],["refresh_line","Readline","Readline.html#method-c-refresh_line","()","<p>Clear the current input line.\n"],["regenerate_binstubs","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-regenerate_binstubs","(bindir)",""],["regenerate_plugins","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-regenerate_plugins","(bindir)",""],["regenerate_plugins","Gem::Uninstaller","Gem/Uninstaller.html#method-i-regenerate_plugins","()","<p>Regenerates plugin wrappers after removal.\n"],["regenerate_plugins_for","Gem::InstallerUninstallerUtils","Gem/InstallerUninstallerUtils.html#method-i-regenerate_plugins_for","(spec, plugins_dir)",""],["regexp","MatchData","MatchData.html#method-i-regexp","()","<p>Returns the regexp that produced the match:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/a.*b/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;abc&quot;</span>) <span class=\"ruby-comment\"># =&gt; #&lt;MatchData &quot;ab&quot;&gt;</span>\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">regexp</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["regexp","OptionParser::Completion","OptionParser/Completion.html#method-c-regexp","(key, icase)",""],["regexp","URI","URI.html#method-c-regexp","(schemes = nil)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">regexp</span>([<span class=\"ruby-identifier\">match_schemes</span>])\n</pre>\n<p>Args\n"],["regist","DRb::ExtServManager","DRb/ExtServManager.html#method-i-regist","(name, ro)",""],["regist_server","DRb","DRb.html#method-c-regist_server","(server)","<p>Registers <code>server</code> with DRb.\n<p>This is called when a new DRb::DRbServer is created.\n<p>If there is no primary …\n"],["regist_server","DRb","DRb.html#method-i-regist_server","(server)","<p>Registers <code>server</code> with DRb.\n<p>This is called when a new DRb::DRbServer is created.\n<p>If there is no primary …\n"],["register","DRb::ExtServManager","DRb/ExtServManager.html#method-i-register","(name, ro)",""],["register","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-i-register","(target, obj)","<p>Noop this out so there are no anchors\n"],["register","OpenSSL::ASN1::ObjectId","OpenSSL/ASN1/ObjectId.html#method-c-register","(p1, p2, p3)","<p>This adds a new ObjectId to the internal tables. Where <em>object_id</em> is the numerical form, <em>short_name</em> is …\n"],["register","Psych::Streaming","Psych/Streaming.html#method-i-register","(target, obj)",""],["register","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-register","(node, object)",""],["register","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-register","(target, yaml_obj)",""],["register_command","Gem::CommandManager","Gem/CommandManager.html#method-i-register_command","(command, obj=false)","<p>Register the Symbol <code>command</code> as a gem command.\n"],["register_default_spec","Gem","Gem.html#method-c-register_default_spec","(spec)","<p>Register a Gem::Specification for default gem.\n<p>Two formats for the specification are supported:\n<p>MRI 2.0 …\n"],["register_empty","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-register_empty","(object)",""],["register_engulf_block","SyntaxSuggest::CodeFrontier","SyntaxSuggest/CodeFrontier.html#method-i-register_engulf_block","(block)","<p>When one element fully encapsulates another we remove the smaller block from the frontier. This prevents …\n"],["register_indent_block","SyntaxSuggest::CodeFrontier","SyntaxSuggest/CodeFrontier.html#method-i-register_indent_block","(block)","<p>Keeps track of what lines have been added to blocks and which are not yet visited.\n"],["register_scheme","URI","URI.html#method-c-register_scheme","(scheme, klass)","<p>Register the given <code>klass</code> to be instantiated when parsing URLs with the given <code>scheme</code>. Note that currently …\n"],["registry=","URI::Generic","URI/Generic.html#method-i-registry-3D","(v)",""],["rehash","ENV","ENV.html#method-c-rehash","()","<p>(Provided for compatibility with Hash.)\n<p>Does not modify ENV; returns <code>nil</code>.\n"],["rehash","Hash","Hash.html#method-i-rehash","()","<p>Rebuilds the hash table by recomputing the hash index for each key; returns <code>self</code>.\n<p>The hash table becomes …\n"],["reject","Array","Array.html#method-i-reject","()","<p>Returns a new Array whose elements are all those from <code>self</code> for which the block returns <code>false</code> or <code>nil</code>: …\n"],["reject","ENV","ENV.html#method-c-reject","()","<p>Yields each environment variable name and its value as a 2-element Array. Returns a Hash whose items …\n"],["reject","Enumerable","Enumerable.html#method-i-reject","()","<p>Returns an array of objects rejected by the block.\n<p>With a block given, calls the block with successive …\n"],["reject","Enumerator::Lazy","Enumerator/Lazy.html#method-i-reject","()","<p>Like Enumerable#reject, but chains operation to be lazy-evaluated.\n"],["reject","Hash","Hash.html#method-i-reject","()","<p>Returns a new Hash object whose entries are all those from <code>self</code> for which the block returns <code>false</code> or …\n"],["reject","OptionParser","OptionParser.html#method-c-reject","(*args, &blk)","<p>See #reject.\n"],["reject","OptionParser","OptionParser.html#method-i-reject","(*args, &blk)","<p>Directs to reject specified class argument.\n<p><code>t</code> &mdash; Argument class specifier, any object including Class.\n\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reject</span>(<span class=\"ruby-identifier\">t</span>)\n</pre>\n"],["reject","OptionParser::List","OptionParser/List.html#method-i-reject","(t)","<p>See OptionParser.reject.\n"],["reject","YAML::DBM","YAML/DBM.html#method-i-reject","()","<p>Converts the contents of the database to an in-memory Hash, then calls Hash#reject with the specified …\n"],["reject!","Array","Array.html#method-i-reject-21","()","<p>Removes each element for which the block returns a truthy value.\n<p>Returns <code>self</code> if any elements removed: …\n"],["reject!","ENV","ENV.html#method-c-reject-21","()","<p>Similar to ENV.delete_if, but returns <code>nil</code> if no changes were made.\n<p>Yields each environment variable name …\n"],["reject!","Hash","Hash.html#method-i-reject-21","()","<p>Returns <code>self</code>, whose remaining entries are those for which the block returns <code>false</code> or <code>nil</code>:\n\n<pre>h = {foo: 0, ...</pre>\n"],["reject!","Set","Set.html#method-i-reject-21","(&block)","<p>Equivalent to Set#delete_if, but returns nil if no changes were\nmade. Returns an enumerator if no block ...\n"],["relative?","Pathname","Pathname.html#method-i-relative-3F","()","<p>The opposite of Pathname#absolute?\n<p>It returns <code>false</code> if the pathname begins with a slash.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> = <span class=\"ruby-constant\">Pathname</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;/im/sure&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["relative?","URI::Generic","URI/Generic.html#method-i-relative-3F","()","<p>Returns true if URI does not have a scheme (e.g. http:// or https://) specified.\n"],["relative_path_from","Pathname","Pathname.html#method-i-relative_path_from","(base_directory)","<p>Returns a relative path from the given <code>base_directory</code> to the receiver.\n<p>If <code>self</code> is absolute, then <code>base_directory</code> …\n"],["release","Gem::Version","Gem/Version.html#method-i-release","()","<p>The release for this version (e.g. 1.2.0.a -&gt; 1.2.0). Non-prerelease versions return themselves.\n"],["release","OptionParser","OptionParser.html#method-i-release","()","<p>Release code\n"],["reload","DRb::DRbUnknown","DRb/DRbUnknown.html#method-i-reload","()","<p>Attempt to load the wrapped marshalled object again.\n<p>If the class of the object is now known locally, …\n"],["remainder","BigDecimal","BigDecimal.html#method-i-remainder","(p1)","<p>Returns the remainder from dividing by the value.\n<p>x.remainder(y) means x-y*(x/y).truncate\n"],["remainder","Integer","Integer.html#method-i-remainder","(p1)","<p>Returns the remainder after dividing <code>self</code> by <code>other</code>.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">11</span>.<span class=\"ruby-identifier\">remainder</span>(<span class=\"ruby-value\">4</span>)              <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-value\">11</span>.<span class=\"ruby-identifier\">remainder</span>(<span class=\"ruby-value\">-4</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["remainder","Numeric","Numeric.html#method-i-remainder","(p1)","<p>Returns the remainder after dividing <code>self</code> by <code>other</code>.\n<p>Of the Core and Standard Library classes, only Float …\n"],["remote=","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-remote-3D","(remote)","<p>Sets the remote network access for all composed sets.\n"],["remote?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-remote-3F","()","<p>Is remote fetching enabled?\n"],["remote_address","BasicSocket","BasicSocket.html#method-i-remote_address","()","<p>Returns an Addrinfo object for remote address obtained by getpeername.\n<p>Note that addrinfo.protocol is …\n"],["remove","FileUtils","FileUtils.html#method-c-remove","(list, force: nil, noop: nil, verbose: nil)",""],["remove","FileUtils","FileUtils.html#method-i-remove","(list, force: nil, noop: nil, verbose: nil)",""],["remove","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-remove","()","<p>Remove the oldest DependencyRequest from the list.\n"],["remove","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove","(spec)","<p>spec &mdash; the spec of the gem to be uninstalled\n\n"],["remove","OptionParser","OptionParser.html#method-i-remove","()","<p>Removes the last List.\n"],["remove","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-remove","()","<p>Removes generated RDoc and ri data\n"],["remove","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-remove","()","<p>Removes generated RDoc and ri data\n"],["remove_all","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove_all","(list)","<p>Removes all gems in <code>list</code>.\n<p>NOTE: removes uninstalled gems from <code>list</code>.\n"],["remove_blank_lines","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-remove_blank_lines","(src)",""],["remove_by_name","Gem::DependencyList","Gem/DependencyList.html#method-i-remove_by_name","(full_name)","<p>Removes the gemspec matching <code>full_name</code> from the dependency list\n"],["remove_class_variable","Module","Module.html#method-i-remove_class_variable","(p1)","<p>Removes the named class variable from the receiver, returning that variable’s value.\n\n<pre>class Example ...</pre>\n"],["remove_coding_comment","RDoc::Parser::Simple","RDoc/Parser/Simple.html#method-i-remove_coding_comment","(text)","<p>Removes the encoding magic comment from <code>text</code>\n"],["remove_commented_out_lines","RDoc::Parser::C","RDoc/Parser/C.html#method-i-remove_commented_out_lines","()","<p>Removes lines that are commented out that might otherwise get picked up when scanning for classes and …\n"],["remove_const","Module","Module.html#method-i-remove_const","(p1)","<p>Removes the definition of the given constant, returning that constant’s previous value.  If that …\n"],["remove_dir","FileUtils","FileUtils.html#method-c-remove_dir","(path, force = false)","<p>Recursively removes the directory entry given by <code>path</code>, which should be the entry for a regular file, …\n"],["remove_dir","FileUtils","FileUtils.html#method-i-remove_dir","(path, force = false)","<p>Recursively removes the directory entry given by <code>path</code>, which should be the entry for a regular file, …\n"],["remove_entry","FileUtils","FileUtils.html#method-c-remove_entry","(path, force = false)","<p>Removes the entry given by <code>path</code>, which should be the entry for a regular file, a symbolic link, or a …\n"],["remove_entry","FileUtils","FileUtils.html#method-i-remove_entry","(path, force = false)","<p>Removes the entry given by <code>path</code>, which should be the entry for a regular file, a symbolic link, or a …\n"],["remove_entry_secure","FileUtils","FileUtils.html#method-c-remove_entry_secure","(path, force = false)","<p>Securely removes the entry given by <code>path</code>, which should be the entry for a regular file, a symbolic link, …\n"],["remove_entry_secure","FileUtils","FileUtils.html#method-i-remove_entry_secure","(path, force = false)","<p>Securely removes the entry given by <code>path</code>, which should be the entry for a regular file, a symbolic link, …\n"],["remove_executables","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove_executables","(spec)","<p>Removes installed executables and batch files (windows only) for <code>spec</code>.\n"],["remove_file","FileUtils","FileUtils.html#method-c-remove_file","(path, force = false)","<p>Removes the file entry given by <code>path</code>, which should be the entry for a regular file or a symbolic link. …\n"],["remove_file","FileUtils","FileUtils.html#method-i-remove_file","(path, force = false)","<p>Removes the file entry given by <code>path</code>, which should be the entry for a regular file or a symbolic link. …\n"],["remove_file_list","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-remove_file_list","(files, dir)",""],["remove_from_documentation?","RDoc::Context","RDoc/Context.html#method-i-remove_from_documentation-3F","()","<p>Should we remove this context from the documentation?\n<p>The answer is yes if:\n<p>#received_nodoc is <code>true</code>\n"],["remove_frozen_string_literal","RDoc::Encoding","RDoc/Encoding.html#method-c-remove_frozen_string_literal","(string)",""],["remove_installed!","Gem::AvailableSet","Gem/AvailableSet.html#method-i-remove_installed-21","(dep)",""],["remove_instance_variable","Object","Object.html#method-i-remove_instance_variable","(p1)","<p>Removes the named instance variable from <em>obj</em>, returning that variable’s value. String arguments are …\n"],["remove_invisible","RDoc::Context","RDoc/Context.html#method-i-remove_invisible","(min_visibility)","<p>Removes methods and attributes with a visibility less than <code>min_visibility</code>.\n"],["remove_magic_comment","RDoc::Encoding","RDoc/Encoding.html#method-c-remove_magic_comment","(string)","<p>Removes magic comments and shebang\n"],["remove_method","Module","Module.html#method-i-remove_method","(*args)","<p>Removes the method identified by <em>symbol</em> from the current class. For an example, see Module#undef_method …\n"],["remove_modeline","RDoc::Parser","RDoc/Parser.html#method-c-remove_modeline","(content)","<p>Removes an emacs-style modeline from the first line of the document\n"],["remove_nodoc","RDoc::Store","RDoc/Store.html#method-i-remove_nodoc","(all_hash)","<p>Removes from <code>all_hash</code> the contexts that are nodoc or have no content.\n<p>See RDoc::Context#remove_from_documentation? …\n"],["remove_nodoc_children","RDoc::ClassModule","RDoc/ClassModule.html#method-i-remove_nodoc_children","()","<p>Updates the child modules or classes of class/module <code>parent</code> by deleting the ones that have been removed …\n"],["remove_old_bin_files","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-remove_old_bin_files","(bin_dir)",""],["remove_old_lib_files","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-remove_old_lib_files","(lib_dir)",""],["remove_old_man_files","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-remove_old_man_files","(old_man_dir)",""],["remove_option","Gem::Command","Gem/Command.html#method-i-remove_option","(name)","<p>Remove previously defined command-line argument <code>name</code>.\n"],["remove_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-remove_owners","(name, owners)",""],["remove_plugins_for","Gem::InstallerUninstallerUtils","Gem/InstallerUninstallerUtils.html#method-i-remove_plugins_for","(spec, plugins_dir)",""],["remove_private","RDoc::Comment","RDoc/Comment.html#method-i-remove_private","()","<p>Removes private sections from this comment.  Private sections are flush to the comment marker and start …\n"],["remove_private_comment","RDoc::Parser::Simple","RDoc/Parser/Simple.html#method-i-remove_private_comment","(comment)","<p>Removes private comments.\n<p>Unlike RDoc::Comment#remove_private this implementation only looks for two dashes …\n"],["remove_server","DRb","DRb.html#method-c-remove_server","(server)","<p>Removes <code>server</code> from the list of registered servers.\n"],["remove_server","DRb","DRb.html#method-i-remove_server","(server)","<p>Removes <code>server</code> from the list of registered servers.\n"],["remove_siginfo_handler","RDoc::RDoc","RDoc/RDoc.html#method-i-remove_siginfo_handler","()","<p>Removes a siginfo handler and replaces the previous\n"],["remove_spec","Gem::Specification","Gem/Specification.html#method-c-remove_spec","(spec)","<p>Removes <code>spec</code> from the known specs.\n"],["remove_specs_unsatisfied_by","Gem::DependencyList","Gem/DependencyList.html#method-i-remove_specs_unsatisfied_by","(dependencies)","<p>Remove everything in the DependencyList that matches but doesn’t satisfy items in <code>dependencies</code> (a …\n"],["remove_stress_to_class","GC","GC.html#method-c-remove_stress_to_class","(*args)","<p>No longer raises NoMemoryError when allocating an instance of the given classes.\n"],["remove_token_listener","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-remove_token_listener","(obj)","<p>Removes the token listener <code>obj</code>\n"],["remove_unparseable","RDoc::RDoc","RDoc/RDoc.html#method-i-remove_unparseable","(files)","<p>Removes file extensions known to be unparseable from <code>files</code> and TAGS files for emacs and vim.\n"],["removed_method_calls","Gem::Specification","Gem/Specification.html#method-i-removed_method_calls","()",""],["rename","File","File.html#method-c-rename","(p1, p2)","<p>Renames the given file to the new name. Raises a SystemCallError if the file cannot be renamed.\n\n<pre>File.rename(&quot;afile&quot;, ...</pre>\n"],["rename","Pathname","Pathname.html#method-i-rename","(p1)","<p>Rename the file.\n<p>See File.rename.\n"],["render_dialog","Reline::LineEditor","Reline/LineEditor.html#method-i-render_dialog","(cursor_column)",""],["render_each_dialog","Reline::LineEditor","Reline/LineEditor.html#method-i-render_each_dialog","(dialog, cursor_column)",""],["render_frame","IRB::RubyModel","IRB/RubyModel.html#method-i-render_frame","(i)",""],["render_partial","Reline::LineEditor","Reline/LineEditor.html#method-i-render_partial","(prompt, prompt_width, line_to_render, this_started_from, with_control: true)",""],["render_whole_lines","Reline::LineEditor","Reline/LineEditor.html#method-i-render_whole_lines","(lines, prompt, prompt_width)",""],["renew","Rinda::SimpleRenewer","Rinda/SimpleRenewer.html#method-i-renew","()","<p>Called by the TupleSpace to check if the object is still alive.\n"],["renew","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-renew","(sec_or_renewer)","<p>Reset the expiry time according to <code>sec_or_renewer</code>.\n<p><code>nil</code> &mdash; it is set to expire in the far future.\n<p><code>true</code> &mdash; it has …\n"],["reopen","IO","IO.html#method-i-reopen","(p1, p2 = v2, p3 = {})","<p>Reassociates the stream with another stream, which may be of a different class. This method may be used …\n"],["reopen","Logger","Logger.html#method-i-reopen","(logdev = nil)","<p>Sets the logger’s output stream:\n<p>If <code>logdev</code> is <code>nil</code>, reopens the current output stream.\n<p>If <code>logdev</code> is …\n"],["reopen","Logger::LogDevice","Logger/LogDevice.html#method-i-reopen","(log = nil)",""],["reopen","StringIO","StringIO.html#method-i-reopen","(*args)","<p>Reinitializes the stream with the given <code>other</code> (string or StringIO) and <code>mode</code>; see IO.new:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">StringIO</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["reopen","Syslog","Syslog.html#method-c-reopen","(*args)","<p>Closes and then reopens the syslog.\n<p>Arguments are the same as for open().\n"],["repeated_combination","Array","Array.html#method-i-repeated_combination","(p1)","<p>Calls the block with each repeated combination of length <code>n</code> of the elements of <code>self</code>; each combination …\n"],["repeated_permutation","Array","Array.html#method-i-repeated_permutation","(p1)","<p>Calls the block with each repeated permutation of length <code>n</code> of the elements of <code>self</code>; each permutation …\n"],["replace","Array","Array.html#method-i-replace","(p1)","<p>Replaces the content of <code>self</code> with the content of <code>other_array</code>; returns <code>self</code>:\n\n<pre>a = [:foo, &#39;bar&#39;, 2]\na.replace([&#39;foo&#39;, ...</pre>\n"],["replace","ENV","ENV.html#method-c-replace","(p1)","<p>Replaces the entire content of the environment variables with the name/value pairs in the given <code>hash</code> …\n"],["replace","Fiddle::CStruct","Fiddle/CStruct.html#method-i-replace","(another)",""],["replace","Gem::SourceList","Gem/SourceList.html#method-i-replace","(other)","<p>Replaces this SourceList with the sources in <code>other</code>  See #<< for acceptable items in <code>other</code>.\n"],["replace","Hash","Hash.html#method-i-replace","(p1)","<p>Replaces the entire contents of <code>self</code> with the contents of <code>other_hash</code>; returns <code>self</code>:\n\n<pre>h = {foo: 0, bar: ...</pre>\n"],["replace","Racc::Rule","Racc/Rule.html#method-i-replace","(src, dest)",""],["replace","Set","Set.html#method-i-replace","(enum)","<p>Replaces the contents of the set with the contents of the given\nenumerable object and returns self.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">set</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["replace","String","String.html#method-i-replace","(p1)","<p>Replaces the contents of <code>self</code> with the contents of <code>other_string</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>        <span class=\"ruby-comment\"># =&gt; &quot;foo&quot;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;bar&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["replace","YAML::DBM","YAML/DBM.html#method-i-replace","( hsh )","<p>Replaces the contents of the database with the contents of the specified object. Takes any object which …\n"],["replace!","URI::Generic","URI/Generic.html#method-i-replace-21","(oth)","<p>Replaces self by other URI object.\n"],["replace_location","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-replace_location","(src)",""],["replacement","Encoding::Converter","Encoding/Converter.html#method-i-replacement","()","<p>Returns the replacement string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ec</span> = <span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Converter</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;euc-jp&quot;</span>, <span class=\"ruby-string\">&quot;us-ascii&quot;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">ec</span>.<span class=\"ruby-identifier\">replacement</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["replacement=","Encoding::Converter","Encoding/Converter.html#method-i-replacement-3D","(p1)","<p>Sets the replacement string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ec</span> = <span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Converter</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;utf-8&quot;</span>, <span class=\"ruby-string\">&quot;us-ascii&quot;</span>, <span class=\"ruby-value\">:undef</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-value\">:replace</span>)\n<span class=\"ruby-identifier\">ec</span>.<span class=\"ruby-identifier\">replacement</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["replicate","Encoding","Encoding.html#method-i-replicate","(p1)","<p>Returns a replicated encoding of <em>enc</em> whose name is <em>name</em>. The new encoding should have the same byte structure …\n"],["reply","Socket::UDPSource","Socket/UDPSource.html#method-i-reply","(msg)","<p>Sends the String <code>msg</code> to the source\n"],["reply_service","Rinda::RingServer","Rinda/RingServer.html#method-i-reply_service","()","<p>Creates a thread that notifies waiting clients from the TupleSpace.\n"],["report","GC::Profiler","GC/Profiler.html#method-c-report","(*args)","<p>Writes the GC::Profiler.result to <code>$stdout</code> or the given IO object.\n"],["report","RDoc::Stats","RDoc/Stats.html#method-i-report","()","<p>Returns a report on which items are not documented\n"],["report_attributes","RDoc::Stats","RDoc/Stats.html#method-i-report_attributes","(cm)","<p>Returns a report on undocumented attributes in ClassModule <code>cm</code>\n"],["report_class_module","RDoc::Stats","RDoc/Stats.html#method-i-report_class_module","(cm)","<p>Returns a report on undocumented items in ClassModule <code>cm</code>\n"],["report_constants","RDoc::Stats","RDoc/Stats.html#method-i-report_constants","(cm)","<p>Returns a report on undocumented constants in ClassModule <code>cm</code>\n"],["report_methods","RDoc::Stats","RDoc/Stats.html#method-i-report_methods","(cm)","<p>Returns a report on undocumented methods in ClassModule <code>cm</code>\n"],["report_on_exception","Thread","Thread.html#method-i-report_on_exception","()","<p>Returns the status of the thread-local “report on exception” condition for this <code>thr</code>.\n<p>The default …\n"],["report_on_exception","Thread","Thread.html#method-c-report_on_exception","()","<p>Returns the status of the global “report on exception” condition.\n<p>The default is <code>true</code> since …\n"],["report_on_exception=","Thread","Thread.html#method-c-report_on_exception-3D","(p1)","<p>Returns the new state. When set to <code>true</code>, all threads created afterwards will inherit the condition and …\n"],["report_on_exception=","Thread","Thread.html#method-i-report_on_exception-3D","(p1)","<p>When set to <code>true</code>, a message is printed on $stderr if an exception kills this <code>thr</code>.  See ::report_on_exception …\n"],["represent_map","Psych::Coder","Psych/Coder.html#method-i-represent_map","(tag, map)","<p>Emit a sequence with <code>map</code> and <code>tag</code>\n"],["represent_object","Psych::Coder","Psych/Coder.html#method-i-represent_object","(tag, obj)","<p>Emit an arbitrary object <code>obj</code> and <code>tag</code>\n"],["represent_scalar","Psych::Coder","Psych/Coder.html#method-i-represent_scalar","(tag, value)","<p>Emit a scalar with <code>value</code> and <code>tag</code>\n"],["represent_seq","Psych::Coder","Psych/Coder.html#method-i-represent_seq","(tag, list)","<p>Emit a sequence with <code>list</code> and <code>tag</code>\n"],["request","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-request","(uri, request_class, last_modified = nil)","<p>Performs a Net::HTTP request of type <code>request_class</code> on <code>uri</code> returning a Net::HTTP response object.  request …\n"],["request","Net::HTTP","Net/HTTP.html#method-i-request","(req, body = nil)","<p>Sends an HTTPRequest object <code>req</code> to the HTTP server.\n<p>If <code>req</code> is a Net::HTTP::Post or Net::HTTP::Put request …\n"],["request_body_permitted?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-request_body_permitted-3F","()",""],["request_context","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-request_context","()","<p>Return a String indicating who caused this request to be added (only valid for implicit requests)\n"],["request_get","Net::HTTP","Net/HTTP.html#method-i-request_get","(path, initheader = nil)","<p>Sends a GET request to the <code>path</code>. Returns the response as a Net::HTTPResponse object.\n<p>When called with …\n"],["request_head","Net::HTTP","Net/HTTP.html#method-i-request_head","(path, initheader = nil, &block)","<p>Sends a HEAD request to the <code>path</code> and returns the response as a Net::HTTPResponse object.\n<p>Returns the response. …\n"],["request_path","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-request_path","(current)","<p>Path of activations from the <code>current</code> list.\n"],["request_post","Net::HTTP","Net/HTTP.html#method-i-request_post","(path, data, initheader = nil)","<p>Sends a POST request to the <code>path</code>.\n<p>Returns the response as a Net::HTTPResponse object.\n<p>When called with …\n"],["request_uri","URI::HTTP","URI/HTTP.html#method-i-request_uri","()","<p>Description\n<p>Returns the full path for an HTTP request, as required by Net::HTTP::Get.\n<p>If the URI contains …\n"],["request_uri","URI::WS","URI/WS.html#method-i-request_uri","()","<p>Description\n<p>Returns the full path for a WS URI, as required by Net::HTTP::Get.\n<p>If the URI contains a query, …\n"],["request_with_otp","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-request_with_otp","(method, uri, &block)",""],["requester","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-requester","()","<p>Return the Specification that listed the dependency\n"],["requests","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-requests","()",""],["require","Bundler","Bundler.html#method-c-require","(*groups)","<p>Setups Bundler environment (see Bundler.setup) if it is not already set, and loads all gems from groups …\n"],["require","IRB::Locale","IRB/Locale.html#method-i-require","(file, priv = nil)",""],["require","Kernel","Kernel.html#method-i-require","(path)","<p>When RubyGems is required, Kernel#require is replaced with our own which is capable of loading gems on …\n"],["require","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-require","(feature)",""],["require_io_console","Gem::StreamUI","Gem/StreamUI.html#method-i-require_io_console","()",""],["require_nested_dependencies_for","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-require_nested_dependencies_for","(possibility_set)","<p>Requires the dependencies that the recently activated spec has @param [Object] possibility_set the PossibilitySet …\n"],["require_path","Gem::Specification","Gem/Specification.html#method-i-require_path","()","<p>Singular accessor for #require_paths\n"],["require_path=","Gem::Specification","Gem/Specification.html#method-i-require_path-3D","(path)","<p>Singular accessor for #require_paths\n"],["require_paths","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-require_paths","()","<p>Paths in the gem to add to <code>$LOAD_PATH</code> when this gem is activated.\n<p>See also #require_paths=\n<p>If you have …\n"],["require_paths=","Gem::Specification","Gem/Specification.html#method-i-require_paths-3D","(val)","<p>Paths in the gem to add to <code>$LOAD_PATH</code> when this gem is activated. If you have an extension you do not …\n"],["require_relative","Kernel","Kernel.html#method-i-require_relative","(file)","<p>Ruby tries to load the library named <em>string</em> relative to the directory containing the requiring file. …\n"],["requireables","DidYouMean::RequirePathChecker","DidYouMean/RequirePathChecker.html#method-c-requireables","()",""],["required_attribute?","Gem::Specification","Gem/Specification.html#method-c-required_attribute-3F","(name)","<p>Is <code>name</code> a required attribute?\n"],["required_attributes","Gem::Specification","Gem/Specification.html#method-c-required_attributes","()","<p>Required specification attributes\n"],["required_ruby_version","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-i-required_ruby_version","()","<p>The required_ruby_version constraint for this specification\n<p>A fallback is included because when generated, …\n"],["required_ruby_version","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-required_ruby_version","()","<p>The required_ruby_version constraint for this specification\n"],["required_ruby_version=","Gem::Specification","Gem/Specification.html#method-i-required_ruby_version-3D","(req)","<p>The version of Ruby required by this gem.  The ruby version can be specified to the patch-level:\n\n<pre>$ ruby ...</pre>\n"],["required_rubygems_version","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-i-required_rubygems_version","()","<p>The required_rubygems_version constraint for this specification\n<p>A fallback is included because the original …\n"],["required_rubygems_version","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-required_rubygems_version","()","<p>The required_rubygems_version constraint for this specification\n"],["required_rubygems_version=","Gem::Specification","Gem/Specification.html#method-i-required_rubygems_version-3D","(req)","<p>The RubyGems version required by this gem\n"],["requirement","Gem::Dependency","Gem/Dependency.html#method-i-requirement","()","<p>What does this dependency require?\n"],["requirement","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-requirement","()","<p>The version requirement for this dependency request\n"],["requirement","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-requirement","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#requirement)\n"],["requirement!","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-requirement-21","()",""],["requirement_for_existing_name","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-requirement_for_existing_name","(name)","<p>@param [String] name @return [Object] the requirement that led to a version of a possibility\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">with</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["requirement_satisfied_by?","Gem::Resolver","Gem/Resolver.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)",""],["requirement_satisfied_by?","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#requirement_satisfied_by?)\n"],["requirement_satisfied_by?","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)","<p>Determines whether the given ‘requirement` is satisfied by the given `spec`, in the context of the current …\n"],["requirement_tree_for","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-requirement_tree_for","(requirement)","<p>@param [Object] requirement @return [Array&lt;Object&gt;] the list of requirements that led to\n\n<pre class=\"ruby\"><span class=\"ruby-string\">`requirement`</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["requirement_trees","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-requirement_trees","()","<p>@return [Array&lt;Array&lt;Object&gt;&gt;] The different requirement\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">trees</span> <span class=\"ruby-identifier\">that</span> <span class=\"ruby-identifier\">led</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">every</span> <span class=\"ruby-identifier\">requirement</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["requirements","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-requirements","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#requirements)\n"],["requirements","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-requirements","()","<p>@return [Array&lt;Object&gt;] all of the requirements that required\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">this</span> <span class=\"ruby-identifier\">vertex</span>\n</pre>\n"],["requirements","Gem::Specification","Gem/Specification.html#method-i-requirements","()","<p>Lists the external (to RubyGems) requirements that must be met for this gem to work.  It’s simply …\n"],["requirements=","Gem::Specification","Gem/Specification.html#method-i-requirements-3D","(req)","<p>Set requirements to <code>req</code>, ensuring it is an array.\n"],["requirements_list","Gem::Dependency","Gem/Dependency.html#method-i-requirements_list","()",""],["rerdoc_task_description","RDoc::Task","RDoc/Task.html#method-i-rerdoc_task_description","()","<p>Task description for the rerdoc task or its renamed description\n"],["rerdoc_task_name","RDoc::Task","RDoc/Task.html#method-i-rerdoc_task_name","()",""],["rerender","Reline::LineEditor","Reline/LineEditor.html#method-i-rerender","()",""],["rerender_added_newline","Reline::LineEditor","Reline/LineEditor.html#method-i-rerender_added_newline","(prompt, prompt_width)",""],["rerender_all","Reline::LineEditor","Reline/LineEditor.html#method-i-rerender_all","()",""],["rerender_all_lines","Reline::LineEditor","Reline/LineEditor.html#method-i-rerender_all_lines","()",""],["rerender_changed_current_line","Reline::LineEditor","Reline/LineEditor.html#method-i-rerender_changed_current_line","()",""],["reset","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-reset","(value = nil, name = nil)","<p>Generate a reset button Input element, as a String.\n<p>This resets the values on a form to their initial …\n"],["reset","Digest::Base","Digest/Base.html#method-i-reset","()","<p>Reset the digest to its initial state and return <code>self</code>.\n"],["reset","Digest::Instance","Digest/Instance.html#method-i-reset","()","<p>Resets the digest to the initial state and returns self.\n<p>This method is overridden by each implementation …\n"],["reset","Digest::SHA2","Digest/SHA2.html#method-i-reset","()","<p>Reset the digest to the initial state and return self.\n"],["reset","Gem::CommandManager","Gem/CommandManager.html#method-c-reset","()","<p>Reset the authoritative instance of the command manager.\n"],["reset","Gem::Request","Gem/Request.html#method-i-reset","(connection)","<p>Resets HTTP connection <code>connection</code>.\n"],["reset","Gem::Security","Gem/Security.html#method-c-reset","()","<p>Resets the trust directory for verifying gems.\n"],["reset","Gem::Specification","Gem/Specification.html#method-c-reset","()","<p>Reset the list of known specs, running pre and post reset hooks registered in Gem.\n"],["reset","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-reset","()","<p>Fully resets the internal state of the Cipher. By using this, the same Cipher instance may be used several …\n"],["reset","OpenSSL::Digest","OpenSSL/Digest.html#method-i-reset","()","<p>Resets the Digest in the sense that any Digest#update that has been performed is abandoned and the Digest …\n"],["reset","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-reset","()","<p>Returns <em>hmac</em> as it was when it was first initialized, with all processed data cleared from it.\n<p>Example …\n"],["reset","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-reset","()",""],["reset","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-reset","()","<p>Resets the tools\n"],["reset","Reline::Config","Reline/Config.html#method-i-reset","()",""],["reset","Reline::GeneralIO","Reline/GeneralIO.html#method-c-reset","(encoding: nil)",""],["reset","Reline::LineEditor","Reline/LineEditor.html#method-i-reset","(prompt = '', encoding:)",""],["reset","Set","Set.html#method-i-reset","()","<p>Resets the internal state after modification to existing elements\nand returns self.\n<p>Elements will be reindexed …\n"],["reset","StringScanner","StringScanner.html#method-i-reset","()","<p>Reset the scan pointer (index 0) and clear matching data.\n"],["reset","Zlib::ZStream","Zlib/ZStream.html#method-i-reset","()","<p>Resets and initializes the stream. All data in both input and output buffer are discarded.\n"],["reset!","Bundler","Bundler.html#method-c-reset-21","()",""],["reset_default_key_bindings","Reline::Config","Reline/Config.html#method-i-reset_default_key_bindings","()",""],["reset_default_key_bindings","Reline::KeyActor::Base","Reline/KeyActor/Base.html#method-i-reset_default_key_bindings","()",""],["reset_dialog","Reline::LineEditor","Reline/LineEditor.html#method-i-reset_dialog","(dialog, old_dialog)",""],["reset_line","Reline::LineEditor","Reline/LineEditor.html#method-i-reset_line","()",""],["reset_nil_attributes_to_default","Gem::Specification","Gem/Specification.html#method-i-reset_nil_attributes_to_default","()","<p>Reset nil attributes to their default values to make the spec valid\n"],["reset_oneshot_key_bindings","Reline::Config","Reline/Config.html#method-i-reset_oneshot_key_bindings","()",""],["reset_paths!","Bundler","Bundler.html#method-c-reset_paths-21","()",""],["reset_rubygems!","Bundler","Bundler.html#method-c-reset_rubygems-21","()",""],["reset_settings_and_root!","Bundler","Bundler.html#method-c-reset_settings_and_root-21","()",""],["reset_stats!","RubyVM::YJIT","RubyVM/YJIT.html#method-c-reset_stats-21","()","<p>Discard statistics collected for –yjit-stats.\n"],["reset_variables","Reline::LineEditor","Reline/LineEditor.html#method-i-reset_variables","(prompt = '', encoding:)",""],["resize","IO::Buffer","IO/Buffer.html#method-i-resize","(p1)","<p>Resizes a buffer to a <code>new_size</code> bytes, preserving its content. Depending on the old and new size, the …\n"],["resize","Reline::LineEditor","Reline/LineEditor.html#method-i-resize","()",""],["resolve","Gem::RequestSet","Gem/RequestSet.html#method-i-resolve","(set = Gem::Resolver::BestSet.new)","<p>Resolve the requested dependencies and return an Array of Specification objects to be activated.\n"],["resolve","Gem::Resolver","Gem/Resolver.html#method-i-resolve","()","<p>Proceed with resolution! Returns an array of ActivationRequest objects.\n"],["resolve","Gem::Resolver::Molinillo::Resolver","Gem/Resolver/Molinillo/Resolver.html#method-i-resolve","(requested, base = DependencyGraph.new)","<p>Resolves the requested dependencies into a {DependencyGraph}, locking to the base dependency graph (if …\n"],["resolve","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-resolve","()","<p>Resolves the {#original_requested} dependencies into a full dependency\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">graph</span>\n</pre>\n<p>@raise [ResolverError] if …\n"],["resolve","RDoc::CrossReference","RDoc/CrossReference.html#method-i-resolve","(name, text)","<p>Returns a reference to <code>name</code>.\n<p>If the reference is found and <code>name</code> is not documented <code>text</code> will be returned. …\n"],["resolve","Racc::States","Racc/States.html#method-i-resolve","(state)","<p>resolve\n"],["resolve_activated_specs","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-resolve_activated_specs","()",""],["resolve_aliases","RDoc::Context","RDoc/Context.html#method-i-resolve_aliases","(added)","<p>Tries to resolve unmatched aliases when a method or attribute has just been added.\n"],["resolve_class","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-resolve_class","(klassname)","<p>Convert <code>klassname</code> to a Class\n"],["resolve_current","Gem::RequestSet","Gem/RequestSet.html#method-i-resolve_current","()","<p>Resolve the requested dependencies against the gems available via Gem.path and return an Array of Specification …\n"],["resolve_gem_name","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-resolve_gem_name","()",""],["resolve_method","RDoc::CrossReference","RDoc/CrossReference.html#method-i-resolve_method","(name)",""],["resolve_row_separator","CSV::Parser","CSV/Parser.html#method-i-resolve_row_separator","(separator)",""],["resolve_rr","Racc::States","Racc/States.html#method-i-resolve_rr","(state, r)",""],["resolve_sr","Racc::States","Racc/States.html#method-i-resolve_sr","(state, s)",""],["respond_to?","DRb::DRbObject","DRb/DRbObject.html#method-i-respond_to-3F","(msg_id, priv=false)","<p>Routes respond_to? to the referenced remote object.\n"],["respond_to?","DRb::DRbObject","DRb/DRbObject.html#method-i-respond_to-3F","(msg_id, priv=false)","<p>Routes respond_to? to the referenced remote object.\n"],["respond_to?","Object","Object.html#method-i-respond_to-3F","(p1, p2 = v2)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method.  Private and protected methods are included in the …\n"],["respond_to_missing?","Delegator","Delegator.html#method-i-respond_to_missing-3F","(m, include_private)","<p>Checks for a method provided by this the delegate object by forwarding the call through _<em>getobj</em>_.\n"],["respond_to_missing?","Gem::Uri","Gem/Uri.html#method-i-respond_to_missing-3F","(method_name, include_private = false)",""],["respond_to_missing?","Object","Object.html#method-i-respond_to_missing-3F","(p1, p2)","<p>DO NOT USE THIS DIRECTLY.\n<p>Hook method to return whether the <em>obj</em> can respond to <em>id</em> method or not.\n<p>When the …\n"],["response_body_encoding=","Net::HTTP","Net/HTTP.html#method-i-response_body_encoding-3D","(value)","<p>Sets the encoding to be used for the response body; returns the encoding.\n<p>The given <code>value</code> may be:\n<p>An Encoding …\n"],["response_body_permitted?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-response_body_permitted-3F","()",""],["response_class","Net::HTTPResponse","Net/HTTPResponse.html#method-c-response_class","(code)",""],["responses","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-responses","()","<p>Returns an Array of SingleResponse for this BasicResponse.\n"],["rest","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-i-rest","()",""],["rest","StringScanner","StringScanner.html#method-i-rest","()","<p>Returns the “rest” of the string (i.e. everything after the scan pointer). If there is no more …\n"],["rest?","StringScanner","StringScanner.html#method-i-rest-3F","()","<p>Returns true if and only if there is more data in the string.  See #eos?. This method is obsolete; use …\n"],["rest_size","StringScanner","StringScanner.html#method-i-rest_size","()","<p><code>s.rest_size</code> is equivalent to <code>s.rest.size</code>.\n"],["restore","CGI::Session::FileStore","CGI/Session/FileStore.html#method-i-restore","()","<p>Restore session state from the session’s FileStore file.\n<p>Returns the session state as a hash.\n"],["restore","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-i-restore","()","<p>Restore session state.\n<p>Returns session data as a hash.\n"],["restore","CGI::Session::NullStore","CGI/Session/NullStore.html#method-i-restore","()","<p>Restore (empty) session state.\n"],["restore","CGI::Session::PStore","CGI/Session/PStore.html#method-i-restore","()","<p>Restore session state from the session’s PStore file.\n<p>Returns the session state as a hash.\n"],["restore","JSON","JSON.html#method-c-restore","(source, proc = nil, options = {})",""],["restore","JSON","JSON.html#method-i-restore","(source, proc = nil, options = {})",""],["restore","Marshal","Marshal.html#method-c-restore","(source, proc = nil, freeze: false)",""],["restsize","StringScanner","StringScanner.html#method-i-restsize","()","<p><code>s.restsize</code> is equivalent to <code>s.rest_size</code>. This method is obsolete; use #rest_size instead.\n"],["result","Coverage","Coverage.html#method-c-result","(p1 = v1)","<p>Returns a hash that contains filename as key and coverage array as value. If <code>clear</code> is true, it clears …\n"],["result","ERB","ERB.html#method-i-result","(b=new_toplevel)","<p>Executes the generated ERB code to produce a completed template, returning the results of that code. …\n"],["result","GC::Profiler","GC/Profiler.html#method-c-result","()","<p>Returns a profile data report such as:\n\n<pre>GC 1 invokes.\nIndex    Invoke Time(sec)       Use Size(byte)   ...</pre>\n"],["result","StopIteration","StopIteration.html#method-i-result","()","<p>Returns the return value of the iterator.\n\n<pre>o = Object.new\ndef o.each\n  yield 1\n  yield 2\n  yield 3\n  100 ...</pre>\n"],["result_with_hash","ERB","ERB.html#method-i-result_with_hash","(hash)","<p>Render a template on a new toplevel binding with local variables specified by a Hash object.\n"],["resume","Coverage","Coverage.html#method-c-resume","()","<p>Start/resume the coverage measurement.\n<p>Caveat: Currently, only process-global coverage measurement is …\n"],["resume","Fiber","Fiber.html#method-i-resume","(*args)","<p>Resumes the fiber from the point at which the last Fiber.yield was called, or starts running it if it …\n"],["resume","RubyVM::MJIT","RubyVM/MJIT.html#method-c-resume","()","<p>Start generating JITed code again after pause.\n"],["retrieve_comment_body","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-retrieve_comment_body","(tk)","<p>Retrieve comment body without =begin/=end\n"],["retrieve_completion_block","Reline::LineEditor","Reline/LineEditor.html#method-i-retrieve_completion_block","(set_completion_quote_character = false)",""],["retrieve_completion_block","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-retrieve_completion_block","(set_completion_quote_character = false)",""],["retrieve_heredoc_info","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-i-retrieve_heredoc_info","(tk)",""],["retrieve_keybuffer","Reline::ANSI","Reline/ANSI.html#method-c-retrieve_keybuffer","()",""],["retrieve_string","Reline::Config","Reline/Config.html#method-i-retrieve_string","(str)",""],["return_headers?","CSV","CSV.html#method-i-return_headers-3F","()","<p>Returns the value that determines whether headers are to be returned; used for parsing; see {Option  …\n"],["return_headers?","CSV::Parser","CSV/Parser.html#method-i-return_headers-3F","()",""],["return_type","WIN32OLE::Method","WIN32OLE/Method.html#method-i-return_type","()","<p>Returns string of return value type of method.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["return_type_detail","WIN32OLE::Method","WIN32OLE/Method.html#method-i-return_type_detail","()","<p>Returns detail information of return value type of method. The information is array.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["return_value","TracePoint","TracePoint.html#method-i-return_value","()","<p>Return value from <code>:return</code>, <code>c_return</code>, and <code>b_return</code> event\n"],["return_vtype","WIN32OLE::Method","WIN32OLE/Method.html#method-i-return_vtype","()","<p>Returns number of return value type of method.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["retval?","WIN32OLE::Param","WIN32OLE/Param.html#method-i-retval-3F","()","<p>Returns true if argument is return value.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;DirectX 7 for Visual Basic Type Library&#39;, ...</pre>\n"],["reverse","Array","Array.html#method-i-reverse","()","<p>Returns a new Array with the elements of <code>self</code> in reverse order:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-string\">&#39;foo&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-string\">&#39;two&#39;</span>]\n<span class=\"ruby-identifier\">a1</span> = <span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">reverse</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["reverse","IPAddr","IPAddr.html#method-i-reverse","()","<p>Returns a string for DNS reverse lookup.  It returns a string in RFC3172 form for an IPv6 address.\n"],["reverse","String","String.html#method-i-reverse","()","<p>Returns a new string with the characters from <code>self</code> in reverse order.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;stressed&#39;</span>.<span class=\"ruby-identifier\">reverse</span> <span class=\"ruby-comment\"># =&gt; &quot;desserts&quot;</span>\n</pre>\n"],["reverse!","Array","Array.html#method-i-reverse-21","()","<p>Reverses <code>self</code> in place:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-string\">&#39;foo&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-string\">&#39;two&#39;</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">reverse!</span> <span class=\"ruby-comment\"># =&gt; [&quot;two&quot;, &quot;bar&quot;, &quot;foo&quot;]</span>\n</pre>\n"],["reverse!","String","String.html#method-i-reverse-21","()","<p>Returns <code>self</code> with its characters reversed:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;stressed&#39;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">reverse!</span> <span class=\"ruby-comment\"># =&gt; &quot;desserts&quot;</span>\n<span class=\"ruby-identifier\">s</span>          <span class=\"ruby-comment\"># =&gt; &quot;desserts&quot;</span>\n</pre>\n"],["reverse_each","Array","Array.html#method-i-reverse_each","()","<p>Iterates backwards over array elements.\n<p>When a block given, passes, in reverse order, each element to …\n"],["reverse_each","Enumerable","Enumerable.html#method-i-reverse_each","(*args)","<p>With a block given, calls the block with each element, but in reverse order; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = []\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">reverse_each</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["reverse_each","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-reverse_each","()","<p>@!visibility private Enumerates each action in the log in reverse order @yield [Action]\n"],["reverse_search_history","Reline::LineEditor","Reline/LineEditor.html#method-i-reverse_search_history","(key)",""],["reversed_requirement_tree_index","Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails","Gem/Resolver/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-reversed_requirement_tree_index","()","<p>@return [Integer] index of state requirement in reversed requirement tree\n\n<pre>(the conflicting requirement ...</pre>\n"],["revive","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-revive","(klass, node)",""],["revive_hash","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-revive_hash","(hash, o, tagged= false)",""],["revocation_reason","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-revocation_reason","()",""],["revocation_time","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-revocation_time","()",""],["revoked","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-revoked","()",""],["revoked=","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-revoked-3D","(p1)",""],["rewind","ARGF","ARGF.html#method-i-rewind","()","<p>Positions the current file to the beginning of input, resetting ARGF.lineno to zero.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">readline</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["rewind","CSV","CSV.html#method-i-rewind","()","<p>Rewinds the underlying IO object and resets CSV’s lineno() counter.\n"],["rewind","CSV::Writer","CSV/Writer.html#method-i-rewind","()","<p>Winds back to the beginning\n"],["rewind","Dir","Dir.html#method-i-rewind","()","<p>Repositions <em>dir</em> to the first entry.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">read</span>     <span class=\"ruby-comment\">#=&gt; &quot;.&quot;</span>\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">rewind</span>   <span class=\"ruby-comment\">#=&gt; #&lt;Dir:0x401b3fb0&gt; ...</span>\n</pre>\n"],["rewind","Enumerator","Enumerator.html#method-i-rewind","()","<p>Rewinds the enumeration sequence to the beginning.\n<p>If the enclosed object responds to a “rewind” …\n"],["rewind","Enumerator::Chain","Enumerator/Chain.html#method-i-rewind","()","<p>Rewinds the enumerator chain by calling the “rewind” method on each enumerable in reverse order. …\n"],["rewind","Enumerator::Product","Enumerator/Product.html#method-i-rewind","()","<p>Rewinds the product enumerator by calling the “rewind” method on each enumerable in reverse …\n"],["rewind","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-rewind","()","<p>NOTE: Do not call #rewind during #each\n"],["rewind","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-rewind","()","<p>Rewinds to the beginning of the tar file entry\n"],["rewind","IO","IO.html#method-i-rewind","()","<p>Repositions the stream to its beginning, setting both the position and the line number to zero; see  …\n"],["rewind","StringIO","StringIO.html#method-i-rewind","()","<p>Sets the current position and line number to zero; see Position and Line Number.\n"],["rewind","Zlib::GzipReader","Zlib/GzipReader.html#method-i-rewind","()","<p>Resets the position of the file pointer to the point created the GzipReader object.  The associated  …\n"],["rewind_to","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-rewind_to","(tag)","<p>Rewinds the graph to the state tagged as ‘tag` @param  [Object] tag the tag to rewind to @return [Void] …\n"],["rewind_to","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-rewind_to","(graph, tag)","<p>@macro action\n"],["rfc1123_date","CGI::Util","CGI/Util.html#method-i-rfc1123_date","(time)","<p>Format a <code>Time</code> object as a String using the format specified by RFC 1123.\n\n<pre>CGI.rfc1123_date(Time.now)\n  ...</pre>\n"],["rfc2822","Date","Date.html#method-i-rfc2822","()","<p>Equivalent to #strftime with argument <code>&#39;%a, %-d %b %Y %T %z&#39;</code>; see Formats for Dates and Times …\n"],["rfc2822","Date","Date.html#method-c-rfc2822","(p1 = v1, p2 = v2, p3 = {})","<p>Returns a new Date object with values parsed from <code>string</code>, which should be a valid RFC 2822 date format …\n"],["rfc2822","DateTime","DateTime.html#method-c-rfc2822","(p1 = v1, p2 = v2, p3 = {})","<p>Creates a new DateTime object by parsing from a string according to some typical RFC 2822 formats.\n\n<pre>DateTime.rfc2822(&#39;Sat, ...</pre>\n"],["rfc2822","Time","Time.html#method-c-rfc2822","(date)","<p>Parses <code>date</code> as date-time defined by RFC 2822 and converts it to a Time object.  The format is identical …\n"],["rfc2822","Time","Time.html#method-i-rfc2822","()","<p>Returns a string which represents the time as date-time defined by RFC 2822:\n\n<pre>day-of-week, DD month-name ...</pre>\n"],["rfc3339","Date","Date.html#method-i-rfc3339","()","<p>Equivalent to #strftime with argument <code>&#39;%FT%T%:z&#39;</code>; see Formats for Dates and Times:\n\n<pre>Date.new(2001, ...</pre>\n"],["rfc3339","Date","Date.html#method-c-rfc3339","(p1 = v1, p2 = v2, p3 = {})","<p>Returns a new Date object with values parsed from <code>string</code>, which should be a valid RFC 3339 format:\n\n<pre>d = ...</pre>\n"],["rfc3339","DateTime","DateTime.html#method-i-rfc3339","(*args)","<p>This method is equivalent to strftime(‘%FT%T%:z’). The optional argument <code>n</code> is the number of digits …\n"],["rfc3339","DateTime","DateTime.html#method-c-rfc3339","(p1 = v1, p2 = v2, p3 = {})","<p>Creates a new DateTime object by parsing from a string according to some typical RFC 3339 formats.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">rfc3339</span>(<span class=\"ruby-string\">&#39;2001-02-03T04:05:06+07:00&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rfc822","Date","Date.html#method-i-rfc822","()","<p>Returns a new Date object with values parsed from <code>string</code>, which should be a valid RFC 2822 date format …\n"],["rfc822","Date","Date.html#method-c-rfc822","(p1 = v1, p2 = v2, p3 = {})","<p>Returns a new Date object with values parsed from <code>string</code>, which should be a valid RFC 2822 date format …\n"],["rfc822","DateTime","DateTime.html#method-c-rfc822","(p1 = v1, p2 = v2, p3 = {})","<p>Creates a new DateTime object by parsing from a string according to some typical RFC 2822 formats.\n\n<pre>DateTime.rfc2822(&#39;Sat, ...</pre>\n"],["rfc822","Time","Time.html#method-c-rfc822","(date)",""],["rfc822","Time","Time.html#method-i-rfc822","()",""],["ri_dir","Gem::Specification","Gem/Specification.html#method-i-ri_dir","()","<p>Returns the full path to this spec’s ri directory.\n"],["ri_installed?","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-ri_installed-3F","()","<p>Is ri data installed?\n"],["ri_installed?","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-ri_installed-3F","()","<p>Is ri data installed?\n"],["ri_paths","RDoc::Servlet","RDoc/Servlet.html#method-i-ri_paths","(&block)","<p>Enumerates the ri paths.  See RDoc::RI::Paths#each\n"],["rid","Process::GID","Process/GID.html#method-c-rid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["rid","Process::UID","Process/UID.html#method-c-rid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["right","Racc::Grammar::PrecedenceDefinitionEnv","Racc/Grammar/PrecedenceDefinitionEnv.html#method-i-right","(*syms)",""],["rindex","Array","Array.html#method-i-rindex","(*args)","<p>Returns the index of the last element for which <code>object == element</code>.\n<p>When argument <code>object</code> is given but no …\n"],["rindex","String","String.html#method-i-rindex","(p1, p2 = v2)","<p>Returns the Integer index of the <em>last</em> occurrence of the given <code>substring</code>, or <code>nil</code> if none found:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;foo&#39;</span>.<span class=\"ruby-identifier\">rindex</span>(<span class=\"ruby-string\">&#39;f&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rjust","String","String.html#method-i-rjust","(*args)","<p>Returns a right-justified copy of <code>self</code>.\n<p>If integer argument <code>size</code> is greater than the size (in characters) …\n"],["rm","FileUtils","FileUtils.html#method-i-rm","(list, force: nil, noop: nil, verbose: nil)","<p>Removes entries at the paths in the given <code>list</code> (a single path or an array of paths) returns <code>list</code>, if …\n"],["rm","FileUtils","FileUtils.html#method-c-rm","(list, force: nil, noop: nil, verbose: nil)","<p>Removes entries at the paths in the given <code>list</code> (a single path or an array of paths) returns <code>list</code>, if …\n"],["rm_f","FileUtils","FileUtils.html#method-i-rm_f","(list, noop: nil, verbose: nil)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm</span>(<span class=\"ruby-identifier\">list</span>, <span class=\"ruby-value\">force:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-operator\">**</span><span class=\"ruby-identifier\">kwargs</span>)\n</pre>\n<p>Argument <code>list</code> (a single path or an array of paths) …\n"],["rm_f","FileUtils","FileUtils.html#method-c-rm_f","(list, noop: nil, verbose: nil)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm</span>(<span class=\"ruby-identifier\">list</span>, <span class=\"ruby-value\">force:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-operator\">**</span><span class=\"ruby-identifier\">kwargs</span>)\n</pre>\n<p>Argument <code>list</code> (a single path or an array of paths) …\n"],["rm_r","FileUtils","FileUtils.html#method-i-rm_r","(list, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Removes entries at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code>, if …\n"],["rm_r","FileUtils","FileUtils.html#method-c-rm_r","(list, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Removes entries at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code>, if …\n"],["rm_rf","Bundler","Bundler.html#method-c-rm_rf","(path)",""],["rm_rf","FileUtils","FileUtils.html#method-i-rm_rf","(list, noop: nil, verbose: nil, secure: nil)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm_r</span>(<span class=\"ruby-identifier\">list</span>, <span class=\"ruby-value\">force:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-operator\">**</span><span class=\"ruby-identifier\">kwargs</span>)\n</pre>\n<p>Argument <code>list</code> or its elements should be interpretable …\n"],["rm_rf","FileUtils","FileUtils.html#method-c-rm_rf","(list, noop: nil, verbose: nil, secure: nil)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm_r</span>(<span class=\"ruby-identifier\">list</span>, <span class=\"ruby-value\">force:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-operator\">**</span><span class=\"ruby-identifier\">kwargs</span>)\n</pre>\n<p>Argument <code>list</code> or its elements should be interpretable …\n"],["rmdir","Dir","Dir.html#method-c-rmdir","(p1)","<p>Deletes the named directory. Raises a subclass of SystemCallError if the directory isn’t empty.\n"],["rmdir","FileUtils","FileUtils.html#method-c-rmdir","(list, parents: nil, noop: nil, verbose: nil)","<p>Removes directories at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code> …\n"],["rmdir","FileUtils","FileUtils.html#method-i-rmdir","(list, parents: nil, noop: nil, verbose: nil)","<p>Removes directories at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code> …\n"],["rmdir","Pathname","Pathname.html#method-i-rmdir","()","<p>Remove the referenced directory.\n<p>See Dir.rmdir.\n"],["rmtree","FileUtils","FileUtils.html#method-c-rmtree","(list, noop: nil, verbose: nil, secure: nil)",""],["rmtree","FileUtils","FileUtils.html#method-i-rmtree","(list, noop: nil, verbose: nil, secure: nil)",""],["rmtree","Pathname","Pathname.html#method-i-rmtree","(noop: nil, verbose: nil, secure: nil)","<p>Recursively deletes a directory, including all directories beneath it.\n<p>See FileUtils.rm_rf\n"],["root","Bundler","Bundler.html#method-c-root","()",""],["root","Psych::Nodes::Document","Psych/Nodes/Document.html#method-i-root","()","<p>Returns the root node.  A Document may only have one root node: yaml.org/spec/1.1/#id898031\n"],["root","RDoc::Servlet","RDoc/Servlet.html#method-i-root","(req, res)","<p>Generates the root page on <code>res</code>.  <code>req</code> is ignored.\n"],["root?","PStore","PStore.html#method-i-root-3F","(key)",""],["root?","Pathname","Pathname.html#method-i-root-3F","()","<p>Predicate method for root directories.  Returns <code>true</code> if the pathname consists of consecutive slashes. …\n"],["root_search","RDoc::Servlet","RDoc/Servlet.html#method-i-root_search","(req, res)","<p>Generates a search index for the root page on <code>res</code>.  <code>req</code> is ignored.\n"],["root_vertex_named","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-root_vertex_named","(name)","<p>@param [String] name @return [Vertex,nil] the root vertex with the given name\n"],["roots","PStore","PStore.html#method-i-roots","()",""],["rotate","Array","Array.html#method-i-rotate","(*args)","<p>Returns a new Array formed from <code>self</code> with elements rotated from one end to the other.\n<p>When no argument …\n"],["rotate!","Array","Array.html#method-i-rotate-21","(*args)","<p>Rotates <code>self</code> in place by moving elements from one end to the other; returns <code>self</code>.\n<p>When no argument given, …\n"],["round","BigDecimal","BigDecimal.html#method-i-round","(p1 = v1, p2 = v2)","<p>Round to the nearest integer (by default), returning the result as a BigDecimal if n is specified, or …\n"],["round","Float","Float.html#method-i-round","(p1 = v1, p2 = {})","<p>Returns <code>self</code> rounded to the nearest value with a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> is …\n"],["round","Integer","Integer.html#method-i-round","(p1 = v1, p2 = {})","<p>Returns <code>self</code> rounded to the nearest value with a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> is …\n"],["round","Numeric","Numeric.html#method-i-round","(*args)","<p>Returns <code>self</code> rounded to the nearest value with a precision of <code>digits</code> decimal digits.\n<p>Numeric implements …\n"],["round","Rational","Rational.html#method-i-round","(*args, p2 = {})","<p>Returns <code>rat</code> rounded to the nearest value with a precision of <code>ndigits</code> decimal digits (default: 0).\n<p>When …\n"],["round","Time","Time.html#method-i-round","(*args)","<p>Returns a new Time object whose numeric value is that of <code>self</code>, with its seconds value rounded to precision …\n"],["route_from","URI::Generic","URI/Generic.html#method-i-route_from","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["route_to","URI::Generic","URI/Generic.html#method-i-route_to","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["row_sep","CSV","CSV.html#method-i-row_sep","()","<p>Returns the encoded row separator; used for parsing and writing; see {Option <code>row_sep</code>}:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CSV</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;&#39;</span>).<span class=\"ruby-identifier\">row_sep</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["row_separator","CSV::Parser","CSV/Parser.html#method-i-row_separator","()",""],["rpartition","String","String.html#method-i-rpartition","(p1)","<p>Returns a 3-element array of substrings of <code>self</code>.\n<p>Matches a pattern against <code>self</code>, scanning backwards from …\n"],["rr_conflict","Racc::State","Racc/State.html#method-i-rr_conflict","(high, low, ctok)",""],["rrconflict_exist?","Racc::States","Racc/States.html#method-i-rrconflict_exist-3F","()",""],["rruleid","Racc::State","Racc/State.html#method-i-rruleid","(rule)",""],["rshift!","OpenSSL::BN","OpenSSL/BN.html#method-i-rshift-21","(p1)",""],["rstrip","String","String.html#method-i-rstrip","()","<p>Returns a copy of the receiver with trailing whitespace removed; see Whitespace in Strings:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">whitespace</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rstrip!","String","String.html#method-i-rstrip-21","()","<p>Like String#rstrip, except that any modifications are made in <code>self</code>; returns <code>self</code> if any modification …\n"],["ruby","Gem","Gem.html#method-c-ruby","()","<p>The path to the running Ruby interpreter.\n"],["ruby","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-ruby","()",""],["ruby","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-ruby","(version, options = {})","<p>Restricts this gem dependencies file to the given ruby <code>version</code>.\n<p>You may also provide <code>engine:</code> and <code>engine_version:</code> …\n"],["ruby2_keywords","Module","Module.html#method-i-ruby2_keywords","(*args)","<p>For the given method names, marks the method as passing keywords through a normal argument splat.  This …\n"],["ruby2_keywords","Proc","Proc.html#method-i-ruby2_keywords","()","<p>Marks the proc as passing keywords through a normal argument splat. This should only be called on procs …\n"],["ruby2_keywords_hash","Hash","Hash.html#method-c-ruby2_keywords_hash","(p1)","<p>Duplicates a given hash and adds a ruby2_keywords flag. This method is not for casual use; debugging, …\n"],["ruby2_keywords_hash?","Hash","Hash.html#method-c-ruby2_keywords_hash-3F","(p1)","<p>Checks if a given hash is flagged by Module#ruby2_keywords (or Proc#ruby2_keywords). This method is not …\n"],["ruby_api_version","Gem","Gem.html#method-c-ruby_api_version","()","<p>Returns a String containing the API compatibility version of Ruby\n"],["ruby_code","Gem::Specification","Gem/Specification.html#method-i-ruby_code","(obj)","<p>Return a string containing a Ruby code representation of the given object.\n"],["ruby_engine","Gem","Gem.html#method-c-ruby_engine","()",""],["ruby_install_name","Gem::Installer","Gem/Installer.html#method-i-ruby_install_name","()",""],["ruby_scope","Bundler","Bundler.html#method-c-ruby_scope","()",""],["ruby_static?","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-ruby_static-3F","()",""],["ruby_version","Gem","Gem.html#method-c-ruby_version","()","<p>A Gem::Version for the currently running Ruby.\n"],["rubygems_api_key","Gem::ConfigFile","Gem/ConfigFile.html#method-i-rubygems_api_key","()","<p>Returns the RubyGems.org API key\n"],["rubygems_api_key=","Gem::ConfigFile","Gem/ConfigFile.html#method-i-rubygems_api_key-3D","(api_key)","<p>Sets the RubyGems.org API key to <code>api_key</code>\n"],["rubygems_api_request","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-rubygems_api_request","(method, path, host = nil, allowed_push_host = nil, scope: nil, &block)","<p>Creates an RubyGems API to <code>host</code> and <code>path</code> with the given HTTP <code>method</code>.\n<p>If <code>allowed_push_host</code> metadata is …\n"],["rubygems_deprecate","Gem::Deprecate","Gem/Deprecate.html#method-i-rubygems_deprecate","(name, replacement=:none)","<p>Simple deprecation method that deprecates <code>name</code> by wrapping it up in a dummy method. It warns on each …\n"],["rubygems_deprecate","Gem::Deprecate","Gem/Deprecate.html#method-c-rubygems_deprecate","(name, replacement=:none)","<p>Simple deprecation method that deprecates <code>name</code> by wrapping it up in a dummy method. It warns on each …\n"],["rubygems_deprecate_command","Gem::Deprecate","Gem/Deprecate.html#method-c-rubygems_deprecate_command","(version = Gem::Deprecate.next_rubygems_major_version)","<p>Deprecation method to deprecate Rubygems commands\n"],["rubygems_deprecate_command","Gem::Deprecate","Gem/Deprecate.html#method-i-rubygems_deprecate_command","(version = Gem::Deprecate.next_rubygems_major_version)","<p>Deprecation method to deprecate Rubygems commands\n"],["rubygems_target_version","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-rubygems_target_version","()",""],["rubygems_version","Gem","Gem.html#method-c-rubygems_version","()","<p>A Gem::Version for the currently running RubyGems\n"],["rule","Racc::Rule","Racc/Rule.html#method-i-rule","()",""],["rule","Racc::Sym","Racc/Sym.html#method-i-rule","()",""],["ruleid","Racc::Reduce","Racc/Reduce.html#method-i-ruleid","()",""],["run","DRb::DRbServer","DRb/DRbServer.html#method-i-run","()","<p>Starts the DRb main loop in a new thread.\n"],["run","ERB","ERB.html#method-i-run","(b=new_toplevel)","<p>Generate results and print them. (see ERB#result)\n"],["run","Gem::CommandManager","Gem/CommandManager.html#method-i-run","(args, build_args=nil)","<p>Run the command specified by <code>args</code>.\n"],["run","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-run","(command, results, command_name = nil, dir = Dir.pwd, env = {})",""],["run","Gem::GemRunner","Gem/GemRunner.html#method-i-run","(args)","<p>Run the gem command with the following arguments.\n"],["run","IRB::Irb","IRB/Irb.html#method-i-run","(conf = IRB.conf)",""],["run","Thread","Thread.html#method-i-run","()","<p>Wakes up <code>thr</code>, making it eligible for scheduling.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-string\">&quot;a&quot;</span>; <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">stop</span>; <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-string\">&quot;c&quot;</span> }\n<span class=\"ruby-identifier\">sleep</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["run_for_operators","Reline::LineEditor","Reline/LineEditor.html#method-i-run_for_operators","(key, method_symbol, &block)",""],["running?","Coverage","Coverage.html#method-c-running-3F","()","<p>Returns true if coverage stats are currently being collected (after Coverage.start call, but before  …\n"],["runtime?","Gem::Dependency","Gem/Dependency.html#method-i-runtime-3F","()",""],["runtime_dependencies","Gem::Specification","Gem/Specification.html#method-i-runtime_dependencies","()","<p>List of dependencies that will automatically be activated at runtime.\n"],["runtime_source","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-runtime_source","()",""],["runtime_stats","RubyVM::YJIT","RubyVM/YJIT.html#method-c-runtime_stats","()","<p>Return a hash for statistics generated for the –yjit-stats command line option. Return nil when option …\n"],["rustc_dynamic_linker_flags","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-rustc_dynamic_linker_flags","(dest_dir, crate_name)",""],["rustc_lib_flags","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-rustc_lib_flags","(dest_dir)",""],["s3_uri_signer","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-s3_uri_signer","(uri)","<p>we have our own signing code here to avoid a dependency on the aws-sdk gem\n"],["safe_delete","Gem::Uninstaller","Gem/Uninstaller.html#method-i-safe_delete","(&block)",""],["safe_dump","Psych","Psych.html#method-c-safe_dump","(o, io = nil, options = {})","<p>Safely dump Ruby object <code>o</code> to a YAML string. Optional <code>options</code> may be passed in to control the output format. …\n"],["safe_load","Gem::SafeYAML","Gem/SafeYAML.html#method-c-safe_load","(input)",""],["safe_load","Psych","Psych.html#method-c-safe_load","(yaml, permitted_classes: [], permitted_symbols: [], aliases: false, filename: nil, fallback: nil, symbolize_names: false, freeze: false, strict_integer: false)","<p>Safely load the yaml string in <code>yaml</code>.  By default, only the following classes are allowed to be deserialized: …\n"],["safe_load_file","Psych","Psych.html#method-c-safe_load_file","(filename, **kwargs)","<p>Safely loads the document contained in <code>filename</code>.  Returns the yaml contained in <code>filename</code> as a Ruby object, …\n"],["safe_load_marshal","Bundler","Bundler.html#method-c-safe_load_marshal","(data)",""],["safe_unlink","FileUtils","FileUtils.html#method-i-safe_unlink","(list, noop: nil, verbose: nil)",""],["safe_unlink","FileUtils","FileUtils.html#method-c-safe_unlink","(list, noop: nil, verbose: nil)",""],["same_attributes?","Gem::Specification","Gem/Specification.html#method-i-same_attributes-3F","(spec)","<p>True if this gem has the same attributes as <code>other</code>.\n"],["sample","Array","Array.html#method-i-sample","(n = (ary = false), random: Random)","<p>Returns random elements from <code>self</code>.\n<p>When no arguments are given, returns a random element from <code>self</code>:\n\n<pre>a = ...</pre>\n"],["sanitize","Gem::Specification","Gem/Specification.html#method-i-sanitize","()","<p>Sanitize the descriptive fields in the spec.  Sometimes non-ASCII characters will garble the site index. …\n"],["sanitize_path","RDoc::Options","RDoc/Options.html#method-i-sanitize_path","(path)","<p>Removes directories from <code>path</code> that are outside the current directory\n"],["sanitize_string","Gem::Specification","Gem/Specification.html#method-i-sanitize_string","(string)","<p>Sanitize a single string.\n"],["satisfied_by?","Gem::Requirement","Gem/Requirement.html#method-i-satisfied_by-3F","(version)","<p>True if <code>version</code> satisfies this Requirement.\n"],["satisfies_requirement?","Gem::Specification","Gem/Specification.html#method-i-satisfies_requirement-3F","(dependency)","<p>Checks if this specification meets the requirement of <code>dependency</code>.\n"],["saturday?","Date","Date.html#method-i-saturday-3F","()","<p>Returns <code>true</code> if <code>self</code> is a Saturday, <code>false</code> otherwise.\n"],["saturday?","Time","Time.html#method-i-saturday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Saturday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-01 ...</span>\n</pre>\n"],["save","RDoc::Store","RDoc/Store.html#method-i-save","()","<p>Saves all entries in the store\n"],["save_cache","RDoc::Store","RDoc/Store.html#method-i-save_cache","()","<p>Writes the cache file for this store\n"],["save_class","RDoc::Store","RDoc/Store.html#method-i-save_class","(klass)","<p>Writes the ri data for <code>klass</code> (or module)\n"],["save_data","PStore","PStore.html#method-i-save_data","(original_checksum, original_file_size, file)",""],["save_data_with_atomic_file_rename_strategy","PStore","PStore.html#method-i-save_data_with_atomic_file_rename_strategy","(data, file)",""],["save_data_with_fast_strategy","PStore","PStore.html#method-i-save_data_with_fast_strategy","(data, file)",""],["save_exception_mode","BigDecimal","BigDecimal.html#method-c-save_exception_mode","()","<p>Execute the provided block, but preserve the exception mode\n\n<pre>BigDecimal.save_exception_mode do\n  BigDecimal.mode(BigDecimal::EXCEPTION_OVERFLOW, ...</pre>\n"],["save_history","IRB::Context","IRB/Context.html#method-i-save_history","()","<p>A copy of the default <code>IRB.conf[:SAVE_HISTORY]</code>\n"],["save_history=","IRB::Context","IRB/Context.html#method-i-save_history-3D","(val)","<p>Sets <code>IRB.conf[:SAVE_HISTORY]</code> to the given <code>val</code> and calls #init_save_history with this context.\n<p>Will store …\n"],["save_limit","BigDecimal","BigDecimal.html#method-c-save_limit","()","<p>Execute the provided block, but preserve the precision limit\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>.<span class=\"ruby-identifier\">limit</span>(<span class=\"ruby-value\">100</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-constant\">BigDecimal</span>.<span class=\"ruby-identifier\">limit</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["save_method","RDoc::Store","RDoc/Store.html#method-i-save_method","(klass, method)","<p>Writes the ri data for <code>method</code> on <code>klass</code>\n"],["save_page","RDoc::Store","RDoc/Store.html#method-i-save_page","(page)","<p>Writes the ri data for <code>page</code>\n"],["save_rounding_mode","BigDecimal","BigDecimal.html#method-c-save_rounding_mode","()","<p>Execute the provided block, but preserve the rounding mode\n\n<pre>BigDecimal.save_rounding_mode do\n  BigDecimal.mode(BigDecimal::ROUND_MODE, ...</pre>\n"],["say","Gem::StreamUI","Gem/StreamUI.html#method-i-say","(statement=\"\")","<p>Display a statement.\n"],["say","Gem::UserInteraction","Gem/UserInteraction.html#method-i-say","(statement = \"\")","<p>Displays the given <code>statement</code> on the standard output (or equivalent).\n"],["scalar","Psych::Coder","Psych/Coder.html#method-i-scalar","(*args)",""],["scalar","Psych::Emitter","Psych/Emitter.html#method-i-scalar","(p1, p2, p3, p4, p5, p6)","<p>Emit a scalar with <code>value</code>, <code>anchor</code>, <code>tag</code>, and a <code>plain</code> or <code>quoted</code> string type with <code>style</code>.\n<p>See Psych::Handler#scalar …\n"],["scalar","Psych::Handler","Psych/Handler.html#method-i-scalar","(value, anchor, tag, plain, quoted, style)","<p>Called when a scalar <code>value</code> is found.  The scalar may have an <code>anchor</code>, a <code>tag</code>, be implicitly <code>plain</code> or implicitly …\n"],["scalar","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-scalar","(value, anchor, tag, plain, quoted, style)",""],["scalar=","Psych::Coder","Psych/Coder.html#method-i-scalar-3D","(value)","<p>Emit a scalar with <code>value</code>\n"],["scalar?","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-scalar-3F","()",""],["scalar?","Psych::Nodes::Scalar","Psych/Nodes/Scalar.html#method-i-scalar-3F","()",""],["scale","BigDecimal","BigDecimal.html#method-i-scale","()","<p>Returns the number of decimal digits following the decimal digits in <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&quot;0&quot;</span>).<span class=\"ruby-identifier\">scale</span>      <span class=\"ruby-operator\">...</span>\n</pre>\n"],["scan","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-i-scan","(pattern)",""],["scan","IRB::Color","IRB/Color.html#method-c-scan","(code, allow_last_error:)",""],["scan","OpenSSL::X509::Name::RFC2253DN","OpenSSL/X509/Name/RFC2253DN.html#method-i-scan","(dn)",""],["scan","RDoc::Parser::C","RDoc/Parser/C.html#method-i-scan","()","<p>Extracts the classes, modules, methods, attributes, constants and aliases from a C file and returns an …\n"],["scan","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-scan","()","<p>Converts the ChangeLog into an RDoc::Markup::Document\n"],["scan","RDoc::Parser::Markdown","RDoc/Parser/Markdown.html#method-i-scan","()","<p>Creates an Markdown-format TopLevel for the given file.\n"],["scan","RDoc::Parser::RD","RDoc/Parser/RD.html#method-i-scan","()","<p>Creates an rd-format TopLevel for the given file.\n"],["scan","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-scan","()","<p>Scans this Ruby file for Ruby constructs\n"],["scan","RDoc::Parser::Simple","RDoc/Parser/Simple.html#method-i-scan","()","<p>Extract the file contents and attach them to the TopLevel as a comment\n"],["scan","String","String.html#method-i-scan","(p1)","<p>Matches a pattern against <code>self</code>; the pattern is:\n<p><code>string_or_regexp</code> itself, if it is a Regexp.\n<p><code>Regexp.quote(string_or_regexp)</code> …\n"],["scan","StringScanner","StringScanner.html#method-i-scan","(p1)","<p>Tries to match with <code>pattern</code> at the current position. If there’s a match, the scanner advances the …\n"],["scan_action","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-scan_action","()",""],["scan_adjacent_indent","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-scan_adjacent_indent","()",""],["scan_all","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-i-scan_all","(pattern)",""],["scan_error!","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-scan_error-21","(msg)",""],["scan_full","StringScanner","StringScanner.html#method-i-scan_full","(p1, p2, p3)","<p>Tests whether the given <code>pattern</code> is matched from the current scan pointer. Advances the scan pointer if …\n"],["scan_neighbors","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-scan_neighbors","()",""],["scan_quoted","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-scan_quoted","(left, tag = 'string')",""],["scan_token","IRB::Color::SymbolState","IRB/Color/SymbolState.html#method-i-scan_token","(token)","<p>Return true if the token is a part of Symbol.\n"],["scan_until","StringScanner","StringScanner.html#method-i-scan_until","(p1)","<p>Scans the string <em>until</em> the <code>pattern</code> is matched.  Returns the substring up to and including the end of …\n"],["scan_while","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-scan_while","()",""],["schedule","Fiber","Fiber.html#method-c-schedule","(*args)","<p>The method is <em>expected</em> to immediately run the provided block of code in a separate non-blocking fiber. …\n"],["scheduler","Fiber","Fiber.html#method-c-scheduler","()","<p>Returns the Fiber scheduler, that was last set for the current thread with Fiber.set_scheduler. Returns …\n"],["scheme=","URI::Generic","URI/Generic.html#method-i-scheme-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["scheme_list","URI","URI.html#method-c-scheme_list","()","<p>Returns a Hash of the defined schemes.\n"],["scope","URI::LDAP","URI/LDAP.html#method-i-scope","()","<p>Returns scope.\n"],["scope=","URI::LDAP","URI/LDAP.html#method-i-scope-3D","(val)","<p>Setter for scope <code>val</code>.\n"],["scopes","DidYouMean::ClassNameChecker","DidYouMean/ClassNameChecker.html#method-i-scopes","()",""],["screen_width","IRB::ColorPrinter","IRB/ColorPrinter.html#method-c-screen_width","()",""],["screen_width","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-screen_width","()",""],["script_lines","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-script_lines","()","<p>Returns the original source code as an array of lines.\n<p>Note that this is an API for ruby internal use, …\n"],["script_lines","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-script_lines","()","<p>It returns recorded script lines if it is availalble. The script lines are not limited to the iseq range, …\n"],["scroll_backward","IO","IO.html#method-i-scroll_backward","(p1)",""],["scroll_down","Reline::ANSI","Reline/ANSI.html#method-c-scroll_down","(x)",""],["scroll_down","Reline::GeneralIO","Reline/GeneralIO.html#method-c-scroll_down","(val)",""],["scroll_down","Reline::LineEditor","Reline/LineEditor.html#method-i-scroll_down","(val)",""],["scroll_down","Reline::Windows","Reline/Windows.html#method-c-scroll_down","(val)",""],["scroll_forward","IO","IO.html#method-i-scroll_forward","(p1)",""],["scrolling_list","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-scrolling_list","(name = \"\", *values)",""],["scrub","String","String.html#method-i-scrub","(*args)","<p>Returns a copy of <code>self</code> with each invalid byte sequence replaced by the given <code>replacement_string</code>.\n<p>With …\n"],["scrub!","String","String.html#method-i-scrub-21","(*args)","<p>Like String#scrub, except that any replacements are made in <code>self</code>.\n"],["scrypt","OpenSSL::KDF","OpenSSL/KDF.html#method-c-scrypt","(p1, p2 = {})","<p>Derives a key from <em>pass</em> using given parameters with the scrypt password-based key derivation function. …\n"],["search","IRB::JobManager","IRB/JobManager.html#method-i-search","(key)","<p>Returns the associated job for the given <code>key</code>.\n<p>If given an Integer, it will return the <code>key</code> index for the …\n"],["search","OptionParser::List","OptionParser/List.html#method-i-search","(id, key)","<p>Searches <code>key</code> in <code>id</code> list. The result is returned or yielded if a block is given. If it isn’t found, …\n"],["search_const","OptionParser","OptionParser.html#method-c-search_const","(klass, name)",""],["search_convpath","Encoding::Converter","Encoding/Converter.html#method-c-search_convpath","(*args)","<p>Returns a conversion path.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Converter</span>.<span class=\"ruby-identifier\">search_convpath</span>(<span class=\"ruby-string\">&quot;ISO-8859-1&quot;</span>, <span class=\"ruby-string\">&quot;EUC-JP&quot;</span>)\n<span class=\"ruby-comment\">#=&gt; [[#&lt;Encoding:ISO-8859-1&gt;, ...</span>\n</pre>\n"],["search_file","IRB::Locale","IRB/Locale.html#method-i-search_file","(lib_paths, dir, file)","<p>@param paths load paths in which IRB find a localized file. @param dir directory @param file basename …\n"],["search_for","Gem::Resolver","Gem/Resolver.html#method-i-search_for","(dependency)",""],["search_for","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-search_for","(dependency)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#search_for)\n"],["search_for","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-search_for","(dependency)","<p>Search for the specifications that match the given dependency. The specifications in the returned array …\n"],["search_for_dependency","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-search_for_dependency","(dependency, matching_platform=true)","<p>Find and fetch gem name tuples that match <code>dependency</code>.\n<p>If <code>matching_platform</code> is false, gems for all platforms …\n"],["search_full","StringScanner","StringScanner.html#method-i-search_full","(p1, p2, p3)","<p>Scans the string <em>until</em> the <code>pattern</code> is matched. Advances the scan pointer if <code>advance_pointer_p</code>, otherwise …\n"],["search_next_char","Reline::LineEditor","Reline/LineEditor.html#method-i-search_next_char","(key, arg, need_prev_char: false, inclusive: false)",""],["search_prev_char","Reline::LineEditor","Reline/LineEditor.html#method-i-search_prev_char","(key, arg, need_next_char = false)",""],["search_record","RDoc::ClassModule","RDoc/ClassModule.html#method-i-search_record","()","<p>Search record used by RDoc::Generator::JsonIndex\n"],["search_record","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-search_record","()","<p>Used by RDoc::Generator::JsonIndex to create a record for the search engine.\n"],["search_record","RDoc::TopLevel","RDoc/TopLevel.html#method-i-search_record","()","<p>Search record used by RDoc::Generator::JsonIndex\n"],["sec","DateTime","DateTime.html#method-i-sec","()","<p>Returns the second in range (0..59):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">sec</span> <span class=\"ruby-comment\"># =&gt; 6</span>\n</pre>\n<p>Date#second is an alias …\n"],["sec","Time","Time.html#method-i-sec","()","<p>Returns the integer second of the minute for <code>self</code>, in range (0..60):\n\n<pre>t = Time.new(2000, 1, 2, 3, 4, 5, ...</pre>\n"],["sec_fraction","DateTime","DateTime.html#method-i-sec_fraction","()","<p>Returns the fractional part of the second in range (Rational(0, 1)…Rational(1, 1)):\n\n<pre>DateTime.new(2001, ...</pre>\n"],["second","DateTime","DateTime.html#method-i-second","()","<p>Returns the second in range (0..59):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">sec</span> <span class=\"ruby-comment\"># =&gt; 6</span>\n</pre>\n<p>Date#second is an alias …\n"],["second_fraction","DateTime","DateTime.html#method-i-second_fraction","()","<p>Returns the fractional part of the second in range (Rational(0, 1)…Rational(1, 1)):\n\n<pre>DateTime.new(2001, ...</pre>\n"],["section","RDoc::CodeObject","RDoc/CodeObject.html#method-i-section","()","<p>The section this CodeObject is in.  Sections allow grouping of constants, attributes and methods inside …\n"],["section_contents","RDoc::Context","RDoc/Context.html#method-i-section_contents","()","<p>Returns RDoc::Context::Section objects referenced in this context for use in a table of contents.\n"],["sections","OpenSSL::Config","OpenSSL/Config.html#method-i-sections","()","<p>Get the names of all sections in the current configuration.\n"],["sections","RDoc::Context","RDoc/Context.html#method-i-sections","()","<p>Sections in this context\n"],["secure=","CGI::Cookie","CGI/Cookie.html#method-i-secure-3D","(val)","<p>Set whether the Cookie is a secure cookie or not.\n<p><code>val</code> must be a boolean.\n"],["secure_compare","OpenSSL","OpenSSL.html#method-c-secure_compare","(a, b)","<p>Constant time memory comparison. Inputs are hashed using SHA-256 to mask the length of the secret. Returns …\n"],["security_level","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-security_level","()","<p>Returns the security level for the context.\n<p>See also OpenSSL::SSL::SSLContext#security_level=.\n"],["security_level=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-security_level-3D","(p1)","<p>Sets the security level for the context. OpenSSL limits parameters according to the level. The “parameters” …\n"],["see","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-see","()","<p>A method/attribute to look at, in particular if this method/attribute has no documentation.\n<p>It can be …\n"],["seed","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-seed","()","<p>See the OpenSSL documentation for EC_GROUP_get0_seed()\n"],["seed","OpenSSL::Random","OpenSSL/Random.html#method-c-seed","(p1)","<p>::seed is equivalent to ::add where <em>entropy</em> is length of <em>str</em>.\n"],["seed","Random","Random.html#method-i-seed","()","<p>Returns the seed value used to initialize the generator. This may be used to initialize another generator …\n"],["seed","Random","Random.html#method-c-seed","()","<p>Returns the seed value used to initialize the Ruby system PRNG. This may be used to initialize another …\n"],["seed=","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-seed-3D","(p1)","<p>See the OpenSSL documentation for EC_GROUP_set_seed()\n"],["seek","ARGF","ARGF.html#method-i-seek","(*args)","<p>Seeks to offset <em>amount</em> (an Integer) in the ARGF stream according to the value of <em>whence</em>. See IO#seek …\n"],["seek","Dir","Dir.html#method-i-seek","(p1)","<p>Seeks to a particular location in <em>dir</em>. <em>integer</em> must be a value returned by Dir#tell.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["seek","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-seek","(name)","<p>Seeks through the tar file until it finds the <code>entry</code> with <code>name</code> and yields it.  Rewinds the tar file to …\n"],["seek","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-seek","(offset, whence = IO::SEEK_SET)","<p>Seeks to <code>offset</code> bytes into the tar file entry <code>whence</code> can be IO::SEEK_SET, IO::SEEK_CUR, or IO::SEEK_END …\n"],["seek","IO","IO.html#method-i-seek","(p1, p2 = v2)","<p>Seeks to the position given by integer <code>offset</code> (see Position) and constant <code>whence</code>, which is one of:\n<p><code>:CUR</code> …\n"],["seek","StringIO","StringIO.html#method-i-seek","(p1, p2 = v2)","<p>Sets the current position to the given integer <code>offset</code> (in bytes), with respect to a given constant <code>whence</code> …\n"],["select","Array","Array.html#method-i-select","()","<p>Calls the block, if given, with each element of <code>self</code>; returns a new Array containing those elements of …\n"],["select","ENV","ENV.html#method-c-select","()","<p>ENV.filter is an alias for ENV.select.\n<p>Yields each environment variable name and its value as a 2-element …\n"],["select","Enumerable","Enumerable.html#method-i-select","()","<p>Returns an array containing elements selected by the block.\n<p>With a block given, calls the block with successive …\n"],["select","Enumerator::Lazy","Enumerator/Lazy.html#method-i-select","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["select","Hash","Hash.html#method-i-select","()","<p>Hash#filter is an alias for Hash#select.\n<p>Returns a new Hash object whose entries are those for which the …\n"],["select","IO","IO.html#method-c-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Invokes system call select(2), which monitors multiple file descriptors, waiting until one or more of …\n"],["select","Kernel","Kernel.html#method-i-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Invokes system call select(2), which monitors multiple file descriptors, waiting until one or more of …\n"],["select","Ractor","Ractor.html#method-c-select","(*ractors, yield_value: yield_unspecified = true, move: false)","<p>Waits for the first ractor to have something in its outgoing port, reads from this ractor, and returns …\n"],["select","Struct","Struct.html#method-i-select","(*args)","<p>With a block given, returns an array of values from <code>self</code> for which the block returns a truthy value: …\n"],["select","URI::Generic","URI/Generic.html#method-i-select","(*components)","<p>Args\n<p><code>components</code> &mdash; Multiple Symbol arguments defined in URI::HTTP.\n\n<p>Description\n"],["select","YAML::DBM","YAML/DBM.html#method-i-select","( *keys )","<p>If a block is provided, returns a new array containing [key, value] pairs for which the block returns …\n"],["select!","Array","Array.html#method-i-select-21","()","<p>Calls the block, if given  with each element of <code>self</code>; removes from <code>self</code> those elements for which the …\n"],["select!","ENV","ENV.html#method-c-select-21","()","<p>ENV.filter! is an alias for ENV.select!.\n<p>Yields each environment variable name and its value as a 2-element …\n"],["select!","Hash","Hash.html#method-i-select-21","()","<p>Hash#filter! is an alias for Hash#select!.\n<p>Returns <code>self</code>, whose entries are those for which the block returns …\n"],["select!","Set","Set.html#method-i-select-21","(&block)","<p>Equivalent to Set#keep_if, but returns nil if no changes were\nmade. Returns an enumerator if no block ...\n"],["self","TracePoint","TracePoint.html#method-i-self","()","<p>Return the trace object during event\n<p>Same as the following, except it returns the correct object (the …\n"],["self_insert","Reline::LineEditor","Reline/LineEditor.html#method-i-self_insert","(key)",""],["self_manager","Bundler","Bundler.html#method-c-self_manager","()",""],["self_null?","Racc::Sym","Racc/Sym.html#method-i-self_null-3F","()",""],["send","BasicSocket","BasicSocket.html#method-i-send","(p1, p2, p3 = v3)","<p>send <em>mesg</em> via <em>basicsocket</em>.\n<p><em>mesg</em> should be a string.\n<p><em>flags</em> should be a bitwise OR of Socket::MSG_* constants. …\n"],["send","Object","Object.html#method-i-send","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments specified. When the method is identified …\n"],["send","Ractor","Ractor.html#method-i-send","(obj, move: false)","<p>Send a message to a Ractor’s incoming queue to be consumed by Ractor.receive.\n\n<pre>r = Ractor.new do\n  ...</pre>\n"],["send","UDPSocket","UDPSocket.html#method-i-send","(p1, p2, p3, p4)","<p>Sends <em>mesg</em> via <em>udpsocket</em>.\n<p><em>flags</em> should be a bitwise OR of Socket::MSG_* constants.\n\n<pre>u1 = UDPSocket.new\nu1.bind(&quot;127.0.0.1&quot;, ...</pre>\n"],["send_entity","Net::HTTP","Net/HTTP.html#method-i-send_entity","(path, data, initheader, dest, type, &block)","<p>Executes a request which uses a representation and returns its body.\n"],["send_gem","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-send_gem","(name)",""],["send_io","UNIXSocket","UNIXSocket.html#method-i-send_io","(p1)","<p>Sends <em>io</em> as file descriptor passing.\n\n<pre>s1, s2 = UNIXSocket.pair\n\ns1.send_io STDOUT\nstdout = s2.recv_io\n ...</pre>\n"],["send_owner_request","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-send_owner_request","(method, name, owner)",""],["send_push_request","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-send_push_request","(name, args)",""],["send_request","Net::HTTP","Net/HTTP.html#method-i-send_request","(name, path, data = nil, header = nil)","<p>Sends an HTTP request to the HTTP server. Also sends a DATA string if <code>data</code> is given.\n<p>Returns a Net::HTTPResponse …\n"],["send_request_with_body","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-send_request_with_body","(sock, ver, path, body)",""],["send_request_with_body_data","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-send_request_with_body_data","(sock, ver, path, params)",""],["send_request_with_body_stream","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-send_request_with_body_stream","(sock, ver, path, f)",""],["sender","IRB::Frame","IRB/Frame.html#method-c-sender","()","<p>Returns the binding context of the caller from the last frame initialized\n"],["sendmsg","BasicSocket","BasicSocket.html#method-i-sendmsg","(mesg, flags = 0, dest_sockaddr = nil, *controls)","<p>sendmsg sends a message using sendmsg(2) system call in blocking manner.\n<p><em>mesg</em> is a string to send.\n<p><em>flags</em> …\n"],["sendmsg_nonblock","BasicSocket","BasicSocket.html#method-i-sendmsg_nonblock","(mesg, flags = 0, dest_sockaddr = nil, *controls, exception: true)","<p>sendmsg_nonblock sends a message using sendmsg(2) system call in non-blocking manner.\n<p>It is similar to …\n"],["separated_by","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-separated_by","(sep, sym, &block)",""],["separated_by1","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-separated_by1","(sep, sym, &block)",""],["separator","OptionParser","OptionParser.html#method-i-separator","(string)","<p>Add separator in summary.\n"],["seplist","PP::PPMethods","PP/PPMethods.html#method-i-seplist","(list, sep=nil, iter_method=:each)","<p>Adds a separated list. The list is separated by comma with breakable space, by default.\n<p>#seplist iterates …\n"],["seq","Racc::Grammar::DefinitionEnv","Racc/Grammar/DefinitionEnv.html#method-i-seq","(*list, &block)",""],["seq=","Psych::Coder","Psych/Coder.html#method-i-seq-3D","(list)","<p>Emit a sequence of <code>list</code>\n"],["sequence?","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-sequence-3F","()",""],["sequence?","Psych::Nodes::Sequence","Psych/Nodes/Sequence.html#method-i-sequence-3F","()",""],["serial","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-serial","()","<p>Returns the serial number of the certificate for which status is being requested.\n"],["serial","OpenSSL::PKCS7::RecipientInfo","OpenSSL/PKCS7/RecipientInfo.html#method-i-serial","()",""],["serial","OpenSSL::PKCS7::SignerInfo","OpenSSL/PKCS7/SignerInfo.html#method-i-serial","()",""],["serial","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-serial","()",""],["serial","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-serial","()",""],["serial=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-serial-3D","(p1)",""],["serial=","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-serial-3D","(p1)",""],["serial_number","OpenSSL::Timestamp::TokenInfo","OpenSSL/Timestamp/TokenInfo.html#method-i-serial_number","()","<p>Returns serial number of the timestamp token. This value shall never be the same for two timestamp tokens …\n"],["serialize","Racc::Sym","Racc/Sym.html#method-i-serialize","()",""],["service","DRb::ExtServManager","DRb/ExtServManager.html#method-i-service","(name)",""],["session","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-session","()","<p>Returns the SSLSession object currently used, or nil if the session is not established.\n"],["session=","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-session-3D","(p1)","<p>Sets the Session to be used when the connection is established.\n"],["session_add","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_add","(p1)","<p>Adds <em>session</em> to the session cache.\n"],["session_cache_mode","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_cache_mode","()","<p>The current session cache mode.\n"],["session_cache_mode=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_cache_mode-3D","(p1)","<p>Sets the SSL session cache mode.  Bitwise-or together the desired SESSION_CACHE_* constants to set.  …\n"],["session_cache_size","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_cache_size","()","<p>Returns the current session cache size.  Zero is used to represent an unlimited cache size.\n"],["session_cache_size=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_cache_size-3D","(p1)","<p>Sets the session cache size.  Returns the previously valid session cache size.  Zero is used to represent …\n"],["session_cache_stats","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_cache_stats","()","<p>Returns a Hash containing the following keys:\n<p>:accept &mdash; Number of started SSL/TLS handshakes in server mode …\n"],["session_get_cb","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-session_get_cb","()",""],["session_new_cb","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-session_new_cb","()",""],["session_remove","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_remove","(p1)","<p>Removes <em>session</em> from the session cache.\n"],["session_reused?","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-session_reused-3F","()","<p>Returns <code>true</code> if a reused session was negotiated during the handshake.\n"],["set","IPAddr","IPAddr.html#method-i-set","(addr, *family)","<p>Set +@addr+, the internal stored ip address, to given <code>addr</code>. The parameter <code>addr</code> is validated using the …\n"],["set_accept","Racc::States","Racc/States.html#method-i-set_accept","()","<p>complete\n"],["set_api_key","Gem::ConfigFile","Gem/ConfigFile.html#method-i-set_api_key","(host, api_key)","<p>Set a specific host’s API key to <code>api_key</code>\n"],["set_api_key","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-set_api_key","(host, key)","<p>Returns true when the user has enabled multifactor authentication from <code>response</code> text and no otp provided …\n"],["set_attributes","URI::LDAP","URI/LDAP.html#method-i-set_attributes","(val)","<p>Private setter for attributes <code>val</code>.\n"],["set_backtrace","Exception","Exception.html#method-i-set_backtrace","(p1)","<p>Sets the backtrace information associated with <code>exc</code>. The <code>backtrace</code> must be an array of String objects …\n"],["set_backtrace","OptionParser::ParseError","OptionParser/ParseError.html#method-i-set_backtrace","(array)",""],["set_bit!","OpenSSL::BN","OpenSSL/BN.html#method-i-set_bit-21","(p1)",""],["set_config_file_name","Gem::ConfigFile","Gem/ConfigFile.html#method-i-set_config_file_name","(args)",""],["set_constant_visibility_for","RDoc::Context","RDoc/Context.html#method-i-set_constant_visibility_for","(names, visibility)","<p>Given an array <code>names</code> of constants, set the visibility of each constant to <code>visibility</code>\n"],["set_content_type","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_content_type","(type, params = {})","<p>Sets the value of field <code>&#39;Content-Type&#39;</code>; returns the new value; see Content-Type request header …\n"],["set_crt_params","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-set_crt_params","(p1, p2, p3)","<p>Sets <em>dmp1</em>, <em>dmq1</em>, <em>iqmp</em> for the RSA instance. They are calculated by <code>d mod (p - 1)</code>, <code>d mod (q - 1)</code> and  …\n"],["set_ctypes","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-i-set_ctypes","(types)","<p>Calculates the offsets and sizes for the given <code>types</code> in the struct.\n"],["set_ctypes","Fiddle::CUnionEntity","Fiddle/CUnionEntity.html#method-i-set_ctypes","(types)","<p>Calculate the necessary offset and for each union member with the given <code>types</code>\n"],["set_current_section","RDoc::Context","RDoc/Context.html#method-i-set_current_section","(title, comment)","<p>Sets the current section to a section with <code>title</code>.  See also #add_section\n"],["set_cursor_pos","Reline::LineEditor::Dialog","Reline/LineEditor/Dialog.html#method-i-set_cursor_pos","(col, row)",""],["set_cursor_pos","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-set_cursor_pos","(col, row)",""],["set_debug_output","Net::HTTP","Net/HTTP.html#method-i-set_debug_output","(output)","<p><strong>WARNING</strong> This method opens a serious security hole. Never use this method in production code.\n<p>Sets the …\n"],["set_default","OpenSSL::Engine","OpenSSL/Engine.html#method-i-set_default","(p1)","<p>Set the defaults for this engine with the given <em>flag</em>.\n<p>These flags are used to control combinations of …\n"],["set_default_key_bindings","Reline::ANSI","Reline/ANSI.html#method-c-set_default_key_bindings","(config)",""],["set_default_key_bindings","Reline::GeneralIO","Reline/GeneralIO.html#method-c-set_default_key_bindings","(_)",""],["set_default_key_bindings","Reline::Windows","Reline/Windows.html#method-c-set_default_key_bindings","(config)",""],["set_default_key_bindings_comprehensive_list","Reline::ANSI","Reline/ANSI.html#method-c-set_default_key_bindings_comprehensive_list","(config)",""],["set_default_key_bindings_terminfo","Reline::ANSI","Reline/ANSI.html#method-c-set_default_key_bindings_terminfo","(config)",""],["set_default_paths","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-set_default_paths","()","<p>Configures <em>store</em> to look up CA certificates from the system default certificate store as needed basis. …\n"],["set_dev","Logger::LogDevice","Logger/LogDevice.html#method-i-set_dev","(log)",""],["set_dialog","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-set_dialog","(dialog)",""],["set_dictionary","Zlib::Deflate","Zlib/Deflate.html#method-i-set_dictionary","(p1)","<p>Sets the preset dictionary and returns <code>string</code>. This method is available just only after Zlib::Deflate.new …\n"],["set_dictionary","Zlib::Inflate","Zlib/Inflate.html#method-i-set_dictionary","(p1)","<p>Sets the preset dictionary and returns <code>string</code>.  This method is available just only after a Zlib::NeedDict …\n"],["set_dn","URI::LDAP","URI/LDAP.html#method-i-set_dn","(val)","<p>Private setter for dn <code>val</code>.\n"],["set_encoding","ARGF","ARGF.html#method-i-set_encoding","(*args)","<p>If single argument is specified, strings read from ARGF are tagged with the encoding specified.\n<p>If two …\n"],["set_encoding","IO","IO.html#method-i-set_encoding","(p1, p2 = v2, p3 = {})","<p>See Encodings.\n<p>Argument <code>ext_enc</code>, if given, must be an Encoding object; it is assigned as the encoding …\n"],["set_encoding","StringIO","StringIO.html#method-i-set_encoding","(p1, p2 = v2, p3 = {})","<p>Specify the encoding of the StringIO as <em>ext_enc</em>. Use the default external encoding if <em>ext_enc</em> is nil. …\n"],["set_encoding_by_bom","IO","IO.html#method-i-set_encoding_by_bom","()","<p>If the stream begins with a BOM (byte order marker), consumes the BOM and sets the external encoding …\n"],["set_encoding_by_bom","StringIO","StringIO.html#method-i-set_encoding_by_bom","()",""],["set_end_location","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-set_end_location","(node)",""],["set_eoutvar","ERB","ERB.html#method-i-set_eoutvar","(compiler, eoutvar = '_erbout')","<p>Can be used to set <em>eoutvar</em> as described in ERB::new.  It’s probably easier to just use the constructor …\n"],["set_eoutvar","RDoc::ERBIO","RDoc/ERBIO.html#method-i-set_eoutvar","(compiler, io_variable)","<p>Instructs <code>compiler</code> how to write to <code>io_variable</code>\n"],["set_eoutvar","RDoc::ERBPartial","RDoc/ERBPartial.html#method-i-set_eoutvar","(compiler, eoutvar = '_erbout')","<p>Overrides <code>compiler</code> startup to set the <code>eoutvar</code> to an empty string only if it isn’t already set.\n"],["set_error","GetoptLong","GetoptLong.html#method-i-set_error","(type, message)","<p>Set an error (a protected method).\n"],["set_extensions","URI::LDAP","URI/LDAP.html#method-i-set_extensions","(val)","<p>Private setter for extensions <code>val</code>.\n"],["set_factors","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-set_factors","(p1, p2)","<p>Sets <em>p</em>, <em>q</em> for the RSA instance.\n"],["set_field","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_field","(key, val)",""],["set_filter","URI::LDAP","URI/LDAP.html#method-i-set_filter","(val)","<p>Private setter for filter <code>val</code>.\n"],["set_flags","OpenSSL::BN","OpenSSL/BN.html#method-i-set_flags","(p1)","<p>Enables the flags on the BN object. Currently, the flags argument can contain zero of OpenSSL::BN::CONSTTIME …\n"],["set_form","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_form","(params, enctype='application/x-www-form-urlencoded', formopt={})","<p>Set an HTML form data set.\n<p><code>params</code>  &mdash; The form data to set, which should be an enumerable. See below for …\n"],["set_form_data","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_form_data","(params, sep = '&')","<p>Set header fields and a body from HTML form data. <code>params</code> should be an Array of Arrays or a Hash containing …\n"],["set_gem_exec_install_paths","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-set_gem_exec_install_paths","()",""],["set_generator","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-set_generator","(p1, p2, p3)","<p>Sets the curve parameters. <em>generator</em> must be an instance of EC::Point that is on the curve. <em>order</em> and …\n"],["set_headers","URI::MailTo","URI/MailTo.html#method-i-set_headers","(v)","<p>Private setter for headers <code>v</code>.\n"],["set_host","URI::File","URI/File.html#method-i-set_host","(v)","<p>Protected setter for the host component <code>v</code>.\n<p>See also URI::Generic.host=.\n"],["set_host","URI::Generic","URI/Generic.html#method-i-set_host","(v)","<p>Protected setter for the host component <code>v</code>.\n<p>See also URI::Generic.host=.\n"],["set_key","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-set_key","(p1, p2)","<p>Sets <em>pub_key</em> and <em>priv_key</em> for the DH instance. <em>priv_key</em> may be <code>nil</code>.\n"],["set_key","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-set_key","(p1, p2)","<p>Sets <em>pub_key</em> and <em>priv_key</em> for the DSA instance. <em>priv_key</em> may be <code>nil</code>.\n"],["set_key","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-set_key","(p1, p2, p3)","<p>Sets <em>n</em>, <em>e</em>, <em>d</em> for the RSA instance.\n"],["set_key","Reline::LineEditor::DialogProcScope","Reline/LineEditor/DialogProcScope.html#method-i-set_key","(key)",""],["set_kw_end","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-i-set_kw_end","()","<p>Endless method detection\n<p>From github.com/ruby/irb/commit/826ae909c9c93a2ddca6f9cfcd9c94dbf53d44ab Detecting …\n"],["set_kw_end","SyntaxSuggest::LexValue","SyntaxSuggest/LexValue.html#method-i-set_kw_end","(last_lex)",""],["set_last_value","IRB::Context","IRB/Context.html#method-i-set_last_value","(value)","<p>Sets the return value from the last statement evaluated in this context to #last_value.\n"],["set_location","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-set_location","(node)",""],["set_mark","Reline::LineEditor","Reline/LineEditor.html#method-i-set_mark","(key)",""],["set_minmax_proto_version","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-set_minmax_proto_version","(p1, p2)","<p>Sets the minimum and maximum supported protocol versions. See #min_version= and #max_version=.\n"],["set_opaque","URI::Generic","URI/Generic.html#method-i-set_opaque","(v)","<p>Protected setter for the opaque component <code>v</code>.\n<p>See also URI::Generic.opaque=.\n"],["set_option","OptionParser::ParseError","OptionParser/ParseError.html#method-i-set_option","(opt, eq)",""],["set_options","GetoptLong","GetoptLong.html#method-i-set_options","(*arguments)","<p>Replaces existing options with those given by <code>arguments</code>, which have the same form as the arguments to …\n"],["set_ostruct_member_value!","OpenStruct","OpenStruct.html#method-i-set_ostruct_member_value-21","(name, value)",""],["set_params","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-set_params","(params={})","<p>Sets saner defaults optimized for the use with HTTP-like protocols.\n<p>If a Hash <em>params</em> is given, the parameters …\n"],["set_password","URI::File","URI/File.html#method-i-set_password","(v)","<p>do nothing\n"],["set_password","URI::Generic","URI/Generic.html#method-i-set_password","(v)","<p>Protected setter for the password component <code>v</code>.\n<p>See also URI::Generic.password=.\n"],["set_pasting_state","Reline::LineEditor","Reline/LineEditor.html#method-i-set_pasting_state","(in_pasting)",""],["set_path","URI::FTP","URI/FTP.html#method-i-set_path","(v)","<p>Private setter for the path of the URI::FTP.\n"],["set_path","URI::Generic","URI/Generic.html#method-i-set_path","(v)","<p>Protected setter for the path component <code>v</code>.\n<p>See also URI::Generic.path=.\n"],["set_payload","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-set_payload","(name, payload)","<p>Sets the payload of the vertex with the given name @param [String] name the name of the vertex @param …\n"],["set_payload","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-set_payload","(graph, name, payload)","<p>@macro action\n"],["set_port","URI::File","URI/File.html#method-i-set_port","(v)","<p>do nothing\n"],["set_port","URI::Generic","URI/Generic.html#method-i-set_port","(v)","<p>Protected setter for the port component <code>v</code>.\n<p>See also URI::Generic.port=.\n"],["set_pqg","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-set_pqg","(p1, p2, p3)","<p>Sets <em>p</em>, <em>q</em>, <em>g</em> to the DH instance.\n"],["set_pqg","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-set_pqg","(p1, p2, p3)","<p>Sets <em>p</em>, <em>q</em>, <em>g</em> to the DSA instance.\n"],["set_range","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_range","(r, e = nil)","<p>Sets the value for field <code>&#39;Range&#39;</code>; see Range request header:\n<p>With argument <code>length</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">req</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Get</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">uri</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_scheduler","Fiber","Fiber.html#method-c-set_scheduler","(p1)","<p>Sets the Fiber scheduler for the current thread. If the scheduler is set, non-blocking fibers (created …\n"],["set_scheme","URI::Generic","URI/Generic.html#method-i-set_scheme","(v)","<p>Protected setter for the scheme component <code>v</code>.\n<p>See also URI::Generic.scheme=.\n"],["set_scope","URI::LDAP","URI/LDAP.html#method-i-set_scope","(val)","<p>Private setter for scope <code>val</code>.\n"],["set_screen_size","Readline","Readline.html#method-c-set_screen_size","(p1, p2)","<p>Set terminal size to <code>rows</code> and <code>columns</code>.\n<p>See GNU Readline’s rl_set_screen_size function.\n<p>Raises NotImplementedError …\n"],["set_screen_size","Reline::ANSI","Reline/ANSI.html#method-c-set_screen_size","(rows, columns)",""],["set_screen_size","Reline::GeneralIO","Reline/GeneralIO.html#method-c-set_screen_size","(rows, columns)",""],["set_screen_size","Reline::Windows","Reline/Windows.html#method-c-set_screen_size","(rows, columns)",""],["set_signal_handlers","Reline::LineEditor","Reline/LineEditor.html#method-i-set_signal_handlers","()",""],["set_start_location","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-set_start_location","(node)",""],["set_string","IO::Buffer","IO/Buffer.html#method-i-set_string","(*args)","<p>Efficiently copy data from a source String into the buffer, at <code>offset</code> using <code>memcpy</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">buf</span> = <span class=\"ruby-constant\">IO</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Buffer</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">8</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_table","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-set_table","(entries, dummy, tbl, chk, ptr)",""],["set_to","URI::MailTo","URI/MailTo.html#method-i-set_to","(v)","<p>Private setter for to <code>v</code>.\n"],["set_to_infinity!","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-set_to_infinity-21","()",""],["set_trace_func","Kernel","Kernel.html#method-i-set_trace_func","(p1)","\n<pre>Establishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* ...</pre>\n"],["set_trace_func","Thread","Thread.html#method-i-set_trace_func","(p1)","<p>Establishes <em>proc</em> on <em>thr</em> as the handler for tracing, or disables tracing if the parameter is <code>nil</code>.\n<p>See  …\n"],["set_typecode","URI::FTP","URI/FTP.html#method-i-set_typecode","(v)","<p>Private setter for the typecode <code>v</code>.\n<p>See also URI::FTP.typecode=.\n"],["set_user","URI::File","URI/File.html#method-i-set_user","(v)","<p>do nothing\n"],["set_user","URI::Generic","URI/Generic.html#method-i-set_user","(v)","<p>Protected setter for the user component <code>v</code>.\n<p>See also URI::Generic.user=.\n"],["set_userinfo","URI::File","URI/File.html#method-i-set_userinfo","(v)","<p>do nothing\n"],["set_userinfo","URI::Generic","URI/Generic.html#method-i-set_userinfo","(user, password = nil)","<p>Protected setter for the <code>user</code> component, and <code>password</code> if available (with validation).\n<p>See also URI::Generic.userinfo= …\n"],["set_value","IO::Buffer","IO/Buffer.html#method-i-set_value","(p1, p2, p3)","<p>Write to a buffer a <code>value</code> of <code>type</code> at <code>offset</code>. <code>type</code> should be one of symbols described in #get_value.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">buffer</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_values","IO::Buffer","IO/Buffer.html#method-i-set_values","(p1, p2, p3)","<p>Write <code>values</code> of <code>data_types</code> at <code>offset</code> to the buffer. <code>data_types</code> should be an array of symbols as described …\n"],["set_visibility_for","RDoc::Context","RDoc/Context.html#method-i-set_visibility_for","(methods, visibility, singleton = false)","<p>Given an array <code>methods</code> of method names, set the visibility of each to <code>visibility</code>\n"],["set_winch_handler","Reline::ANSI","Reline/ANSI.html#method-c-set_winch_handler","(&handler)",""],["set_winch_handler","Reline::GeneralIO","Reline/GeneralIO.html#method-c-set_winch_handler","(&handler)",""],["set_winch_handler","Reline::Windows","Reline/Windows.html#method-c-set_winch_handler","(&handler)",""],["setbyte","String","String.html#method-i-setbyte","(p1, p2)","<p>Sets the byte at zero-based <code>index</code> to <code>integer</code>; returns <code>integer</code>:\n\n<pre>s = &#39;abcde&#39;      # =&gt; &quot;abcde&quot;\ns.setbyte(0, ...</pre>\n"],["setconsolemode","Reline::Windows","Reline/Windows.html#method-c-setconsolemode","(mode)",""],["setegid","Process::Sys","Process/Sys.html#method-c-setegid","(p1)","<p>Set the effective group ID of the calling process to <em>group</em>.  Not available on all platforms.\n"],["seteuid","Process::Sys","Process/Sys.html#method-c-seteuid","(p1)","<p>Set the effective user ID of the calling process to <em>user</em>.  Not available on all platforms.\n"],["setgid","Process::Sys","Process/Sys.html#method-c-setgid","(p1)","<p>Set the group ID of the current process to <em>group</em>. Not available on all platforms.\n"],["setgid?","File","File.html#method-c-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setgid?","File::Stat","File/Stat.html#method-i-setgid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-group-id permission bit set, <code>false</code> if it doesn’t or if the operating …\n"],["setgid?","FileTest","FileTest.html#method-i-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setgid?","Pathname","Pathname.html#method-i-setgid-3F","()","<p>See FileTest.setgid?.\n"],["setgrent","Etc","Etc.html#method-c-setgrent","()","<p>Resets the process of reading the <code>/etc/group</code> file, so that the next call to ::getgrent will return the …\n"],["setpgid","Process","Process.html#method-c-setpgid","(p1, p2)","<p>Sets the process group ID of <em>pid</em> (0 indicates this process) to <em>integer</em>. Not available on all platforms. …\n"],["setpgrp","Process","Process.html#method-c-setpgrp","()","<p>Equivalent to <code>setpgid(0,0)</code>. Not available on all platforms.\n"],["setpriority","Process","Process.html#method-c-setpriority","(p1, p2, p3)","<p>See Process.getpriority.\n\n<pre>Process.setpriority(Process::PRIO_USER, 0, 19)      #=&gt; 0\nProcess.setpriority(Process::PRIO_PROCESS, ...</pre>\n"],["setproctitle","Process","Process.html#method-c-setproctitle","(p1)","<p>Sets the process title that appears on the ps(1) command.  Not necessarily effective on all platforms. …\n"],["setproperty","WIN32OLE","WIN32OLE.html#method-i-setproperty","(*args)","<p>Sets property of OLE object. When you want to set property with argument, you can use this method.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">excel</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["setpwent","Etc","Etc.html#method-c-setpwent","()","<p>Resets the process of reading the <code>/etc/passwd</code> file, so that the next call to ::getpwent will return the …\n"],["setregid","Process::Sys","Process/Sys.html#method-c-setregid","(p1, p2)","<p>Sets the (group) real and/or effective group IDs of the current process to <em>rid</em> and <em>eid</em>, respectively. …\n"],["setresgid","Process::Sys","Process/Sys.html#method-c-setresgid","(p1, p2, p3)","<p>Sets the (group) real, effective, and saved user IDs of the current process to <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setresuid","Process::Sys","Process/Sys.html#method-c-setresuid","(p1, p2, p3)","<p>Sets the (user) real, effective, and saved user IDs of the current process to <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setreuid","Process::Sys","Process/Sys.html#method-c-setreuid","(p1, p2)","<p>Sets the (user) real and/or effective user IDs of the current process to <em>rid</em> and <em>eid</em>, respectively.  …\n"],["setrgid","Process::Sys","Process/Sys.html#method-c-setrgid","(p1)","<p>Set the real group ID of the calling process to <em>group</em>. Not available on all platforms.\n"],["setrlimit","Process","Process.html#method-c-setrlimit","(*args)","<p>Sets the resource limit of the process. <em>cur_limit</em> means current (soft) limit and <em>max_limit</em> means maximum …\n"],["setruid","Process::Sys","Process/Sys.html#method-c-setruid","(p1)","<p>Set the real user ID of the calling process to <em>user</em>. Not available on all platforms.\n"],["setsid","Process","Process.html#method-c-setsid","()","<p>Establishes this process as a new session and process group leader, with no controlling tty. Returns …\n"],["setsockopt","BasicSocket","BasicSocket.html#method-i-setsockopt","(p1, p2, p3)","<p>Sets a socket option. These are protocol and system specific, see your local system documentation for …\n"],["setsockopt","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-setsockopt","(level, optname, optval)",""],["settings","Bundler","Bundler.html#method-c-settings","()",""],["setuid","Process::Sys","Process/Sys.html#method-c-setuid","(p1)","<p>Set the user ID of the current process to <em>user</em>. Not available on all platforms.\n"],["setuid?","File","File.html#method-c-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setuid?","File::Stat","File/Stat.html#method-i-setuid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-user-id permission bit set, <code>false</code> if it doesn’t or if the operating …\n"],["setuid?","FileTest","FileTest.html#method-i-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setuid?","Pathname","Pathname.html#method-i-setuid-3F","()","<p>See FileTest.setuid?.\n"],["setup","Bundler","Bundler.html#method-c-setup","(*groups)","<p>Turns on the Bundler runtime. After <code>Bundler.setup</code> call, all <code>load</code> or <code>require</code> of the gems would be allowed …\n"],["setup","Coverage","Coverage.html#method-c-setup","(p1 = v1)","<p>Set up the coverage measurement.\n<p>Note that this method does not start the measurement itself. Use Coverage.resume …\n"],["setup","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-setup","()","<p>This method is called automatically when a new SSLSocket is created. However, it is not thread-safe and …\n"],["setup","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-setup","()","<p>Prepares the spec for documentation generation\n"],["setup","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-setup","()","<p>Prepares the spec for documentation generation\n"],["setup_certificate","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-setup_certificate","()","<p>Ensures that :SSLCertificate and :SSLPrivateKey have been provided or that a new certificate is generated …\n"],["setup_generator","RDoc::Options","RDoc/Options.html#method-i-setup_generator","(generator_name = @generator_name)","<p>Set up an output generator for the named <code>generator_name</code>.\n<p>If the found generator responds to :setup_options …\n"],["setup_output_dir","RDoc::RDoc","RDoc/RDoc.html#method-i-setup_output_dir","(dir, force)","<p>Create an output dir if it doesn’t exist. If it does exist, but doesn’t contain the flag file …\n"],["setup_signer","Gem::Package","Gem/Package.html#method-i-setup_signer","(signer_options: {})","<p>Prepares the gem for signing and checksum generation.  If a signing certificate and key are not present …\n"],["setup_ssl_context","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-setup_ssl_context","()","<p>Establish the OpenSSL::SSL::SSLContext with the configuration parameters provided.\n"],["setupterm","Reline::Terminfo","Reline/Terminfo.html#method-c-setupterm","(term, fildes)",""],["sev_threshold=","Logger","Logger.html#method-i-sev_threshold-3D","(severity)",""],["seven_bit_encoding?","Reline::Config","Reline/Config.html#method-i-seven_bit_encoding-3F","(encoding)",""],["sexp","Ripper","Ripper.html#method-c-sexp","(src, filename = '-', lineno = 1, raise_errors: false)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and create S-exp tree. Returns more readable tree rather than Ripper.sexp_raw …\n"],["sexp_raw","Ripper","Ripper.html#method-c-sexp_raw","(src, filename = '-', lineno = 1, raise_errors: false)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and create S-exp tree. This method is mainly for developer use. The <code>filename</code> …\n"],["shallow_eql?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-shallow_eql-3F","(other)","<p>@param  [Vertex] other the other vertex to compare to @return [Boolean] whether the two vertices are …\n"],["shareable?","Ractor","Ractor.html#method-c-shareable-3F","(obj)","<p>Checks if the object is shareable by ractors.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Ractor</span>.<span class=\"ruby-identifier\">shareable?</span>(<span class=\"ruby-value\">1</span>)            <span class=\"ruby-comment\">#=&gt; true -- numbers and ...</span>\n</pre>\n"],["shared?","IO::Buffer","IO/Buffer.html#method-i-shared-3F","()","<p>If the buffer is <em>shared</em>, meaning it references memory that can be shared with other processes (and thus …\n"],["sharing_detection","PP","PP.html#method-c-sharing_detection","()","<p>Returns the sharing detection flag as a boolean value. It is false (nil) by default.\n"],["sharing_detection=","PP","PP.html#method-c-sharing_detection-3D","(b)","<p>Sets the sharing detection flag to b.\n"],["shebang","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-shebang","()",""],["shebang","Gem::Installer","Gem/Installer.html#method-i-shebang","(bin_file_name)","<p>Generates a #! line for <code>bin_file_name</code>‘s wrapper copying arguments if necessary.\n<p>If the :custom_shebang …\n"],["shebang","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-shebang","(path)",""],["shellescape","Shellwords","Shellwords.html#method-c-shellescape","(str)","<p>Escapes a string so that it can be safely used in a Bourne shell command line.  <code>str</code> can be a non-string …\n"],["shellescape","Shellwords","Shellwords.html#method-i-shellescape","(str)","<p>Escapes a string so that it can be safely used in a Bourne shell command line.  <code>str</code> can be a non-string …\n"],["shellescape","String","String.html#method-i-shellescape","()","<p>Escapes <code>str</code> so that it can be safely used in a Bourne shell command line.\n<p>See Shellwords.shellescape for …\n"],["shelljoin","Array","Array.html#method-i-shelljoin","()","<p>Builds a command line string from an argument list <code>array</code> joining all elements escaped for the Bourne …\n"],["shelljoin","Shellwords","Shellwords.html#method-c-shelljoin","(array)","<p>Builds a command line string from an argument list, <code>array</code>.\n<p>All elements are joined into a single string …\n"],["shelljoin","Shellwords","Shellwords.html#method-i-shelljoin","(array)","<p>Builds a command line string from an argument list, <code>array</code>.\n<p>All elements are joined into a single string …\n"],["shellsplit","Shellwords","Shellwords.html#method-i-shellsplit","(line)","<p>Splits a string into an array of tokens in the same way the UNIX Bourne shell does.\n\n<pre>argv = Shellwords.split(&#39;here ...</pre>\n"],["shellsplit","Shellwords","Shellwords.html#method-c-shellsplit","(line)","<p>Splits a string into an array of tokens in the same way the UNIX Bourne shell does.\n\n<pre>argv = Shellwords.split(&#39;here ...</pre>\n"],["shellsplit","String","String.html#method-i-shellsplit","()","<p>Splits <code>str</code> into an array of tokens in the same way the UNIX Bourne shell does.\n<p>See Shellwords.shellsplit …\n"],["shellwords","Shellwords","Shellwords.html#method-c-shellwords","(line)",""],["shellwords","Shellwords","Shellwords.html#method-i-shellwords","(line)",""],["shift","Array","Array.html#method-i-shift","(*args)","<p>Removes and returns leading elements.\n<p>When no argument is given, removes and returns the first element: …\n"],["shift","CSV","CSV.html#method-i-shift","()","<p>Returns the next row of data as:\n<p>An Array if no headers are used.\n<p>A CSV::Row object if headers are used. …\n"],["shift","ENV","ENV.html#method-c-shift","()","<p>Removes the first environment variable from ENV and returns a 2-element Array containing its name and …\n"],["shift","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-shift","()",""],["shift","Hash","Hash.html#method-i-shift","()","<p>Removes the first hash entry (see Entry Order); returns a 2-element Array containing the removed key …\n"],["shift","Racc::ActionTable","Racc/ActionTable.html#method-i-shift","(i)",""],["shift","Thread::Queue","Thread/Queue.html#method-i-shift","(non_block = false, timeout: nil)",""],["shift","Thread::SizedQueue","Thread/SizedQueue.html#method-i-shift","(non_block = false, timeout: nil)",""],["shift","YAML::DBM","YAML/DBM.html#method-i-shift","()","<p>Removes a [key, value] pair from the database, and returns it. If the database is empty, returns <code>nil</code> …\n"],["shift_log_age","Logger::LogDevice","Logger/LogDevice.html#method-i-shift_log_age","()",""],["shift_log_period","Logger::LogDevice","Logger/LogDevice.html#method-i-shift_log_period","(period_end)",""],["shift_n","Racc::ActionTable","Racc/ActionTable.html#method-i-shift_n","()",""],["short_name","OpenSSL::ASN1::ObjectId","OpenSSL/ASN1/ObjectId.html#method-i-short_name","()","<p>The short name of the ObjectId, as defined in &lt;openssl/objects.h&gt;.\n"],["should_report_srconflict?","Racc::States","Racc/States.html#method-i-should_report_srconflict-3F","()",""],["should_terminal","Racc::Sym","Racc/Sym.html#method-i-should_terminal","()",""],["should_terminal?","Racc::Sym","Racc/Sym.html#method-i-should_terminal-3F","()",""],["show_cursor","Reline::ANSI","Reline/ANSI.html#method-c-show_cursor","()",""],["show_cursor","Reline::GeneralIO","Reline/GeneralIO.html#method-c-show_cursor","()",""],["show_cursor","Reline::Windows","Reline/Windows.html#method-c-show_cursor","()",""],["show_documentation","RDoc::Servlet","RDoc/Servlet.html#method-i-show_documentation","(req, res)","<p>Displays documentation for <code>req</code> on <code>res</code>, whether that be HTML or some asset.\n"],["show_files","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-show_files","(files)",""],["show_gems","Gem::QueryUtils","Gem/QueryUtils.html#method-i-show_gems","(name)","<p>Guts of original execute\n"],["show_help","Gem::Command","Gem/Command.html#method-i-show_help","()","<p>Display the help message for the command.\n"],["show_local_gems","Gem::QueryUtils","Gem/QueryUtils.html#method-i-show_local_gems","(name, req = Gem::Requirement.default)",""],["show_lookup_failure","Gem::Command","Gem/Command.html#method-i-show_lookup_failure","(gem_name, version, errors, suppress_suggestions = false, required_by = nil)","<p>Display to the user that a gem couldn’t be found and reasons why\n"],["show_menu","Reline::LineEditor","Reline/LineEditor.html#method-i-show_menu","()",""],["show_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-show_owners","(name)",""],["show_prereleases?","Gem::QueryUtils","Gem/QueryUtils.html#method-i-show_prereleases-3F","()",""],["show_release_notes","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-show_release_notes","()",""],["show_remote_gems","Gem::QueryUtils","Gem/QueryUtils.html#method-i-show_remote_gems","(name)",""],["show_version","OptionParser","OptionParser.html#method-c-show_version","(*pkgs)",""],["shuffle","Array","Array.html#method-i-shuffle","(random: Random)","<p>Returns a new array with elements of <code>self</code> shuffled.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>] <span class=\"ruby-comment\">#=&gt; [1, 2, 3]</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">shuffle</span>     <span class=\"ruby-comment\">#=&gt; [2, ...</span>\n</pre>\n"],["shuffle!","Array","Array.html#method-i-shuffle-21","(random: Random)","<p>Shuffles the elements of <code>self</code> in place.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>] <span class=\"ruby-comment\">#=&gt; [1, 2, 3]</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">shuffle!</span>    <span class=\"ruby-comment\">#=&gt; [2, 3, 1]</span>\n<span class=\"ruby-identifier\">a</span>     <span class=\"ruby-operator\">...</span>\n</pre>\n"],["shutdown","BasicSocket","BasicSocket.html#method-i-shutdown","(p1 = v1)","<p>Calls shutdown(2) system call.\n<p>s.shutdown(Socket::SHUT_RD) disallows further read.\n<p>s.shutdown(Socket::SHUT_WR …\n"],["shutdown","DRb::DRbServer","DRb/DRbServer.html#method-i-shutdown","()",""],["shutdown","OpenSSL::SSL::SSLServer","OpenSSL/SSL/SSLServer.html#method-i-shutdown","(how=Socket::SHUT_RDWR)","<p>See BasicSocket#shutdown for details.\n"],["shutdown","Rinda::RingServer","Rinda/RingServer.html#method-i-shutdown","()","<p>Shuts down the RingServer\n"],["sid_available?","Process::GID","Process/GID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved group ID functionality.\n"],["sid_available?","Process::UID","Process/UID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved user ID functionality.\n"],["sign","BigDecimal","BigDecimal.html#method-i-sign","()","<p>Returns the sign of the value.\n<p>Returns a positive value if &gt; 0, a negative value if &lt; 0. It behaves …\n"],["sign","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-sign","(cert_file)",""],["sign","Gem::S3URISigner","Gem/S3URISigner.html#method-i-sign","(expiration = 86400)","<p>Signs S3 URI using query-params according to the reference: docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html …\n"],["sign","Gem::Security","Gem/Security.html#method-c-sign","(certificate, signing_key, signing_cert, age = ONE_YEAR, extensions = EXTENSIONS, serial = 1)","<p>Sign the public key from <code>certificate</code> with the <code>signing_key</code> and <code>signing_cert</code>, using the Gem::Security::DIGEST_NAME …\n"],["sign","Gem::Security::Signer","Gem/Security/Signer.html#method-i-sign","(data)","<p>Sign data with given digest algorithm\n"],["sign","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-sign","(p1, p2)","<p>Parameters\n<p><em>key</em> - the private key to be used for signing this instance\n<p><em>digest</em> - the digest to be used for …\n"],["sign","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-sign","(p1, p2, p3 = v3, p4 = v4, p5 = v5)","<p>Signs this OCSP response using the <em>cert</em>, <em>key</em> and optional <em>digest</em>. This behaves in the similar way as …\n"],["sign","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-sign","(p1, p2, p3 = v3, p4 = v4, p5 = v5)","<p>Signs this OCSP request using <em>cert</em>, <em>key</em> and optional <em>digest</em>. If <em>digest</em> is not specified, SHA-1 is used. …\n"],["sign","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-c-sign","(p1, p2, p3, p4 = v4, p5 = v5)",""],["sign","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-sign","(p1, p2, p3 = v3)","<p>Hashes and signs the <code>data</code> using a message digest algorithm <code>digest</code> and a private key <code>pkey</code>.\n<p>See #verify …\n"],["sign","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-sign","(p1, p2)",""],["sign","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-sign","(p1, p2)",""],["sign","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-sign","(p1, p2)",""],["sign_in","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-sign_in","(sign_in_host = nil, scope: nil)","<p>Signs in with the RubyGems API at <code>sign_in_host</code> and sets the rubygems API key.\n"],["sign_pss","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-sign_pss","(p1, p2, p3 = {})","<p>Signs <em>data</em> using the Probabilistic Signature Scheme (RSA-PSS) and returns the calculated signature.\n<p>RSAError …\n"],["sign_raw","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-sign_raw","(p1, p2, p3 = v3)","<p>Signs <code>data</code> using a private key <code>pkey</code>. Unlike #sign, <code>data</code> will not be hashed by <code>digest</code> automatically.\n<p>See …\n"],["signal","MonitorMixin::ConditionVariable","MonitorMixin/ConditionVariable.html#method-i-signal","()","<p>Wakes up the first thread in line waiting for this lock.\n"],["signal","Rinda::WaitTemplateEntry","Rinda/WaitTemplateEntry.html#method-i-signal","()",""],["signal","Thread::ConditionVariable","Thread/ConditionVariable.html#method-i-signal","()","<p>Wakes up the first thread in line waiting for this lock.\n"],["signal_handle","IRB::Irb","IRB/Irb.html#method-i-signal_handle","()","<p>Handler for the signal SIGINT, see Kernel#trap for more information.\n"],["signal_status","IRB::Irb","IRB/Irb.html#method-i-signal_status","(status)","<p>Evaluates the given block using the given <code>status</code>.\n"],["signaled?","Process::Status","Process/Status.html#method-i-signaled-3F","()","<p>Returns <code>true</code> if <em>stat</em> terminated because of an uncaught signal.\n"],["signame","Signal","Signal.html#method-c-signame","(p1)","<p>Convert signal number to signal name. Returns <code>nil</code> if the signo is an invalid signal number.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Signal</span>.<span class=\"ruby-identifier\">trap</span>(<span class=\"ruby-string\">&quot;INT&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["signature","RDoc::TomDoc","RDoc/TomDoc.html#method-c-signature","(comment)","<p>Extracts the Signature section’s method signature\n<p>comment &mdash; An RDoc::Comment that will be parsed and …\n\n"],["signature_algorithm","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-signature_algorithm","()",""],["signature_algorithm","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-signature_algorithm","()",""],["signature_algorithm","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-signature_algorithm","()",""],["signed?","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-signed-3F","()","<p>Returns <code>true</code> if the request is signed, <code>false</code> otherwise. Note that the validity of the signature is <strong>not</strong> …\n"],["signed_time","OpenSSL::PKCS7::SignerInfo","OpenSSL/PKCS7/SignerInfo.html#method-i-signed_time","()",""],["signers","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-signers","()",""],["signo","SignalException","SignalException.html#method-i-signo","()","<p>Returns a signal number.\n"],["silent_system","Gem::Util","Gem/Util.html#method-c-silent_system","(*command)","<p>Invokes system, but silences all output.\n"],["simplified_rendering?","Reline::LineEditor","Reline/LineEditor.html#method-i-simplified_rendering-3F","()",""],["sin","BigMath","BigMath.html#method-i-sin","(x, prec)","<p>Computes the sine of <code>decimal</code> to the specified number of digits of precision, <code>numeric</code>.\n<p>If <code>decimal</code> is Infinity …\n"],["sin","Math","Math.html#method-c-sin","(p1)","<p>Returns the sine of <code>x</code> in radians.\n<p>Domain: <code>(-INFINITY, INFINITY)</code>.\n<p>Range: <code>[-1.0, 1.0]</code>.\n"],["single_delegate","SingleForwardable","SingleForwardable.html#method-i-single_delegate","(hash)","<p>Takes a hash as its argument.  The key is a symbol or an array of symbols.  These symbols correspond …\n"],["singleline_format","PrettyPrint","PrettyPrint.html#method-c-singleline_format","(output=''.dup, maxwidth=nil, newline=nil, genspace=nil)","<p>This is similar to PrettyPrint::format but the result has no breaks.\n<p><code>maxwidth</code>, <code>newline</code> and <code>genspace</code> are …\n"],["singleline_pp","PP","PP.html#method-c-singleline_pp","(obj, out=$>)","<p>Outputs <code>obj</code> to <code>out</code> like PP.pp but with no indent and newline.\n<p>PP.singleline_pp returns <code>out</code>.\n"],["singleton_class","Object","Object.html#method-i-singleton_class","()","<p>Returns the singleton class of <em>obj</em>.  This method creates a new singleton class if <em>obj</em> does not have one. …\n"],["singleton_class?","Module","Module.html#method-i-singleton_class-3F","()","<p>Returns <code>true</code> if <em>mod</em> is a singleton class or <code>false</code> if it is an ordinary class or module.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">C</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">C</span>.<span class=\"ruby-identifier\">singleton_class?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["singleton_method","Object","Object.html#method-i-singleton_method","(p1)","<p>Similar to <em>method</em>, searches singleton method only.\n\n<pre>class Demo\n  def initialize(n)\n    @iv = n\n  end\n  ...</pre>\n"],["singleton_method_added","BasicObject","BasicObject.html#method-i-singleton_method_added","(p1)","<p>Invoked as a callback whenever a singleton method is added to the receiver.\n\n<pre>module Chatty\n  def Chatty.singleton_method_added(id) ...</pre>\n"],["singleton_method_removed","BasicObject","BasicObject.html#method-i-singleton_method_removed","(p1)","<p>Invoked as a callback whenever a singleton method is removed from the receiver.\n\n<pre>module Chatty\n  def Chatty.singleton_method_removed(id) ...</pre>\n"],["singleton_method_undefined","BasicObject","BasicObject.html#method-i-singleton_method_undefined","(p1)","<p>Invoked as a callback whenever a singleton method is undefined in the receiver.\n\n<pre>module Chatty\n  def Chatty.singleton_method_undefined(id) ...</pre>\n"],["singleton_methods","Object","Object.html#method-i-singleton_methods","(*args)","<p>Returns an array of the names of singleton methods for <em>obj</em>. If the optional <em>all</em> parameter is true, the …\n"],["sinh","Math","Math.html#method-c-sinh","(p1)","<p>Returns the hyperbolic sine of <code>x</code> in radians.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[-INFINITY, INFINITY]</code> …\n"],["size","Array","Array.html#method-i-size","()","<p>Returns the count of elements in <code>self</code>.\n"],["size","Digest::Instance","Digest/Instance.html#method-i-size","()","<p>Returns digest_obj.digest_length().\n"],["size","ENV","ENV.html#method-c-size","()","<p>Returns the count of environment variables:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-comment\"># =&gt; 2 ...</span>\n</pre>\n"],["size","Enumerator","Enumerator.html#method-i-size","()","<p>Returns the size of the enumerator, or <code>nil</code> if it can’t be calculated lazily.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">100</span>).<span class=\"ruby-identifier\">to_a</span>.<span class=\"ruby-identifier\">permutation</span>(<span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">size</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["size","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-size","()","<p>Returns the number of elements in this arithmetic sequence if it is a finite sequence.  Otherwise, returns …\n"],["size","Enumerator::Chain","Enumerator/Chain.html#method-i-size","()","<p>Returns the total size of the enumerator chain calculated by summing up the size of each enumerable in …\n"],["size","Enumerator::Product","Enumerator/Product.html#method-i-size","()","<p>Returns the total size of the enumerator product calculated by multiplying the sizes of enumerables in …\n"],["size","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-c-size","(types)","<p>Returns the offset for the packed sizes for the given <code>types</code>.\n\n<pre>Fiddle::CStructEntity.size(\n  [ Fiddle::TYPE_DOUBLE, ...</pre>\n"],["size","Fiddle::CUnionEntity","Fiddle/CUnionEntity.html#method-c-size","(types)","<p>Returns the size needed for the union with the given <code>types</code>.\n\n<pre>Fiddle::CUnionEntity.size(\n  [ Fiddle::TYPE_DOUBLE, ...</pre>\n"],["size","Fiddle::Pointer","Fiddle/Pointer.html#method-i-size","()","<p>Get the size of this pointer.\n"],["size","File","File.html#method-c-size","(p1)","<p>Returns the size of <code>file_name</code>.\n<p><em>file_name</em> can be an IO object.\n"],["size","File","File.html#method-i-size","()",""],["size","File::Stat","File/Stat.html#method-i-size","()","<p>Returns the size of <em>stat</em> in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">size</span>   <span class=\"ruby-comment\">#=&gt; 66</span>\n</pre>\n"],["size","FileTest","FileTest.html#method-i-size","(p1)","<p>Returns the size of <code>file_name</code>.\n<p><em>file_name</em> can be an IO object.\n"],["size","Gem::AvailableSet","Gem/AvailableSet.html#method-i-size","()",""],["size","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-size","()",""],["size","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-size","()","<p>How many elements are in the list\n"],["size","Hash","Hash.html#method-i-size","()","<p>Returns the count of entries in <code>self</code>:\n\n<pre class=\"ruby\">{<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-comment\"># =&gt; 3</span>\n</pre>\n<p>Hash#length is an alias for …\n"],["size","IO::Buffer","IO/Buffer.html#method-i-size","()","<p>Returns the size of the buffer that was explicitly set (on creation with ::new or on #resize), or deduced …\n"],["size","Integer","Integer.html#method-i-size","()","<p>Document-method: Integer#size\n<p>Returns the number of bytes in the machine representation of <code>int</code> (machine …\n"],["size","MatchData","MatchData.html#method-i-size","()","<p>Returns size of the match array:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; #&lt;MatchData &quot;HX1138&quot; 1:&quot;H&quot; ...</span>\n</pre>\n"],["size","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-size","()","<p>Returns the number of referenced objects\n"],["size","Pathname","Pathname.html#method-i-size","()","<p>See FileTest.size.\n"],["size","Racc::Grammar","Racc/Grammar.html#method-i-size","()",""],["size","Racc::ISet","Racc/ISet.html#method-i-size","()",""],["size","Racc::Rule","Racc/Rule.html#method-i-size","()",""],["size","Racc::States","Racc/States.html#method-i-size","()",""],["size","Range","Range.html#method-i-size","()","<p>Returns the count of elements in <code>self</code> if both begin and end values are numeric; otherwise, returns <code>nil</code> …\n"],["size","Rinda::Tuple","Rinda/Tuple.html#method-i-size","()","<p>The number of elements in the tuple.\n"],["size","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-size","()","<p>The size of the tuple.\n"],["size","Set","Set.html#method-i-size","()","<p>Returns the number of elements.\n"],["size","String","String.html#method-i-size","()","<p>Returns the count of characters (not bytes) in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;foo&#39;</span>.<span class=\"ruby-identifier\">length</span>        <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-string\">&#39;тест&#39;</span>.<span class=\"ruby-identifier\">length</span>       <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["size","StringIO","StringIO.html#method-i-size","()","<p>Returns the size of the buffer string.\n"],["size","StringScanner","StringScanner.html#method-i-size","()","<p>Returns the amount of subgroups in the most recent match. The full match counts as a subgroup.\n\n<pre>s = StringScanner.new(&quot;Fri ...</pre>\n"],["size","Struct","Struct.html#method-i-size","()","<p>Returns the number of members.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe Smith&quot;, ...</pre>\n"],["size","Symbol","Symbol.html#method-i-size","()","<p>Equivalent to <code>self.to_s.length</code>; see String#length.\n<p>Symbol#size is an alias for Symbol#length.\n"],["size","Tempfile","Tempfile.html#method-i-size","()","<p>Returns the size of the temporary file.  As a side effect, the IO buffer is flushed before determining …\n"],["size","Thread::Queue","Thread/Queue.html#method-i-size","()","<p>Returns the length of the queue.\n"],["size","Thread::SizedQueue","Thread/SizedQueue.html#method-i-size","()","<p>Returns the length of the queue.\n"],["size=","Fiddle::Pointer","Fiddle/Pointer.html#method-i-size-3D","(p1)","<p>Set the size of this pointer to <code>size</code>\n"],["size?","File","File.html#method-c-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn’t exist or has zero size, the size of the file otherwise.\n<p><em>file_name</em> …\n"],["size?","File::Stat","File/Stat.html#method-i-size-3F","()","<p>Returns <code>nil</code> if <em>stat</em> is a zero-length file, the size of the file otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">size?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["size?","FileTest","FileTest.html#method-i-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn’t exist or has zero size, the size of the file otherwise.\n<p><em>file_name</em> …\n"],["size?","Pathname","Pathname.html#method-i-size-3F","()","<p>See FileTest.size?.\n"],["size_of","IO::Buffer","IO/Buffer.html#method-c-size_of","(p1)","<p>Returns the size of the given data type(s) in bytes.\n<p>Example:\n\n<pre>IO::Buffer.size_of(:u32) # =&gt; 4\nIO::Buffer.size_of([:u32, ...</pre>\n"],["size_opt_params","WIN32OLE::Method","WIN32OLE/Method.html#method-i-size_opt_params","()","<p>Returns the size of optional parameters.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["size_params","WIN32OLE::Method","WIN32OLE/Method.html#method-i-size_params","()","<p>Returns the size of arguments of the method.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["sizeof","Fiddle::Importer","Fiddle/Importer.html#method-i-sizeof","(ty)","<p>Returns the sizeof <code>ty</code>, using Fiddle::Importer.parse_ctype to determine the C type and the appropriate …\n"],["skip","ARGF","ARGF.html#method-i-skip","()","<p>Sets the current file to the next file in ARGV. If there aren’t any more files it has no effect. …\n"],["skip","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-skip","(type)",""],["skip","StringScanner","StringScanner.html#method-i-skip","(p1)","<p>Attempts to skip over the given <code>pattern</code> beginning with the scan pointer. If it matches, the scan pointer …\n"],["skip","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-skip","(name)",""],["skip_blanks?","CSV","CSV.html#method-i-skip_blanks-3F","()","<p>Returns the value that determines whether blank lines are to be ignored; used for parsing; see {Option …\n"],["skip_blanks?","CSV::Parser","CSV/Parser.html#method-i-skip_blanks-3F","()",""],["skip_comment","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-skip_comment","()",""],["skip_during","Gem::Deprecate","Gem/Deprecate.html#method-c-skip_during","()","<p>Temporarily turn off warnings. Intended for tests only.\n"],["skip_during","Gem::Deprecate","Gem/Deprecate.html#method-i-skip_during","()","<p>Temporarily turn off warnings. Intended for tests only.\n"],["skip_for_variable","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_for_variable","()","<p>skip the var [in] part of a ‘for’ statement\n"],["skip_line?","CSV::Parser","CSV/Parser.html#method-i-skip_line-3F","(line)",""],["skip_lines","CSV","CSV.html#method-i-skip_lines","()","<p>Returns the Regexp used to identify comment lines; used for parsing; see {Option <code>skip_lines</code>}:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CSV</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;&#39;</span>).<span class=\"ruby-identifier\">skip_lines</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["skip_lines","CSV::Parser","CSV/Parser.html#method-i-skip_lines","()",""],["skip_method","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_method","(container)","<p>Skips the next method in <code>container</code>\n"],["skip_missing_file_name?","SyntaxSuggest::PathnameFromMessage","SyntaxSuggest/PathnameFromMessage.html#method-i-skip_missing_file_name-3F","()",""],["skip_needless_lines","CSV::Parser","CSV/Parser.html#method-i-skip_needless_lines","()",""],["skip_optional_do_after_expression","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_optional_do_after_expression","()","<p>while, until, and for have an optional do\n"],["skip_parentheses","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_parentheses","(&block)","<p>Skip opening parentheses and yield the block. Skip closing parentheses too when exists.\n"],["skip_tkspace","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-skip_tkspace","()","<p>Skips whitespace tokens including newlines\n"],["skip_tkspace_comment","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_tkspace_comment","(skip_nl = true)","<p>Skip spaces until a comment is found\n"],["skip_tkspace_without_nl","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-skip_tkspace_without_nl","()","<p>Skips whitespace tokens excluding newlines\n"],["skip_until","StringScanner","StringScanner.html#method-i-skip_until","(p1)","<p>Advances the scan pointer until <code>pattern</code> is matched and consumed.  Returns the number of bytes advanced, …\n"],["sleep","Kernel","Kernel.html#method-i-sleep","(*args)","<p>Suspends the current thread for <em>duration</em> seconds (which may be any number, including a <code>Float</code> with fractional …\n"],["sleep","Mutex_m","Mutex_m.html#method-i-sleep","(timeout = nil)","<p>See Thread::Mutex#sleep\n"],["sleep","Thread::Mutex","Thread/Mutex.html#method-i-sleep","(*args)","<p>Releases the lock and sleeps <code>timeout</code> seconds if it is given and non-nil or forever.  Raises <code>ThreadError</code> …\n"],["slice","Array","Array.html#method-i-slice","(*args)","<p>Returns elements from <code>self</code>; does not modify <code>self</code>.\n<p>When a single Integer argument <code>index</code> is given, returns …\n"],["slice","ENV","ENV.html#method-c-slice","(*args)","<p>Returns a Hash of the given ENV names and their corresponding values:\n\n<pre>ENV.replace(&#39;foo&#39; =&gt; &#39;0&#39;, &#39;bar&#39; ...</pre>\n"],["slice","Hash","Hash.html#method-i-slice","(*args)","<p>Returns a new Hash object containing the entries for the given <code>keys</code>:\n\n<pre>h = {foo: 0, bar: 1, baz: 2}\nh.slice(:baz, ...</pre>\n"],["slice","IO::Buffer","IO/Buffer.html#method-i-slice","(*args)","<p>Produce another IO::Buffer which is a slice (or view into) the current one starting at <code>offset</code> bytes and …\n"],["slice","Ripper","Ripper.html#method-c-slice","(src, pattern, n = 0)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and return a string which was matched to <code>pattern</code>. <code>pattern</code> should be described …\n"],["slice","String","String.html#method-i-slice","(*args)","<p>Returns the substring of <code>self</code> specified by the arguments. See examples at String Slices.\n"],["slice","Symbol","Symbol.html#method-i-slice","(*args)","<p>Equivalent to <code>symbol.to_s[]</code>; see String#[].\n"],["slice!","Array","Array.html#method-i-slice-21","(*args)","<p>Removes and returns elements from <code>self</code>.\n<p>When the only argument is an Integer <code>n</code>, removes and returns the …\n"],["slice!","String","String.html#method-i-slice-21","(*args)","<p>Removes and returns the substring of <code>self</code> specified by the arguments. See String Slices.\n<p>A few examples: …\n"],["slice_after","Enumerable","Enumerable.html#method-i-slice_after","(p1)","<p>Creates an enumerator for each chunked elements. The ends of chunks are defined by <em>pattern</em> and the block. …\n"],["slice_after","Enumerator::Lazy","Enumerator/Lazy.html#method-i-slice_after","(*args)","<p>Like Enumerable#slice_after, but chains operation to be lazy-evaluated.\n"],["slice_before","Enumerable","Enumerable.html#method-i-slice_before","(p1)","<p>With argument <code>pattern</code>, returns an enumerator that uses the pattern to partition elements into arrays …\n"],["slice_before","Enumerator::Lazy","Enumerator/Lazy.html#method-i-slice_before","(*args)","<p>Like Enumerable#slice_before, but chains operation to be lazy-evaluated.\n"],["slice_when","Enumerable","Enumerable.html#method-i-slice_when","()","<p>Creates an enumerator for each chunked elements. The beginnings of chunks are defined by the block.\n<p>This …\n"],["slice_when","Enumerator::Lazy","Enumerator/Lazy.html#method-i-slice_when","(*args)","<p>Like Enumerable#slice_when, but chains operation to be lazy-evaluated.\n"],["sn","OpenSSL::ASN1::ObjectId","OpenSSL/ASN1/ObjectId.html#method-i-sn","()","<p>The short name of the ObjectId, as defined in &lt;openssl/objects.h&gt;.\n"],["snippet","RDoc::Text","RDoc/Text.html#method-i-snippet","(text, limit = 100)","<p>The first <code>limit</code> characters of <code>text</code> as HTML\n"],["so_ext","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-so_ext","()","<p>We have to basically reimplement RbConfig::CONFIG here to support Ruby &lt; 2.5\n<p>@see github.com/ruby/ruby/blob/c87c027f18c005460746a74c07cd80ee355b16e4/configure.ac#L3185 …\n"],["sockaddr_in","Socket","Socket.html#method-c-sockaddr_in","(p1, p2)","<p>Packs <em>port</em> and <em>host</em> as an AF_INET/AF_INET6 sockaddr string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">sockaddr_in</span>(<span class=\"ruby-value\">80</span>, <span class=\"ruby-string\">&quot;127.0.0.1&quot;</span>)\n<span class=\"ruby-comment\">#=&gt; &quot;\\x02\\x00\\x00P\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; ...</span>\n</pre>\n"],["sockaddr_un","Socket","Socket.html#method-c-sockaddr_un","(p1)","<p>Packs <em>path</em> as an AF_UNIX sockaddr string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">sockaddr_un</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>) <span class=\"ruby-comment\">#=&gt; &quot;\\x01\\x00/tmp/sock\\x00\\x00...&quot;</span>\n</pre>\n"],["socket?","File","File.html#method-c-socket-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a socket, <code>false</code> otherwise:\n\n<pre>require &#39;socket&#39;\nFile.socket?(Socket.new(:INET, ...</pre>\n"],["socket?","File::Stat","File/Stat.html#method-i-socket-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a socket, <code>false</code> if it isn’t or if the operating system doesn’t support …\n"],["socket?","FileTest","FileTest.html#method-i-socket-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a socket, <code>false</code> otherwise:\n\n<pre>require &#39;socket&#39;\nFile.socket?(Socket.new(:INET, ...</pre>\n"],["socket?","Pathname","Pathname.html#method-i-socket-3F","()","<p>See FileTest.socket?.\n"],["socketpair","Socket","Socket.html#method-c-socketpair","(p1, p2, p3 = v3)","<p>Creates a pair of sockets connected each other.\n<p><em>domain</em> should be a communications domain such as: :INET, …\n"],["socketpair","UNIXSocket","UNIXSocket.html#method-c-socketpair","(p1 = v1, p2 = v2)","<p>Creates a pair of sockets connected to each other.\n<p><em>socktype</em> should be a socket type such as: :STREAM, …\n"],["socktype","Addrinfo","Addrinfo.html#method-i-socktype","()","<p>returns the socket type as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">socktype</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SOCK_STREAM</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["solaris_platform?","Gem","Gem.html#method-c-solaris_platform-3F","()","<p>Is this platform Solaris?\n"],["sort","Array","Array.html#method-i-sort","()","<p>Returns a new Array whose elements are those from <code>self</code>, sorted.\n<p>With no block, compares elements using …\n"],["sort","Enumerable","Enumerable.html#method-i-sort","()","<p>Returns an array containing the sorted elements of <code>self</code>. The ordering of equal elements is indeterminate …\n"],["sort!","Array","Array.html#method-i-sort-21","()","<p>Returns <code>self</code> with its elements sorted in place.\n<p>With no block, compares elements using operator <code>&lt;=&gt;</code> …\n"],["sort_by","Enumerable","Enumerable.html#method-i-sort_by","()","<p>With a block given, returns an array of elements of <code>self</code>, sorted according to the value returned by the …\n"],["sort_by!","Array","Array.html#method-i-sort_by-21","()","<p>Sorts the elements of <code>self</code> in place, using an ordering determined by the block; returns self.\n<p>Calls the …\n"],["sort_dependencies","Gem::Resolver","Gem/Resolver.html#method-i-sort_dependencies","(dependencies, activated, conflicts)",""],["sort_dependencies","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-sort_dependencies","(dependencies, activated, conflicts)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#sort_dependencies)\n"],["sort_dependencies","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-sort_dependencies","(dependencies, activated, conflicts)","<p>Sort dependencies so that the ones that are easiest to resolve are first. Easiest to resolve is (usually) …\n"],["sort_obj","Gem::Specification","Gem/Specification.html#method-i-sort_obj","()","<p>Returns an object you can use to sort specifications in #sort_by.\n"],["sort_priority","Gem::Platform","Gem/Platform.html#method-c-sort_priority","(platform)",""],["sort_sections","RDoc::Context","RDoc/Context.html#method-i-sort_sections","()","<p>Sorts sections alphabetically (default) or in TomDoc fashion (none, Public, Internal, Deprecated)\n"],["sorted","Gem::AvailableSet","Gem/AvailableSet.html#method-i-sorted","()",""],["sorted","SyntaxSuggest::PriorityQueue","SyntaxSuggest/PriorityQueue.html#method-i-sorted","()","<p>Used for testing, extremely not performant\n"],["sorted_requests","Gem::RequestSet","Gem/RequestSet.html#method-i-sorted_requests","()",""],["source","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-source","(url)","<p>Sets <code>url</code> as a source for gems for this dependency API.  RubyGems uses the default configured sources …\n"],["source","Gem::Resolver::InstalledSpecification","Gem/Resolver/InstalledSpecification.html#method-i-source","()","<p>The source for this specification\n"],["source","JSON::Ext::Parser","JSON/Ext/Parser.html#method-i-source","()","<p>Returns a copy of the current <em>source</em> string, that was used to construct this Parser.\n"],["source","RDoc::Store","RDoc/Store.html#method-i-source","()","<p>Source of the contents of this store.\n<p>For a store from a gem the source is the gem name.  For a store …\n"],["source","Regexp","Regexp.html#method-i-source","()","<p>Returns the original string of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/ab+c/ix</span>.<span class=\"ruby-identifier\">source</span> <span class=\"ruby-comment\"># =&gt; &quot;ab+c&quot;</span>\n</pre>\n<p>Regexp escape sequences are retained: …\n"],["source","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-source","()","<p>Returns the code fragment that corresponds to this AST.\n<p>Note that this is an API for ruby internal use, …\n"],["source?","Racc::UserAction","Racc/UserAction.html#method-i-source-3F","()",""],["source_date_epoch","Gem","Gem.html#method-c-source_date_epoch","()","<p>Returns the value of Gem.source_date_epoch_string, as a Time object.\n<p>This is used throughout RubyGems …\n"],["source_date_epoch_string","Gem","Gem.html#method-c-source_date_epoch_string","()","<p>If the SOURCE_DATE_EPOCH environment variable is set, returns it’s value. Otherwise, returns the …\n"],["source_encoding","Encoding::Converter","Encoding/Converter.html#method-i-source_encoding","()","<p>Returns the source encoding as an Encoding object.\n"],["source_encoding","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-source_encoding","()","<p>Returns the source encoding as an encoding object.\n<p>Note that the result may not be equal to the source …\n"],["source_encoding","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-source_encoding","()","<p>Returns the source encoding as an encoding object.\n<p>Note that the result may not be equal to the source …\n"],["source_encoding_name","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-source_encoding_name","()","<p>Returns the source encoding name as a string.\n"],["source_encoding_name","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-source_encoding_name","()","<p>Returns the source encoding name as a string.\n"],["source_file","IRB::IrbLoader","IRB/IrbLoader.html#method-i-source_file","(path)","<p>Loads a given file in the current session and displays the source lines\n<p>See Irb#suspend_input_method for …\n"],["source_for","Gem::AvailableSet","Gem/AvailableSet.html#method-i-source_for","(spec)",""],["source_location","Binding","Binding.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number of the binding object.\n"],["source_location","Method","Method.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this method or nil if this method was not …\n"],["source_location","Proc","Proc.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this proc or <code>nil</code> if this proc was not defined …\n"],["source_location","UnboundMethod","UnboundMethod.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this method or nil if this method was not …\n"],["source_ole_types","WIN32OLE::Type","WIN32OLE/Type.html#method-i-source_ole_types","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the WIN32OLE_TYPE object and having …\n"],["source_paths","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-source_paths","()","<p>Returns the paths to the source files for use with analysis and documentation tools.  These paths are …\n"],["source_text","Racc::UserAction","Racc/UserAction.html#method-c-source_text","(src)",""],["sources","Gem","Gem.html#method-c-sources","()","<p>Returns an Array of sources to fetch remote gems from. Uses default_sources if the sources list is empty. …\n"],["sources=","Gem","Gem.html#method-c-sources-3D","(new_sources)","<p>Need to be able to set the sources without calling Gem.sources.replace since that would cause an infinite …\n"],["space","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-space","()","<p>Returns the string that is used to insert a space between the tokens in a JSON string.\n"],["space=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-space-3D","(p1)","<p>Sets <em>space</em> to the string that is used to insert a space between the tokens in a JSON string.\n"],["space_before","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-space_before","()","<p>Returns the string that is used to insert a space before the ‘:’ in JSON objects.\n"],["space_before=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-space_before-3D","(p1)","<p>Sets the string that is used to insert a space before the ‘:’ in JSON objects.\n"],["spawn","Kernel","Kernel.html#method-i-spawn","(*args)","<p>spawn executes specified command and return its pid.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">pid</span> = <span class=\"ruby-identifier\">spawn</span>(<span class=\"ruby-string\">&quot;tar xf ruby-2.0.0-p195.tar.bz2&quot;</span>)\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["spawn","PTY","PTY.html#method-c-spawn","(*args)","<p>Spawns the specified command on a newly allocated pty. You can also use the alias ::getpty.\n<p>The command’s …\n"],["spawn","Process","Process.html#method-c-spawn","(*args)","<p>spawn executes specified command and return its pid.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">pid</span> = <span class=\"ruby-identifier\">spawn</span>(<span class=\"ruby-string\">&quot;tar xf ruby-2.0.0-p195.tar.bz2&quot;</span>)\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["spec","Gem::Installer","Gem/Installer.html#method-i-spec","()","<p>Lazy accessor for the installer’s spec.\n"],["spec","Gem::Package","Gem/Package.html#method-i-spec","()","<p>The spec for this gem.\n<p>If this is a package for a built gem the spec is loaded from the gem and returned. …\n"],["spec","Gem::Package::Old","Gem/Package/Old.html#method-i-spec","()","<p>The specification for this gem\n"],["spec","Gem::Resolver::LockSpecification","Gem/Resolver/LockSpecification.html#method-i-spec","()","<p>A specification constructed from the lockfile is returned\n"],["spec_authors","Gem::QueryUtils","Gem/QueryUtils.html#method-i-spec_authors","(entry, spec)",""],["spec_cache_dir","Gem","Gem.html#method-c-spec_cache_dir","()",""],["spec_dir","Gem::Specification","Gem/Specification.html#method-i-spec_dir","()","<p>Returns the full path to the directory containing this spec’s gemspec file. eg: /usr/local/lib/ruby/gems/1.8/specifications …\n"],["spec_file","Gem::Installer","Gem/Installer.html#method-i-spec_file","()","<p>The location of the spec file that is installed.\n"],["spec_file","Gem::Specification","Gem/Specification.html#method-i-spec_file","()","<p>Returns the full path to this spec’s gemspec file. eg: /usr/local/lib/ruby/gems/1.8/specifications/mygem-1.0.gemspec …\n"],["spec_for","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-spec_for","(name)",""],["spec_for","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-spec_for","(name)",""],["spec_for_dependency","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-spec_for_dependency","(dependency, matching_platform=true)","<p>Find and fetch specs that match <code>dependency</code>.\n<p>If <code>matching_platform</code> is false, gems for all platforms are …\n"],["spec_groups","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-spec_groups","()",""],["spec_homepage","Gem::QueryUtils","Gem/QueryUtils.html#method-i-spec_homepage","(entry, spec)",""],["spec_license","Gem::QueryUtils","Gem/QueryUtils.html#method-i-spec_license","(entry, spec)",""],["spec_loaded_from","Gem::QueryUtils","Gem/QueryUtils.html#method-i-spec_loaded_from","(entry, spec, specs)",""],["spec_name","Gem::NameTuple","Gem/NameTuple.html#method-i-spec_name","()","<p>Return the name that the gemspec file would be\n"],["spec_name","Gem::Specification","Gem/Specification.html#method-i-spec_name","()","<p>The default name of the gemspec.  See also #file_name\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">spec_name</span> <span class=\"ruby-comment\"># =&gt; &quot;example-1.0.gemspec&quot;</span>\n</pre>\n"],["spec_path","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-spec_path","(gem_full_name)",""],["spec_platforms","Gem::QueryUtils","Gem/QueryUtils.html#method-i-spec_platforms","(entry, platforms)",""],["spec_predecessors","Gem::DependencyList","Gem/DependencyList.html#method-i-spec_predecessors","()","<p>Return a hash of predecessors.  <code>result[spec]</code> is an Array of gemspecs that have a dependency satisfied …\n"],["spec_summary","Gem::QueryUtils","Gem/QueryUtils.html#method-i-spec_summary","(entry, spec)",""],["special_prefixes","Readline","Readline.html#method-c-special_prefixes","()","<p>Gets the list of characters that are word break characters, but should be left in text when it is passed …\n"],["special_prefixes=","Readline","Readline.html#method-c-special_prefixes-3D","(p1)","<p>Sets the list of characters that are word break characters, but should be left in text when it is passed …\n"],["special_prefixes=","Reline::Core","Reline/Core.html#method-i-special_prefixes-3D","(v)",""],["specific?","Gem::Dependency","Gem/Dependency.html#method-i-specific-3F","()","<p>True if the dependency will not always match the latest version.\n"],["specific?","Gem::Requirement","Gem/Requirement.html#method-i-specific-3F","()","<p>True if the requirement will not always match the latest version.\n"],["specific_extra_args","Gem::Command","Gem/Command.html#method-c-specific_extra_args","(cmd)","<p>Return an array of extra arguments for the command.  The extra arguments come from the gem configuration …\n"],["specific_extra_args_hash","Gem::Command","Gem/Command.html#method-c-specific_extra_args_hash","()","<p>Accessor for the specific extra args hash (self initializing).\n"],["specs","Gem::RequestSet","Gem/RequestSet.html#method-i-specs","()",""],["specs","Gem::Source::Git","Gem/Source/Git.html#method-i-specs","()","<p>Loads all gemspecs in the repository\n"],["specs_in","Gem::RequestSet","Gem/RequestSet.html#method-i-specs_in","(dir)",""],["specs_path","Bundler","Bundler.html#method-c-specs_path","()",""],["specs_type","Gem::QueryUtils","Gem/QueryUtils.html#method-i-specs_type","()",""],["spell_checker","DidYouMean::Correctable","DidYouMean/Correctable.html#method-i-spell_checker","()",""],["spell_checker","Gem::UnknownCommandSpellChecker","Gem/UnknownCommandSpellChecker.html#method-i-spell_checker","()",""],["spell_checkers","DidYouMean","DidYouMean.html#method-c-spell_checkers","()","<p>Returns a sharable hash map of error types and spell checker objects.\n"],["split","BigDecimal","BigDecimal.html#method-i-split","()","<p>Splits a BigDecimal number into four parts, returned as an array of values.\n<p>The first value represents …\n"],["split","File","File.html#method-c-split","(p1)","<p>Splits the given string into a directory and a file component and returns them in a two-element array. …\n"],["split","Pathname","Pathname.html#method-i-split","()","<p>Returns the #dirname and the #basename in an Array.\n<p>See File.split.\n"],["split","Shellwords","Shellwords.html#method-c-split","(line)",""],["split","String","String.html#method-i-split","(p1 = v1, p2 = v2)","<p>Returns an array of substrings of <code>self</code> that are the result of splitting <code>self</code> at each occurrence of the …\n"],["split","URI","URI.html#method-c-split","(uri)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">split</span>(<span class=\"ruby-identifier\">uri</span>)\n</pre>\n<p>Args\n"],["split","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-split","(uri)","<p>Returns a split URI against <code>regexp[:ABS_URI]</code>.\n"],["split","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-split","(uri)","<p>Returns a split URI against <code>regexp[:ABS_URI]</code>.\n"],["split_arguments","Fiddle::CParser","Fiddle/CParser.html#method-i-split_arguments","(arguments, sep=',')",""],["split_by_width","Reline::LineEditor","Reline/LineEditor.html#method-i-split_by_width","(str, max_width)",""],["split_by_width","Reline::Unicode","Reline/Unicode.html#method-c-split_by_width","(str, max_width, encoding = str.encoding)",""],["split_flags","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-split_flags","(var)",""],["split_gem_path","Gem::PathSupport","Gem/PathSupport.html#method-i-split_gem_path","(gpaths, home)","<p>Split the Gem search path (as reported by Gem.path).\n"],["split_path","URI::Generic","URI/Generic.html#method-i-split_path","(path)","<p>Returns an Array of the path split on ‘/’.\n"],["split_userinfo","URI::Generic","URI/Generic.html#method-i-split_userinfo","(ui)","<p>Returns the userinfo <code>ui</code> as <code>[user, password]</code> if properly formatted as ‘user:password’.\n"],["spot","ErrorHighlight","ErrorHighlight.html#method-c-spot","(obj, **opts)","<p>Identify the code fragment at that a given exception occurred.\n<p>Options:\n<p>point_type: :name | :args\n"],["spot","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot","()",""],["spot_attrasgn_for_args","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_attrasgn_for_args","()","<p>Example:\n\n<pre>x.foo = 1\n        ^\nx[42] = 1\n  ^^^^^^^\nx[] = 1\n  ^^^^^</pre>\n"],["spot_attrasgn_for_name","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_attrasgn_for_name","()","<p>Example:\n\n<pre>x.foo = 1\n ^^^^^^\nx[42] = 1\n ^^^^^^</pre>\n"],["spot_call_for_args","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_call_for_args","()","<p>Example:\n\n<pre>x.foo(42)\n      ^^\nx[42]\n  ^^\nx += 1\n     ^</pre>\n"],["spot_call_for_name","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_call_for_name","()","<p>Example:\n\n<pre>x.foo\n ^^^^\nx.foo(42)\n ^^^^\nx&amp;.foo\n ^^^^^\nx[42]\n ^^^^\nx += 1\n  ^</pre>\n"],["spot_colon2","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_colon2","()","<p>Example:\n\n<pre>Foo::Bar\n   ^^^^^</pre>\n"],["spot_fcall_for_args","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_fcall_for_args","()","<p>Example:\n\n<pre>foo(42)\n    ^^\nfoo 42\n    ^^</pre>\n"],["spot_fcall_for_name","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_fcall_for_name","()","<p>Example:\n\n<pre>foo(42)\n^^^\nfoo 42\n^^^</pre>\n"],["spot_op_asgn1_for_args","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_op_asgn1_for_args","()","<p>Example:\n\n<pre>x[1] += 42\n  ^^^^^^^^</pre>\n"],["spot_op_asgn1_for_name","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_op_asgn1_for_name","()","<p>Example:\n\n<pre>x[1] += 42\n ^^^    (for [])\nx[1] += 42\n     ^  (for +)\nx[1] += 42\n ^^^^^^ (for []=)</pre>\n"],["spot_op_asgn2_for_args","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_op_asgn2_for_args","()","<p>Example:\n\n<pre>x.foo += 42\n         ^^</pre>\n"],["spot_op_asgn2_for_name","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_op_asgn2_for_name","()","<p>Example:\n\n<pre>x.foo += 42\n ^^^     (for foo)\nx.foo += 42\n      ^  (for +)\nx.foo += 42\n ^^^^^^^ (for foo=)</pre>\n"],["spot_op_cdecl","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_op_cdecl","()","<p>Example:\n\n<pre>Foo::Bar += 1\n   ^^^^^^^^</pre>\n"],["spot_opcall_for_args","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_opcall_for_args","()","<p>Example:\n\n<pre>x + 1\n    ^</pre>\n"],["spot_opcall_for_name","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_opcall_for_name","()","<p>Example:\n\n<pre>x + 1\n  ^\n+x\n^</pre>\n"],["spot_vcall","ErrorHighlight::Spotter","ErrorHighlight/Spotter.html#method-i-spot_vcall","()","<p>Example:\n\n<pre>foo\n^^^</pre>\n"],["sprintf","Kernel","Kernel.html#method-i-sprintf","(*args)","<p>Returns the string resulting from formatting <code>objects</code> into <code>format_string</code>.\n<p>For details on <code>format_string</code> …\n"],["sqr","OpenSSL::BN","OpenSSL/BN.html#method-i-sqr","()",""],["sqrt","BigDecimal","BigDecimal.html#method-i-sqrt","(p1)","<p>Returns the square root of the value.\n<p>Result has at least n significant digits.\n"],["sqrt","BigMath","BigMath.html#method-i-sqrt","(x, prec)","<p>Computes the square root of <code>decimal</code> to the specified number of digits of precision, <code>numeric</code>.\n\n<pre>BigMath.sqrt(BigDecimal(&#39;2&#39;), ...</pre>\n"],["sqrt","Integer","Integer.html#method-c-sqrt","(p1)","<p>Returns the integer square root of the non-negative integer <code>n</code>, which is the largest non-negative integer …\n"],["sqrt","Math","Math.html#method-c-sqrt","(p1)","<p>Returns the principal (non-negative) square root of <code>x</code>.\n<p>Domain: <code>[0, INFINITY]</code>.\n<p>Range: <code>[0, INFINITY]</code>.\n"],["squeeze","String","String.html#method-i-squeeze","(*args)","<p>Returns a copy of <code>self</code> with characters specified by <code>selectors</code> “squeezed” (see Multiple Character …\n"],["squeeze!","String","String.html#method-i-squeeze-21","(*args)","<p>Like String#squeeze, but modifies <code>self</code> in place. Returns <code>self</code> if any changes were made, <code>nil</code> otherwise. …\n"],["sr_conflict","Racc::State","Racc/State.html#method-i-sr_conflict","(shift, reduce)",""],["srand","Kernel","Kernel.html#method-i-srand","(*args)","<p>Seeds the system pseudo-random number generator, with <code>number</code>. The previous seed value is returned.\n<p>If …\n"],["srand","Random","Random.html#method-c-srand","(*args)","<p>Seeds the system pseudo-random number generator, with <code>number</code>. The previous seed value is returned.\n<p>If …\n"],["src_type","WIN32OLE::Type","WIN32OLE/Type.html#method-i-src_type","()","<p>Returns source class when the OLE class is ‘Alias’.\n\n<pre>tobj =  WIN32OLE_TYPE.new(&#39;Microsoft Office ...</pre>\n"],["srconflict_exist?","Racc::States","Racc/States.html#method-i-srconflict_exist-3F","()",""],["ssl_version","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-ssl_version","()","<p>Returns a String representing the SSL/TLS version that was negotiated for the connection, for example …\n"],["ssl_version=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-ssl_version-3D","(meth)","<p>Sets the SSL/TLS protocol version for the context. This forces connections to use only the specified …\n"],["sspi_auth","Net::HTTP","Net/HTTP.html#method-i-sspi_auth","(req)",""],["sspi_auth?","Net::HTTP","Net/HTTP.html#method-i-sspi_auth-3F","(res)",""],["start","Coverage","Coverage.html#method-c-start","(*args)","<p>Enables the coverage measurement. See the documentation of Coverage class in detail. This is equivalent …\n"],["start","Date","Date.html#method-i-start","()","<p>Returns the Julian start date for calendar reform; if not an infinity, the returned value is suitable …\n"],["start","GC","GC.html#method-c-start","(full_mark: true, immediate_mark: true, immediate_sweep: true)","<p>Initiates garbage collection, even if manually disabled.\n<p>This method is defined with keyword arguments …\n"],["start","IRB","IRB.html#method-c-start","(ap_path = nil)","<p>Initializes IRB and creates a new Irb.irb object at the <code>TOPLEVEL_BINDING</code>\n"],["start","Net::HTTP","Net/HTTP.html#method-c-start","(address, *arg)","<p>Creates a new Net::HTTP object, <code>http</code>, via Net::HTTP.new:\n\n<pre>Net::HTTP.new(address, port, p_addr, p_port, ...</pre>\n"],["start","Net::HTTP","Net/HTTP.html#method-i-start","()","<p>Opens a TCP connection and HTTP session.\n<p>When this method is called with a block, it passes the Net::HTTP …\n"],["start","Psych::Streaming","Psych/Streaming.html#method-i-start","(encoding = Nodes::Stream::UTF8)","<p>Start streaming using <code>encoding</code>\n"],["start","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-start","(encoding = Nodes::Stream::UTF8)",""],["start","Thread","Thread.html#method-c-start","(*args)","<p>Basically the same as ::new. However, if class Thread is subclassed, then calling <code>start</code> in that subclass …\n"],["start_at_next_line","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-start_at_next_line","()",""],["start_collecting_tokens","RDoc::TokenStream","RDoc/TokenStream.html#method-i-start_collecting_tokens","()",""],["start_doc","RDoc::CodeObject","RDoc/CodeObject.html#method-i-start_doc","()","<p>Enable capture of documentation unless documentation has been turned off by :enddoc:\n"],["start_document","Psych::Emitter","Psych/Emitter.html#method-i-start_document","(p1, p2, p3)","<p>Start a document emission with YAML <code>version</code>, <code>tags</code>, and an <code>implicit</code> start.\n<p>See Psych::Handler#start_document …\n"],["start_document","Psych::Handler","Psych/Handler.html#method-i-start_document","(version, tag_directives, implicit)","<p>Called when the document starts with the declared <code>version</code>, <code>tag_directives</code>, if the document is <code>implicit</code> …\n"],["start_document","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-start_document","(version, tag_directives, implicit)","<p>Handles start_document events with <code>version</code>, <code>tag_directives</code>, and <code>implicit</code> styling.\n<p>See Psych::Handler#start_document …\n"],["start_keeper","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-start_keeper","()","<p>Creates a thread that scans the tuplespace for expired tuples.\n"],["start_mapping","Psych::Emitter","Psych/Emitter.html#method-i-start_mapping","(p1, p2, p3, p4)","<p>Start emitting a YAML map with <code>anchor</code>, <code>tag</code>, an <code>implicit</code> start and end, and <code>style</code>.\n<p>See Psych::Handler#start_mapping …\n"],["start_mapping","Psych::Handler","Psych/Handler.html#method-i-start_mapping","(anchor, tag, implicit, style)","<p>Called when a map starts.\n<p><code>anchor</code> is the anchor associated with the map or <code>nil</code>. <code>tag</code> is the tag associated …\n"],["start_pasting","Reline::GeneralIO","Reline/GeneralIO.html#method-c-start_pasting","()",""],["start_resolution","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-start_resolution","()","<p>Sets up the resolution process @return [void]\n"],["start_row","CSV::Parser","CSV/Parser.html#method-i-start_row","()",""],["start_sequence","Psych::Emitter","Psych/Emitter.html#method-i-start_sequence","(p1, p2, p3, p4)","<p>Start emitting a sequence with <code>anchor</code>, a <code>tag</code>, <code>implicit</code> sequence start and end, along with <code>style</code>.\n<p>See  …\n"],["start_sequence","Psych::Handler","Psych/Handler.html#method-i-start_sequence","(anchor, tag, implicit, style)","<p>Called when a sequence is started.\n<p><code>anchor</code> is the anchor associated with the sequence or nil. <code>tag</code> is the …\n"],["start_service","DRb","DRb.html#method-i-start_service","(uri=nil, front=nil, config=nil)","<p>Start a dRuby server locally.\n<p>The new dRuby server will become the primary server, even if another server …\n"],["start_service","DRb","DRb.html#method-c-start_service","(uri=nil, front=nil, config=nil)","<p>Start a dRuby server locally.\n<p>The new dRuby server will become the primary server, even if another server …\n"],["start_stream","Psych::Emitter","Psych/Emitter.html#method-i-start_stream","(p1)","<p>Start a stream emission with <code>encoding</code>\n<p>See Psych::Handler#start_stream\n"],["start_stream","Psych::Handler","Psych/Handler.html#method-i-start_stream","(encoding)","<p>Called with <code>encoding</code> when the YAML stream starts.  This method is called once per stream.  A stream may …\n"],["start_stream","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-start_stream","(encoding)",""],["start_symbol=","Racc::Grammar","Racc/Grammar.html#method-i-start_symbol-3D","(s)",""],["start_with?","Reline::KeyStroke","Reline/KeyStroke.html#method-i-start_with-3F","(me, other)",""],["start_with?","String","String.html#method-i-start_with-3F","(*args)","<p>Returns whether <code>self</code> starts with any of the given <code>string_or_regexp</code>.\n<p>Matches patterns against the beginning …\n"],["start_with?","Symbol","Symbol.html#method-i-start_with-3F","(*args)","<p>Equivalent to <code>self.to_s.start_with?</code>; see String#start_with?.\n"],["started?","Net::HTTP","Net/HTTP.html#method-i-started-3F","()","<p>Returns true if the HTTP session has been started.\n"],["stat","CSV","CSV.html#method-i-stat","(*args)",""],["stat","File","File.html#method-c-stat","(p1)","<p>Returns a File::Stat object for the file at <code>filepath</code> (see File::Stat):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>).<span class=\"ruby-identifier\">class</span> <span class=\"ruby-comment\"># =&gt; File::Stat</span>\n</pre>\n"],["stat","GC","GC.html#method-c-stat","(hash_or_key = nil)","<p>Returns a Hash containing information about the GC.\n<p>The contents of the hash are implementation specific …\n"],["stat","IO","IO.html#method-i-stat","()","<p>Returns status information for <em>ios</em> as an object of type File::Stat.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>)\n<span class=\"ruby-identifier\">s</span> = <span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">stat</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["stat","Pathname","Pathname.html#method-i-stat","()","<p>Returns a File::Stat object.\n<p>See File.stat.\n"],["stat","RubyVM","RubyVM.html#method-c-stat","(*args)","<p>Returns a Hash containing implementation-dependent counters inside the VM.\n<p>This hash includes information …\n"],["stat","TracePoint","TracePoint.html#method-c-stat","()","<p>Returns internal information of TracePoint.\n<p>The contents of the returned value are implementation specific. …\n"],["stat_heap","GC","GC.html#method-c-stat_heap","(heap_name = nil, hash_or_key = nil)","<p>Returns information for memory pools in the GC.\n<p>If the first optional argument, <code>heap_name</code>, is passed in …\n"],["state","Coverage","Coverage.html#method-c-state","()","<p>Returns the state of the coverage measurement.\n"],["state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-state","()","<p>@return [RequirementState] the current state the resolution is\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">operating</span> <span class=\"ruby-identifier\">upon</span>\n</pre>\n"],["state","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-state","()","<p>A description of the current connection state. This is for diagnostic purposes only.\n"],["state","Ripper","Ripper.html#method-i-state","()","<p>Return scanner state of current token.\n"],["state","Ripper::Filter","Ripper/Filter.html#method-i-state","()","<p>The scanner’s state of the current token. This value is the bitwise OR of zero or more of the <code>Ripper::EXPR_*</code> …\n"],["state_file","Gem","Gem.html#method-c-state_file","()","<p>The path to standard location of the user’s state file.\n"],["state_file_name","Gem::ConfigFile","Gem/ConfigFile.html#method-i-state_file_name","()","<p>The name of the state file.\n"],["state_file_writable?","Gem::ConfigFile","Gem/ConfigFile.html#method-i-state_file_writable-3F","()","<p>Check state file is writable. Creates empty file if not present to ensure we can write to it.\n"],["state_home","Gem","Gem.html#method-c-state_home","()","<p>The path to standard location of the user’s state directory.\n"],["state_transition_table","Racc::Grammar","Racc/Grammar.html#method-i-state_transition_table","()",""],["state_transition_table","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-state_transition_table","()",""],["state_transition_table","Racc::States","Racc/States.html#method-i-state_transition_table","()",""],["states","Racc::Grammar","Racc/Grammar.html#method-i-states","()",""],["stats_enabled?","RubyVM::YJIT","RubyVM/YJIT.html#method-c-stats_enabled-3F","()","<p>Check if –yjit-stats is used.\n"],["status","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-status","()","<p>Returns an Array of statuses for this response.  Each status contains a CertificateId, the status (0 …\n"],["status","OpenSSL::OCSP::Response","OpenSSL/OCSP/Response.html#method-i-status","()","<p>Returns the status of the response.\n"],["status","OpenSSL::Timestamp::Response","OpenSSL/Timestamp/Response.html#method-i-status","()","<p>Returns one of GRANTED, GRANTED_WITH_MODS, REJECTION, WAITING, REVOCATION_WARNING or REVOCATION_NOTIFICATION …\n"],["status","PTY::ChildExited","PTY/ChildExited.html#method-i-status","()","<p>Returns the exit status of the child for which PTY#check raised this exception\n"],["status","SystemExit","SystemExit.html#method-i-status","()","<p>Return the status value associated with this system exit.\n"],["status","Thread","Thread.html#method-i-status","()","<p>Returns the status of <code>thr</code>.\n<p><code>&quot;sleep&quot;</code> &mdash; Returned if this thread is sleeping or waiting on I/O\n<p><code>&quot;run&quot;</code> … &mdash; "],["status?","OpenSSL::Random","OpenSSL/Random.html#method-c-status-3F","()","<p>Return <code>true</code> if the PRNG has been seeded with enough data, <code>false</code> otherwise.\n"],["status_string","OpenSSL::OCSP::Response","OpenSSL/OCSP/Response.html#method-i-status_string","()","<p>Returns a status string for the response.\n"],["status_text","OpenSSL::Timestamp::Response","OpenSSL/Timestamp/Response.html#method-i-status_text","()","<p>In cases of failure this field may contain an array of strings further describing the origin of the failure. …\n"],["stdinput","CGI","CGI.html#method-i-stdinput","()","<p>Synonym for $stdin.\n"],["stdoutput","CGI","CGI.html#method-i-stdoutput","()","<p>Synonym for $stdout.\n"],["step","Date","Date.html#method-i-step","(p1, p2 = v2)","<p>Calls the block with specified dates; returns <code>self</code>.\n<p>The first <code>date</code> is <code>self</code>.\n<p>Each successive <code>date</code> is <code>date</code> …\n"],["step","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-step","()",""],["step","Numeric","Numeric.html#method-i-step","(*args)","\n<pre>Generates a sequence of numbers; with a block given, traverses the sequence.\n\nOf the Core and Standard ...</pre>\n"],["step","Range","Range.html#method-i-step","(*args)","<p>Iterates over the elements of <code>self</code>.\n<p>With a block given and no argument, calls the block each element of …\n"],["sticky?","File","File.html#method-c-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n<p><em>file_name</em> can be an IO object.\n"],["sticky?","File::Stat","File/Stat.html#method-i-sticky-3F","()","<p>Returns <code>true</code> if <em>stat</em> has its sticky bit set, <code>false</code> if it doesn’t or if the operating system doesn’t …\n"],["sticky?","FileTest","FileTest.html#method-i-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n<p><em>file_name</em> can be an IO object.\n"],["sticky?","Pathname","Pathname.html#method-i-sticky-3F","()","<p>See FileTest.sticky?.\n"],["stop","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-stop","()","<p>Sends “close notify” to the peer and tries to shut down the SSL connection gracefully.\n"],["stop","Thread","Thread.html#method-c-stop","()","<p>Stops execution of the current thread, putting it into a “sleep” state, and schedules execution …\n"],["stop?","SyntaxSuggest::PathnameFromMessage","SyntaxSuggest/PathnameFromMessage.html#method-i-stop-3F","()",""],["stop?","Thread","Thread.html#method-i-stop-3F","()","<p>Returns <code>true</code> if <code>thr</code> is dead or sleeping.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">stop</span> }\n<span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">current</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">stop?</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["stop_after_kw","SyntaxSuggest::AroundBlockScan","SyntaxSuggest/AroundBlockScan.html#method-i-stop_after_kw","()",""],["stop_doc","RDoc::CodeObject","RDoc/CodeObject.html#method-i-stop_doc","()","<p>Disable capture of documentation\n"],["stop_pool","DRb::DRbConn","DRb/DRbConn.html#method-c-stop_pool","()",""],["stop_service","DRb","DRb.html#method-c-stop_service","()","<p>Stop the local dRuby server.\n<p>This operates on the primary server.  If there is no primary server currently …\n"],["stop_service","DRb","DRb.html#method-i-stop_service","()","<p>Stop the local dRuby server.\n<p>This operates on the primary server.  If there is no primary server currently …\n"],["stop_service","DRb::DRbServer","DRb/DRbServer.html#method-i-stop_service","()","<p>Stop this server.\n"],["stop_service","DRb::ExtServ","DRb/ExtServ.html#method-i-stop_service","()",""],["stopped?","Process::Status","Process/Status.html#method-i-stopped-3F","()","<p>Returns <code>true</code> if this process is stopped. This is only returned if the corresponding #wait call had the …\n"],["stopsig","Process::Status","Process/Status.html#method-i-stopsig","()","<p>Returns the number of the signal that caused <em>stat</em> to stop (or <code>nil</code> if self is not stopped).\n"],["storage","Fiber","Fiber.html#method-i-storage","()","<p>Returns a copy of the storage hash for the fiber. The method can only be called on the Fiber.current …\n"],["storage=","Fiber","Fiber.html#method-i-storage-3D","(p1)","<p>Sets the storage hash for the fiber. This feature is experimental and may change in the future. The method …\n"],["store","ENV","ENV.html#method-c-store","(p1, p2)","<p>ENV.store is an alias for ENV.[]=.\n<p>Creates, updates, or deletes the named environment variable, returning …\n"],["store","Hash","Hash.html#method-i-store","(p1, p2)","<p>Hash#store is an alias for Hash#[]=.\n<p>Associates the given <code>value</code> with the given <code>key</code>; returns <code>value</code>.\n<p>If the …\n"],["store","YAML::DBM","YAML/DBM.html#method-i-store","( key, val )","<p>Stores <code>value</code> in database with <code>key</code> as the index. <code>value</code> is converted to YAML before being stored.\n<p>Returns …\n"],["store=","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-store-3D","(store)","<p>Sets the store for this method and its referenced code objects.\n"],["store=","RDoc::ClassModule","RDoc/ClassModule.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-store-3D","(store)","<p>Sets the <code>store</code> that contains this CodeObject\n"],["store=","RDoc::Constant","RDoc/Constant.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::Mixin","RDoc/Mixin.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::RDoc","RDoc/RDoc.html#method-i-store-3D","(store)","<p>Sets the current documentation tree to <code>store</code> and sets the store’s rdoc driver to this instance.\n"],["store_for","RDoc::Servlet","RDoc/Servlet.html#method-i-store_for","(source_name)","<p>Returns an RDoc::Store for the given <code>source_name</code> (‘ruby’ or a gem name).\n"],["stream?","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-stream-3F","()",""],["stream?","Psych::Nodes::Stream","Psych/Nodes/Stream.html#method-i-stream-3F","()",""],["stream_end?","Zlib::ZStream","Zlib/ZStream.html#method-i-stream_end-3F","()","<p>Returns true if the stream is finished.\n"],["streaming?","Psych::Handler","Psych/Handler.html#method-i-streaming-3F","()","<p>Is this handler a streaming handler?\n"],["stress","GC","GC.html#method-c-stress","()","<p>Returns current status of GC stress mode.\n"],["stress=","GC","GC.html#method-c-stress-3D","(flag)","<p>Updates the GC stress mode.\n<p>When stress mode is enabled, the GC is invoked at every GC opportunity: all …\n"],["strftime","Date","Date.html#method-i-strftime","(*args)","<p>Returns a string representation of the date in <code>self</code>, formatted according the given <code>format</code>:\n\n<pre>Date.new(2001, ...</pre>\n"],["strftime","DateTime","DateTime.html#method-i-strftime","(*args)","<p>Returns a string representation of <code>self</code>, formatted according the given +format:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">now</span>.<span class=\"ruby-identifier\">strftime</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["strftime","Time","Time.html#method-i-strftime","(p1)","<p>Returns a string representation of <code>self</code>, formatted according to the given string <code>format</code>. See Formats …\n"],["strict_decode64","Base64","Base64.html#method-i-strict_decode64","(str)","<p>Returns the Base64-decoded version of <code>str</code>. This method complies with RFC 4648. ArgumentError is raised …\n"],["strict_encode64","Base64","Base64.html#method-i-strict_encode64","(bin)","<p>Returns the Base64-encoded version of <code>bin</code>. This method complies with RFC 4648. No line feeds are added. …\n"],["strict_oct","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-strict_oct","(str)",""],["strike","RDoc::Markdown","RDoc/Markdown.html#method-i-strike","","<p>Enables the strike extension\n"],["string","MatchData","MatchData.html#method-i-string","()","<p>Returns the target string if it was frozen; otherwise, returns a frozen copy of the target string:\n\n<pre>m = ...</pre>\n"],["string","StringIO","StringIO.html#method-i-string","()","<p>Returns underlying string:\n\n<pre>StringIO.open(&#39;foo&#39;) do |strio|\n  p strio.string\n  strio.string = &#39;bar&#39;\n  p ...</pre>\n"],["string","StringScanner","StringScanner.html#method-i-string","()","<p>Returns the string being scanned.\n"],["string=","StringIO","StringIO.html#method-i-string-3D","(p1)","<p>Assigns the underlying string as <code>other_string</code>, and sets position to zero; returns <code>other_string</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">StringIO</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["string=","StringScanner","StringScanner.html#method-i-string-3D","(p1)","<p>Changes the string being scanned to <code>str</code> and resets the scanner. Returns <code>str</code>.\n"],["string_list","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-string_list","(name, list)",""],["string_symbol?","Racc::Sym","Racc/Sym.html#method-i-string_symbol-3F","()",""],["strip","String","String.html#method-i-strip","()","<p>Returns a copy of the receiver with leading and trailing whitespace removed; see Whitespace in Strings …\n"],["strip!","String","String.html#method-i-strip-21","()","<p>Like String#strip, except that any modifications are made in <code>self</code>; returns <code>self</code> if any modification are …\n"],["strip_hashes","RDoc::Text","RDoc/Text.html#method-i-strip_hashes","(text)","<p>Strips leading # characters from <code>text</code>\n"],["strip_newlines","RDoc::Text","RDoc/Text.html#method-i-strip_newlines","(text)","<p>Strips leading and trailing n characters from <code>text</code>\n"],["strip_stars","RDoc::Text","RDoc/Text.html#method-i-strip_stars","(text)","<p>Strips /* */ style comments\n"],["strip_value","CSV::Parser","CSV/Parser.html#method-i-strip_value","(value)",""],["strong","RDoc::Markdown","RDoc/Markdown.html#method-i-strong","(text)","<p>Wraps <code>text</code> in strong markup for rdoc inline formatting\n"],["strongly_connected_components","TSort","TSort.html#method-i-strongly_connected_components","()","<p>Returns strongly connected components as an array of arrays of nodes. The array is sorted from children …\n"],["strongly_connected_components","TSort","TSort.html#method-c-strongly_connected_components","(each_node, each_child)","<p>Returns strongly connected components as an array of arrays of nodes. The array is sorted from children …\n"],["strptime","Date","Date.html#method-c-strptime","(p1 = v1, p2 = v2, p3 = v3)","<p>Returns a new Date object with values parsed from <code>string</code>, according to the given <code>format</code>:\n\n<pre>Date.strptime(&#39;2001-02-03&#39;, ...</pre>\n"],["strptime","DateTime","DateTime.html#method-c-strptime","(p1 = v1, p2 = v2, p3 = v3)","<p>Parses the given representation of date and time with the given template, and creates a DateTime object. …\n"],["strptime","Time","Time.html#method-c-strptime","(date, format, now=self.now)","<p>Works similar to <code>parse</code> except that instead of using a heuristic to detect the format of the input string, …\n"],["struct","Fiddle::Importer","Fiddle/Importer.html#method-i-struct","(signature)","<p>Creates a class to wrap the C struct described by <code>signature</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">MyStruct</span> = <span class=\"ruby-identifier\">struct</span> [<span class=\"ruby-string\">&#39;int i&#39;</span>, <span class=\"ruby-string\">&#39;char c&#39;</span>]\n</pre>\n"],["stubbed?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-stubbed-3F","()","<p>Whether this specification is stubbed - i.e. we have information about the gem from a stub line, without …\n"],["stubbed?","Gem::Specification","Gem/Specification.html#method-i-stubbed-3F","()",""],["stubs","Gem::Specification","Gem/Specification.html#method-c-stubs","()","<p>Returns a Gem::StubSpecification for every installed gem\n"],["stubs_for","Gem::Specification","Gem/Specification.html#method-c-stubs_for","(name)","<p>Returns a Gem::StubSpecification for installed gem named <code>name</code> only returns stubs that match Gem.platforms …\n"],["sub","BigDecimal","BigDecimal.html#method-i-sub","(p1, p2)","<p>Subtract the specified value.\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">sub</span>(<span class=\"ruby-identifier\">b</span>,<span class=\"ruby-identifier\">n</span>)\n</pre>\n"],["sub","IRB::Vec","IRB/Vec.html#method-i-sub","(other)",""],["sub","Kernel","Kernel.html#method-i-sub","(*args)","<p>Equivalent to <code>$_.sub(<em>args</em>)</code>, except that <code>$_</code> will be updated if substitution occurs. Available only when …\n"],["sub","Pathname","Pathname.html#method-i-sub","(*args)","<p>Return a pathname which is substituted by String#sub.\n\n<pre>path1 = Pathname.new(&#39;/usr/bin/perl&#39;)\npath1.sub(&#39;perl&#39;, ...</pre>\n"],["sub","String","String.html#method-i-sub","(*args)","<p>Returns a copy of <code>self</code> with only the first occurrence (not all occurrences) of the given <code>pattern</code> replaced. …\n"],["sub!","String","String.html#method-i-sub-21","(*args)","<p>Returns <code>self</code> with only the first occurrence (not all occurrences) of the given <code>pattern</code> replaced.\n<p>See  …\n"],["sub_dependencies_to_avoid","Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails","Gem/Resolver/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-sub_dependencies_to_avoid","()","<p>@return [Array] array of sub-dependencies to avoid when choosing a\n\n<pre>new possibility for the state we&#39;ve ...</pre>\n"],["sub_ext","Pathname","Pathname.html#method-i-sub_ext","(p1)","<p>Return a pathname with <code>repl</code> added as a suffix to the basename.\n<p>If self has no extension part, <code>repl</code> is …\n"],["sub_type","Net::HTTPHeader","Net/HTTPHeader.html#method-i-sub_type","()","<p>Returns the trailing (‘subtype’) part of the media type from the value of field <code>&#39;Content-Type&#39;</code> …\n"],["subclasses","Class","Class.html#method-i-subclasses","()","<p>Returns an array of classes where the receiver is the direct superclass of the class, excluding singleton …\n"],["subdomain_of?","Resolv::DNS::Name","Resolv/DNS/Name.html#method-i-subdomain_of-3F","(other)","<p>Returns true if <code>other</code> is a subdomain.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">domain</span> = <span class=\"ruby-constant\">Resolv</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">DNS</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Name</span>.<span class=\"ruby-identifier\">create</span>(<span class=\"ruby-string\">&quot;y.z&quot;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Resolv</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">DNS</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Name</span>.<span class=\"ruby-identifier\">create</span>(<span class=\"ruby-string\">&quot;w.x.y.z&quot;</span>).<span class=\"ruby-identifier\">subdomain_of?</span>(<span class=\"ruby-identifier\">domain</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["subject","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-subject","()",""],["subject","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-subject","()",""],["subject=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-subject-3D","(p1)",""],["subject=","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-subject-3D","(p1)",""],["subject_certificate=","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-subject_certificate-3D","(p1)",""],["subject_key_identifier","OpenSSL::X509::Extension::SubjectKeyIdentifier","OpenSSL/X509/Extension/SubjectKeyIdentifier.html#method-i-subject_key_identifier","()","<p>Get the subject’s key identifier from the subjectKeyIdentifier exteension, as described in RFC5280 …\n"],["subject_request=","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-subject_request-3D","(p1)",""],["submit","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-submit","(value = nil, name = nil)","<p>Generate a submit button Input element, as a String.\n<p><code>value</code> is the text to display on the button.  <code>name</code> …\n"],["subsec","Time","Time.html#method-i-subsec","()","<p>Returns the exact subseconds for <code>self</code> as a Numeric (Integer or Rational):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span> <span class=\"ruby-comment\"># =&gt; 2022-07-11 ...</span>\n</pre>\n"],["subset?","Set","Set.html#method-i-subset-3F","(set)","<p>Returns true if the set is a subset of the given set.\n"],["subtract","Set","Set.html#method-i-subtract","(enum)","<p>Deletes every element that appears in the given enumerable object\nand returns self.\n"],["succ","Date","Date.html#method-i-succ","()","<p>Returns a new Date object representing the following day:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">to_s</span>      <span class=\"ruby-comment\"># =&gt; &quot;2001-02-03&quot; ...</span>\n</pre>\n"],["succ","IPAddr","IPAddr.html#method-i-succ","()","<p>Returns the successor to the ipaddr.\n"],["succ","Integer","Integer.html#method-i-succ","()","<p>Returns the successor integer of <code>self</code> (equivalent to <code>self + 1</code>):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">succ</span>  <span class=\"ruby-comment\">#=&gt; 2</span>\n<span class=\"ruby-value\">-1</span>.<span class=\"ruby-identifier\">succ</span> <span class=\"ruby-comment\">#=&gt; 0</span>\n</pre>\n<p>Integer#next …\n"],["succ","String","String.html#method-i-succ","()","<p>Returns the successor to <code>self</code>. The successor is calculated by incrementing characters.\n<p>The first character …\n"],["succ","Symbol","Symbol.html#method-i-succ","()","<p>Equivalent to <code>self.to_s.succ.to_sym</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:foo</span>.<span class=\"ruby-identifier\">succ</span> <span class=\"ruby-comment\"># =&gt; :fop</span>\n</pre>\n<p>Symbol#next is an alias for Symbol#succ.\n"],["succ!","String","String.html#method-i-succ-21","()","<p>Equivalent to String#succ, but modifies <code>self</code> in place; returns <code>self</code>.\n<p>String#next! is an alias for String#succ! …\n"],["success?","Process::Status","Process/Status.html#method-i-success-3F","()","<p>Returns <code>true</code> if <em>stat</em> is successful, <code>false</code> if not. Returns <code>nil</code> if #exited? is not <code>true</code>.\n"],["success?","SystemExit","SystemExit.html#method-i-success-3F","()","<p>Returns <code>true</code> if exiting successful, <code>false</code> if not.\n"],["successors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-successors","()","<p>@return [Array&lt;Vertex&gt;] the vertices of {#graph} that have an edge with\n\n<pre>`self` as their {Edge#origin}</pre>\n"],["suffix_pattern","Gem","Gem.html#method-c-suffix_pattern","()","<p>Glob pattern for require-able path suffixes.\n"],["suffix_regexp","Gem","Gem.html#method-c-suffix_regexp","()","<p>Regexp for require-able path suffixes.\n"],["suffixes","Gem","Gem.html#method-c-suffixes","()","<p>Suffixes for require-able paths.\n"],["suggest_gems_from_name","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-suggest_gems_from_name","(gem_name, type = :latest, num_results = 5)","<p>Suggests gems based on the supplied <code>gem_name</code>. Returns an array of alternative gem names.\n"],["suggestions","Gem::Licenses","Gem/Licenses.html#method-c-suggestions","(license)",""],["sum","Array","Array.html#method-i-sum","(*args)","<p>When no block is given, returns the object equivalent to:\n\n<pre>sum = init\narray.each {|element| sum += element ...</pre>\n"],["sum","Enumerable","Enumerable.html#method-i-sum","(*args)","<p>With no block given, returns the sum of <code>initial_value</code> and the elements:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">100</span>).<span class=\"ruby-identifier\">sum</span>          <span class=\"ruby-comment\"># =&gt; 5050 ...</span>\n</pre>\n"],["sum","String","String.html#method-i-sum","(*args)","<p>Returns a basic <code>n</code>-bit checksum of the characters in <code>self</code>; the checksum is the sum of the binary value …\n"],["summarize","OptionParser","OptionParser.html#method-i-summarize","(to = [], width = @summary_width, max = width - 1, indent = @summary_indent, &blk)","<p>Puts option summary into <code>to</code> and returns <code>to</code>. Yields each line if a block is given.\n<p><code>to</code> &mdash; Output destination, …\n"],["summarize","OptionParser::List","OptionParser/List.html#method-i-summarize","(*args, &block)","<p>Creates the summary table, passing each line to the <code>block</code> (without newline). The arguments <code>args</code> are passed …\n"],["summarize","OptionParser::Switch","OptionParser/Switch.html#method-i-summarize","(sdone = {}, ldone = {}, width = 1, max = width - 1, indent = \"\")","<p>Produces the summary text. Each line of the summary is yielded to the block (without newline).\n<p><code>sdone</code> &mdash; "],["summary","RDoc::Stats","RDoc/Stats.html#method-i-summary","()","<p>Returns a summary of the collected statistics.\n"],["summary=","Gem::Specification","Gem/Specification.html#method-i-summary-3D","(str)","<p>A short summary of this gem’s description.\n"],["sunday?","Date","Date.html#method-i-sunday-3F","()","<p>Returns <code>true</code> if <code>self</code> is a Sunday, <code>false</code> otherwise.\n"],["sunday?","Time","Time.html#method-i-sunday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Sunday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-02 00:00:00 ...</span>\n</pre>\n"],["super_method","Method","Method.html#method-i-super_method","()","<p>Returns a Method of superclass which would be called when super is used or nil if there is no method …\n"],["super_method","UnboundMethod","UnboundMethod.html#method-i-super_method","()","<p>Returns a Method of superclass which would be called when super is used or nil if there is no method …\n"],["superclass","Class","Class.html#method-i-superclass","()","<p>Returns the superclass of <em>class</em>, or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">superclass</span>          <span class=\"ruby-comment\">#=&gt; IO</span>\n<span class=\"ruby-constant\">IO</span>.<span class=\"ruby-identifier\">superclass</span>            <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["superclass","RDoc::ClassModule","RDoc/ClassModule.html#method-i-superclass","()","<p>Get the superclass of this class.  Attempts to retrieve the superclass object, returns the name if it …\n"],["superclass","RDoc::NormalModule","RDoc/NormalModule.html#method-i-superclass","()","<p>Modules don’t have one, raises NoMethodError\n"],["superclass=","RDoc::ClassModule","RDoc/ClassModule.html#method-i-superclass-3D","(superclass)","<p>Set the superclass of this class to <code>superclass</code>\n"],["superclass_method","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-superclass_method","()","<p>For methods that <code>super</code>, find the superclass method that would be called.\n"],["superset?","Set","Set.html#method-i-superset-3F","(set)","<p>Returns true if the set is a superset of the given set.\n"],["supply_default_content_type","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-supply_default_content_type","()",""],["supported?","Coverage","Coverage.html#method-c-supported-3F","(p1)","<p>Returns true if coverage measurement is supported for the given mode.\n<p>The mode should be one of the following …\n"],["suppress","RDoc::CodeObject","RDoc/CodeObject.html#method-i-suppress","()","<p>Use this to suppress a CodeObject and all its children until the next file it is seen in or documentation …\n"],["suppress_always_install","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-suppress_always_install","()",""],["suppressed?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-suppressed-3F","()","<p>Has this class been suppressed?\n<p>See also #suppress\n"],["suspend","Coverage","Coverage.html#method-c-suspend","()","<p>Suspend the coverage measurement. You can use Coverage.resume to restart the measurement.\n"],["suspend_context","IRB::Irb","IRB/Irb.html#method-i-suspend_context","(context)","<p>Evaluates the given block using the given <code>context</code> as the Context.\n"],["suspend_input_method","IRB::Irb","IRB/Irb.html#method-i-suspend_input_method","(input_method)","<p>Evaluates the given block using the given <code>input_method</code> as the Context#io.\n<p>Used by the irb commands <code>source</code> …\n"],["suspend_name","IRB::Irb","IRB/Irb.html#method-i-suspend_name","(path = nil, name = nil)","<p>Evaluates the given block using the given <code>path</code> as the Context#irb_path and <code>name</code> as the Context#irb_name …\n"],["suspend_workspace","IRB::Irb","IRB/Irb.html#method-i-suspend_workspace","(workspace)","<p>Evaluates the given block using the given <code>workspace</code> as the Context#workspace.\n<p>Used by the irb command …\n"],["swapcase","String","String.html#method-i-swapcase","(*args)","<p>Returns a string containing the characters in <code>self</code>, with cases reversed; each uppercase character is …\n"],["swapcase","Symbol","Symbol.html#method-i-swapcase","(*args)","<p>Equivalent to <code>sym.to_s.swapcase.to_sym</code>.\n<p>See String#swapcase.\n"],["swapcase!","String","String.html#method-i-swapcase-21","(*args)","<p>Upcases each lowercase character in <code>self</code>; downcases uppercase character; returns <code>self</code> if any changes …\n"],["switch","IRB::JobManager","IRB/JobManager.html#method-i-switch","(key)","<p>Changes the current active irb session to the given <code>key</code> in the jobs Array.\n<p>Raises an IrbAlreadyDead exception …\n"],["switch","Process::GID","Process/GID.html#method-c-switch","()","<p>Switch the effective and real group IDs of the current process. If a <em>block</em> is given, the group IDs will …\n"],["switch","Process::UID","Process/UID.html#method-c-switch","()","<p>Switch the effective and real user IDs of the current process. If a <em>block</em> is given, the user IDs will …\n"],["switch_name","OptionParser::Switch","OptionParser/Switch.html#method-i-switch_name","()","<p>Main name of the switch.\n"],["sym","Fiddle::CompositeHandler","Fiddle/CompositeHandler.html#method-i-sym","(symbol)","<p>Returns the address as an Integer from any handlers with the function named <code>symbol</code>.\n<p>Raises a DLError if …\n"],["sym","Fiddle::Handle","Fiddle/Handle.html#method-i-sym","(p1)","<p>Get the address as an Integer for the function named <code>name</code>.\n"],["sym","Fiddle::Handle","Fiddle/Handle.html#method-c-sym","(p1)","<p>Get the address as an Integer for the function named <code>name</code>.\n"],["sym_defined?","Fiddle::Handle","Fiddle/Handle.html#method-c-sym_defined-3F","(p1)",""],["sym_defined?","Fiddle::Handle","Fiddle/Handle.html#method-i-sym_defined-3F","(p1)",""],["sym_int_hash","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-sym_int_hash","(name, h)",""],["symbol_alias?","IRB::Context","IRB/Context.html#method-i-symbol_alias-3F","(command)","<p>Return true if it’s aliased from the argument and it’s not an identifier.\n"],["symbol_locations","Racc::LogFileGenerator","Racc/LogFileGenerator.html#method-i-symbol_locations","(locs)",""],["symbolize","Psych::ClassLoader::Restricted","Psych/ClassLoader/Restricted.html#method-i-symbolize","(sym)",""],["symbols","Racc::Grammar","Racc/Grammar.html#method-i-symbols","()",""],["symlink","File","File.html#method-c-symlink","(p1, p2)","<p>Creates a symbolic link called <em>new_name</em> for the existing file <em>old_name</em>. Raises a NotImplemented exception …\n"],["symlink","FileUtils","FileUtils.html#method-c-symlink","(src, dest, force: nil, relative: false, target_directory: true, noop: nil, verbose: nil)",""],["symlink","FileUtils","FileUtils.html#method-i-symlink","(src, dest, force: nil, relative: false, target_directory: true, noop: nil, verbose: nil)",""],["symlink?","File","File.html#method-c-symlink-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a symbolic link, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">symlink</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">symlink</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>, <span class=\"ruby-string\">&#39;symlink&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["symlink?","File::Stat","File/Stat.html#method-i-symlink-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a symbolic link, <code>false</code> if it isn’t or if the operating system doesn’t …\n"],["symlink?","FileTest","FileTest.html#method-i-symlink-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a symbolic link, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">symlink</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">symlink</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>, <span class=\"ruby-string\">&#39;symlink&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["symlink?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-symlink-3F","()","<p>Is this tar entry a symlink?\n"],["symlink?","Pathname","Pathname.html#method-i-symlink-3F","()","<p>See FileTest.symlink?.\n"],["sync","IO","IO.html#method-i-sync","()","<p>Returns the current sync mode of the stream. When sync mode is true, all output is immediately flushed …\n"],["sync","StringIO","StringIO.html#method-i-sync","()","<p>Returns <code>true</code>; implemented only for compatibility with other stream classes.\n"],["sync","Zlib::GzipFile","Zlib/GzipFile.html#method-i-sync","()","<p>Same as IO#sync\n"],["sync","Zlib::Inflate","Zlib/Inflate.html#method-i-sync","(p1)","<p>Inputs <code>string</code> into the end of input buffer and skips data until a full flush point can be found.  If …\n"],["sync=","IO","IO.html#method-i-sync-3D","(p1)","<p>Sets the <em>sync</em> <em>mode</em> for the stream to the given value; returns the given value.\n<p>Values for the sync mode: …\n"],["sync=","StringIO","StringIO.html#method-i-sync-3D","(p1)","<p>Returns the argument unchanged.  Just for compatibility to IO.\n"],["sync=","Zlib::GzipFile","Zlib/GzipFile.html#method-i-sync-3D","(p1)","<p>Same as IO.  If flag is <code>true</code>, the associated IO object must respond to the <code>flush</code> method.  While <code>sync</code> …\n"],["sync_point?","Zlib::Inflate","Zlib/Inflate.html#method-i-sync_point-3F","()","<p>Quoted verbatim from original documentation:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">What</span> <span class=\"ruby-identifier\">is</span> <span class=\"ruby-identifier\">this?</span>\n</pre>\n<p><code>:)</code>\n"],["synchronize","Monitor","Monitor.html#method-i-synchronize","()",""],["synchronize","MonitorMixin","MonitorMixin.html#method-i-synchronize","(&b)",""],["synchronize","Thread::Mutex","Thread/Mutex.html#method-i-synchronize","()","<p>Obtains a lock, runs the block, and releases the lock when the block completes.  See the example under …\n"],["syntax_suggest_original_load","Kernel","Kernel.html#method-i-syntax_suggest_original_load","(file, wrap = false)",""],["syntax_suggest_original_require","Kernel","Kernel.html#method-i-syntax_suggest_original_require","(path)",""],["syntax_suggest_original_require_relative","Kernel","Kernel.html#method-i-syntax_suggest_original_require_relative","(file)",""],["sysaccept","Socket","Socket.html#method-i-sysaccept","()","<p>Accepts an incoming connection returning an array containing the (integer) file descriptor for the incoming …\n"],["sysaccept","TCPServer","TCPServer.html#method-i-sysaccept","()","<p>Returns a file descriptor of a accepted connection.\n\n<pre>TCPServer.open(&quot;127.0.0.1&quot;, 28561) {|serv|\n  fd = ...</pre>\n"],["sysaccept","UNIXServer","UNIXServer.html#method-i-sysaccept","()","<p>Accepts a new connection. It returns the new file descriptor which is an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">UNIXServer</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["syscall","Kernel","Kernel.html#method-i-syscall","(*args)","<p>Invokes Posix system call syscall(2), which calls a specified function.\n<p>Calls the operating system function …\n"],["sysclose","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-sysclose","()","<p>Sends “close notify” to the peer and tries to shut down the SSL connection gracefully.\n<p>If sync_close …\n"],["sysconf","Etc","Etc.html#method-c-sysconf","(p1)","<p>Returns system configuration variable using sysconf().\n<p><em>name</em> should be a constant under <code>Etc</code> which begins …\n"],["sysconfdir","Etc","Etc.html#method-c-sysconfdir","()","<p>Returns system configuration directory.\n<p>This is typically <code>&quot;/etc&quot;</code>, but is modified by the prefix …\n"],["syslog","Syslog::Logger","Syslog/Logger.html#method-c-syslog","()","<p>Returns the internal Syslog object that is initialized when the first instance is created.\n"],["syslog=","Syslog::Logger","Syslog/Logger.html#method-c-syslog-3D","(syslog)","<p>Specifies the internal Syslog object to be used.\n"],["sysopen","IO","IO.html#method-c-sysopen","(p1, p2 = v2, p3 = v3)","<p>Opens the file at the given path with the given mode and permissions; returns the integer file descriptor. …\n"],["sysopen","Pathname","Pathname.html#method-i-sysopen","(p1 = v1, p2 = v2)","<p>See IO.sysopen.\n"],["sysread","IO","IO.html#method-i-sysread","(p1, p2 = v2)","<p>Behaves like IO#readpartial, except that it uses low-level system functions.\n<p>This method should not be …\n"],["sysread","IO::generic_readable","IO/generic_readable.html#method-i-sysread","(*args)","<p>Similar to #read, but raises <code>EOFError</code> at end of string instead of returning <code>nil</code>, as well as IO#sysread …\n"],["sysread","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-sysread","(*args)","<p>Reads <em>length</em> bytes from the SSL connection.  If a pre-allocated <em>buffer</em> is provided the data will be written …\n"],["sysread_nonblock","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-sysread_nonblock","(*args)","<p>A non-blocking version of #sysread.  Raises an SSLError if reading would block.  If “exception: …\n"],["sysseek","IO","IO.html#method-i-sysseek","(p1, p2 = v2)","<p>Behaves like IO#seek, except that it:\n<p>Uses low-level system functions.\n<p>Returns the new position.\n"],["syssign","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-syssign","(string)","<p>Computes and returns the DSA signature of <code>string</code>, where <code>string</code> is expected to be an already-computed …\n"],["system","Kernel","Kernel.html#method-i-system","(*args)","<p>Executes <em>command…</em> in a subshell. <em>command…</em> is one of following forms.\n<p>This method has potential security …\n"],["system_bindir","Bundler","Bundler.html#method-c-system_bindir","()",""],["systmpdir","Etc","Etc.html#method-c-systmpdir","()","<p>Returns system temporary directory; typically “/tmp”.\n"],["sysverify","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-sysverify","(digest, sig)","<p>Verifies whether the signature is valid given the message digest input. It does so by validating <code>sig</code> …\n"],["syswrite","IO","IO.html#method-i-syswrite","(p1)","<p>Writes the given <code>object</code> to self, which must be opened for writing (see Modes); returns the number bytes …\n"],["syswrite","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-syswrite","(p1)","<p>Writes <em>string</em> to the SSL connection.\n"],["syswrite_nonblock","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-syswrite_nonblock","(p1, p2 = {})","<p>Writes <em>string</em> to the SSL connection in a non-blocking manner.  Raises an SSLError if writing would block. …\n"],["table","CSV","CSV.html#method-c-table","(path, **options)","<p>Calls CSV.read with <code>source</code>, <code>options</code>, and certain default options:\n<p><code>headers</code>: <code>true</code>\n<p><code>converters</code>: <code>:numeric</code>\n"],["tag","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-tag","(tag)","<p>Tags the current state of the dependency as the given tag @param  [Object] tag an opaque tag for the …\n"],["tag","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-tag","(graph, tag)","<p>@macro action\n"],["tag","UncaughtThrowError","UncaughtThrowError.html#method-i-tag","()","<p>Return the tag object which was called for.\n"],["taint","Pathname","Pathname.html#method-i-taint","()","<p>Returns pathname.  This method is deprecated and will be removed in Ruby 3.2.\n"],["take","Array","Array.html#method-i-take","(p1)","<p>Returns a new Array containing the first <code>n</code> element of <code>self</code>, where <code>n</code> is a non-negative Integer; does not …\n"],["take","Enumerable","Enumerable.html#method-i-take","(p1)","<p>For non-negative integer <code>n</code>, returns the first <code>n</code> elements:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">r</span> = (<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>)\n<span class=\"ruby-identifier\">r</span>.<span class=\"ruby-identifier\">take</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-comment\"># =&gt; [1, 2]</span>\n<span class=\"ruby-identifier\">r</span>.<span class=\"ruby-identifier\">take</span>(<span class=\"ruby-value\">0</span>) <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["take","Enumerator::Lazy","Enumerator/Lazy.html#method-i-take","(p1)","<p>Like Enumerable#take, but chains operation to be lazy-evaluated.\n"],["take","Ractor","Ractor.html#method-i-take","()","<p>Take a message from ractor’s outgoing port, which was put there by Ractor.yield or at ractor’s …\n"],["take","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-take","(tuple, sec=nil, &block)","<p>Removes <code>tuple</code>\n"],["take","Rinda::TupleSpaceProxy","Rinda/TupleSpaceProxy.html#method-i-take","(tuple, sec=nil, &block)","<p>Takes <code>tuple</code> from the proxied TupleSpace.  See TupleSpace#take.\n"],["take_range","Reline::Unicode","Reline/Unicode.html#method-c-take_range","(str, start_col, max_width, encoding = str.encoding)","<p>Take a chunk of a String cut by width with escape sequences.\n"],["take_while","Array","Array.html#method-i-take_while","()","<p>Returns a new Array containing zero or more leading elements of <code>self</code>; does not modify <code>self</code>.\n<p>With a block …\n"],["take_while","Enumerable","Enumerable.html#method-i-take_while","()","<p>Calls the block with successive elements as long as the block returns a truthy value; returns an array …\n"],["take_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-take_while","()","<p>Like Enumerable#take_while, but chains operation to be lazy-evaluated.\n"],["take_while_including","SyntaxSuggest::CleanDocument","SyntaxSuggest/CleanDocument.html#method-i-take_while_including","(range = 0..-1)","<p>Helper method for grabbing elements from document\n<p>Like ‘take_while` except when it stops iterating, it …\n"],["tally","Enumerable","Enumerable.html#method-i-tally","(*args)","<p>Returns a hash containing the counts of equal elements:\n<p>Each key is an element of <code>self</code>.\n<p>Each value is the …\n"],["tan","Math","Math.html#method-c-tan","(p1)","<p>Returns the tangent of <code>x</code> in radians.\n<p>Domain: <code>(-INFINITY, INFINITY)</code>.\n<p>Range: <code>(-INFINITY, INFINITY)</code>.\n"],["tanh","Math","Math.html#method-c-tanh","(p1)","<p>Returns the hyperbolic tangent of <code>x</code> in radians.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[-1, 1]</code>.\n"],["tap","Kernel","Kernel.html#method-i-tap","()","<p>Yields self to the block, and then returns self. The primary purpose of this method is to “tap into” …\n"],["target_bin_path","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-target_bin_path","(bin_dir, bin_file)",""],["target_respond_to?","Delegator","Delegator.html#method-i-target_respond_to-3F","(target, m, include_private)","<p>Handle BasicObject instances\n"],["tcp","Addrinfo","Addrinfo.html#method-c-tcp","(p1, p2)","<p>returns an addrinfo object for TCP address.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-string\">&quot;smtp&quot;</span>) <span class=\"ruby-comment\">#=&gt; #&lt;Addrinfo: 127.0.0.1:25 ...</span>\n</pre>\n"],["tcp","Socket","Socket.html#method-c-tcp","(host, port, local_host = nil, local_port = nil, connect_timeout: nil, resolv_timeout: nil)","<p>creates a new socket object connected to host:port using TCP/IP.\n<p>If local_host:local_port is given, the …\n"],["tcp_server_loop","Socket","Socket.html#method-c-tcp_server_loop","(host=nil, port)","<p>creates a TCP/IP server on <em>port</em> and calls the block for each connection accepted. The block is called …\n"],["tcp_server_sockets","Socket","Socket.html#method-c-tcp_server_sockets","(host=nil, port)","<p>creates TCP/IP server sockets for <em>host</em> and <em>port</em>. <em>host</em> is optional.\n<p>If no block given, it returns an array …\n"],["tell","ARGF","ARGF.html#method-i-tell","()","<p>Returns the current offset (in bytes) of the current file in ARGF.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["tell","Dir","Dir.html#method-i-tell","()","<p>Returns the current position in <em>dir</em>. See also Dir#seek.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">tell</span>   <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">read</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["tell","IO","IO.html#method-i-tell","()","<p>Returns the current position (in bytes) in <code>self</code> (see Position):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">tell</span> <span class=\"ruby-comment\"># =&gt; 0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["tell","StringIO","StringIO.html#method-i-tell","()","<p>Returns the current position (in bytes); see Position.\n<p>StringIO#tell is an alias for StringIO#pos.\n"],["tell","Zlib::GzipReader","Zlib/GzipReader.html#method-i-tell","()","<p>Total number of output bytes output so far.\n"],["tell","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-tell","()","<p>Total number of input bytes read so far.\n"],["template_dir_for","RDoc::Options","RDoc/Options.html#method-i-template_dir_for","(template)","<p>Finds the template dir for <code>template</code>\n"],["term=","Racc::Sym","Racc/Sym.html#method-i-term-3D","(t)",""],["terminal","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-terminal","(o)",""],["terminal?","Racc::Sym","Racc/Sym.html#method-i-terminal-3F","()",""],["terminals","Racc::SymbolTable","Racc/SymbolTable.html#method-i-terminals","(&block)",""],["terminate","GetoptLong","GetoptLong.html#method-i-terminate","()","<p>Terminate option processing; returns <code>nil</code> if processing has already terminated; otherwise returns <code>self</code> …\n"],["terminate","OptionParser","OptionParser.html#method-i-terminate","(arg = nil)","<p>Terminates option parsing. Optional parameter <code>arg</code> is a string pushed back to be the first non-option …\n"],["terminate","OptionParser","OptionParser.html#method-c-terminate","(arg = nil)",""],["terminate","StringScanner","StringScanner.html#method-i-terminate","()","<p>Sets the scan pointer to the end of the string and clear matching data.\n"],["terminate","Thread","Thread.html#method-i-terminate","()","<p>Terminates <code>thr</code> and schedules another thread to be run, returning the terminated Thread.  If this is the …\n"],["terminate_interaction","Gem::MockGemUi","Gem/MockGemUi.html#method-i-terminate_interaction","(status=0)",""],["terminate_interaction","Gem::StreamUI","Gem/StreamUI.html#method-i-terminate_interaction","(status = 0)","<p>Terminate the application with exit code <code>status</code>, running any exit handlers that might have been defined. …\n"],["terminate_interaction","Gem::UserInteraction","Gem/UserInteraction.html#method-i-terminate_interaction","(exit_code = 0)","<p>Terminates the RubyGems process with the given <code>exit_code</code>\n"],["terminated?","Gem::MockGemUi","Gem/MockGemUi.html#method-i-terminated-3F","()",""],["terminated?","GetoptLong","GetoptLong.html#method-i-terminated-3F","()","<p>Returns <code>true</code> if option processing has terminated, <code>false</code> otherwise.\n"],["termsig","Process::Status","Process/Status.html#method-i-termsig","()","<p>Returns the number of the signal that caused <em>stat</em> to terminate (or <code>nil</code> if self was not terminated by …\n"],["test","Kernel","Kernel.html#method-i-test","(*args)","<p>Uses the character <code>cmd</code> to perform various tests on <code>file1</code> (first table below) or on <code>file1</code> and <code>file2</code> (second …\n"],["text","IRB::ColorPrinter","IRB/ColorPrinter.html#method-i-text","(str, width = nil)",""],["text","PrettyPrint","PrettyPrint.html#method-i-text","(obj, width=obj.length)","<p>This adds <code>obj</code> as a text of <code>width</code> columns in width.\n<p>If <code>width</code> is not specified, obj.length is used.\n"],["text","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-text","(obj, width=nil)","<p>Add <code>obj</code> to the text to be output.\n<p><code>width</code> argument is here for compatibility. It is a noop argument.\n"],["text=","RDoc::Comment","RDoc/Comment.html#method-i-text-3D","(text)","<p>Replaces this comment’s text with <code>text</code> and resets the parsed document.\n<p>An error is raised if the comment …\n"],["text?","RDoc::TopLevel","RDoc/TopLevel.html#method-i-text-3F","()","<p>Is this TopLevel from a text file instead of a source code file?\n"],["text_field","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-text_field","(name = \"\", value = nil, size = 40, maxlength = nil)","<p>Generate a text field Input element, as a String.\n<p><code>name</code> is the name of the input field.  <code>value</code> is its initial …\n"],["textarea","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-textarea","(name = \"\", cols = 70, rows = 10)","<p>Generate a TextArea element, as a String.\n<p><code>name</code> is the name of the textarea.  <code>cols</code> is the number of columns …\n"],["then","Kernel","Kernel.html#method-i-then","()","<p>Yields self to the block and returns the result of the block.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">next</span>.<span class=\"ruby-identifier\">then</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">x</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">x</span><span class=\"ruby-operator\">**</span><span class=\"ruby-identifier\">x</span> }.<span class=\"ruby-identifier\">to_s</span>            <span class=\"ruby-operator\">...</span>\n</pre>\n"],["this","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-this","()",""],["this_update","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-this_update","()",""],["thread","DRb","DRb.html#method-c-thread","()","<p>Get the thread of the primary server.\n<p>This returns nil if there is no primary server.  See #primary_server …\n"],["thread","DRb","DRb.html#method-i-thread","()","<p>Get the thread of the primary server.\n<p>This returns nil if there is no primary server.  See #primary_server …\n"],["thread","IRB::JobManager","IRB/JobManager.html#method-i-thread","(key)","<p>Returns the thread for the given <code>key</code> object, see #search for more information.\n"],["thread_variable?","Thread","Thread.html#method-i-thread_variable-3F","(p1)","<p>Returns <code>true</code> if the given string (or symbol) exists as a thread-local variable.\n\n<pre>me = Thread.current\nme.thread_variable_set(:oliver, ...</pre>\n"],["thread_variable_get","Thread","Thread.html#method-i-thread_variable_get","(p1)","<p>Returns the value of a thread local variable that has been set.  Note that these are different than fiber …\n"],["thread_variable_set","Thread","Thread.html#method-i-thread_variable_set","(p1, p2)","<p>Sets a thread local with <code>key</code> to <code>value</code>.  Note that these are local to threads, and not to fibers.  Please …\n"],["thread_variables","Thread","Thread.html#method-i-thread_variables","()","<p>Returns an array of the names of the thread-local variables (as Symbols).\n\n<pre>thr = Thread.new do\n  Thread.current.thread_variable_set(:cat, ...</pre>\n"],["throw","Kernel","Kernel.html#method-i-throw","(p1, p2 = v2)","<p>Transfers control to the end of the active <code>catch</code> block waiting for <em>tag</em>. Raises <code>UncaughtThrowError</code> if …\n"],["thursday?","Date","Date.html#method-i-thursday-3F","()","<p>Returns <code>true</code> if <code>self</code> is a Thursday, <code>false</code> otherwise.\n"],["thursday?","Time","Time.html#method-i-thursday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Thursday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">6</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-06 ...</span>\n</pre>\n"],["tigetflag","Reline::Terminfo","Reline/Terminfo.html#method-c-tigetflag","(capname)",""],["tigetnum","Reline::Terminfo","Reline/Terminfo.html#method-c-tigetnum","(capname)",""],["tigetstr","Reline::Terminfo","Reline/Terminfo.html#method-c-tigetstr","(capname)",""],["time","Gem","Gem.html#method-c-time","(msg, width = 0, display = Gem.configuration.verbose)","<p>Prints the amount of time the supplied block takes to run using the debug UI output.\n"],["time","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-time","()","<p>Returns the time at which the session was established.\n"],["time","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-time","()",""],["time2wtime","Win32::Registry","Win32/Registry.html#method-c-time2wtime","(time)","<p>Convert Time object or Integer object into 64-bit FILETIME.\n"],["time=","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-time-3D","(p1)","<p>Sets start time of the session. Time resolution is in seconds.\n"],["time=","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-time-3D","(p1)",""],["time=","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-time-3D","(p1)","<p>Sets the time to be used in the certificate verifications with the store. By default, if not specified, …\n"],["time=","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-time-3D","(p1)","<p>Sets the time used in the verification. If not set, the current time is used.\n<p>See also the man page X509_VERIFY_PARAM_set_time …\n"],["timeout","IO","IO.html#method-i-timeout","()","<p>Get the internal timeout duration or nil if it was not set.\n"],["timeout","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-timeout","()","<p>Returns the timeout value set for the session, in seconds from the established time.\n"],["timeout","Regexp","Regexp.html#method-c-timeout","()","<p>It returns the current default timeout interval for Regexp matching in second. <code>nil</code> means no default timeout …\n"],["timeout","Regexp","Regexp.html#method-i-timeout","()","<p>It returns the timeout interval for Regexp matching in second. <code>nil</code> means no default timeout configuration. …\n"],["timeout","Timeout","Timeout.html#method-i-timeout","(sec, klass = nil, message = nil)","<p>Perform an operation in a block, raising an error if it takes longer than <code>sec</code> seconds to complete.\n<p><code>sec</code> … &mdash; "],["timeout","Timeout","Timeout.html#method-c-timeout","(sec, klass = nil, message = nil)","<p>Perform an operation in a block, raising an error if it takes longer than <code>sec</code> seconds to complete.\n<p><code>sec</code> … &mdash; "],["timeout=","IO","IO.html#method-i-timeout-3D","(p1)","<p>Set the internal timeout to the specified duration or nil. The timeout applies to all blocking operations …\n"],["timeout=","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-timeout-3D","(p1)","<p>Sets how long until the session expires in seconds.\n"],["timeout=","Regexp","Regexp.html#method-c-timeout-3D","(p1)","<p>It sets the default timeout interval for Regexp matching in second. <code>nil</code> means no default timeout configuration. …\n"],["timeout_after","Fiber::Scheduler","Fiber/Scheduler.html#method-i-timeout_after","(p1, p2, p3)","<p>Invoked by Timeout.timeout to execute the given <code>block</code> within the given <code>duration</code>. It can also be invoked …\n"],["timeouts=","Resolv::DNS","Resolv/DNS.html#method-i-timeouts-3D","(values)","<p>Sets the resolver timeouts.  This may be a single positive number or an array of positive numbers representing …\n"],["times","Integer","Integer.html#method-i-times","()","<p>Calls the given block <code>self</code> times with each integer in <code>(0..self-1)</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = []\n<span class=\"ruby-value\">5</span>.<span class=\"ruby-identifier\">times</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">i</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">push</span>(<span class=\"ruby-identifier\">i</span>) } <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["times","Process","Process.html#method-c-times","()","<p>Returns a <code>Tms</code> structure (see Process::Tms) that contains user and system CPU times for this process, …\n"],["timestamp","Socket::AncillaryData","Socket/AncillaryData.html#method-i-timestamp","()","<p>returns the timestamp as a time object.\n<p><em>ancillarydata</em> should be one of following type:\n<p>SOL_SOCKET/SCM_TIMESTAMP …\n"],["tiparm","Reline::Terminfo","Reline/Terminfo.html#method-c-tiparm","(str, *args)",""],["tiparm","Reline::Terminfo::StringWithTiparm","Reline/Terminfo/StringWithTiparm.html#method-i-tiparm","(*args)",""],["title","RDoc::Store","RDoc/Store.html#method-i-title","()","<p>Gets the title for this RDoc store.  This is used as the title in each page on the RDoc server\n"],["title=","RDoc::Store","RDoc/Store.html#method-i-title-3D","(title)","<p>Sets the title page for this RDoc store.\n"],["tk_nl?","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-tk_nl-3F","(tk)",""],["tmp","Bundler","Bundler.html#method-c-tmp","(name = Process.pid.to_s)",""],["tmp_dh=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-tmp_dh-3D","(p1)","<p>Sets DH parameters used for ephemeral DH key exchange. This is relevant for servers only.\n<p><code>pkey</code> is an instance …\n"],["tmp_dh_callback","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-tmp_dh_callback","()",""],["tmp_home_path","Bundler","Bundler.html#method-c-tmp_home_path","()",""],["tmp_key","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-tmp_key","()","<p>Returns the ephemeral key used in case of forward secrecy cipher.\n"],["tmpdir","Dir","Dir.html#method-c-tmpdir","()","<p>Returns the operating system’s temporary file path.\n"],["to=","URI::MailTo","URI/MailTo.html#method-i-to-3D","(v)","<p>Setter for to <code>v</code>.\n"],["to_a","ARGF","ARGF.html#method-i-to_a","(*args)","<p>Reads each file in ARGF in its entirety, returning an Array containing lines from the files. Lines are …\n"],["to_a","Array","Array.html#method-i-to_a","()","<p>When <code>self</code> is an instance of Array, returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">to_a</span> <span class=\"ruby-comment\"># =&gt; [:foo, &quot;bar&quot;, 2]</span>\n</pre>\n<p>Otherwise …\n"],["to_a","Benchmark::Tms","Benchmark/Tms.html#method-i-to_a","()","<p>Returns a new 6-element array, consisting of the label, user CPU time, system CPU time, children’s …\n"],["to_a","CSV::Table","CSV/Table.html#method-i-to_a","()","<p>Returns the table as an Array of Arrays; the headers are in the first row:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;Name,Value\\nfoo,0\\nbar,1\\nbaz,2\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_a","ENV","ENV.html#method-c-to_a","()","<p>Returns the contents of ENV as an Array of 2-element Arrays, each of which is a name/value pair:\n\n<pre>ENV.replace(&#39;foo&#39; ...</pre>\n"],["to_a","Enumerable","Enumerable.html#method-i-to_a","(*args)","<p>Returns an array containing the items in <code>self</code>:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">0</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">to_a</span> <span class=\"ruby-comment\"># =&gt; [0, 1, 2, 3, 4]</span>\n</pre>\n<p>Enumerable#entries is an …\n"],["to_a","Enumerator::Lazy","Enumerator/Lazy.html#method-i-to_a","()","<p>Expands <code>lazy</code> enumerator to an array. See Enumerable#to_a.\n"],["to_a","Gem::List","Gem/List.html#method-i-to_a","()",""],["to_a","Gem::NameTuple","Gem/NameTuple.html#method-i-to_a","()","<p>Convert back to the [name, version, platform] tuple\n"],["to_a","Gem::Platform","Gem/Platform.html#method-i-to_a","()",""],["to_a","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-to_a","()",""],["to_a","Gem::SourceList","Gem/SourceList.html#method-i-to_a","()","<p>Returns an Array of source URI Strings.\n"],["to_a","Hash","Hash.html#method-i-to_a","()","<p>Returns a new Array of 2-element Array objects; each nested Array contains a key-value pair from <code>self</code> …\n"],["to_a","MatchData","MatchData.html#method-i-to_a","()","<p>Returns the array of matches:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; #&lt;MatchData &quot;HX1138&quot; 1:&quot;H&quot; ...</span>\n</pre>\n"],["to_a","NilClass","NilClass.html#method-i-to_a","()","<p>Always returns an empty array.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_a</span>   <span class=\"ruby-comment\">#=&gt; []</span>\n</pre>\n"],["to_a","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-to_a","()",""],["to_a","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-to_a","()","<p>Returns an Array representation of the distinguished name suitable for passing to ::new\n"],["to_a","OptionParser","OptionParser.html#method-i-to_a","()","<p>Returns option summary list.\n"],["to_a","Racc::ISet","Racc/ISet.html#method-i-to_a","()",""],["to_a","Range","Range.html#method-i-to_a","()","<p>Returns an array containing the elements in <code>self</code>, if a finite collection; raises an exception otherwise. …\n"],["to_a","Rinda::RingFinger","Rinda/RingFinger.html#method-c-to_a","()","<p>Contains all discovered TupleSpaces except for the primary.\n"],["to_a","Rinda::RingFinger","Rinda/RingFinger.html#method-i-to_a","()","<p>Contains all discovered TupleSpaces except for the primary.\n"],["to_a","Ripper::Lexer::Elem","Ripper/Lexer/Elem.html#method-i-to_a","()",""],["to_a","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-to_a","()","<p>Returns an Array with 14 elements representing the instruction sequence with the following data:\n<p>magic … &mdash; "],["to_a","Set","Set.html#method-i-to_a","()","<p>Converts the set to an array. The order of elements is uncertain.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Set</span>[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>].<span class=\"ruby-identifier\">to_a</span>                    <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["to_a","Struct","Struct.html#method-i-to_a","()","<p>Returns the values in <code>self</code> as an array:\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["to_a","SyntaxSuggest::LexAll","SyntaxSuggest/LexAll.html#method-i-to_a","()",""],["to_a","SyntaxSuggest::PriorityEngulfQueue","SyntaxSuggest/PriorityEngulfQueue.html#method-i-to_a","()",""],["to_a","SyntaxSuggest::PriorityQueue","SyntaxSuggest/PriorityQueue.html#method-i-to_a","()",""],["to_a","Time","Time.html#method-i-to_a","()","<p>Returns a 10-element array of values representing <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">to_a</span>\n<span class=\"ruby-comment\"># =&gt; [0,   0,   0,  ...</span>\n</pre>\n"],["to_a","YAML::DBM","YAML/DBM.html#method-i-to_a","()","<p>Converts the contents of the database to an array of [key, value] arrays, and returns it.\n"],["to_ary","Array","Array.html#method-i-to_ary","()","<p>Returns <code>self</code>.\n"],["to_ary","Gem::SourceList","Gem/SourceList.html#method-i-to_ary","()",""],["to_basic","Gem::NameTuple","Gem/NameTuple.html#method-c-to_basic","(list)","<p>Turn an array of NameTuple objects back into an array of\n<p>name, version, platform &mdash; tuples.\n\n"],["to_binary","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-to_binary","(*args)","<p>Returns serialized iseq binary format data as a String object. A corresponding iseq object is created …\n"],["to_bn","Integer","Integer.html#method-i-to_bn","()","<p>Casts an Integer as an OpenSSL::BN\n<p>See ‘man bn` for more info.\n"],["to_bn","OpenSSL::BN","OpenSSL/BN.html#method-i-to_bn","()",""],["to_bn","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-to_bn","(conversion_form = group.point_conversion_form)","<p>Returns the octet string representation of the EC point as an instance of OpenSSL::BN.\n<p>If <em>conversion_form</em> …\n"],["to_c","Complex","Complex.html#method-i-to_c","()","<p>Returns self.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_c</span>      <span class=\"ruby-comment\">#=&gt; (2+0i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-8</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">to_c</span>  <span class=\"ruby-comment\">#=&gt; (-8+6i)</span>\n</pre>\n"],["to_c","NilClass","NilClass.html#method-i-to_c","()","<p>Returns zero as a complex.\n"],["to_c","Numeric","Numeric.html#method-i-to_c","()","<p>Returns the value as a complex.\n"],["to_c","String","String.html#method-i-to_c","()","<p>Returns a complex which denotes the string form.  The parser ignores leading whitespaces and trailing …\n"],["to_csv","CSV::Row","CSV/Row.html#method-i-to_csv","(**options)","<p>Returns the row as a CSV String. Headers are not included:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-string\">&quot;Name,Value\\nfoo,0\\nbar,1\\nbaz,2\\n&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_csv","CSV::Table","CSV/Table.html#method-i-to_csv","(write_headers: true, limit: nil, **options)","<p>Returns the table as CSV string. See Options for Generating.\n<p>Defaults option <code>write_headers</code> to <code>true</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_d","BigDecimal","BigDecimal.html#method-i-to_d","()","<p>Returns self.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal/util&#39;</span>\n\n<span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&quot;3.14&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">to_d</span>                       <span class=\"ruby-comment\"># =&gt; 0.314e1</span>\n</pre>\n"],["to_d","Complex","Complex.html#method-i-to_d","(*args)","<p>Returns the value as a BigDecimal.\n<p>The <code>precision</code> parameter is required for a rational complex number. …\n"],["to_d","Float","Float.html#method-i-to_d","(precision=0)","<p>Returns the value of <code>float</code> as a BigDecimal. The <code>precision</code> parameter is used to determine the number of …\n"],["to_d","Integer","Integer.html#method-i-to_d","()","<p>Returns the value of <code>int</code> as a BigDecimal.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal/util&#39;</span>\n\n<span class=\"ruby-value\">42</span>.<span class=\"ruby-identifier\">to_d</span>   <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["to_d","NilClass","NilClass.html#method-i-to_d","()","<p>Returns nil represented as a BigDecimal.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal/util&#39;</span>\n\n<span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_d</span>   <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["to_d","Rational","Rational.html#method-i-to_d","(precision)","<p>Returns the value as a BigDecimal.\n<p>The required <code>precision</code> parameter is used to determine the number of …\n"],["to_d","String","String.html#method-i-to_d","()","<p>Returns the result of interpreting leading characters in <code>str</code> as a BigDecimal.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_date","Date","Date.html#method-i-to_date","()","<p>Returns <code>self</code>.\n"],["to_date","DateTime","DateTime.html#method-i-to_date","()","<p>Returns a Date object which denotes self.\n"],["to_date","Time","Time.html#method-i-to_date","()","<p>Returns a Date object which denotes self.\n"],["to_datetime","Date","Date.html#method-i-to_datetime","()","<p>Returns a DateTime whose value is the same as <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">to_datetime</span> <span class=\"ruby-comment\"># =&gt; #&lt;DateTime: ...</span>\n</pre>\n"],["to_datetime","DateTime","DateTime.html#method-i-to_datetime","()","<p>Returns self.\n"],["to_datetime","Time","Time.html#method-i-to_datetime","()","<p>Returns a DateTime object which denotes self.\n"],["to_der","OpenSSL::ASN1::ASN1Data","OpenSSL/ASN1/ASN1Data.html#method-i-to_der","()","<p>Encodes this ASN1Data into a DER-encoded String value. The result is DER-encoded except for the possibility …\n"],["to_der","OpenSSL::ASN1::Constructive","OpenSSL/ASN1/Constructive.html#method-i-to_der","()","<p>See ASN1Data#to_der for details.\n"],["to_der","OpenSSL::ASN1::Primitive","OpenSSL/ASN1/Primitive.html#method-i-to_der","()","<p>See ASN1Data#to_der for details.\n"],["to_der","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-to_der","()","<p>Returns the DER encoding of this SPKI.\n"],["to_der","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-to_der","()","<p>Encodes this basic response into a DER-encoded string.\n"],["to_der","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-to_der","()","<p>Encodes this certificate identifier into a DER-encoded string.\n"],["to_der","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-to_der","()","<p>Returns this request as a DER-encoded string\n"],["to_der","OpenSSL::OCSP::Response","OpenSSL/OCSP/Response.html#method-i-to_der","()","<p>Returns this response as a DER-encoded string.\n"],["to_der","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-to_der","()","<p>Encodes this SingleResponse into a DER-encoded string.\n"],["to_der","OpenSSL::PKCS12","OpenSSL/PKCS12.html#method-i-to_der","()",""],["to_der","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-to_der","()",""],["to_der","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-to_der","()","<p>Encodes this DH to its DER encoding. Note that any existing per-session public/private keys will <strong>not</strong> …\n"],["to_der","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-to_der","()","<p>Encodes this DSA to its DER encoding.\n"],["to_der","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-to_der","()","<p>See the OpenSSL documentation for i2d_ECPrivateKey_bio()\n"],["to_der","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-to_der","()","<p>See the OpenSSL documentation for i2d_ECPKParameters_bio()\n"],["to_der","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-to_der","()","<p>Outputs this keypair in DER encoding.\n"],["to_der","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-to_der","()","<p>Returns an ASN1 encoded String that contains the Session object.\n"],["to_der","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-i-to_der","()","<p>DER-encodes this Request.\n"],["to_der","OpenSSL::Timestamp::Response","OpenSSL/Timestamp/Response.html#method-i-to_der","()","<p>Returns the Response in DER-encoded form.\n"],["to_der","OpenSSL::Timestamp::TokenInfo","OpenSSL/Timestamp/TokenInfo.html#method-i-to_der","()","<p>Returns the TokenInfo in DER-encoded form.\n"],["to_der","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-to_der","()","<p>Converts the name to DER encoding\n"],["to_der","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-to_der","()",""],["to_digits","BigDecimal","BigDecimal.html#method-i-to_digits","()","<p>Converts a BigDecimal to a String of the form “nnnnnn.mmm”. This method is deprecated; use …\n"],["to_dot","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-to_dot","(options = {})","<p>@param [Hash] options options for dot output. @return [String] Returns a dot format representation of …\n"],["to_enum","Enumerator::Lazy","Enumerator/Lazy.html#method-i-to_enum","(*args)","<p>Similar to Object#to_enum, except it returns a lazy enumerator. This makes it easy to define Enumerable …\n"],["to_enum","Object","Object.html#method-i-to_enum","(*args)","<p>Creates a new Enumerator which will enumerate by calling <code>method</code> on <code>obj</code>, passing <code>args</code> if any. What was …\n"],["to_f","BigDecimal","BigDecimal.html#method-i-to_f","()","<p>Returns a new Float object having approximately the same value as the BigDecimal number. Normal accuracy …\n"],["to_f","Complex","Complex.html#method-i-to_f","()","<p>Returns the value as a float if possible (the imaginary part should be exactly zero).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0</span>).<span class=\"ruby-identifier\">to_f</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_f","Float","Float.html#method-i-to_f","()","<p>Since <code>float</code> is already a Float, returns <code>self</code>.\n"],["to_f","Integer","Integer.html#method-i-to_f","()","<p>Converts <code>self</code> to a Float:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">to_f</span>  <span class=\"ruby-comment\"># =&gt; 1.0</span>\n<span class=\"ruby-value\">-1</span>.<span class=\"ruby-identifier\">to_f</span> <span class=\"ruby-comment\"># =&gt; -1.0</span>\n</pre>\n<p>If the value of <code>self</code> does not fit in a Float …\n"],["to_f","NilClass","NilClass.html#method-i-to_f","()","<p>Always returns zero.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_f</span>   <span class=\"ruby-comment\">#=&gt; 0.0</span>\n</pre>\n"],["to_f","Rational","Rational.html#method-i-to_f","()","<p>Returns the value as a Float.\n\n<pre>Rational(2).to_f      #=&gt; 2.0\nRational(9, 4).to_f   #=&gt; 2.25\nRational(-3, ...</pre>\n"],["to_f","String","String.html#method-i-to_f","()","<p>Returns the result of interpreting leading characters in <code>self</code> as a Float:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;3.14159&#39;</span>.<span class=\"ruby-identifier\">to_f</span>  <span class=\"ruby-comment\"># =&gt; 3.14159 ...</span>\n</pre>\n"],["to_f","Time","Time.html#method-i-to_f","()","<p>Returns the value of <code>self</code> as a Float number Epoch seconds; subseconds are included.\n<p>The stored value of …\n"],["to_fullpath","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-to_fullpath","(path)","<p>Full path of the target library file. If the file is not in this gem, return nil.\n"],["to_h","Array","Array.html#method-i-to_h","()","<p>Returns a new Hash formed from <code>self</code>.\n<p>When a block is given, calls the block with each array element; the …\n"],["to_h","Benchmark::Tms","Benchmark/Tms.html#method-i-to_h","()","<p>Returns a hash containing the same data as ‘to_a`.\n"],["to_h","CSV::Row","CSV/Row.html#method-i-to_h","()","<p>Returns the new Hash formed by adding each header-value pair in <code>self</code> as a key-value pair in the Hash …\n"],["to_h","Data","Data.html#method-i-to_h","()","<p>Returns Hash representation of the data object.\n\n<pre>Measure = Data.define(:amount, :unit)\ndistance = Measure[10, ...</pre>\n"],["to_h","ENV","ENV.html#method-c-to_h","()","<p>With no block, returns a Hash containing all name/value pairs from ENV:\n\n<pre>ENV.replace(&#39;foo&#39; =&gt; &#39;0&#39;, &#39;bar&#39; ...</pre>\n"],["to_h","Enumerable","Enumerable.html#method-i-to_h","(*args)","<p>When <code>self</code> consists of 2-element arrays, returns a hash each of whose entries is the key-value pair formed …\n"],["to_h","Fiddle::CStruct","Fiddle/CStruct.html#method-i-to_h","()",""],["to_h","Hash","Hash.html#method-i-to_h","()","<p>For an instance of Hash, returns <code>self</code>.\n<p>For a subclass of Hash, returns a new Hash containing the content …\n"],["to_h","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-to_h","()","<p>Returns the configuration instance variables as a hash, that can be passed to the configure method.\n"],["to_h","NilClass","NilClass.html#method-i-to_h","()","<p>Always returns an empty hash.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_h</span>   <span class=\"ruby-comment\">#=&gt; {}</span>\n</pre>\n"],["to_h","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-to_h","()",""],["to_h","OpenStruct","OpenStruct.html#method-i-to_h","(&block)",""],["to_h","Struct","Struct.html#method-i-to_h","()","<p>Returns a hash containing the name and value for each member:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Customer</span> = <span class=\"ruby-constant\">Struct</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:name</span>, <span class=\"ruby-value\">:address</span>, <span class=\"ruby-value\">:zip</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_h","WIN32OLE::Record","WIN32OLE/Record.html#method-i-to_h","()","<p>Returns Ruby Hash object which represents VT_RECORD variable. The keys of Hash object are member names …\n"],["to_hash","CSV::Row","CSV/Row.html#method-i-to_hash","()",""],["to_hash","ENV","ENV.html#method-c-to_hash","()","<p>Returns a Hash containing all name/value pairs from ENV:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">to_hash</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_hash","Hash","Hash.html#method-i-to_hash","()","<p>Returns <code>self</code>.\n"],["to_hash","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-to_hash","()","<p>Returns the configuration instance variables as a hash, that can be passed to the configure method.\n"],["to_hash","JSON::GenericObject","JSON/GenericObject.html#method-i-to_hash","()",""],["to_hash","Net::HTTPHeader","Net/HTTPHeader.html#method-i-to_hash","()","<p>Returns a hash of the key/value pairs:\n\n<pre>req = Net::HTTP::Get.new(uri)\nreq.to_hash\n# =&gt;\n{&quot;accept-encoding&quot;=&gt;[&quot;gzip;q=1.0,deflate;q=0.6,identity;q=0.3&quot;], ...</pre>\n"],["to_hash","YAML::DBM","YAML/DBM.html#method-i-to_hash","()","<p>Converts the contents of the database to an in-memory Hash object, and returns it.\n"],["to_html","RDoc::Text","RDoc/Text.html#method-i-to_html","(text)","<p>Converts ampersand, dashes, ellipsis, quotes, copyright and registered trademark symbols in <code>text</code> to properly …\n"],["to_html","RDoc::TokenStream","RDoc/TokenStream.html#method-c-to_html","(token_stream)","<p>Converts <code>token_stream</code> to HTML wrapping various tokens with <code>&lt;span&gt;</code> elements. Some tokens types are …\n"],["to_i","ARGF","ARGF.html#method-i-to_i","()","<p>Returns an integer representing the numeric file descriptor for the current file. Raises an ArgumentError …\n"],["to_i","BigDecimal","BigDecimal.html#method-i-to_i","()","<p>Returns the value as an Integer.\n<p>If the BigDecimal is infinity or NaN, raises FloatDomainError.\n"],["to_i","CSV","CSV.html#method-i-to_i","()",""],["to_i","Complex","Complex.html#method-i-to_i","()","<p>Returns the value as an integer if possible (the imaginary part should be exactly zero).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0</span>).<span class=\"ruby-identifier\">to_i</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_i","Fiddle::Closure","Fiddle/Closure.html#method-i-to_i","()","<p>Returns the memory address for this closure.\n"],["to_i","Fiddle::Function","Fiddle/Function.html#method-i-to_i","()","<p>The integer memory location of this function\n"],["to_i","Fiddle::Handle","Fiddle/Handle.html#method-i-to_i","()","<p>Returns the memory address for this handle.\n"],["to_i","Fiddle::Pointer","Fiddle/Pointer.html#method-i-to_i","()","<p>Returns the integer memory location of this pointer.\n"],["to_i","Float","Float.html#method-i-to_i","()","<p>Returns <code>self</code> truncated to an Integer.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1.2</span>.<span class=\"ruby-identifier\">to_i</span>    <span class=\"ruby-comment\"># =&gt; 1</span>\n(<span class=\"ruby-value\">-1.2</span>).<span class=\"ruby-identifier\">to_i</span> <span class=\"ruby-comment\"># =&gt; -1</span>\n</pre>\n<p>Note that the limited precision …\n"],["to_i","IO","IO.html#method-i-to_i","()","<p>Returns the integer file descriptor for the stream:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$stdin</span>.<span class=\"ruby-identifier\">fileno</span>             <span class=\"ruby-comment\"># =&gt; 0</span>\n<span class=\"ruby-identifier\">$stdout</span>.<span class=\"ruby-identifier\">fileno</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_i","IPAddr","IPAddr.html#method-i-to_i","()","<p>Returns the integer representation of the ipaddr.\n"],["to_i","Integer","Integer.html#method-i-to_i","()","<p>Since <code>int</code> is already an Integer, returns <code>self</code>.\n<p>#to_int is an alias for #to_i.\n"],["to_i","NilClass","NilClass.html#method-i-to_i","()","<p>Always returns zero.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_i</span>   <span class=\"ruby-comment\">#=&gt; 0</span>\n</pre>\n"],["to_i","OpenSSL::BN","OpenSSL/BN.html#method-i-to_i","()",""],["to_i","Process::Status","Process/Status.html#method-i-to_i","()","<p>Returns the bits in <em>stat</em> as an Integer. Poking around in these bits is platform dependent.\n\n<pre>fork { exit ...</pre>\n"],["to_i","Rational","Rational.html#method-i-to_i","()","<p>Returns the truncated value as an integer.\n<p>Equivalent to Rational#truncate.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">to_i</span>    <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["to_i","String","String.html#method-i-to_i","(*args)","<p>Returns the result of interpreting leading characters in <code>self</code> as an integer in the given <code>base</code> (which …\n"],["to_i","Time","Time.html#method-i-to_i","()","<p>Returns the value of <code>self</code> as integer Epoch seconds; subseconds are truncated (not rounded):\n\n<pre>Time.utc(1970, ...</pre>\n"],["to_id","DRb","DRb.html#method-c-to_id","(obj)","<p>Get a reference id for an object using the current server.\n<p>This raises a DRbServerNotFound error if there …\n"],["to_id","DRb","DRb.html#method-i-to_id","(obj)","<p>Get a reference id for an object using the current server.\n<p>This raises a DRbServerNotFound error if there …\n"],["to_id","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_id","(obj)","<p>Convert an object into a reference id.\n<p>This implementation returns the object’s __id__ in the local …\n"],["to_id","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_id","(obj)","<p>Convert an object into a reference id.\n<p>This implementation returns the object’s __id__ in the local …\n"],["to_id","DRb::DRbServer","DRb/DRbServer.html#method-i-to_id","(obj)","<p>Convert a local object to a dRuby reference.\n"],["to_int","BigDecimal","BigDecimal.html#method-i-to_int","()","<p>Returns the value as an Integer.\n<p>If the BigDecimal is infinity or NaN, raises FloatDomainError.\n"],["to_int","Fiddle::Pointer","Fiddle/Pointer.html#method-i-to_int","()","<p>Returns the integer memory location of this pointer.\n"],["to_int","Float","Float.html#method-i-to_int","()","<p>Returns <code>self</code> truncated to an Integer.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1.2</span>.<span class=\"ruby-identifier\">to_i</span>    <span class=\"ruby-comment\"># =&gt; 1</span>\n(<span class=\"ruby-value\">-1.2</span>).<span class=\"ruby-identifier\">to_i</span> <span class=\"ruby-comment\"># =&gt; -1</span>\n</pre>\n<p>Note that the limited precision …\n"],["to_int","Integer","Integer.html#method-i-to_int","()","<p>Since <code>int</code> is already an Integer, returns <code>self</code>.\n"],["to_int","Numeric","Numeric.html#method-i-to_int","()","<p>Returns <code>self</code> as an integer; converts using method <code>to_i</code> in the derived class.\n<p>Of the Core and Standard …\n"],["to_int","OpenSSL::BN","OpenSSL/BN.html#method-i-to_int","()",""],["to_io","ARGF","ARGF.html#method-i-to_io","()","<p>Returns an IO object representing the current file. This will be a File object unless the current file …\n"],["to_io","CSV","CSV.html#method-i-to_io","()",""],["to_io","IO","IO.html#method-i-to_io","()","<p>Returns <code>self</code>.\n"],["to_io","OpenSSL::SSL::SSLServer","OpenSSL/SSL/SSLServer.html#method-i-to_io","()","<p>Returns the TCPServer passed to the SSLServer when initialized.\n"],["to_io","Zlib::GzipFile","Zlib/GzipFile.html#method-i-to_io","()","<p>Same as IO.\n"],["to_json","BigDecimal","BigDecimal.html#method-i-to_json","(*args)","<p>return the JSON value\n"],["to_json","Complex","Complex.html#method-i-to_json","(*args)","<p>Stores class name (Complex) along with real value <code>r</code> and imaginary value <code>i</code> as JSON string\n"],["to_json","Date","Date.html#method-i-to_json","(*args)","<p>Stores class name (Date) with Julian year <code>y</code>, month <code>m</code>, day <code>d</code> and Day of Calendar Reform <code>sg</code> as JSON string …\n"],["to_json","DateTime","DateTime.html#method-i-to_json","(*args)","<p>Stores class name (DateTime) with Julian year <code>y</code>, month <code>m</code>, day <code>d</code>, hour <code>H</code>, minute <code>M</code>, second <code>S</code>, offset  …\n"],["to_json","Exception","Exception.html#method-i-to_json","(*args)","<p>Stores class name (Exception) with message <code>m</code> and backtrace array <code>b</code> as JSON string\n"],["to_json","JSON::GenericObject","JSON/GenericObject.html#method-i-to_json","(*a)",""],["to_json","OpenStruct","OpenStruct.html#method-i-to_json","(*args)","<p>Stores class name (OpenStruct) with this struct’s values <code>t</code> as a JSON string.\n"],["to_json","Psych","Psych.html#method-c-to_json","(object)","<p>Dump Ruby <code>object</code> to a JSON string.\n"],["to_json","Range","Range.html#method-i-to_json","(*args)","<p>Stores class name (Range) with JSON array of arguments <code>a</code> which include <code>first</code> (integer), <code>last</code> (integer), …\n"],["to_json","Rational","Rational.html#method-i-to_json","(*args)","<p>Stores class name (Rational) along with numerator value <code>n</code> and denominator value <code>d</code> as JSON string\n"],["to_json","Regexp","Regexp.html#method-i-to_json","(*args)","<p>Stores class name (Regexp) with options <code>o</code> and source <code>s</code> (Regexp or String) as JSON string\n"],["to_json","Set","Set.html#method-i-to_json","(*args)","<p>return the JSON value\n"],["to_json","Struct","Struct.html#method-i-to_json","(*args)","<p>Stores class name (Struct) with Struct values <code>v</code> as a JSON string. Only named structs are supported.\n"],["to_json","Symbol","Symbol.html#method-i-to_json","(*a)","<p>Stores class name (Symbol) with String representation of Symbol as a JSON string.\n"],["to_json","Time","Time.html#method-i-to_json","(*args)","<p>Stores class name (Time) with number of seconds since epoch and number of microseconds for Time as JSON …\n"],["to_mailtext","URI::MailTo","URI/MailTo.html#method-i-to_mailtext","()","<p>Returns the RFC822 e-mail text equivalent of the URL, as a String.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;uri&#39;</span>\n\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-string\">&quot;mailto:ruby-list@ruby-lang.org?Subject=subscribe&amp;cc=myaddr&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_name","Resolv::IPv4","Resolv/IPv4.html#method-i-to_name","()","<p>Turns this IPv4 address into a Resolv::DNS::Name.\n"],["to_name","Resolv::IPv6","Resolv/IPv6.html#method-i-to_name","()","<p>Turns this IPv6 address into a Resolv::DNS::Name.\n"],["to_obj","DRb","DRb.html#method-i-to_obj","(ref)","<p>Convert a reference into an object using the current server.\n<p>This raises a DRbServerNotFound error if …\n"],["to_obj","DRb","DRb.html#method-c-to_obj","(ref)","<p>Convert a reference into an object using the current server.\n<p>This raises a DRbServerNotFound error if …\n"],["to_obj","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_obj","(ref)","<p>Convert an object reference id to an object.\n<p>This implementation looks up the reference id in the local …\n"],["to_obj","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_obj","(ref)","<p>Convert an object reference id to an object.\n<p>This implementation looks up the reference id in the local …\n"],["to_obj","DRb::DRbServer","DRb/DRbServer.html#method-i-to_obj","(ref)","<p>Convert a dRuby reference to the local object it refers to.\n"],["to_octet_string","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-to_octet_string","(p1)","<p>Returns the octet string representation of the elliptic curve point.\n<p><em>conversion_form</em> specifies how the …\n"],["to_p","Win32::SSPI::Identity","Win32/SSPI/Identity.html#method-i-to_p","()",""],["to_p","Win32::SSPI::SecurityBuffer","Win32/SSPI/SecurityBuffer.html#method-i-to_p","()",""],["to_p","Win32::SSPI::SecurityHandle","Win32/SSPI/SecurityHandle.html#method-i-to_p","()",""],["to_p","Win32::SSPI::TimeStamp","Win32/SSPI/TimeStamp.html#method-i-to_p","()",""],["to_path","Dir","Dir.html#method-i-to_path","()","<p>Returns the path parameter passed to <em>dir</em>’s constructor.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;..&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">path</span>   <span class=\"ruby-comment\">#=&gt; &quot;..&quot;</span>\n</pre>\n"],["to_path","IO","IO.html#method-i-to_path","()","<p>Returns the path associated with the IO, or <code>nil</code> if there is no path associated with the IO. It is not …\n"],["to_path","Pathname","Pathname.html#method-i-to_path","()","<p>Return the path as a String.\n<p>to_path is implemented so Pathname objects are usable with File.open, etc. …\n"],["to_pem","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-to_pem","()","<p>Returns the PEM encoding of this SPKI.\n"],["to_pem","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-to_pem","()",""],["to_pem","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-to_pem","()","<p>Encodes this DH to its PEM encoding. Note that any existing per-session public/private keys will <strong>not</strong> …\n"],["to_pem","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-to_pem","(*args)","<p>Encodes this DSA to its PEM encoding.\n<p>Parameters\n<p><em>cipher</em> is an OpenSSL::Cipher.\n"],["to_pem","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-to_pem","(*args)","<p>Outputs the EC key in PEM encoding.  If <em>cipher</em> and <em>pass_phrase</em> are given they will be used to encrypt …\n"],["to_pem","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-to_pem","()","<p>See the OpenSSL documentation for PEM_write_bio_ECPKParameters()\n"],["to_pem","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-to_pem","(*args)","<p>Outputs this keypair in PEM encoding.  If <em>cipher</em> and <em>pass_phrase</em> are given they will be used to encrypt …\n"],["to_pem","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-to_pem","()","<p>Returns a PEM encoded String that contains the Session object.\n"],["to_pem","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-to_pem","()",""],["to_pem","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-to_pem","()",""],["to_pem","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-to_pem","()",""],["to_proc","Enumerator::Yielder","Enumerator/Yielder.html#method-i-to_proc","()","<p>Returns a Proc object that takes arguments and yields them.\n<p>This method is implemented so that a Yielder …\n"],["to_proc","Fiddle::Function","Fiddle/Function.html#method-i-to_proc","()","<p>Turn this function in to a proc\n"],["to_proc","Hash","Hash.html#method-i-to_proc","()","<p>Returns a Proc object that maps a key to its value:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">proc</span> = <span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">to_proc</span>\n<span class=\"ruby-identifier\">proc</span>.<span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_proc","Method","Method.html#method-i-to_proc","()","<p>Returns a Proc object corresponding to this method.\n"],["to_proc","Proc","Proc.html#method-i-to_proc","()","<p>Part of the protocol for converting objects to Proc objects. Instances of class Proc simply return themselves. …\n"],["to_proc","Symbol","Symbol.html#method-i-to_proc","()","<p>Returns a Proc object which calls the method with name of <code>self</code> on the first parameter and passes the …\n"],["to_ptr","Fiddle::Handle","Fiddle/Handle.html#method-i-to_ptr","()","<p>Returns the Fiddle::Pointer of this handle.\n"],["to_ptr","Fiddle::Pointer","Fiddle/Pointer.html#method-c-to_ptr","(p1)","<p>Get the underlying pointer for ruby object <code>val</code> and return it as a Fiddle::Pointer object.\n"],["to_ptr","Fiddle::StructArray","Fiddle/StructArray.html#method-i-to_ptr","()",""],["to_r","BigDecimal","BigDecimal.html#method-i-to_r","()","<p>Converts a BigDecimal to a Rational.\n"],["to_r","Complex","Complex.html#method-i-to_r","()","<p>Returns the value as a rational if possible (the imaginary part should be exactly zero).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0</span>).<span class=\"ruby-identifier\">to_r</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_r","Float","Float.html#method-i-to_r","()","<p>Returns the value as a rational.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span>.<span class=\"ruby-identifier\">to_r</span>    <span class=\"ruby-comment\">#=&gt; (2/1)</span>\n<span class=\"ruby-value\">2.5</span>.<span class=\"ruby-identifier\">to_r</span>    <span class=\"ruby-comment\">#=&gt; (5/2)</span>\n<span class=\"ruby-value\">-0.75</span>.<span class=\"ruby-identifier\">to_r</span>  <span class=\"ruby-comment\">#=&gt; (-3/4)</span>\n<span class=\"ruby-value\">0.0</span>.<span class=\"ruby-identifier\">to_r</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_r","Integer","Integer.html#method-i-to_r","()","<p>Returns the value as a rational.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">to_r</span>        <span class=\"ruby-comment\">#=&gt; (1/1)</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">&lt;&lt;</span><span class=\"ruby-value\">64</span>).<span class=\"ruby-identifier\">to_r</span>  <span class=\"ruby-comment\">#=&gt; (18446744073709551616/1)</span>\n</pre>\n"],["to_r","NilClass","NilClass.html#method-i-to_r","()","<p>Returns zero as a rational.\n"],["to_r","Rational","Rational.html#method-i-to_r","()","<p>Returns self.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_r</span>      <span class=\"ruby-comment\">#=&gt; (2/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">-8</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">to_r</span>  <span class=\"ruby-comment\">#=&gt; (-4/3)</span>\n</pre>\n"],["to_r","String","String.html#method-i-to_r","()","<p>Returns the result of interpreting leading characters in <code>str</code> as a rational.  Leading whitespace and extraneous …\n"],["to_r","Time","Time.html#method-i-to_r","()","<p>Returns the value of <code>self</code> as a Rational exact number of Epoch seconds;\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>.<span class=\"ruby-identifier\">to_r</span> <span class=\"ruby-comment\"># =&gt; (16571402750320203/10000000)</span>\n</pre>\n"],["to_range","IPAddr","IPAddr.html#method-i-to_range","()","<p>Creates a Range object for the network address.\n"],["to_request_set","Gem::AvailableSet","Gem/AvailableSet.html#method-i-to_request_set","(development = :none)","<p>Converts this AvailableSet into a RequestSet that can be used to install gems.\n<p>If <code>development</code> is :none …\n"],["to_rfc822text","URI::MailTo","URI/MailTo.html#method-i-to_rfc822text","()",""],["to_ruby","Gem::Specification","Gem/Specification.html#method-i-to_ruby","()","<p>Returns a Ruby code representation of this specification, such that it can be eval’ed and reconstruct …\n"],["to_ruby","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-to_ruby","(symbolize_names: false, freeze: false, strict_integer: false)","<p>Convert this node to Ruby.\n<p>See also Psych::Visitors::ToRuby\n"],["to_ruby_for_cache","Gem::Specification","Gem/Specification.html#method-i-to_ruby_for_cache","()","<p>Returns a Ruby lighter-weight code representation of this specification, used for indexing only.\n<p>See  …\n"],["to_s","ARGF","ARGF.html#method-i-to_s","()","<p>Returns “ARGF”.\n"],["to_s","Addrinfo","Addrinfo.html#method-i-to_s","()","<p>returns the socket address as packed struct sockaddr string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">to_sockaddr</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","Array","Array.html#method-i-to_s","()","<p>Returns the new String formed by calling method <code>#inspect</code> on each array element:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","Benchmark::Tms","Benchmark/Tms.html#method-i-to_s","()","<p>Same as #format.\n"],["to_s","BigDecimal","BigDecimal.html#method-i-to_s","(p1 = v1)","<p>Converts the value to a string.\n<p>The default format looks like  0.xxxxEnn.\n<p>The optional parameter s consists …\n"],["to_s","CGI::Cookie","CGI/Cookie.html#method-i-to_s","()","<p>Convert the Cookie to its string representation.\n"],["to_s","CSV::Row","CSV/Row.html#method-i-to_s","(**options)",""],["to_s","CSV::Table","CSV/Table.html#method-i-to_s","(write_headers: true, limit: nil, **options)",""],["to_s","Complex","Complex.html#method-i-to_s","()","<p>Returns the value as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_s</span>                       <span class=\"ruby-comment\">#=&gt; &quot;2+0i&quot;</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-string\">&#39;-8/6&#39;</span>).<span class=\"ruby-identifier\">to_s</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","Data","Data.html#method-i-to_s","()","<p>Returns a string representation of <code>self</code>:\n\n<pre>Measure = Data.define(:amount, :unit)\n\ndistance = Measure[10, ...</pre>\n"],["to_s","Date","Date.html#method-i-to_s","()","<p>Returns a string representation of the date in <code>self</code> in ISO 8601 extended date format (<code>&#39;%Y-%m-%d&#39;</code> …\n"],["to_s","DateTime","DateTime.html#method-i-to_s","()","<p>Returns a string in an ISO 8601 format. (This method doesn’t use the expanded representations.)\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>,<span class=\"ruby-value\">4</span>,<span class=\"ruby-value\">5</span>,<span class=\"ruby-value\">6</span>,<span class=\"ruby-string\">&#39;-7&#39;</span>).<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","DidYouMean::Correctable","DidYouMean/Correctable.html#method-i-to_s","()",""],["to_s","Digest::Instance","Digest/Instance.html#method-i-to_s","()","<p>Returns digest_obj.hexdigest().\n"],["to_s","ENV","ENV.html#method-c-to_s","()","<p>Returns String ‘ENV’:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;ENV&quot;</span>\n</pre>\n"],["to_s","Encoding","Encoding.html#method-i-to_s","()","<p>Returns the name of the encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">name</span>      <span class=\"ruby-comment\">#=&gt; &quot;UTF-8&quot;</span>\n</pre>\n"],["to_s","ErrorHighlight::CoreExt","ErrorHighlight/CoreExt.html#method-i-to_s","()",""],["to_s","Exception","Exception.html#method-i-to_s","()","<p>Returns exception’s message (or the name of the exception if no message is set).\n"],["to_s","FalseClass","FalseClass.html#method-i-to_s","()","<p>The string representation of <code>false</code> is “false”.\n"],["to_s","Fiber","Fiber.html#method-i-to_s","()",""],["to_s","Fiddle::Pointer","Fiddle/Pointer.html#method-i-to_s","(p1 = v1)","<p>Returns the pointer contents as a string.\n<p>When called with no arguments, this method will return the contents …\n"],["to_s","Float","Float.html#method-i-to_s","()","<p>Returns a string containing a representation of <code>self</code>; depending of the value of <code>self</code>, the string representation …\n"],["to_s","Gem::Platform","Gem/Platform.html#method-i-to_s","()",""],["to_s","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-to_s","()","<p>The contents of the lock file.\n"],["to_s","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-to_s","()",""],["to_s","Gem::Resolver::Molinillo::Resolver::Resolution::PossibilitySet","Gem/Resolver/Molinillo/Resolver/Resolution/PossibilitySet.html#method-i-to_s","()","<p>String representation of the possibility set, for debugging\n"],["to_s","Gem::Uri","Gem/Uri.html#method-i-to_s","()",""],["to_s","Gem::Version","Gem/Version.html#method-i-to_s","()",""],["to_s","Hash","Hash.html#method-i-to_s","()","<p>Returns a new String containing the hash entries:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># =&gt; &quot;{:foo=&gt;0, ...</span>\n</pre>\n"],["to_s","IO::Buffer","IO/Buffer.html#method-i-to_s","()","<p>Short representation of the buffer. It includes the address, size and symbolic flags. This format is …\n"],["to_s","IPAddr","IPAddr.html#method-i-to_s","()","<p>Returns a string containing the IP address representation.\n"],["to_s","Integer","Integer.html#method-i-to_s","(*args)","<p>Returns a string containing the place-value representation of <code>self</code> in radix <code>base</code> (in 2..36).\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12345</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","MatchData","MatchData.html#method-i-to_s","()","<p>Returns the matched string:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; #&lt;MatchData &quot;HX1138&quot; 1:&quot;H&quot; 2:&quot;X&quot; ...</span>\n</pre>\n"],["to_s","Method","Method.html#method-i-to_s","()","<p>Returns a human-readable description of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: ...</span>\n</pre>\n"],["to_s","Module","Module.html#method-i-to_s","()","<p>Returns a string representing this module or class. For basic classes and modules, this is the name. …\n"],["to_s","NilClass","NilClass.html#method-i-to_s","()","<p>Always returns the empty string.\n"],["to_s","Object","Object.html#method-i-to_s","()","<p>Returns a string representing <em>obj</em>. The default #to_s prints the object’s class and an encoding of …\n"],["to_s","OpenSSL::BN","OpenSSL/BN.html#method-i-to_s","(p1 = v1)","<p>Returns the string representation of the bignum.\n<p>BN.new can parse the encoded string to convert back into …\n"],["to_s","OpenSSL::Config","OpenSSL/Config.html#method-i-to_s","()","<p>Gets the parsable form of the current configuration.\n<p>Given the following configuration being created: …\n"],["to_s","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-to_s","()","<p>Returns the authentication code as a hex-encoded string. The <em>digest</em> parameter specifies the digest algorithm …\n"],["to_s","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-to_s","()","<p>Returns the PEM encoding of this SPKI.\n"],["to_s","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-to_s","()",""],["to_s","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-to_s","()","<p>Encodes this DH to its PEM encoding. Note that any existing per-session public/private keys will <strong>not</strong> …\n"],["to_s","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-to_s","(*args)","<p>Encodes this DSA to its PEM encoding.\n<p>Parameters\n<p><em>cipher</em> is an OpenSSL::Cipher.\n"],["to_s","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-to_s","(*args)","<p>Outputs this keypair in PEM encoding.  If <em>cipher</em> and <em>pass_phrase</em> are given they will be used to encrypt …\n"],["to_s","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-to_s","()",""],["to_s","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-to_s","()",""],["to_s","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-to_s","()",""],["to_s","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-to_s","(*args)","<p>Returns a String representation of the Distinguished Name. <em>format</em> is one of:\n<p>OpenSSL::X509::Name::COMPAT …\n"],["to_s","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-to_s","()",""],["to_s","OpenStruct","OpenStruct.html#method-i-to_s","()",""],["to_s","OptionParser","OptionParser.html#method-i-to_s","()",""],["to_s","OptionParser::ParseError","OptionParser/ParseError.html#method-i-to_s","()",""],["to_s","Pathname","Pathname.html#method-i-to_s","()","<p>Return the path as a String.\n<p>to_path is implemented so Pathname objects are usable with File.open, etc. …\n"],["to_s","Proc","Proc.html#method-i-to_s","()","<p>Returns the unique identifier for this proc, along with an indication of where the proc was defined. …\n"],["to_s","Process::Status","Process/Status.html#method-i-to_s","()","<p>Show pid and exit status as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">system</span>(<span class=\"ruby-string\">&quot;false&quot;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">$?</span>.<span class=\"ruby-identifier\">to_s</span>         <span class=\"ruby-comment\">#=&gt; &quot;pid 12766 exit 1&quot;</span>\n</pre>\n"],["to_s","Racc::Grammar","Racc/Grammar.html#method-i-to_s","()",""],["to_s","Racc::ISet","Racc/ISet.html#method-i-to_s","()",""],["to_s","Racc::LocationPointer","Racc/LocationPointer.html#method-i-to_s","()",""],["to_s","Racc::RRconflict","Racc/RRconflict.html#method-i-to_s","()",""],["to_s","Racc::Rule","Racc/Rule.html#method-i-to_s","()",""],["to_s","Racc::SRconflict","Racc/SRconflict.html#method-i-to_s","()",""],["to_s","Racc::SourceText","Racc/SourceText.html#method-i-to_s","()",""],["to_s","Racc::State","Racc/State.html#method-i-to_s","()",""],["to_s","Racc::States","Racc/States.html#method-i-to_s","()",""],["to_s","Racc::Sym","Racc/Sym.html#method-i-to_s","()",""],["to_s","Ractor","Ractor.html#method-i-to_s","()",""],["to_s","Range","Range.html#method-i-to_s","()","<p>Returns a string representation of <code>self</code>, including <code>begin.to_s</code> and <code>end.to_s</code>:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">to_s</span>  <span class=\"ruby-comment\"># =&gt; &quot;1..4&quot;</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">...</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","Rational","Rational.html#method-i-to_s","()","<p>Returns the value as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_s</span>      <span class=\"ruby-comment\">#=&gt; &quot;2/1&quot;</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">-8</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">to_s</span>  <span class=\"ruby-comment\">#=&gt; &quot;-4/3&quot;</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-string\">&#39;1/2&#39;</span>).<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","Regexp","Regexp.html#method-i-to_s","()","<p>Returns a string showing the options and string of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">r0</span> = <span class=\"ruby-regexp\">/ab+c/ix</span>\n<span class=\"ruby-identifier\">s0</span> = <span class=\"ruby-identifier\">r0</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;(?ix-m:ab+c)&quot;</span>\n</pre>\n"],["to_s","Reline::History","Reline/History.html#method-i-to_s","()",""],["to_s","Resolv::DNS::Name","Resolv/DNS/Name.html#method-i-to_s","()","<p>returns the domain name as a string.\n<p>The domain name doesn’t have a trailing dot even if the name …\n"],["to_s","Ripper::Lexer::Elem","Ripper/Lexer/Elem.html#method-i-to_s","()",""],["to_s","Set","Set.html#method-i-to_s","()",""],["to_s","Socket::Option","Socket/Option.html#method-i-to_s","()","<p>returns the socket option data as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Option</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:INET6</span>, <span class=\"ruby-value\">:IPV6</span>, <span class=\"ruby-value\">:RECVPKTINFO</span>, [<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">pack</span>(<span class=\"ruby-string\">&quot;i!&quot;</span>)).<span class=\"ruby-identifier\">data</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","String","String.html#method-i-to_s","()","<p>Returns <code>self</code> if <code>self</code> is a String, or <code>self</code> converted to a String if <code>self</code> is a subclass of String.\n<p>String#to_str …\n"],["to_s","Struct","Struct.html#method-i-to_s","()","<p>Returns a string representation of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Customer</span> = <span class=\"ruby-constant\">Struct</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:name</span>, <span class=\"ruby-value\">:address</span>, <span class=\"ruby-value\">:zip</span>) <span class=\"ruby-comment\"># =&gt; Customer</span>\n<span class=\"ruby-identifier\">joe</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","Symbol","Symbol.html#method-i-to_s","()","<p>Returns a string representation of <code>self</code> (not including the leading colon):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:foo</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;foo&quot;</span>\n</pre>\n<p>Symbol#id2name …\n"],["to_s","SyntaxSuggest::CleanDocument","SyntaxSuggest/CleanDocument.html#method-i-to_s","()","<p>Renders the document back to a string\n"],["to_s","SyntaxSuggest::CodeBlock","SyntaxSuggest/CodeBlock.html#method-i-to_s","()",""],["to_s","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-i-to_s","()","<p>Renders the given line\n<p>Also allows us to represent source code as an array of code lines.\n<p>When we have …\n"],["to_s","Thread","Thread.html#method-i-to_s","()","<p>Dump the name, id, and status of <em>thr</em> to a string.\n"],["to_s","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-to_s","()","<p>Returns a Kernel#caller style string representing this frame.\n"],["to_s","Time","Time.html#method-i-to_s","()","<p>Returns a string representation of <code>self</code>, without subseconds:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">12</span>, <span class=\"ruby-value\">31</span>, <span class=\"ruby-value\">23</span>, <span class=\"ruby-value\">59</span>, <span class=\"ruby-value\">59</span>, <span class=\"ruby-value\">0.5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","TrueClass","TrueClass.html#method-i-to_s","()","<p>The string representation of <code>true</code> is “true”.\n"],["to_s","URI::FTP","URI/FTP.html#method-i-to_s","()","<p>Returns a String representation of the URI::FTP.\n"],["to_s","URI::Generic","URI/Generic.html#method-i-to_s","()","<p>Constructs String from URI.\n"],["to_s","URI::MailTo","URI/MailTo.html#method-i-to_s","()","<p>Constructs String from URI.\n"],["to_s","UnboundMethod","UnboundMethod.html#method-i-to_s","()","<p>Returns a human-readable description of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: ...</span>\n</pre>\n"],["to_s","UncaughtThrowError","UncaughtThrowError.html#method-i-to_s","()","<p>Returns formatted message with the inspected tag.\n"],["to_s","WIN32OLE::Method","WIN32OLE/Method.html#method-i-to_s","()","<p>Returns the name of the method.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Workbook&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","WIN32OLE::Param","WIN32OLE/Param.html#method-i-to_s","()","<p>Returns name.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbook&#39;)\nmethod = WIN32OLE_METHOD.new(tobj, ...</pre>\n"],["to_s","WIN32OLE::Type","WIN32OLE/Type.html#method-i-to_s","()","<p>Returns OLE type name.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Application&#39;</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-i-to_s","()","<p>Returns the type library name.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tlib</span> = <span class=\"ruby-constant\">WIN32OLE_TYPELIB</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>)\n<span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","WIN32OLE::Variable","WIN32OLE/Variable.html#method-i-to_s","()","<p>Returns the name of variable.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;XlSheetType&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","Win32::SSPI::SSPIResult","Win32/SSPI/SSPIResult.html#method-i-to_s","()",""],["to_set","Enumerable","Enumerable.html#method-i-to_set","(klass = Set, *args, &block)","<p>Makes a set from the enumerable object with given arguments.\nNeeds to <code>require &quot;set&quot;</code> to use ...\n"],["to_set","Set","Set.html#method-i-to_set","(klass = Set, *args, &block)","<p>Returns self if no arguments are given. Otherwise, converts the\nset to another with <code>klass.new(self, *args,</code> ...\n"],["to_sockaddr","Addrinfo","Addrinfo.html#method-i-to_sockaddr","()","<p>returns the socket address as packed struct sockaddr string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">to_sockaddr</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_spec","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-to_spec","()","<p>Return a Gem::Specification from this gem\n"],["to_spec","Gem::Dependency","Gem/Dependency.html#method-i-to_spec","()",""],["to_spec","Gem::Specification","Gem/Specification.html#method-i-to_spec","()","<p>Returns self\n"],["to_specs","Gem::Dependency","Gem/Dependency.html#method-i-to_specs","()",""],["to_str","Fiddle::Pointer","Fiddle/Pointer.html#method-i-to_str","(p1 = v1)","<p>Returns the pointer contents as a string.\n<p>When called with no arguments, this method will return the contents …\n"],["to_str","String","String.html#method-i-to_str","()","<p>Returns <code>self</code> if <code>self</code> is a String, or <code>self</code> converted to a String if <code>self</code> is a subclass of String.\n<p>String#to_str …\n"],["to_string","IPAddr","IPAddr.html#method-i-to_string","()","<p>Returns a string containing the IP address representation in canonical form.\n"],["to_sym","String","String.html#method-i-to_sym","()","<p>Returns the Symbol corresponding to <em>str</em>, creating the symbol if it did not previously exist. See Symbol#id2name …\n"],["to_sym","Symbol","Symbol.html#method-i-to_sym","()","<p>Returns <code>self</code>.\n<p>Symbol#intern is an alias for Symbol#to_sym.\n<p>Related: String#to_sym.\n"],["to_text","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-to_text","()","<p>Returns a textual representation of this SPKI, useful for debugging purposes.\n"],["to_text","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-to_text","()","<p>See the OpenSSL documentation for ECPKParameters_print()\n"],["to_text","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-to_text","()","<p>Dumps key parameters, public key, and private key components contained in the key into a human-readable …\n"],["to_text","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-to_text","()","<p>Shows everything in the Session object. This is for diagnostic purposes.\n"],["to_text","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-to_text","()",""],["to_text","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-to_text","()",""],["to_text","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-to_text","()",""],["to_time","Date","Date.html#method-i-to_time","()","<p>Returns a new Time object with the same value as <code>self</code>; if <code>self</code> is a Julian date, derives its Gregorian …\n"],["to_time","DateTime","DateTime.html#method-i-to_time","()","<p>Returns a Time object which denotes self.\n"],["to_time","Time","Time.html#method-i-to_time","()","<p>Returns self.\n"],["to_tty?","Exception","Exception.html#method-c-to_tty-3F","()","<p>Returns <code>true</code> if exception messages will be sent to a tty.\n"],["to_utf8","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-to_utf8","()","<p>Returns an UTF-8 representation of the distinguished name, as specified in RFC 2253.\n"],["to_value","Fiddle::Pointer","Fiddle/Pointer.html#method-i-to_value","()","<p>Cast this pointer to a ruby object.\n"],["to_write_io","ARGF","ARGF.html#method-i-to_write_io","()","<p>Returns IO instance tied to <em>ARGF</em> for writing if inplace mode is enabled.\n"],["to_yaml","Object","Object.html#method-i-to_yaml","(options = {})","<p>Convert an object to YAML.  See Psych.dump for more information on the available <code>options</code>.\n"],["to_yaml","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-to_yaml","(io = nil, options = {})",""],["today","Date","Date.html#method-c-today","(p1 = v1)","<p>Returns a new Date object constructed from the present date:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;2022-07-06&quot;</span>\n</pre>\n<p>See argument …\n"],["toeuc","Kconv","Kconv.html#method-c-toeuc","(str)","<p>Convert <code>str</code> to EUC-JP\n"],["toeuc","Kconv","Kconv.html#method-i-toeuc","(str)","<p>Convert <code>str</code> to EUC-JP\n"],["toeuc","String","String.html#method-i-toeuc","()","<p>Convert <code>self</code> to EUC-JP\n"],["tojis","Kconv","Kconv.html#method-i-tojis","(str)","<p>Convert <code>str</code> to ISO-2022-JP\n"],["tojis","Kconv","Kconv.html#method-c-tojis","(str)","<p>Convert <code>str</code> to ISO-2022-JP\n"],["tojis","String","String.html#method-i-tojis","()","<p>Convert <code>self</code> to ISO-2022-JP\n"],["token","OpenSSL::Timestamp::Response","OpenSSL/Timestamp/Response.html#method-i-token","()","<p>If a timestamp token is present, this returns it in the form of a OpenSSL::PKCS7.\n"],["token","Ripper","Ripper.html#method-i-token","()","<p>Return the current token string.\n"],["token","Win32::SSPI::SecurityBuffer","Win32/SSPI/SecurityBuffer.html#method-i-token","()",""],["token?","Gem::Uri","Gem/Uri.html#method-i-token-3F","()",""],["token_info","OpenSSL::Timestamp::Response","OpenSSL/Timestamp/Response.html#method-i-token_info","()","<p>Get the response’s token info if present.\n"],["token_listener","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-token_listener","(obj)","<p>Has <code>obj</code> listen to tokens\n"],["token_stream","RDoc::TokenStream","RDoc/TokenStream.html#method-i-token_stream","()","<p>Current token stream\n"],["token_table","Racc::StateTransitionTableGenerator","Racc/StateTransitionTableGenerator.html#method-i-token_table","(grammar)",""],["token_to_str","Racc::Parser","Racc/Parser.html#method-i-token_to_str","(t)","<p>Convert internal ID of token symbol to the string.\n"],["token_value_table","Racc::StateTransitionTable","Racc/StateTransitionTable.html#method-i-token_value_table","()",""],["tokenize","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-tokenize","(input)",""],["tokenize","Psych::ScalarScanner","Psych/ScalarScanner.html#method-i-tokenize","(string)","<p>Tokenize <code>string</code> returning the Ruby object\n"],["tokenize","RDoc::TomDoc","RDoc/TomDoc.html#method-i-tokenize","(text)","<p>Turns text into an Array of tokens\n<p>text &mdash; A String containing TomDoc-format text.\n\n<p>Returns\n"],["tokenize","Ripper","Ripper.html#method-c-tokenize","(src, filename = '-', lineno = 1, **kw)","<p>Tokenizes the Ruby program and returns an array of strings. The <code>filename</code> and <code>lineno</code> arguments are mostly …\n"],["tokens","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-tokens","()","<p>Returns tokens corresponding to the location of the node. Returns <code>nil</code> if <code>keep_tokens</code> is not enabled when …\n"],["tokens_to_s","RDoc::TokenStream","RDoc/TokenStream.html#method-i-tokens_to_s","()","<p>Returns a string representation of the token stream\n"],["tolocale","Kconv","Kconv.html#method-i-tolocale","(str)","<p>Convert <code>self</code> to locale encoding\n"],["tolocale","Kconv","Kconv.html#method-c-tolocale","(str)","<p>Convert <code>self</code> to locale encoding\n"],["tolocale","String","String.html#method-i-tolocale","()","<p>Convert <code>self</code> to locale encoding\n"],["tomdoc?","RDoc::Comment","RDoc/Comment.html#method-i-tomdoc-3F","()","<p>Returns true if this comment is in TomDoc format.\n"],["top","IRB::Frame","IRB/Frame.html#method-i-top","(n = 0)","<p>Returns the <code>n</code> number of frames on the call stack from the last frame initialized.\n<p>Raises FrameUnderflow …\n"],["top","IRB::Frame","IRB/Frame.html#method-c-top","(n = 0)","<p>Convenience method for Frame#top\n"],["top","OptionParser","OptionParser.html#method-i-top","()","<p>Subject of #on / #on_head, #accept / #reject\n"],["top","OptionParser","OptionParser.html#method-c-top","()",""],["top_level","RDoc::Context","RDoc/Context.html#method-i-top_level","()","<p>Return the TopLevel that owns us\n"],["top_level","RDoc::Require","RDoc/Require.html#method-i-top_level","()","<p>The RDoc::TopLevel corresponding to this require, or <code>nil</code> if not found.\n"],["toplevel?","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-toplevel-3F","()",""],["toplevel_load","IRB::Locale","IRB/Locale.html#method-i-toplevel_load","(file, priv=nil)",""],["tosjis","Kconv","Kconv.html#method-c-tosjis","(str)","<p>Convert <code>str</code> to Shift_JIS\n"],["tosjis","Kconv","Kconv.html#method-i-tosjis","(str)","<p>Convert <code>str</code> to Shift_JIS\n"],["tosjis","String","String.html#method-i-tosjis","()","<p>Convert <code>self</code> to Shift_JIS\n"],["total_in","Zlib::ZStream","Zlib/ZStream.html#method-i-total_in","()","<p>Returns the total bytes of the input data to the stream.  FIXME\n"],["total_out","Zlib::ZStream","Zlib/ZStream.html#method-i-total_out","()","<p>Returns the total bytes of the output data from the stream.  FIXME\n"],["total_time","GC","GC.html#method-c-total_time","()","<p>Return measured GC total time in nano seconds.\n"],["total_time","GC::Profiler","GC/Profiler.html#method-c-total_time","()","<p>The total time used for garbage collection in seconds\n"],["touch","FileUtils","FileUtils.html#method-i-touch","(list, noop: nil, verbose: nil, mtime: nil, nocreate: nil)","<p>Updates modification times (mtime) and access times (atime) of the entries given by the paths in <code>list</code> …\n"],["touch","FileUtils","FileUtils.html#method-c-touch","(list, noop: nil, verbose: nil, mtime: nil, nocreate: nil)","<p>Updates modification times (mtime) and access times (atime) of the entries given by the paths in <code>list</code> …\n"],["toutf16","Kconv","Kconv.html#method-i-toutf16","(str)","<p>Convert <code>str</code> to UTF-16\n"],["toutf16","Kconv","Kconv.html#method-c-toutf16","(str)","<p>Convert <code>str</code> to UTF-16\n"],["toutf16","String","String.html#method-i-toutf16","()","<p>Convert <code>self</code> to UTF-16\n"],["toutf32","Kconv","Kconv.html#method-c-toutf32","(str)","<p>Convert <code>str</code> to UTF-32\n"],["toutf32","Kconv","Kconv.html#method-i-toutf32","(str)","<p>Convert <code>str</code> to UTF-32\n"],["toutf32","String","String.html#method-i-toutf32","()","<p>Convert <code>self</code> to UTF-32\n"],["toutf8","Kconv","Kconv.html#method-c-toutf8","(str)","<p>Convert <code>str</code> to UTF-8\n"],["toutf8","Kconv","Kconv.html#method-i-toutf8","(str)","<p>Convert <code>str</code> to UTF-8\n"],["toutf8","String","String.html#method-i-toutf8","()","<p>Convert <code>self</code> to UTF-8\n"],["tr","String","String.html#method-i-tr","(p1, p2)","<p>Returns a copy of <code>self</code> with each character specified by string <code>selector</code> translated to the corresponding …\n"],["tr!","String","String.html#method-i-tr-21","(p1, p2)","<p>Like String#tr, but modifies <code>self</code> in place. Returns <code>self</code> if any changes were made, <code>nil</code> otherwise.\n"],["tr_s","String","String.html#method-i-tr_s","(p1, p2)","<p>Like String#tr, but also squeezes the modified portions of the translated string; returns a new string …\n"],["tr_s!","String","String.html#method-i-tr_s-21","(p1, p2)","<p>Like String#tr_s, but modifies <code>self</code> in place. Returns <code>self</code> if any changes were made, <code>nil</code> otherwise.\n<p>Related: …\n"],["trace","CSV::Parser::InputsScanner","CSV/Parser/InputsScanner.html#method-i-trace","(*args)",""],["trace","Net::HTTP","Net/HTTP.html#method-i-trace","(path, initheader = nil)","<p>Sends a TRACE request to the <code>path</code> and gets a response, as an HTTPResponse object.\n"],["trace","TracePoint","TracePoint.html#method-c-trace","(*events)","<p>A convenience method for TracePoint.new, that activates the trace automatically.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">trace</span> = <span class=\"ruby-constant\">TracePoint</span>.<span class=\"ruby-identifier\">trace</span>(<span class=\"ruby-value\">:call</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["trace_exit_locations_enabled?","RubyVM::YJIT","RubyVM/YJIT.html#method-c-trace_exit_locations_enabled-3F","()","<p>Check if rb_yjit_trace_exit_locations_enabled_p is enabled.\n"],["trace_func","IRB::Frame","IRB/Frame.html#method-i-trace_func","(event, file, line, id, binding)","<p>Used by Kernel#set_trace_func to register each event in the call stack\n"],["trace_object_allocations","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations","()","<p>Starts tracing object allocations from the ObjectSpace extension module.\n<p>For example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;objspace&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["trace_object_allocations_clear","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations_clear","()","<p>Clear recorded tracing information.\n"],["trace_object_allocations_debug_start","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations_debug_start","()",""],["trace_object_allocations_start","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations_start","()","<p>Starts tracing object allocations.\n"],["trace_object_allocations_stop","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations_stop","()","<p>Stop tracing object allocations.\n<p>Note that if ::trace_object_allocations_start is called n-times, then …\n"],["trace_points","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-trace_points","()","<p>Return trace points in the instruction sequence. Return an array of [line, event_symbol] pair.\n"],["trace_var","Kernel","Kernel.html#method-i-trace_var","(*args)","<p>Controls tracing of assignments to global variables. The parameter <code>symbol</code> identifies the variable (as …\n"],["trailing_slash?","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-i-trailing_slash-3F","()","<p>Determines if the given line has a trailing slash\n\n<pre>lines = CodeLine.from_source(&lt;&lt;~EOM)\n  it &quot;foo&quot; \\\nEOM ...</pre>\n"],["transaction","PStore","PStore.html#method-i-transaction","(read_only = false)","<p>Opens a transaction block for the store. See Transactions.\n<p>With argument <code>read_only</code> as <code>false</code>, the block …\n"],["transfer","Fiber","Fiber.html#method-i-transfer","(*args)","<p>Transfer control to another fiber, resuming it from where it last stopped or starting it if it was not …\n"],["transfer","IO::Buffer","IO/Buffer.html#method-i-transfer","()","<p>Transfers ownership to a new buffer, deallocating the current one.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">buffer</span> = <span class=\"ruby-constant\">IO</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Buffer</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;test&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["transform","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-transform","(symbolize_names: false, freeze: false, strict_integer: false)",""],["transform_args?","IRB::Context","IRB/Context.html#method-i-transform_args-3F","(command)","<p>Return true if the command supports transforming args\n"],["transform_keys","Hash","Hash.html#method-i-transform_keys","(*args)","<p>Returns a new Hash object; each entry has:\n<p>A key provided by the block.\n<p>The value from <code>self</code>.\n"],["transform_keys!","Hash","Hash.html#method-i-transform_keys-21","(*args)","<p>Same as Hash#transform_keys but modifies the receiver in place instead of returning a new hash.\n"],["transform_values","Hash","Hash.html#method-i-transform_values","()","<p>Returns a new Hash object; each entry has:\n<p>A key from <code>self</code>.\n<p>A value provided by the block.\n"],["transform_values!","Hash","Hash.html#method-i-transform_values-21","()","<p>Returns <code>self</code>, whose keys are unchanged, and whose values are determined by the given block.\n\n<pre>h = {foo: ...</pre>\n"],["translate_padding_mode","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-translate_padding_mode","(num)",""],["transport_request","Net::HTTP","Net/HTTP.html#method-i-transport_request","(req)",""],["transpose","Array","Array.html#method-i-transpose","()","<p>Transposes the rows and columns in an Array of Arrays; the nested Arrays must all be the same size:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["transpose","Racc::States","Racc/States.html#method-i-transpose","(rel)",""],["transpose_chars","Reline::LineEditor","Reline/LineEditor.html#method-i-transpose_chars","(key)",""],["transpose_words","Reline::LineEditor","Reline/LineEditor.html#method-i-transpose_words","(key)",""],["trap","Kernel","Kernel.html#method-i-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a string such as “SIGALRM”, …\n"],["trap","Signal","Signal.html#method-c-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a string such as “SIGALRM”, …\n"],["traverse","Gem::Specification","Gem/Specification.html#method-i-traverse","(trail = [], visited = {}, &block)","<p>Recursively walk dependencies of this spec, executing the <code>block</code> for each hop.\n"],["traverse","OpenSSL::ASN1","OpenSSL/ASN1.html#method-c-traverse","(p1)","<p>If a block is given, it prints out each of the elements encountered. Block parameters are (in that order): …\n"],["traverse","Racc::States","Racc/States.html#method-i-traverse","(i, index, vertices, map, relation)",""],["traverse_parents","Gem::Util","Gem/Util.html#method-c-traverse_parents","(directory, &block)","<p>Enumerates the parents of <code>directory</code>.\n"],["tree","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-tree","()",""],["tree_depth","DidYouMean::TreeSpellChecker","DidYouMean/TreeSpellChecker.html#method-i-tree_depth","()",""],["truncate","BigDecimal","BigDecimal.html#method-i-truncate","(p1 = v1)","<p>Truncate to the nearest integer (by default), returning the result as a BigDecimal.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;3.14159&#39;</span>).<span class=\"ruby-identifier\">truncate</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["truncate","File","File.html#method-i-truncate","(p1)","<p>Truncates <em>file</em> to at most <em>integer</em> bytes. The file must be opened for writing. Not available on all platforms. …\n"],["truncate","File","File.html#method-c-truncate","(p1, p2)","<p>Truncates the file <em>file_name</em> to be at most <em>integer</em> bytes long. Not available on all platforms.\n\n<pre>f = File.new(&quot;out&quot;, ...</pre>\n"],["truncate","Float","Float.html#method-i-truncate","(*args)","<p>Returns <code>self</code> truncated (toward zero) to a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> is positive, …\n"],["truncate","Integer","Integer.html#method-i-truncate","(*args)","<p>Returns <code>self</code> truncated (toward zero) to a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> is negative, …\n"],["truncate","Numeric","Numeric.html#method-i-truncate","(*args)","<p>Returns <code>self</code> truncated (toward zero) to a precision of <code>digits</code> decimal digits.\n<p>Numeric implements this …\n"],["truncate","Pathname","Pathname.html#method-i-truncate","(p1)","<p>Truncates the file to <code>length</code> bytes.\n<p>See File.truncate.\n"],["truncate","Rational","Rational.html#method-i-truncate","(*args)","<p>Returns <code>rat</code> truncated (toward zero) to a precision of <code>ndigits</code> decimal digits (default: 0).\n<p>When the precision …\n"],["truncate","StringIO","StringIO.html#method-i-truncate","(p1)","<p>Truncates the buffer string to at most <em>integer</em> bytes. The stream must be opened for writing.\n"],["truncate_text","Gem::Text","Gem/Text.html#method-i-truncate_text","(text, description, max_length = 100_000)",""],["trust=","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-trust-3D","(p1)","<p>Sets the default trust settings used by the certificate verification with the store.\n<p>OpenSSL::X509::StoreContext#trust= …\n"],["trust=","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-trust-3D","(p1)","<p>Sets the trust settings of the context. This overrides the default value set by Store#trust=.\n<p>See also …\n"],["trust_cert","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-trust_cert","(certificate)","<p>Add a certificate to trusted certificate list.\n"],["trust_dir","Gem::Security","Gem/Security.html#method-c-trust_dir","()","<p>Returns a Gem::Security::TrustDir which wraps the directory where trusted certificates live.\n"],["trusted_certificates","Gem::Security","Gem/Security.html#method-c-trusted_certificates","(&block)","<p>Enumerates the trusted certificates via Gem::Security::TrustDir.\n"],["try_activate","Gem","Gem.html#method-c-try_activate","(path)","<p>Try to activate a gem containing <code>path</code>. Returns true if activation succeeded or wasn’t needed because …\n"],["try_const","MakeMakefile","MakeMakefile.html#method-i-try_const","(const, headers = nil, opt = \"\", &b)","<p>Returns whether or not the constant <code>const</code> is defined.\n<p>See also <code>have_const</code>\n"],["try_convert","Array","Array.html#method-c-try_convert","(p1)","<p>If <code>object</code> is an Array object, returns <code>object</code>.\n<p>Otherwise if <code>object</code> responds to <code>:to_ary</code>, calls <code>object.to_ary</code> …\n"],["try_convert","Hash","Hash.html#method-c-try_convert","(p1)","<p>If <code>obj</code> is a Hash object, returns <code>obj</code>.\n<p>Otherwise if <code>obj</code> responds to <code>:to_hash</code>, calls <code>obj.to_hash</code> and returns …\n"],["try_convert","IO","IO.html#method-c-try_convert","(p1)","<p>Attempts to convert <code>object</code> into an IO object via method <code>to_io</code>; returns the new IO object if successful, …\n"],["try_convert","Integer","Integer.html#method-c-try_convert","(num)","<p>If <code>object</code> is an Integer object, returns <code>object</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Integer</span>.<span class=\"ruby-identifier\">try_convert</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># =&gt; 1</span>\n</pre>\n<p>Otherwise if <code>object</code> responds …\n"],["try_convert","Regexp","Regexp.html#method-c-try_convert","(p1)","<p>Returns <code>object</code> if it is a regexp:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Regexp</span>.<span class=\"ruby-identifier\">try_convert</span>(<span class=\"ruby-regexp\">/re/</span>) <span class=\"ruby-comment\"># =&gt; /re/</span>\n</pre>\n<p>Otherwise if <code>object</code> responds to <code>:to_regexp</code> …\n"],["try_convert","String","String.html#method-c-try_convert","(p1)","<p>If <code>object</code> is a String object, returns <code>object</code>.\n<p>Otherwise if <code>object</code> responds to <code>:to_str</code>, calls <code>object.to_str</code> …\n"],["try_enter","Monitor","Monitor.html#method-i-try_enter","()",""],["try_lock","Thread::Mutex","Thread/Mutex.html#method-i-try_lock","()","<p>Attempts to obtain the lock and returns immediately. Returns <code>true</code> if the lock was granted.\n"],["try_mon_enter","Monitor","Monitor.html#method-i-try_mon_enter","()","<p>for compatibility\n"],["try_mon_enter","MonitorMixin","MonitorMixin.html#method-i-try_mon_enter","()","<p>For backward compatibility\n"],["try_type","MakeMakefile","MakeMakefile.html#method-i-try_type","(type, headers = nil, opt = \"\", &b)","<p>Returns whether or not the static type <code>type</code> is defined.\n<p>See also <code>have_type</code>\n"],["tsa_certificate","OpenSSL::Timestamp::Response","OpenSSL/Timestamp/Response.html#method-i-tsa_certificate","()","<p>If the Request specified to request the TSA certificate (Request#cert_requested = true), then this field …\n"],["tsort","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-c-tsort","(vertices)","<p>Topologically sorts the given vertices. @param [Enumerable&lt;Vertex&gt;] vertices the vertices to be …\n"],["tsort","TSort","TSort.html#method-c-tsort","(each_node, each_child)","<p>Returns a topologically sorted array of nodes. The array is sorted from children to parents, i.e. the …\n"],["tsort","TSort","TSort.html#method-i-tsort","()","<p>Returns a topologically sorted array of nodes. The array is sorted from children to parents, i.e. the …\n"],["tsort_each","TSort","TSort.html#method-c-tsort_each","(each_node, each_child)","<p>The iterator version of the TSort.tsort method.\n<p>The graph is represented by <em>each_node</em> and <em>each_child</em>. …\n"],["tsort_each","TSort","TSort.html#method-i-tsort_each","()","<p>The iterator version of the #tsort method. <code><em>obj</em>.tsort_each</code> is similar to <code><em>obj</em>.tsort.each</code>, but modification …\n"],["tsort_each_child","Gem::DependencyList","Gem/DependencyList.html#method-i-tsort_each_child","(node)",""],["tsort_each_child","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-tsort_each_child","(vertex, &block)","<p>@!visibility private\n"],["tsort_each_child","TSort","TSort.html#method-i-tsort_each_child","(node)","<p>Should be implemented by a extended class.\n<p>#tsort_each_child is used to iterate for child nodes of <em>node</em> …\n"],["tsort_each_node","Gem::DependencyList","Gem/DependencyList.html#method-i-tsort_each_node","(&block)",""],["tsort_each_node","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-tsort_each_node","()","<p>@!visibility private\n"],["tsort_each_node","TSort","TSort.html#method-i-tsort_each_node","()","<p>Should be implemented by a extended class.\n<p>#tsort_each_node is used to iterate for all nodes over a graph. …\n"],["tty?","Gem::MockGemUi::TTY","Gem/MockGemUi/TTY.html#method-i-tty-3F","()",""],["tty?","Gem::SilentUI::NullIO","Gem/SilentUI/NullIO.html#method-i-tty-3F","()",""],["tty?","Gem::StreamUI","Gem/StreamUI.html#method-i-tty-3F","()","<p>Returns true if TTY methods should be used on this StreamUI.\n"],["tty?","IO","IO.html#method-i-tty-3F","()","<p>Returns <code>true</code> if the stream is associated with a terminal device (tty), <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>).<span class=\"ruby-identifier\">isatty</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["tty?","StringIO","StringIO.html#method-i-tty-3F","()","<p>Returns <code>false</code>.  Just for compatibility to IO.\n"],["tuesday?","Date","Date.html#method-i-tuesday-3F","()","<p>Returns <code>true</code> if <code>self</code> is a Tuesday, <code>false</code> otherwise.\n"],["tuesday?","Time","Time.html#method-i-tuesday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Tuesday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">4</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-04 00:00:00 ...</span>\n</pre>\n"],["tv_nsec","Time","Time.html#method-i-tv_nsec","()","<p>Returns the number of nanoseconds in the subseconds part of <code>self</code> in the range (0..999_999_999); lower-order …\n"],["tv_sec","Time","Time.html#method-i-tv_sec","()","<p>Returns the value of <code>self</code> as integer Epoch seconds; subseconds are truncated (not rounded):\n\n<pre>Time.utc(1970, ...</pre>\n"],["tv_usec","Time","Time.html#method-i-tv_usec","()","<p>Returns the number of microseconds in the subseconds part of <code>self</code> in the range (0..999_999); lower-order …\n"],["type","Gem::Dependency","Gem/Dependency.html#method-i-type","()","<p>Dependency type.\n"],["type","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-type","()",""],["type","ObjectSpace::InternalObjectWrapper","ObjectSpace/InternalObjectWrapper.html#method-i-type","()","<p>Returns the type of the internal object.\n"],["type","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-type","()",""],["type","RDoc::ClassModule","RDoc/ClassModule.html#method-i-type","()","<p>‘module’ or ‘class’\n"],["type","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-type","()","<p>Type of method/attribute (class or instance)\n"],["type","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-type","()","<p>Returns the type of this node as a symbol.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">root</span> = <span class=\"ruby-constant\">RubyVM</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AbstractSyntaxTree</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-string\">&quot;x = 1 + 2&quot;</span>)\n<span class=\"ruby-identifier\">root</span>.<span class=\"ruby-identifier\">type</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["type","Socket::AncillaryData","Socket/AncillaryData.html#method-i-type","()","<p>returns the cmsg type as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AncillaryData</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:INET6</span>, <span class=\"ruby-value\">:IPV6</span>, <span class=\"ruby-value\">:PKTINFO</span>, <span class=\"ruby-string\">&quot;&quot;</span>).<span class=\"ruby-identifier\">type</span>\n<span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["type2name","Win32::Registry","Win32/Registry.html#method-c-type2name","(type)","<p>Convert registry type value to readable string.\n"],["type=","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-type-3D","(p1)",""],["type_params","Net::HTTPHeader","Net/HTTPHeader.html#method-i-type_params","()","<p>Returns the trailing (‘parameters’) part of the value of field <code>&#39;Content-Type&#39;</code>, or <code>nil</code> …\n"],["typealias","Fiddle::Importer","Fiddle/Importer.html#method-i-typealias","(alias_type, orig_type)","<p>Sets the type alias for <code>alias_type</code> as <code>orig_type</code>\n"],["typecode=","URI::FTP","URI/FTP.html#method-i-typecode-3D","(typecode)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["typekind","WIN32OLE::Type","WIN32OLE/Type.html#method-i-typekind","()","<p>Returns number which represents type.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Word 10.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Documents&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["typelibs","WIN32OLE::Type","WIN32OLE/Type.html#method-c-typelibs","()","<p>Returns array of type libraries. This method will be OBSOLETE. Use WIN32OLE_TYPELIB.typelibs.collect{|t| …\n"],["typelibs","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-c-typelibs","()","<p>Returns the array of WIN32OLE_TYPELIB object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tlibs</span> = <span class=\"ruby-constant\">WIN32OLE_TYPELIB</span>.<span class=\"ruby-identifier\">typelibs</span>\n</pre>\n"],["typename","WIN32OLE::Record","WIN32OLE/Record.html#method-i-typename","()","<p>Returns the type name of VT_RECORD OLE variable.\n<p>If COM server in VB.NET ComServer project is the following: …\n"],["typo_squatting?","Gem::Source","Gem/Source.html#method-i-typo_squatting-3F","(host, distance_threshold=4)",""],["u","ERB::Util","ERB/Util.html#method-c-u","(s)",""],["u","ERB::Util","ERB/Util.html#method-i-u","(s)",""],["ucmp","OpenSSL::BN","OpenSSL/BN.html#method-i-ucmp","(p1)",""],["udp","Addrinfo","Addrinfo.html#method-c-udp","(p1, p2)","<p>returns an addrinfo object for UDP address.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">udp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-string\">&quot;daytime&quot;</span>) <span class=\"ruby-comment\">#=&gt; #&lt;Addrinfo: 127.0.0.1:13 ...</span>\n</pre>\n"],["udp_server_loop","Socket","Socket.html#method-c-udp_server_loop","(host=nil, port)","<p>creates a UDP/IP server on <em>port</em> and calls the block for each message arrived. The block is called with …\n"],["udp_server_loop_on","Socket","Socket.html#method-c-udp_server_loop_on","(sockets)","<p>Run UDP/IP server loop on the given sockets.\n<p>The return value of Socket.udp_server_sockets is appropriate …\n"],["udp_server_recv","Socket","Socket.html#method-c-udp_server_recv","(sockets)","<p>Receive UDP/IP packets from the given <em>sockets</em>. For each packet received, the block is called.\n<p>The block …\n"],["udp_server_sockets","Socket","Socket.html#method-c-udp_server_sockets","(host=nil, port)","<p>Creates UDP/IP sockets for a UDP server.\n<p>If no block given, it returns an array of sockets.\n<p>If a block …\n"],["ui","Bundler","Bundler.html#method-c-ui","()",""],["ui","Gem","Gem.html#method-c-ui","()","<p>Lazily loads DefaultUserInteraction and returns the default UI.\n"],["ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-ui","()","<p>Return the default UI.\n"],["ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-ui","()","<p>See DefaultUserInteraction::ui\n"],["ui=","Bundler","Bundler.html#method-c-ui-3D","(ui)",""],["ui=","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-ui-3D","(new_ui)","<p>See DefaultUserInteraction::ui=\n"],["ui=","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-ui-3D","(new_ui)","<p>Set the default UI.  If the default UI is never explicitly set, a simple console based UserInteraction …\n"],["uid","File::Stat","File/Stat.html#method-i-uid","()","<p>Returns the numeric user id of the owner of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["uid","Process","Process.html#method-c-uid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["uid=","Process","Process.html#method-c-uid-3D","(p1)","<p>Sets the (user) user ID for this process. Not available on all platforms.\n"],["umask","File","File.html#method-c-umask","(*args)","<p>Returns the current umask value for this process. If the optional argument is given, set the umask to …\n"],["unadvise","WIN32OLE::Event","WIN32OLE/Event.html#method-i-unadvise","()","<p>disconnects OLE server. If this method called, then the WIN32OLE_EVENT object does not receive the OLE …\n"],["uname","Etc","Etc.html#method-c-uname","()","<p>Returns the system information obtained by uname system call.\n<p>The return value is a hash which has 5 keys …\n"],["unbind","Method","Method.html#method-i-unbind","()","<p>Dissociates <em>meth</em> from its current receiver. The resulting UnboundMethod can subsequently be bound to …\n"],["unblock","Fiber::Scheduler","Fiber/Scheduler.html#method-i-unblock","(p1, p2)","<p>Invoked to wake up Fiber previously blocked with #block (for example, Mutex#lock calls #block and Mutex#unlock …\n"],["unbundled_env","Bundler","Bundler.html#method-c-unbundled_env","()","<p>@return [Hash] Environment with all bundler-related variables removed\n"],["unbundled_exec","Bundler","Bundler.html#method-c-unbundled_exec","(*args)","<p>Run a ‘Kernel.exec` to a subcommand in an environment with all bundler related variables removed\n"],["unbundled_system","Bundler","Bundler.html#method-c-unbundled_system","(*args)","<p>Run subcommand in an environment with all bundler related variables removed\n"],["unconverted_fields?","CSV","CSV.html#method-i-unconverted_fields-3F","()","<p>Returns the value that determines whether unconverted fields are to be available; used for parsing; see …\n"],["unconverted_fields?","CSV::Parser","CSV/Parser.html#method-i-unconverted_fields-3F","()",""],["undef_method","Module","Module.html#method-i-undef_method","(*args)","<p>Prevents the current class from responding to calls to the named method. Contrast this with <code>remove_method</code> …\n"],["undefine_finalizer","ObjectSpace","ObjectSpace.html#method-c-undefine_finalizer","(p1)","<p>Removes all finalizers for <em>obj</em>.\n"],["undefined_instance_methods","Module","Module.html#method-i-undefined_instance_methods","()","<p>Returns a list of the undefined instance methods defined in <em>mod</em>. The undefined methods of any ancestors …\n"],["undoc_params","RDoc::Stats","RDoc/Stats.html#method-i-undoc_params","(method)","<p>Determines which parameters in <code>method</code> were not documented.  Returns a total parameter count and an Array …\n"],["undump","String","String.html#method-i-undump","()","<p>Returns an unescaped version of <code>self</code>:\n\n<pre>s_orig = &quot;\\f\\x00\\xff\\\\\\&quot;&quot;    # =&gt; &quot;\\f\\u0000\\xFF\\\\\\&quot;&quot;\ns_dumped = ...</pre>\n"],["unescape","CGI::Escape","CGI/Escape.html#method-i-unescape","(*args)","<p>Returns URL-unescaped string (<code>application/x-www-form-urlencoded</code>).\n"],["unescape","CGI::Util","CGI/Util.html#method-i-unescape","(string, encoding = @@accept_charset)","<p>URL-decode an application/x-www-form-urlencoded string with encoding(optional).\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">string</span> = <span class=\"ruby-constant\">CGI</span>.<span class=\"ruby-identifier\">unescape</span>(<span class=\"ruby-string\">&quot;%27Stop%21%27+said+Fred&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["unescape","Gem::UriFormatter","Gem/UriFormatter.html#method-i-unescape","()","<p>Unescapes the #uri which came from a CGI parameter\n"],["unescape","Net::HTTP","Net/HTTP.html#method-i-unescape","(value)",""],["unescape","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-unescape","(str, escaped = @regexp[:ESCAPED])","<p>Args\n<p><code>str</code> &mdash; String to remove escapes from\n<p><code>escaped</code> &mdash; Regexp to apply. Defaults to <code>self.regexp[:ESCAPED]</code>\n"],["unescape","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-unescape","(str, escaped = @regexp[:ESCAPED])","<p>Args\n<p><code>str</code> &mdash; String to remove escapes from\n<p><code>escaped</code> &mdash; Regexp to apply. Defaults to <code>self.regexp[:ESCAPED]</code>\n"],["unescapeElement","CGI::Util","CGI/Util.html#method-i-unescapeElement","(string, *elements)","<p>Undo escaping such as that done by CGI.escapeElement()\n\n<pre>print CGI.unescapeElement(\n        CGI.escapeHTML(&#39;&lt;BR&gt;&lt;A ...</pre>\n"],["unescapeHTML","CGI::Escape","CGI/Escape.html#method-i-unescapeHTML","(p1)","<p>Returns HTML-unescaped string.\n"],["unescapeHTML","CGI::Util","CGI/Util.html#method-i-unescapeHTML","(string)","<p>Unescape a string that has been HTML-escaped\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CGI</span>.<span class=\"ruby-identifier\">unescapeHTML</span>(<span class=\"ruby-string\">&quot;Usage: foo &amp;quot;bar&amp;quot; &amp;lt;baz&amp;gt;&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["unescapeURIComponent","CGI::Escape","CGI/Escape.html#method-i-unescapeURIComponent","(*args)","<p>Returns URL-unescaped string following RFC 3986.\n"],["unescapeURIComponent","CGI::Util","CGI/Util.html#method-i-unescapeURIComponent","(string, encoding = @@accept_charset)","<p>URL-decode a string following RFC 3986 with encoding(optional).\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">string</span> = <span class=\"ruby-constant\">CGI</span>.<span class=\"ruby-identifier\">unescape</span>(<span class=\"ruby-string\">&quot;%27Stop%21%27+said%20Fred&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["unescape_element","CGI::Util","CGI/Util.html#method-i-unescape_element","(string, *elements)","<p>Synonym for CGI.unescapeElement(str)\n"],["unescape_html","CGI::Util","CGI/Util.html#method-i-unescape_html","(string)","<p>Synonym for CGI.unescapeHTML(str)\n"],["unget_tk","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-unget_tk","(tk)","<p>Returns <code>tk</code> to the scanner\n"],["ungetbyte","IO","IO.html#method-i-ungetbyte","(p1)","<p>Pushes back (“unshifts”) the given data onto the stream’s buffer, placing the data so that …\n"],["ungetbyte","StringIO","StringIO.html#method-i-ungetbyte","(p1)","<p>Pushes back (“unshifts”) an 8-bit byte onto the stream; see Byte IO.\n"],["ungetbyte","Zlib::GzipReader","Zlib/GzipReader.html#method-i-ungetbyte","(p1)","<p>See Zlib::GzipReader documentation for a description.\n"],["ungetc","IO","IO.html#method-i-ungetc","(p1)","<p>Pushes back (“unshifts”) the given data onto the stream’s buffer, placing the data so that …\n"],["ungetc","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-ungetc","(c)","<p>Pushes character <em>c</em> back onto the stream such that a subsequent buffered character read will return it. …\n"],["ungetc","Reline","Reline.html#method-c-ungetc","(c)",""],["ungetc","Reline::ANSI","Reline/ANSI.html#method-c-ungetc","(c)",""],["ungetc","Reline::GeneralIO","Reline/GeneralIO.html#method-c-ungetc","(c)",""],["ungetc","Reline::Windows","Reline/Windows.html#method-c-ungetc","(c)",""],["ungetc","StringIO","StringIO.html#method-i-ungetc","(p1)","<p>Pushes back (“unshifts”) a character or integer onto the stream; see Character IO.\n"],["ungetc","Zlib::GzipReader","Zlib/GzipReader.html#method-i-ungetc","(p1)","<p>See Zlib::GzipReader documentation for a description.\n"],["unicode_normalize","String","String.html#method-i-unicode_normalize","(*args)","<p>Returns a copy of <code>self</code> with Unicode normalization applied.\n<p>Argument <code>form</code> must be one of the following …\n"],["unicode_normalize!","String","String.html#method-i-unicode_normalize-21","(*args)","<p>Like String#unicode_normalize, except that the normalization is performed on <code>self</code>.\n<p>Related String#unicode_normalized? …\n"],["unicode_normalized?","String","String.html#method-i-unicode_normalized-3F","(*args)","<p>Returns <code>true</code> if <code>self</code> is in the given <code>form</code> of Unicode normalization, <code>false</code> otherwise. The <code>form</code> must be …\n"],["unindent_auto","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-unindent_auto","(str)",""],["uninstall","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-uninstall","(gem_name)",""],["uninstall","Gem::Uninstaller","Gem/Uninstaller.html#method-i-uninstall","()","<p>Performs the uninstall of the gem.  This removes the spec, the Gem directory, and the cached .gem file. …\n"],["uninstall_all","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-uninstall_all","()",""],["uninstall_dep","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-uninstall_dep","(spec)",""],["uninstall_gem","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-uninstall_gem","(gem_name)",""],["uninstall_gem","Gem::Uninstaller","Gem/Uninstaller.html#method-i-uninstall_gem","(spec)","<p>Uninstalls gem <code>spec</code>\n"],["uninstall_old_gemcutter","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-uninstall_old_gemcutter","()",""],["uninstall_specific","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-uninstall_specific","()",""],["union","Array","Array.html#method-i-union","(*args)","<p>Returns a new Array that is the union of <code>self</code> and all given Arrays <code>other_arrays</code>; duplicates are removed; …\n"],["union","Fiddle::Importer","Fiddle/Importer.html#method-i-union","(signature)","<p>Creates a class to wrap the C union described by <code>signature</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">MyUnion</span> = <span class=\"ruby-identifier\">union</span> [<span class=\"ruby-string\">&#39;int i&#39;</span>, <span class=\"ruby-string\">&#39;char c&#39;</span>]\n</pre>\n"],["union","Regexp","Regexp.html#method-c-union","(*args)","<p>Returns a new regexp that is the union of the given patterns:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">r</span> = <span class=\"ruby-constant\">Regexp</span>.<span class=\"ruby-identifier\">union</span>(<span class=\"ruby-node\">%w[cat dog]</span>)      <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["union","Set","Set.html#method-i-union","(enum)",""],["uniq","Array","Array.html#method-i-uniq","()","<p>Returns a new Array containing those elements from <code>self</code> that are not duplicates, the first occurrence …\n"],["uniq","Enumerable","Enumerable.html#method-i-uniq","()","<p>With no block, returns a new array containing only unique elements; the array has no two elements <code>e0</code> …\n"],["uniq","Enumerator::Lazy","Enumerator/Lazy.html#method-i-uniq","()","<p>Like Enumerable#uniq, but chains operation to be lazy-evaluated.\n"],["uniq!","Array","Array.html#method-i-uniq-21","()","<p>Removes duplicate elements from <code>self</code>, the first occurrence always being retained; returns <code>self</code> if any …\n"],["unique_classes","RDoc::Store","RDoc/Store.html#method-i-unique_classes","()","<p>Returns the unique classes discovered by RDoc.\n<p>::complete must have been called prior to using this method. …\n"],["unique_classes_and_modules","RDoc::Store","RDoc/Store.html#method-i-unique_classes_and_modules","()","<p>Returns the unique classes and modules discovered by RDoc. ::complete must have been called prior to …\n"],["unique_modules","RDoc::Store","RDoc/Store.html#method-i-unique_modules","()","<p>Returns the unique modules discovered by RDoc. ::complete must have been called prior to using this method. …\n"],["unique_separator","Racc::ParserFileGenerator","Racc/ParserFileGenerator.html#method-i-unique_separator","(id)",""],["unix","Addrinfo","Addrinfo.html#method-c-unix","(p1, p2 = v2)","<p>returns an addrinfo object for UNIX socket address.\n<p><em>socktype</em> specifies the socket type. If it is omitted, …\n"],["unix","Socket","Socket.html#method-c-unix","(path)","<p>creates a new socket connected to path using UNIX socket socket.\n<p>If a block is given, the block is called …\n"],["unix?","Addrinfo","Addrinfo.html#method-i-unix-3F","()","<p>returns true if addrinfo is UNIX address. returns false otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;127.0.0.1&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">unix?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["unix_line_discard","Reline::LineEditor","Reline/LineEditor.html#method-i-unix_line_discard","(key)",""],["unix_path","Addrinfo","Addrinfo.html#method-i-unix_path","()","<p>Returns the socket path as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">unix</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>).<span class=\"ruby-identifier\">unix_path</span>       <span class=\"ruby-comment\">#=&gt; &quot;/tmp/sock&quot;</span>\n</pre>\n"],["unix_rights","Socket::AncillaryData","Socket/AncillaryData.html#method-c-unix_rights","(*args)","<p>Creates a new Socket::AncillaryData object which contains file descriptors as data.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AncillaryData</span>.<span class=\"ruby-identifier\">unix_rights</span>(<span class=\"ruby-constant\">STDERR</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["unix_rights","Socket::AncillaryData","Socket/AncillaryData.html#method-i-unix_rights","()","<p>returns the array of IO objects for SCM_RIGHTS control message in UNIX domain socket.\n<p>The class of the …\n"],["unix_server_loop","Socket","Socket.html#method-c-unix_server_loop","(path)","<p>creates a UNIX socket server on <em>path</em>. It calls the block for each socket accepted.\n<p>If <em>host</em> is specified, …\n"],["unix_server_socket","Socket","Socket.html#method-c-unix_server_socket","(path)","<p>creates a UNIX server socket on <em>path</em>\n<p>If no block given, it returns a listening socket.\n<p>If a block is given, …\n"],["unix_socket_abstract_name?","Socket","Socket.html#method-c-unix_socket_abstract_name-3F","(path)",""],["unix_word_rubout","Reline::LineEditor","Reline/LineEditor.html#method-i-unix_word_rubout","(key)",""],["unknown","Logger","Logger.html#method-i-unknown","(progname = nil, &block)","<p>Equivalent to calling #add with severity <code>Logger::UNKNOWN</code>.\n"],["unknown","Syslog::Logger","Syslog/Logger.html#method-i-unknown","","<p>Logs a <code>message</code> at the unknown (syslog alert) log level, or logs the message returned from the block. …\n"],["unlink","Dir","Dir.html#method-c-unlink","(p1)","<p>Deletes the named directory. Raises a subclass of SystemCallError if the directory isn’t empty.\n"],["unlink","File","File.html#method-c-unlink","(*args)","<p>Deletes the named files, returning the number of names passed as arguments. Raises an exception on any …\n"],["unlink","Pathname","Pathname.html#method-i-unlink","()","<p>Removes a file or directory, using File.unlink if <code>self</code> is a file, or Dir.unlink as necessary.\n"],["unlink","Tempfile","Tempfile.html#method-i-unlink","()","<p>Unlinks (deletes) the file from the filesystem. One should always unlink the file after using it, as …\n"],["unlock","Net::HTTP","Net/HTTP.html#method-i-unlock","(path, body, initheader = nil)","<p>Sends a UNLOCK request to the <code>path</code> and gets a response, as an HTTPResponse object.\n"],["unlock","Thread::Mutex","Thread/Mutex.html#method-i-unlock","()","<p>Releases the lock. Raises <code>ThreadError</code> if <code>mutex</code> wasn’t locked by the current thread.\n"],["unpack","Gem::Installer","Gem/Installer.html#method-i-unpack","(directory)","<p>Unpacks the gem into the given directory.\n"],["unpack","Socket::Option","Socket/Option.html#method-i-unpack","(p1)","<p>Calls String#unpack on sockopt.data.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">sockopt</span> = <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Option</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:INET</span>, <span class=\"ruby-value\">:SOCKET</span>, <span class=\"ruby-value\">:KEEPALIVE</span>, [<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">pack</span>(<span class=\"ruby-string\">&quot;i&quot;</span>)) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["unpack","String","String.html#method-i-unpack","(fmt, offset: 0)","<p>Extracts data from <code>self</code>, forming objects that become the elements of a new array; returns that array. …\n"],["unpack","Win32::SSPI::SecurityBuffer","Win32/SSPI/SecurityBuffer.html#method-i-unpack","()","<p>Unpacks the SecurityBufferDesc structure into member variables. We only want to do this once per struct, …\n"],["unpack1","String","String.html#method-i-unpack1","(fmt, offset: 0)","<p>Like String#unpack, but unpacks and returns only the first extracted object. See Packed Data.\n"],["unpack_sockaddr_in","Socket","Socket.html#method-c-unpack_sockaddr_in","(p1)","<p>Unpacks <em>sockaddr</em> into port and ip_address.\n<p><em>sockaddr</em> should be a string or an addrinfo for AF_INET/AF_INET6. …\n"],["unpack_sockaddr_un","Socket","Socket.html#method-c-unpack_sockaddr_un","(p1)","<p>Unpacks <em>sockaddr</em> into path.\n<p><em>sockaddr</em> should be a string or an addrinfo for AF_UNIX.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">sockaddr</span> = <span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">sockaddr_un</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["unpackdw","Win32::Registry::API","Win32/Registry/API.html#method-i-unpackdw","(dw)",""],["unpackhandle","Win32::Registry::API","Win32/Registry/API.html#method-i-unpackhandle","(h)",""],["unpackqw","Win32::Registry::API","Win32/Registry/API.html#method-i-unpackqw","(qw)",""],["unregist","DRb::ExtServManager","DRb/ExtServManager.html#method-i-unregist","(name)",""],["unregister","DRb::ExtServManager","DRb/ExtServManager.html#method-i-unregister","(name)",""],["unregister_command","Gem::CommandManager","Gem/CommandManager.html#method-i-unregister_command","(command)","<p>Unregister the Symbol <code>command</code> as a gem command.\n"],["unresolved_deps","Gem::Specification","Gem/Specification.html#method-c-unresolved_deps","()","<p>DOC: This method needs documented or nodoc’d\n"],["unresolved_specs","Gem::Specification","Gem/Specification.html#method-c-unresolved_specs","()",""],["unsafe_load","Psych","Psych.html#method-c-unsafe_load","(yaml, filename: nil, fallback: false, symbolize_names: false, freeze: false, strict_integer: false)","<p>Load <code>yaml</code> in to a Ruby data structure.  If multiple documents are provided, the object contained in the …\n"],["unsafe_load_file","Psych","Psych.html#method-c-unsafe_load_file","(filename, **kwargs)","<p>Load the document contained in <code>filename</code>.  Returns the yaml contained in <code>filename</code> as a Ruby object, or …\n"],["unscan","StringScanner","StringScanner.html#method-i-unscan","()","<p>Sets the scan pointer to the previous position.  Only one previous position is remembered, and it changes …\n"],["unset_api_key!","Gem::ConfigFile","Gem/ConfigFile.html#method-i-unset_api_key-21","()","<p>Remove the +~/.gem/credentials+ file to clear all the current sessions.\n"],["unshift","Array","Array.html#method-i-unshift","(*args)","<p>Prepends the given <code>objects</code> to <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">unshift</span>(<span class=\"ruby-value\">:bam</span>, <span class=\"ruby-value\">:bat</span>) <span class=\"ruby-comment\"># =&gt; [:bam, :bat, :foo, ...</span>\n</pre>\n"],["unshift","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-unshift","(token)",""],["unstruct","Fiddle::CStruct","Fiddle/CStruct.html#method-i-unstruct","(value)",""],["untaint","Pathname","Pathname.html#method-i-untaint","()","<p>Returns pathname.  This method is deprecated and will be removed in Ruby 3.2.\n"],["untrace_var","Kernel","Kernel.html#method-i-untrace_var","(*args)","<p>Removes tracing for the specified command on the given global variable and returns <code>nil</code>. If no command …\n"],["unused","Zlib::GzipReader","Zlib/GzipReader.html#method-i-unused","()","<p>Returns the rest of the data which had read for parsing gzip format, or <code>nil</code> if the whole gzip file is …\n"],["unused_unwind_options","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-unused_unwind_options","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#unused_unwind_options)\n"],["unwind_for_conflict","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-unwind_for_conflict","()","<p>Unwinds the states stack because a conflict has been encountered @return [void]\n"],["unwind_options_for_requirements","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-unwind_options_for_requirements","(binding_requirements)","<p>@param [Array&lt;Object&gt;] binding_requirements array of requirements that combine to create a conflict …\n"],["unwinding_to_primary_requirement?","Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails","Gem/Resolver/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-unwinding_to_primary_requirement-3F","()","<p>@return [Boolean] where the requirement of the state we’re unwinding\n\n<pre>to directly caused the conflict. ...</pre>\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::Action","Gem/Resolver/Molinillo/DependencyGraph/Action.html#method-i-up","(graph)","<p>Performs the action on the given graph. @param  [DependencyGraph] graph the graph to perform the action …\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-up","(graph)","<p>(see Action#up)\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-i-up","(graph)","<p>(see Action#up)\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html#method-i-up","(graph)","<p>(see Action#up)\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::Tag","Gem/Resolver/Molinillo/DependencyGraph/Tag.html#method-i-up","(graph)","<p>(see Action#up)\n"],["upcase","String","String.html#method-i-upcase","(*args)","<p>Returns a string containing the upcased characters in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;Hello World!&#39;</span> <span class=\"ruby-comment\"># =&gt; &quot;Hello World!&quot;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">upcase</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["upcase","Symbol","Symbol.html#method-i-upcase","(*args)","<p>Equivalent to <code>sym.to_s.upcase.to_sym</code>.\n<p>See String#upcase.\n"],["upcase!","String","String.html#method-i-upcase-21","(*args)","<p>Upcases the characters in <code>self</code>; returns <code>self</code> if any changes were made, <code>nil</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;Hello World!&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["upcase_word","Reline::LineEditor","Reline/LineEditor.html#method-i-upcase_word","(key)",""],["update","CGI::Session","CGI/Session.html#method-i-update","()","<p>Store session data on the server.  For some session storage types, this is a no-op.\n"],["update","CGI::Session::FileStore","CGI/Session/FileStore.html#method-i-update","()","<p>Save session state to the session’s FileStore file.\n"],["update","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-i-update","()","<p>Update session state.\n<p>A no-op.\n"],["update","CGI::Session::NullStore","CGI/Session/NullStore.html#method-i-update","()","<p>Update session state.\n<p>A no-op.\n"],["update","CGI::Session::PStore","CGI/Session/PStore.html#method-i-update","()","<p>Save session state to the session’s PStore file.\n"],["update","Digest::Base","Digest/Base.html#method-i-update","(p1)","<p>Update the digest using given <em>string</em> and return <code>self</code>.\n"],["update","Digest::Instance","Digest/Instance.html#method-i-update","(p1)","<p>Updates the digest using a given <em>string</em> and returns self.\n<p>The update() method and the left-shift operator …\n"],["update","Digest::SHA2","Digest/SHA2.html#method-i-update","(str)","<p>Update the digest using a given <em>string</em> and return self.\n"],["update","ENV","ENV.html#method-c-update","(*args)","<p>ENV.update is an alias for ENV.merge!.\n<p>Adds to ENV each key/value pair in the given <code>hash</code>; returns ENV: …\n"],["update","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-update","(current)","<p>Nothing can update the silent download reporter.\n"],["update","Gem::StreamUI::ThreadedDownloadReporter","Gem/StreamUI/ThreadedDownloadReporter.html#method-i-update","(bytes)","<p>Updates the threaded download reporter for the given number of <code>bytes</code>.\n"],["update","Hash","Hash.html#method-i-update","(*args)","<p>Merges each of <code>other_hashes</code> into <code>self</code>; returns <code>self</code>.\n<p>Each argument in <code>other_hashes</code> must be a Hash.\n<p>Method …\n"],["update","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-update","(p1, p2 = v2)","<p>Encrypts data in a streaming fashion. Hand consecutive blocks of data to the #update method in order …\n"],["update","OpenSSL::Digest","OpenSSL/Digest.html#method-i-update","(p1)","<p>Not every message digest can be computed in one single pass. If a message digest is to be computed from …\n"],["update","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-update","(p1)","<p>Returns <em>hmac</em> updated with the message to be authenticated. Can be called repeatedly with chunks of the …\n"],["update","Racc::ISet","Racc/ISet.html#method-i-update","(other)",""],["update","YAML::DBM","YAML/DBM.html#method-i-update","( hsh )","<p>Updates the database with multiple values from the specified object. Takes any object which implements …\n"],["update_a","Racc::ISet","Racc/ISet.html#method-i-update_a","(a)",""],["update_aliases","RDoc::ClassModule","RDoc/ClassModule.html#method-i-update_aliases","()","<p>Updates the child modules &amp; classes by replacing the ones that are aliases through a constant.\n<p>The …\n"],["update_cache?","Gem::Source","Gem/Source.html#method-i-update_cache-3F","()","<p>Returns true when it is possible and safe to update the cache directory.\n"],["update_checksum","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-update_checksum","()","<p>Updates the TarHeader’s checksum\n"],["update_extends","RDoc::ClassModule","RDoc/ClassModule.html#method-i-update_extends","()","<p>Deletes from #extends those whose module has been removed from the documentation.\n"],["update_gem","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_gem","(name, version = Gem::Requirement.default)",""],["update_gems","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_gems","(gems_to_update)",""],["update_includes","RDoc::ClassModule","RDoc/ClassModule.html#method-i-update_includes","()","<p>Deletes from #includes those whose module has been removed from the documentation.\n"],["update_index","Gem::Indexer","Gem/Indexer.html#method-i-update_index","()","<p>Perform an in-place update of the repository from newly added gems.\n"],["update_output_dir","RDoc::RDoc","RDoc/RDoc.html#method-i-update_output_dir","(op_dir, time, last = {})","<p>Update the flag file in an output directory.\n"],["update_parser_of_file","RDoc::Store","RDoc/Store.html#method-i-update_parser_of_file","(absolute_name, parser)",""],["update_rubygems","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_rubygems","()","<p>Update RubyGems software to the latest version.\n"],["update_scope","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-update_scope","(scope)",""],["update_specs_index","Gem::Indexer","Gem/Indexer.html#method-i-update_specs_index","(index, source, dest)","<p>Combines specs in <code>index</code> and <code>source</code> then writes out a new copy to <code>dest</code>.  For a latest index, does not …\n"],["update_suggestion","Gem::UpdateSuggestion","Gem/UpdateSuggestion.html#method-i-update_suggestion","()","<p>Message to promote available RubyGems update with related gem update command.\n"],["updated","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-i-updated","(message)","<p>Does not print <code>message</code> when updated as this object has taken a vow of silence.\n"],["updated","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-i-updated","(message)","<p>Prints out a dot and ignores <code>message</code>.\n"],["updated","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-i-updated","(message)","<p>Prints out the position relative to the total and the <code>message</code>.\n"],["upgrade_to_class","RDoc::Context","RDoc/Context.html#method-i-upgrade_to_class","(mod, class_type, enclosing)","<p>Upgrades NormalModule <code>mod</code> in <code>enclosing</code> to a <code>class_type</code>\n"],["upper","Win32::SSPI::SecurityHandle","Win32/SSPI/SecurityHandle.html#method-i-upper","()",""],["upto","Date","Date.html#method-i-upto","(p1)","<p>Equivalent to #step with arguments <code>max</code> and <code>1</code>.\n"],["upto","Integer","Integer.html#method-i-upto","(p1)","<p>Calls the given block with each integer value from <code>self</code> up to <code>limit</code>; returns <code>self</code>:\n\n<pre>a = []\n5.upto(10) {|i| ...</pre>\n"],["upto","String","String.html#method-i-upto","(p1, p2 = v2)","<p>With a block given, calls the block with each String value returned by successive calls to String#succ …\n"],["uptodate?","FileUtils","FileUtils.html#method-i-uptodate-3F","(new, old_list)","<p>Returns <code>true</code> if the file at path <code>new</code> is newer than all the files at paths in array <code>old_list</code>; <code>false</code> otherwise. …\n"],["uptodate?","FileUtils","FileUtils.html#method-c-uptodate-3F","(new, old_list)","<p>Returns <code>true</code> if the file at path <code>new</code> is newer than all the files at paths in array <code>old_list</code>; <code>false</code> otherwise. …\n"],["urandom","Random","Random.html#method-c-urandom","(p1)","<p>Returns a string, using platform providing features. Returned value is expected to be a cryptographically …\n"],["uri","DRb","DRb.html#method-i-uri","()","<p>Get the URI defining the local dRuby space.\n<p>This is the URI of the current server.  See #current_server …\n"],["uri","DRb","DRb.html#method-c-uri","()","<p>Get the URI defining the local dRuby space.\n<p>This is the URI of the current server.  See #current_server …\n"],["uri_option","DRb::DRbProtocol","DRb/DRbProtocol.html#method-i-uri_option","(uri, config, first=true)","<p>Parse <code>uri</code> into a [uri, option] pair.\n<p>The DRbProtocol module asks each registered protocol in turn to try …\n"],["uri_option","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-uri_option","(uri, config, first=true)","<p>Parse <code>uri</code> into a [uri, option] pair.\n<p>The DRbProtocol module asks each registered protocol in turn to try …\n"],["url_encode","ERB::Util","ERB/Util.html#method-i-url_encode","(s)","<p>A utility method for encoding the String <em>s</em> as a URL.\n\n<pre>require &quot;erb&quot;\ninclude ERB::Util\n\nputs url_encode(&quot;Programming ...</pre>\n"],["url_encode","ERB::Util","ERB/Util.html#method-c-url_encode","(s)","<p>A utility method for encoding the String <em>s</em> as a URL.\n\n<pre>require &quot;erb&quot;\ninclude ERB::Util\n\nputs url_encode(&quot;Programming ...</pre>\n"],["urlsafe_base64","Random::Formatter","Random/Formatter.html#method-i-urlsafe_base64","(n=nil, padding=false)","<p>Generate a random URL-safe base64 string.\n<p>The argument <em>n</em> specifies the length, in bytes, of the random …\n"],["urlsafe_decode64","Base64","Base64.html#method-i-urlsafe_decode64","(str)","<p>Returns the Base64-decoded version of <code>str</code>. This method complies with “Base 64 Encoding with URL and …\n"],["urlsafe_encode64","Base64","Base64.html#method-i-urlsafe_encode64","(bin, padding: true)","<p>Returns the Base64-encoded version of <code>bin</code>. This method complies with “Base 64 Encoding with URL and …\n"],["usage","Gem::Command","Gem/Command.html#method-i-usage","()","<p>Override to display the usage for an individual gem command.\n<p>The text “[options]” is automatically …\n"],["use_gemdeps","Gem","Gem.html#method-c-use_gemdeps","(path = nil)","<p>Looks for a gem dependency file at <code>path</code> and activates the gems in the file if found.  If the file is …\n"],["use_headers?","CSV::Parser","CSV/Parser.html#method-i-use_headers-3F","()",""],["use_loader","IRB::Context","IRB/Context.html#method-i-use_loader","()","<p>Returns whether <code>irb</code>‘s own file reader method is used by <code>load</code>/<code>require</code> or not.\n<p>This mode is globally …\n"],["use_loader=","IRB::Context","IRB/Context.html#method-i-use_loader-3D","(opt)","<p>Sets <code>IRB.conf[:USE_LOADER]</code>\n<p>See #use_loader for more information.\n"],["use_loader?","IRB::Context","IRB/Context.html#method-i-use_loader-3F","()",""],["use_markup","RDoc::Parser","RDoc/Parser.html#method-c-use_markup","(content)","<p>If there is a <code>markup: parser_name</code> comment at the front of the file, use it to determine the parser.  …\n"],["use_paths","Gem","Gem.html#method-c-use_paths","(home, *paths)","<p>Use the <code>home</code> and <code>paths</code> values for Gem.dir and Gem.path.  Used mainly by the unit tests to provide environment …\n"],["use_ssl=","Net::HTTP","Net/HTTP.html#method-i-use_ssl-3D","(flag)","<p>Turn on/off SSL. This flag must be set before starting session. If you change use_ssl value after session …\n"],["use_ssl?","Net::HTTP","Net/HTTP.html#method-i-use_ssl-3F","()","<p>Returns true if SSL/TLS is being used with HTTP.\n"],["use_system_gems?","Bundler","Bundler.html#method-c-use_system_gems-3F","()",""],["use_tracer=","IRB::Context","IRB/Context.html#method-i-use_tracer-3D","(opt)",""],["use_ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-use_ui","(new_ui)","<p>Use <code>new_ui</code> for the duration of <code>block</code>.\n"],["use_ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-use_ui","(new_ui, &block)","<p>See DefaultUserInteraction::use_ui\n"],["usec","Time","Time.html#method-i-usec","()","<p>Returns the number of microseconds in the subseconds part of <code>self</code> in the range (0..999_999); lower-order …\n"],["used_modules","Module","Module.html#method-c-used_modules","()","<p>Returns an array of all modules used in the current scope. The ordering of modules in the resulting array …\n"],["used_refinements","Module","Module.html#method-c-used_refinements","()","<p>Returns an array of all modules used in the current scope. The ordering of modules in the resulting array …\n"],["useless=","Racc::Rule","Racc/Rule.html#method-i-useless-3D","(u)",""],["useless=","Racc::Sym","Racc/Sym.html#method-i-useless-3D","(f)",""],["useless?","Racc::Rule","Racc/Rule.html#method-i-useless-3F","()",""],["useless?","Racc::Sym","Racc/Sym.html#method-i-useless-3F","()",""],["useless_nonterminal_exist?","Racc::Grammar","Racc/Grammar.html#method-i-useless_nonterminal_exist-3F","()",""],["useless_rule_exist?","Racc::Grammar","Racc/Grammar.html#method-i-useless_rule_exist-3F","()",""],["user","URI::Generic","URI/Generic.html#method-i-user","()","<p>Returns the user component (without URI decoding).\n"],["user=","URI::Generic","URI/Generic.html#method-i-user-3D","(user)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["user_agent","Gem::Request","Gem/Request.html#method-i-user_agent","()",""],["user_bundle_path","Bundler","Bundler.html#method-c-user_bundle_path","(dir = \"home\")",""],["user_cache","Bundler","Bundler.html#method-c-user_cache","()",""],["user_dir","Gem","Gem.html#method-c-user_dir","()","<p>Path for gems in the user’s home directory\n"],["user_home","Bundler","Bundler.html#method-c-user_home","()",""],["user_home","Gem","Gem.html#method-c-user_home","()","<p>The home directory for the user.\n"],["userinfo","URI::Generic","URI/Generic.html#method-i-userinfo","()","<p>Returns the userinfo, either as ‘user’ or ‘user:password’.\n"],["userinfo=","URI::Generic","URI/Generic.html#method-i-userinfo-3D","(userinfo)","<p>Sets userinfo, argument is string like ‘name:pass’.\n"],["using","Module","Module.html#method-i-using","(p1)","<p>Import class refinements from <em>module</em> into the current class or module definition.\n"],["using_anon_cipher?","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-using_anon_cipher-3F","()",""],["using_rvargc?","GC","GC.html#method-c-using_rvargc-3F","()","<p>Returns true if using experimental feature Variable Width Allocation, false otherwise.\n"],["utc","Time","Time.html#method-c-utc","(*args)","<p>Returns a new Time object based the on given arguments, in the UTC timezone.\n<p>With one to seven arguments …\n"],["utc","Time","Time.html#method-i-utc","()","<p>Returns <code>self</code>, converted to the UTC timezone:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-01 00:00:00 -0600</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">utc?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["utc?","Time","Time.html#method-i-utc-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a time in UTC (GMT):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">now</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>\n<span class=\"ruby-comment\"># =&gt; 2022-08-18 10:24:13.5398485 -0500 ...</span>\n</pre>\n"],["utc_offset","Time","Time.html#method-i-utc_offset","()","<p>Returns the offset in seconds between the timezones of UTC and <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">utc_offset</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["utime","File","File.html#method-c-utime","(*args)","<p>Sets the access and modification times of each named file to the first two arguments. If a file is a …\n"],["utime","Pathname","Pathname.html#method-i-utime","(p1, p2)","<p>Update the access and modification times of the file.\n<p>See File.utime.\n"],["uuid","Random::Formatter","Random/Formatter.html#method-i-uuid","()","<p>Generate a random v4 UUID (Universally Unique IDentifier).\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;random/formatter&#39;</span>\n\n<span class=\"ruby-constant\">Random</span>.<span class=\"ruby-identifier\">uuid</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["valid?","IO::Buffer","IO/Buffer.html#method-i-valid-3F","()","<p>Returns whether the buffer data is accessible.\n<p>A buffer becomes invalid if it is a slice of another buffer …\n"],["valid?","SyntaxSuggest","SyntaxSuggest.html#method-c-valid-3F","(source)","<p>SyntaxSuggest.valid? [Private]\n<p>Returns truthy if a given input source is valid syntax\n\n<pre>SyntaxSuggest.valid?(&lt;&lt;~EOM) ...</pre>\n"],["valid?","SyntaxSuggest::CodeBlock","SyntaxSuggest/CodeBlock.html#method-i-valid-3F","()",""],["valid_civil?","Date","Date.html#method-c-valid_civil-3F","(p1, p2, p3, p4 = v4)","<p>Returns <code>true</code> if the arguments define a valid ordinal date, <code>false</code> otherwise:\n\n<pre>Date.valid_date?(2001, 2, ...</pre>\n"],["valid_commercial?","Date","Date.html#method-c-valid_commercial-3F","(p1, p2, p3, p4 = v4)","<p>Returns <code>true</code> if the arguments define a valid commercial date, <code>false</code> otherwise:\n\n<pre>Date.valid_commercial?(2001, ...</pre>\n"],["valid_date?","Date","Date.html#method-c-valid_date-3F","(p1, p2, p3, p4 = v4)","<p>Returns <code>true</code> if the arguments define a valid ordinal date, <code>false</code> otherwise:\n\n<pre>Date.valid_date?(2001, 2, ...</pre>\n"],["valid_email?","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-valid_email-3F","(email)",""],["valid_encoding?","String","String.html#method-i-valid_encoding-3F","()","<p>Returns <code>true</code> if <code>self</code> is encoded correctly, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;\\xc2\\xa1&quot;</span>.<span class=\"ruby-identifier\">force_encoding</span>(<span class=\"ruby-string\">&quot;UTF-8&quot;</span>).<span class=\"ruby-identifier\">valid_encoding?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["valid_jd?","Date","Date.html#method-c-valid_jd-3F","(p1, p2 = v2)","<p>Implemented for compatibility; returns <code>true</code> unless <code>jd</code> is invalid (i.e., not a Numeric).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">valid_jd?</span>(<span class=\"ruby-value\">2451944</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["valid_ordinal?","Date","Date.html#method-c-valid_ordinal-3F","(p1, p2, p3 = v3)","<p>Returns <code>true</code> if the arguments define a valid ordinal date, <code>false</code> otherwise:\n\n<pre>Date.valid_ordinal?(2001, ...</pre>\n"],["valid_uri?","Gem::Uri","Gem/Uri.html#method-i-valid_uri-3F","()",""],["valid_v6?","IPSocket","IPSocket.html#method-c-valid_v6-3F","(addr)",""],["valid_without?","SyntaxSuggest","SyntaxSuggest.html#method-c-valid_without-3F","(without_lines:, code_lines:)","<p>SyntaxSuggest.valid_without? [Private]\n<p>This will tell you if the ‘code_lines` would be valid if you removed …\n"],["validate","Gem::Specification","Gem/Specification.html#method-i-validate","(packaging = true, strict = false)","<p>Checks that the specification contains all required fields, and does a very basic sanity check.\n<p>Raises …\n"],["validate","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate","(strict = false)","<p>Does a sanity check on the specification.\n<p>Raises InvalidSpecificationException if the spec does not pass …\n"],["validate_array_attribute","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_array_attribute","(field)",""],["validate_array_attributes","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_array_attributes","()",""],["validate_attribute_present","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_attribute_present","(attribute)",""],["validate_authors_field","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_authors_field","()",""],["validate_dependencies","Gem::Specification","Gem/Specification.html#method-i-validate_dependencies","()",""],["validate_field_size","CSV::Parser","CSV/Parser.html#method-i-validate_field_size","(field)",""],["validate_lazy_metadata","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_lazy_metadata","()",""],["validate_licenses","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_licenses","()",""],["validate_licenses_length","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_licenses_length","()",""],["validate_metadata","Gem::Specification","Gem/Specification.html#method-i-validate_metadata","()",""],["validate_metadata","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_metadata","()","<p>Implementation for Specification#validate_metadata\n"],["validate_name","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_name","()",""],["validate_nil_attributes","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_nil_attributes","()",""],["validate_non_files","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_non_files","()",""],["validate_optional","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_optional","(strict)",""],["validate_permissions","Gem::Specification","Gem/Specification.html#method-i-validate_permissions","()",""],["validate_permissions","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_permissions","()","<p>Issues a warning for each file to be packaged which is world-readable.\n<p>Implementation for Specification#validate_permissions …\n"],["validate_platform","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_platform","()",""],["validate_require_paths","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_require_paths","()",""],["validate_required!","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_required-21","()","<p>Does a sanity check on the specification.\n<p>Raises InvalidSpecificationException if the spec does not pass …\n"],["validate_required_attributes","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_required_attributes","()",""],["validate_rubygems_version","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_rubygems_version","()",""],["validate_self_inclusion_in_files_list","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_self_inclusion_in_files_list","()",""],["validate_shebang_line_in","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_shebang_line_in","(executable)",""],["validate_specification_version","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_specification_version","()",""],["validate_strip_and_col_sep_options","CSV::Parser","CSV/Parser.html#method-i-validate_strip_and_col_sep_options","()","<p>This method verifies that there are no (obvious) ambiguities with the provided <code>col_sep</code> and <code>strip</code> parsing …\n"],["validate_values","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_values","()",""],["value","CGI::Cookie","CGI/Cookie.html#method-i-value","()","<p>Returns the value or list of values for this cookie.\n"],["value","CSV::InputRecordSeparator","CSV/InputRecordSeparator.html#method-c-value","()",""],["value","Fiddle::Importer","Fiddle/Importer.html#method-i-value","(ty, val=nil)",""],["value","Net::HTTPResponse","Net/HTTPResponse.html#method-i-value","()","<p>Raises an HTTP error if the response is not 2xx (success).\n"],["value","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-i-value","()",""],["value","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-value","()",""],["value","Rinda::Tuple","Rinda/Tuple.html#method-i-value","()","<p>Return the tuple itself\n"],["value","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-value","()","<p>Return the object which makes up the tuple itself: the Array or Hash.\n"],["value","Thread","Thread.html#method-i-value","()","<p>Waits for <code>thr</code> to complete, using #join, and returns its value or raises the exception which terminated …\n"],["value","UncaughtThrowError","UncaughtThrowError.html#method-i-value","()","<p>Return the return value which was called for.\n"],["value","WIN32OLE::Variable","WIN32OLE/Variable.html#method-i-value","()","<p>Returns value if value is exists. If the value does not exist, this method returns nil.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["value","WIN32OLE::Variant","WIN32OLE/Variant.html#method-i-value","()","<p>Returns Ruby object value from OLE variant.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">obj</span> = <span class=\"ruby-constant\">WIN32OLE_VARIANT</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-constant\">WIN32OLE</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">VARIANT</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">VT_BSTR</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["value=","CGI::Cookie","CGI/Cookie.html#method-i-value-3D","(val)","<p>Replaces the value of this cookie with a new value or list of values.\n"],["value=","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-i-value-3D","(p1)",""],["value=","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-value-3D","(p1)",""],["value=","WIN32OLE::Variant","WIN32OLE/Variant.html#method-i-value-3D","(p1)","<p>Sets variant value to val. If the val type does not match variant value type(vartype), then val is changed …\n"],["value?","ENV","ENV.html#method-c-value-3F","(p1)","<p>Returns <code>true</code> if <code>value</code> is the value for some environment variable name, <code>false</code> otherwise:\n\n<pre>ENV.replace(&#39;foo&#39; ...</pre>\n"],["value?","Hash","Hash.html#method-i-value-3F","(p1)","<p>Method #value? is an alias for #has_value?.\n<p>Returns <code>true</code> if <code>value</code> is a value in <code>self</code>, otherwise <code>false</code> …\n"],["value_der","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-value_der","()",""],["values","ENV","ENV.html#method-c-values","()","<p>Returns all environment variable values in an Array:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">values</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["values","Hash","Hash.html#method-i-values","()","<p>Returns a new Array containing all values in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">values</span> <span class=\"ruby-comment\"># =&gt; [0, 1, 2]</span>\n</pre>\n"],["values","IO::Buffer","IO/Buffer.html#method-i-values","(*args)","<p>Returns an array of values of <code>data_type</code> starting from <code>offset</code>.\n<p>If <code>count</code> is given, only <code>count</code> values will …\n"],["values","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-values","()","<p>Iterates over values and objects in a weakly referenced object\n"],["values","Struct","Struct.html#method-i-values","()","<p>Returns the values in <code>self</code> as an array:\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["values","Win32::Registry","Win32/Registry.html#method-i-values","()","<p>return values as an array\n"],["values","YAML::DBM","YAML/DBM.html#method-i-values","()","<p>Returns an array of values from the database.\n"],["values_at","Array","Array.html#method-i-values_at","(*args)","<p>Returns a new Array whose elements are the elements of <code>self</code> at the given Integer or Range <code>indexes</code>.\n<p>For …\n"],["values_at","CSV::Row","CSV/Row.html#method-i-values_at","(*headers_and_or_indices)",""],["values_at","CSV::Table","CSV/Table.html#method-i-values_at","(*indices_or_headers)","<p>If the access mode is <code>:row</code> or <code>:col_or_row</code>, and each argument is either an Integer or a Range, returns …\n"],["values_at","ENV","ENV.html#method-c-values_at","(*args)","<p>Returns an Array containing the environment variable values associated with the given names:\n\n<pre>ENV.replace(&#39;foo&#39; ...</pre>\n"],["values_at","Hash","Hash.html#method-i-values_at","(*args)","<p>Returns a new Array containing values for the given <code>keys</code>:\n\n<pre>h = {foo: 0, bar: 1, baz: 2}\nh.values_at(:baz, ...</pre>\n"],["values_at","MatchData","MatchData.html#method-i-values_at","(*args)","<p>Returns match and captures at the given <code>indexes</code>, which may include any mixture of:\n<p>Integers.\n<p>Ranges.\n"],["values_at","StringScanner","StringScanner.html#method-i-values_at","(*args)","<p>Returns the subgroups in the most recent match at the given indices. If nothing was priorly matched, …\n"],["values_at","Struct","Struct.html#method-i-values_at","(*args)","<p>Returns an array of values from <code>self</code>.\n<p>With integer arguments <code>integers</code> given, returns an array containing …\n"],["values_at","YAML::DBM","YAML/DBM.html#method-i-values_at","( *keys )","<p>Returns an array containing the values associated with the given keys.\n"],["variable_kind","WIN32OLE::Variable","WIN32OLE/Variable.html#method-i-variable_kind","()","<p>Returns variable kind string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;XlSheetType&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["variables","WIN32OLE::Type","WIN32OLE/Type.html#method-i-variables","()","<p>Returns array of WIN32OLE_VARIABLE objects which represent variables defined in OLE class.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["varkind","WIN32OLE::Variable","WIN32OLE/Variable.html#method-i-varkind","()","<p>Returns the number which represents variable kind.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object ...</pre>\n"],["vartype","WIN32OLE::Variant","WIN32OLE/Variant.html#method-i-vartype","()","<p>Returns OLE variant type.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">obj</span> = <span class=\"ruby-constant\">WIN32OLE_VARIANT</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;string&quot;</span>)\n<span class=\"ruby-identifier\">obj</span>.<span class=\"ruby-identifier\">vartype</span> <span class=\"ruby-comment\"># =&gt; WIN32OLE::VARIANT::VT_BSTR</span>\n</pre>\n"],["ver","OptionParser","OptionParser.html#method-i-ver","()","<p>Returns version string from program_name, version and release.\n"],["verbose","DRb::DRbServer","DRb/DRbServer.html#method-i-verbose","()","<p>Get whether the server is in verbose mode.\n<p>In verbose mode, failed calls are logged to stdout.\n"],["verbose","DRb::DRbServer","DRb/DRbServer.html#method-c-verbose","()","<p>Get the default value of the :verbose option.\n"],["verbose","Gem::UserInteraction","Gem/UserInteraction.html#method-i-verbose","(msg = nil)","<p>Calls <code>say</code> with <code>msg</code> or the results of the block if really_verbose is true.\n"],["verbose=","DRb::DRbServer","DRb/DRbServer.html#method-c-verbose-3D","(on)","<p>Set the default value of the :verbose option.\n<p>See #new().  The initial default value is false.\n"],["verbose=","DRb::DRbServer","DRb/DRbServer.html#method-i-verbose-3D","(v)","<p>Set whether to operate in verbose mode.\n<p>In verbose mode, failed calls are logged to stdout.\n"],["verbose?","IRB::Context","IRB/Context.html#method-i-verbose-3F","()","<p>Returns whether messages are displayed or not.\n"],["verify","Gem::Package","Gem/Package.html#method-i-verify","()","<p>Verifies that this gem:\n<p>Contains a valid gem specification\n<p>Contains a contents archive\n"],["verify","Gem::Package::Old","Gem/Package/Old.html#method-i-verify","()","<p>Raises an exception if a security policy that verifies data is active. Old format gems cannot be verified …\n"],["verify","Gem::Security::Policy","Gem/Security/Policy.html#method-i-verify","(chain, key = nil, digests = {}, signatures = {}, full_name = \"(unknown)\")","<p>For <code>full_name</code>, verifies the certificate <code>chain</code> is valid, the <code>digests</code> match the signatures <code>signatures</code> created …\n"],["verify","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-verify","()","<p>Make sure the trust directory exists.  If it does exist, make sure it’s actually a directory.  If …\n"],["verify","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-verify","(p1)","<p>Parameters\n<p><em>key</em> - the public key to be used for verifying the SPKI signature\n\n<p>Returns <code>true</code> if the signature …\n"],["verify","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-verify","(p1, p2, p3 = v3)","<p>Verifies the signature of the response using the given <em>certificates</em> and <em>store</em>. This works in the similar …\n"],["verify","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-verify","(p1, p2, p3 = v3)","<p>Verifies this request using the given <em>certificates</em> and <em>store</em>. <em>certificates</em> is an array of OpenSSL::X509::Certificate …\n"],["verify","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-verify","(p1, p2, p3 = v3, p4 = v4)",""],["verify","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-verify","(p1, p2, p3, p4 = v4)","<p>Verifies the <code>signature</code> for the <code>data</code> using a message digest algorithm <code>digest</code> and a public key <code>pkey</code>.\n<p>Returns …\n"],["verify","OpenSSL::Timestamp::Response","OpenSSL/Timestamp/Response.html#method-i-verify","(p1, p2, p3 = v3)","<p>Verifies a timestamp token by checking the signature, validating the certificate chain implied by tsa_certificate …\n"],["verify","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-verify","(p1)",""],["verify","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-verify","(p1)","<p>Verifies the signature of the certificate, with the public key <em>key</em>. <em>key</em> must be an instance of OpenSSL::PKey …\n"],["verify","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-verify","(p1)","<p>Checks that cert signature is made with PRIVversion of this PUBLIC ‘key’\n"],["verify","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-verify","(p1, p2 = v2)","<p>Performs a certificate verification on the OpenSSL::X509::Certificate <em>cert</em>.\n<p><em>chain</em> can be an array of  …\n"],["verify","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-verify","()","<p>Performs the certificate verification using the parameters set to <em>stctx</em>.\n<p>See also the man page X509_verify_cert …\n"],["verify_api_key","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-verify_api_key","(key)","<p>Retrieves the pre-configured API key <code>key</code> or terminates interaction with an error.\n"],["verify_callback=","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-verify_callback-3D","(p1)","<p>General callback for OpenSSL verify\n"],["verify_certificate","Gem::Request","Gem/Request.html#method-c-verify_certificate","(store_context)",""],["verify_certificate_identity","OpenSSL::SSL","OpenSSL/SSL.html#method-c-verify_certificate_identity","(cert, hostname)",""],["verify_certificate_identity","OpenSSL::SSL","OpenSSL/SSL.html#method-i-verify_certificate_identity","(cert, hostname)",""],["verify_certificate_message","Gem::Request","Gem/Request.html#method-c-verify_certificate_message","(error_number, cert)",""],["verify_compaction_references","GC","GC.html#method-c-verify_compaction_references","(toward: nil, double_heap: false, expand_heap: false)","<p>Verify compaction reference consistency.\n<p>This method is implementation specific.  During compaction, objects …\n"],["verify_entry","Gem::Package","Gem/Package.html#method-i-verify_entry","(entry)","<p>Verifies <code>entry</code> in a .gem file.\n"],["verify_files","Gem::Package","Gem/Package.html#method-i-verify_files","(gem)","<p>Verifies the files of the <code>gem</code>\n"],["verify_internal_consistency","GC","GC.html#method-c-verify_internal_consistency","()","<p>Verify internal consistency.\n<p>This method is implementation specific. Now this method checks generational …\n"],["verify_pss","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-verify_pss","(p1, p2, p3, p4 = {})","<p>Verifies <em>data</em> using the Probabilistic Signature Scheme (RSA-PSS).\n<p>The return value is <code>true</code> if the signature …\n"],["verify_raw","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-verify_raw","(p1, p2, p3, p4 = v4)","<p>Verifies the <code>signature</code> for the <code>data</code> using a public key <code>pkey</code>. Unlike #verify, this method will not hash …\n"],["verify_recover","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-verify_recover","(p1, p2, p3 = v3)","<p>Recovers the signed data from <code>signature</code> using a public key <code>pkey</code>. Not all signature algorithms support …\n"],["verify_result","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-verify_result","()","<p>Returns the result of the peer certificates verification.  See verify(1) for error values and descriptions. …\n"],["verify_signatures","Gem::Security::Policy","Gem/Security/Policy.html#method-i-verify_signatures","(spec, digests, signatures)","<p>Extracts the certificate chain from the <code>spec</code> and calls #verify to ensure the signatures and certificate …\n"],["verify_spec","Gem::Installer","Gem/Installer.html#method-i-verify_spec","()",""],["verify_transient_heap_internal_consistency","GC","GC.html#method-c-verify_transient_heap_internal_consistency","()",""],["version","ERB","ERB.html#method-c-version","()","<p>Returns revision information for the erb.rb module.\n"],["version","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-version","()","<p>Version of the gem\n"],["version","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-version","()","<p>The version of this activation request’s specification\n"],["version","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-version","()","<p>The version of the gem for this specification.\n"],["version","Gem::UnsatisfiableDependencyError","Gem/UnsatisfiableDependencyError.html#method-i-version","()","<p>The Requirement of the unresolved dependency (not Version).\n"],["version","Gem::Version","Gem/Version.html#method-i-version","()","<p>A string representation of this Version.\n"],["version","IRB","IRB.html#method-c-version","()","<p>Returns the current version of IRB, including release version and last updated date.\n"],["version","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-i-version","()","<p>Returns the version of this request. <code>1</code> is the default value.\n"],["version","OpenSSL::Timestamp::TokenInfo","OpenSSL/Timestamp/TokenInfo.html#method-i-version","()","<p>Returns the version number of the token info. With compliant servers, this value should be <code>1</code> if present. …\n"],["version","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-version","()",""],["version","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-version","()",""],["version","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-version","()",""],["version","OptionParser","OptionParser.html#method-i-version","()","<p>Version\n"],["version","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-i-version","()","<p>Returns the type library version.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tlib</span> = <span class=\"ruby-constant\">WIN32OLE_TYPELIB</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["version=","Gem::Specification","Gem/Specification.html#method-i-version-3D","(version)","<p>Set the version to <code>version</code>, potentially also setting required_rubygems_version if <code>version</code> indicates it …\n"],["version=","OpenSSL::Timestamp::Request","OpenSSL/Timestamp/Request.html#method-i-version-3D","(p1)","<p>Sets the version number for this Request. This should be <code>1</code> for compliant servers.\n"],["version=","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-version-3D","(p1)",""],["version=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-version-3D","(p1)",""],["version=","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-version-3D","(p1)",""],["version_1_2","Net::HTTP","Net/HTTP.html#method-c-version_1_2","()","<p>Returns <code>true</code>; retained for compatibility.\n"],["version_1_2?","Net::HTTP","Net/HTTP.html#method-c-version_1_2-3F","()","<p>Returns <code>true</code>; retained for compatibility.\n"],["vertex_named","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-vertex_named","(name)","<p>@param [String] name @return [Vertex,nil] the vertex with the given name\n"],["vhid","Socket::Ifaddr","Socket/Ifaddr.html#method-i-vhid","()","<p>Returns the vhid address of <em>ifaddr</em>. nil is returned if there is no vhid.\n"],["vi_add","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_add","(key)",""],["vi_add_at_eol","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_add_at_eol","(key)",""],["vi_backward_word","Reline::Unicode","Reline/Unicode.html#method-c-vi_backward_word","(line, byte_pointer)",""],["vi_big_backward_word","Reline::Unicode","Reline/Unicode.html#method-c-vi_big_backward_word","(line, byte_pointer)",""],["vi_big_forward_end_word","Reline::Unicode","Reline/Unicode.html#method-c-vi_big_forward_end_word","(line, byte_pointer)",""],["vi_big_forward_word","Reline::Unicode","Reline/Unicode.html#method-c-vi_big_forward_word","(line, byte_pointer)",""],["vi_change_meta","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_change_meta","(key, arg: 1)",""],["vi_command_mode","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_command_mode","(key)",""],["vi_delete_meta","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_delete_meta","(key, arg: 1)",""],["vi_delete_prev_char","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_delete_prev_char","(key)",""],["vi_editing_mode","Readline","Readline.html#method-c-vi_editing_mode","()","<p>Specifies VI editing mode. See the manual of GNU Readline for details of VI editing mode.\n<p>Raises NotImplementedError …\n"],["vi_editing_mode","Reline::Core","Reline/Core.html#method-i-vi_editing_mode","()",""],["vi_editing_mode?","Readline","Readline.html#method-c-vi_editing_mode-3F","()","<p>Returns true if vi mode is active. Returns false if not.\n<p>Raises NotImplementedError if the using readline …\n"],["vi_editing_mode?","Reline::Core","Reline/Core.html#method-i-vi_editing_mode-3F","()",""],["vi_end_big_word","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_end_big_word","(key, arg: 1, inclusive: false)",""],["vi_end_of_transmission","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_end_of_transmission","(key)",""],["vi_end_word","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_end_word","(key, arg: 1, inclusive: false)",""],["vi_eof_maybe","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_eof_maybe","(key)",""],["vi_first_print","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_first_print","(key)",""],["vi_first_print","Reline::Unicode","Reline/Unicode.html#method-c-vi_first_print","(line)",""],["vi_forward_end_word","Reline::Unicode","Reline/Unicode.html#method-c-vi_forward_end_word","(line, byte_pointer)",""],["vi_forward_word","Reline::Unicode","Reline/Unicode.html#method-c-vi_forward_word","(line, byte_pointer, drop_terminate_spaces = false)",""],["vi_histedit","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_histedit","(key)",""],["vi_insert","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_insert","(key)",""],["vi_insert_at_bol","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_insert_at_bol","(key)",""],["vi_join_lines","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_join_lines","(key, arg: 1)",""],["vi_kill_line_prev","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_kill_line_prev","(key)","<p>Editline &mdash; <code>vi-kill-line-prev</code> (vi: <code>Ctrl-U</code>) Delete the string from the beginning  of the edit buffer to the …\n"],["vi_list_or_eof","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_list_or_eof","(key)",""],["vi_movement_mode","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_movement_mode","(key)",""],["vi_next_big_word","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_next_big_word","(key, arg: 1)",""],["vi_next_char","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_next_char","(key, arg: 1, inclusive: false)",""],["vi_next_word","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_next_word","(key, arg: 1)",""],["vi_paste_next","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_paste_next","(key, arg: 1)",""],["vi_paste_prev","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_paste_prev","(key, arg: 1)",""],["vi_prev_big_word","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_prev_big_word","(key, arg: 1)",""],["vi_prev_char","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_prev_char","(key, arg: 1)",""],["vi_prev_word","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_prev_word","(key, arg: 1)",""],["vi_replace_char","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_replace_char","(key, arg: 1)",""],["vi_search_next","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_search_next","(key)",""],["vi_search_prev","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_search_prev","(key)",""],["vi_to_column","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_to_column","(key, arg: 0)",""],["vi_to_history_line","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_to_history_line","(key)",""],["vi_to_next_char","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_to_next_char","(key, arg: 1, inclusive: false)",""],["vi_to_prev_char","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_to_prev_char","(key, arg: 1)",""],["vi_yank","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_yank","(key, arg: 1)",""],["vi_zero","Reline::LineEditor","Reline/LineEditor.html#method-i-vi_zero","(key)",""],["visibility=","RDoc::Options","RDoc/Options.html#method-i-visibility-3D","(visibility)","<p>Sets the minimum visibility of a documented method.\n<p>Accepts <code>:public</code>, <code>:protected</code>, <code>:private</code>, <code>:nodoc</code>, or …\n"],["visible?","SyntaxSuggest::CodeLine","SyntaxSuggest/CodeLine.html#method-i-visible-3F","()","<p>Means the line was marked as “invisible” Confusingly, “empty” lines are visible…they …\n"],["visible?","WIN32OLE::Method","WIN32OLE/Method.html#method-i-visible-3F","()","<p>Returns true if the method is public.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-constant\">WIN32OLE_TYPE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Microsoft Excel 9.0 Object Library&#39;</span>, <span class=\"ruby-string\">&#39;Workbooks&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["visible?","WIN32OLE::Type","WIN32OLE/Type.html#method-i-visible-3F","()","<p>Returns true if the OLE class is public.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["visible?","WIN32OLE::Typelib","WIN32OLE/Typelib.html#method-i-visible-3F","()","<p>Returns true if the type library information is not hidden. If wLibFlags of TLIBATTR is 0 or LIBFLAG_FRESTRICTED …\n"],["visible?","WIN32OLE::Variable","WIN32OLE/Variable.html#method-i-visible-3F","()","<p>Returns true if the variable is public.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["visible_lines","SyntaxSuggest::CodeBlock","SyntaxSuggest/CodeBlock.html#method-i-visible_lines","()",""],["visit","Psych::Visitors::Visitor","Psych/Visitors/Visitor.html#method-i-visit","(target)",""],["visit_Array","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Array","(o)",""],["visit_BasicObject","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_BasicObject","(o)",""],["visit_BigDecimal","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_BigDecimal","(o)",""],["visit_Class","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Class","(o)",""],["visit_Complex","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Complex","(o)",""],["visit_Date","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Date","(o)",""],["visit_DateTime","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_DateTime","(o)",""],["visit_Delegator","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Delegator","(o)",""],["visit_Encoding","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Encoding","(o)",""],["visit_Enumerator","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Enumerator","(o)",""],["visit_Exception","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Exception","(o)",""],["visit_FalseClass","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_FalseClass","(o)",""],["visit_Float","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Float","(o)",""],["visit_Hash","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Hash","(o)",""],["visit_Integer","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Integer","(o)",""],["visit_Module","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Module","(o)",""],["visit_NameError","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_NameError","(o)",""],["visit_NilClass","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_NilClass","(o)",""],["visit_Object","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Object","(o)",""],["visit_Psych_Nodes_Alias","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-visit_Psych_Nodes_Alias","(o)",""],["visit_Psych_Nodes_Alias","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Alias","(o)",""],["visit_Psych_Nodes_Alias","Psych::Visitors::NoAliasRuby","Psych/Visitors/NoAliasRuby.html#method-i-visit_Psych_Nodes_Alias","(o)",""],["visit_Psych_Nodes_Alias","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Alias","(o)",""],["visit_Psych_Nodes_Document","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-visit_Psych_Nodes_Document","(o)",""],["visit_Psych_Nodes_Document","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Document","(o)",""],["visit_Psych_Nodes_Document","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Document","(o)",""],["visit_Psych_Nodes_Mapping","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-visit_Psych_Nodes_Mapping","(o)",""],["visit_Psych_Nodes_Mapping","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Mapping","(o)",""],["visit_Psych_Nodes_Mapping","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Mapping","(o)",""],["visit_Psych_Nodes_Scalar","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-visit_Psych_Nodes_Scalar","(o)",""],["visit_Psych_Nodes_Scalar","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Scalar","(o)",""],["visit_Psych_Nodes_Scalar","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Scalar","(o)",""],["visit_Psych_Nodes_Sequence","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-visit_Psych_Nodes_Sequence","(o)",""],["visit_Psych_Nodes_Sequence","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Sequence","(o)",""],["visit_Psych_Nodes_Sequence","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Sequence","(o)",""],["visit_Psych_Nodes_Stream","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-visit_Psych_Nodes_Stream","(o)",""],["visit_Psych_Nodes_Stream","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Stream","(o)",""],["visit_Psych_Nodes_Stream","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Stream","(o)",""],["visit_Psych_Omap","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Psych_Omap","(o)",""],["visit_Psych_Set","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Psych_Set","(o)",""],["visit_Range","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Range","(o)",""],["visit_Rational","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Rational","(o)",""],["visit_Regexp","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Regexp","(o)",""],["visit_String","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-i-visit_String","(str)",""],["visit_String","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_String","(o)",""],["visit_Struct","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Struct","(o)",""],["visit_Symbol","Psych::Visitors::RestrictedYAMLTree","Psych/Visitors/RestrictedYAMLTree.html#method-i-visit_Symbol","(sym)",""],["visit_Symbol","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Symbol","(o)",""],["visit_Time","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Time","(o)",""],["visit_TrueClass","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_TrueClass","(o)",""],["visit_array_subclass","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_array_subclass","(o)",""],["visit_block","SyntaxSuggest::UnvisitedLines","SyntaxSuggest/UnvisitedLines.html#method-i-visit_block","(block)",""],["visit_hash_subclass","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_hash_subclass","(o)",""],["wait","IO","IO.html#method-i-wait","(*args)","<p>Waits until the IO becomes ready for the specified events and returns the subset of events that become …\n"],["wait","MonitorMixin::ConditionVariable","MonitorMixin/ConditionVariable.html#method-i-wait","(timeout = nil)","<p>Releases the lock held in the associated monitor and waits; reacquires the lock on wakeup.\n<p>If <code>timeout</code> …\n"],["wait","Process","Process.html#method-c-wait","(*args)","<p>Waits for a child process to exit, returns its process id, and sets <code>$?</code> to a Process::Status object containing …\n"],["wait","Process::Status","Process/Status.html#method-c-wait","(*args)","<p>Waits for a child process to exit and returns a Process::Status object containing information on that …\n"],["wait","Rinda::WaitTemplateEntry","Rinda/WaitTemplateEntry.html#method-i-wait","()",""],["wait","Thread::ConditionVariable","Thread/ConditionVariable.html#method-i-wait","(p1, p2 = v2)","<p>Releases the lock held in <code>mutex</code> and waits; reacquires the lock on wakeup.\n<p>If <code>timeout</code> is given, this method …\n"],["wait2","Process","Process.html#method-c-wait2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact semantics) and returns an array containing …\n"],["wait_for_cond","Monitor","Monitor.html#method-i-wait_for_cond","(p1, p2)",""],["wait_for_continue","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-wait_for_continue","(sock, ver)","<p>Waits up to the continue timeout for a response from the server provided we’re speaking HTTP 1.1 …\n"],["wait_priority","IO","IO.html#method-i-wait_priority","(*args)","<p>Waits until IO is priority and returns a truthy value or a falsy value when times out. Priority data …\n"],["wait_readable","IO","IO.html#method-i-wait_readable","(*args)","<p>Waits until IO is readable and returns a truthy value, or a falsy value when times out.  Returns a truthy …\n"],["wait_until","MonitorMixin::ConditionVariable","MonitorMixin/ConditionVariable.html#method-i-wait_until","()","<p>Calls wait repeatedly until the given block yields a truthy value.\n"],["wait_while","MonitorMixin::ConditionVariable","MonitorMixin/ConditionVariable.html#method-i-wait_while","()","<p>Calls wait repeatedly while the given block yields a truthy value.\n"],["wait_writable","IO","IO.html#method-i-wait_writable","(*args)","<p>Waits until IO is writable and returns a truthy value or a falsy value when times out.\n<p>You must require …\n"],["waitall","Process","Process.html#method-c-waitall","()","<p>Waits for all children, returning an array of <em>pid</em>/<em>status</em> pairs (where <em>status</em> is a Process::Status object). …\n"],["waitpid","Process","Process.html#method-c-waitpid","(*args)","<p>Waits for a child process to exit, returns its process id, and sets <code>$?</code> to a Process::Status object containing …\n"],["waitpid2","Process","Process.html#method-c-waitpid2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact semantics) and returns an array containing …\n"],["wakeup","Thread","Thread.html#method-i-wakeup","()","<p>Marks a given thread as eligible for scheduling, however it may still remain blocked on I/O.\n<p><strong>Note:</strong> This …\n"],["warn","Kernel","Kernel.html#method-i-warn","(*msgs, uplevel: nil, category: nil)","<p>If warnings have been disabled (for example with the <code>-W0</code> flag), does nothing.  Otherwise, converts each …\n"],["warn","Logger","Logger.html#method-i-warn","(progname = nil, &block)","<p>Equivalent to calling #add with severity <code>Logger::WARN</code>.\n"],["warn","OptionParser","OptionParser.html#method-i-warn","(mesg = $!)",""],["warn","RDoc::Options","RDoc/Options.html#method-i-warn","(message)","<p>Displays a warning using Kernel#warn if we’re being verbose\n"],["warn","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-warn","(message)","<p>Prints <code>message</code> to +$stderr+ unless we’re being quiet\n"],["warn","Ripper","Ripper.html#method-i-warn","(fmt, *args)","<p>This method is called when weak warning is produced by the parser. <code>fmt</code> and <code>args</code> is printf style.\n"],["warn","Syslog::Logger","Syslog/Logger.html#method-i-warn","","<p>Logs a <code>message</code> at the warn (syslog notice) log level, or logs the message returned from the block.\n"],["warn","Warning","Warning.html#method-i-warn","(p1, p2 = {})","<p>Writes warning message <code>msg</code> to $stderr. This method is called by Ruby for all emitted warnings. A <code>category</code> …\n"],["warn!","Logger","Logger.html#method-i-warn-21","()","<p>Sets the log level to Logger::WARN. See Log Level.\n"],["warn?","Logger","Logger.html#method-i-warn-3F","()","<p>Returns <code>true</code> if the log level allows entries with severity Logger::WARN to be written, <code>false</code> otherwise. …\n"],["warn_cannot_uninstall_default_gems","Gem::Uninstaller","Gem/Uninstaller.html#method-i-warn_cannot_uninstall_default_gems","(specs)",""],["warning","Ripper","Ripper.html#method-i-warning","(fmt, *args)","<p>This method is called when strong warning is produced by the parser. <code>fmt</code> and <code>args</code> is printf style.\n"],["warning_without_suggested_alternatives","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-warning_without_suggested_alternatives","()",""],["wday","Date","Date.html#method-i-wday","()","<p>Returns the day of week in range (0..6); Sunday is 0:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">wday</span> <span class=\"ruby-comment\"># =&gt; 6</span>\n</pre>\n"],["wday","Time","Time.html#method-i-wday","()","<p>Returns the integer day of the week for <code>self</code>, in range (0..6), with Sunday as zero.\n\n<pre>t = Time.new(2000, ...</pre>\n"],["weakref_alive?","WeakRef","WeakRef.html#method-i-weakref_alive-3F","()","<p>Returns true if the referenced object is still alive.\n"],["wednesday?","Date","Date.html#method-i-wednesday-3F","()","<p>Returns <code>true</code> if <code>self</code> is a Wednesday, <code>false</code> otherwise.\n"],["wednesday?","Time","Time.html#method-i-wednesday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Wednesday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">5</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-05 ...</span>\n</pre>\n"],["when_invoked","Gem::Command","Gem/Command.html#method-i-when_invoked","(&block)","<p>Call the given block when invoked.\n<p>Normal command invocations just executes the <code>execute</code> method of the …\n"],["which","Bundler","Bundler.html#method-c-which","(executable)",""],["which_to_update","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-which_to_update","(highest_installed_gems, gem_names)",""],["whole_buffer","Reline::LineEditor","Reline/LineEditor.html#method-i-whole_buffer","()",""],["whole_lines","Reline::LineEditor","Reline/LineEditor.html#method-i-whole_lines","(index: @line_index, line: @line)",""],["why","SyntaxSuggest::ExplainSyntax","SyntaxSuggest/ExplainSyntax.html#method-i-why","(miss)","<p>Converts a missing string to an human understandable explanation.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">explain</span>.<span class=\"ruby-identifier\">why</span>(<span class=\"ruby-string\">&quot;}&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &quot;Unmatched ...</span>\n</pre>\n"],["why_not_ok?","Gem::DependencyList","Gem/DependencyList.html#method-i-why_not_ok-3F","(quick = false)",""],["width=","Reline::LineEditor::Dialog","Reline/LineEditor/Dialog.html#method-i-width-3D","(v)",""],["width_for","PP","PP.html#method-c-width_for","(out)","<p>Returns the usable width for <code>out</code>. As the width of <code>out</code>:\n<p>If <code>out</code> is assigned to a tty device, its width is …\n"],["win32_last_error","Fiddle","Fiddle.html#method-c-win32_last_error","()","<p>Returns the last win32 <code>Error</code> of the current executing <code>Thread</code> or nil if none\n"],["win32_last_error=","Fiddle","Fiddle.html#method-c-win32_last_error-3D","(error)","<p>Sets the last win32 <code>Error</code> of the current executing <code>Thread</code> to <code>error</code>\n"],["win32_last_socket_error","Fiddle","Fiddle.html#method-c-win32_last_socket_error","()","<p>Returns the last win32 socket <code>Error</code> of the current executing <code>Thread</code> or nil if none\n"],["win32_last_socket_error=","Fiddle","Fiddle.html#method-c-win32_last_socket_error-3D","(error)","<p>Sets the last win32 socket <code>Error</code> of the current executing <code>Thread</code> to <code>error</code>\n"],["win64?","Win32::Registry::API","Win32/Registry/API.html#method-i-win64-3F","()",""],["win?","Reline::ANSI","Reline/ANSI.html#method-c-win-3F","()",""],["win?","Reline::GeneralIO","Reline/GeneralIO.html#method-c-win-3F","()",""],["win?","Reline::Windows","Reline/Windows.html#method-c-win-3F","()",""],["win_legacy_console?","Reline::Windows","Reline/Windows.html#method-c-win_legacy_console-3F","()",""],["win_platform?","Gem","Gem.html#method-c-win_platform-3F","()","<p>Is this a windows platform?\n"],["win_target?","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-win_target-3F","()",""],["windows_stub_script","Gem::Installer","Gem/Installer.html#method-i-windows_stub_script","(bindir, bin_file_name)","<p>return the stub script text used to launch the true Ruby script\n"],["winsize","IO","IO.html#method-i-winsize","()","<p>Returns console size.\n<p>You must require ‘io/console’ to use this method.\n"],["winsize","IRB::InputMethod","IRB/InputMethod.html#method-i-winsize","()",""],["winsize=","IO","IO.html#method-i-winsize-3D","(p1)","<p>Tries to set console size.  The effect depends on the platform and the running environment.\n<p>You must require …\n"],["with","Data","Data.html#method-i-with","(p1 = {})","<p>Returns a shallow copy of <code>self</code> — the instance variables of <code>self</code> are copied, but not the objects they …\n"],["with","OptionParser","OptionParser.html#method-c-with","(*args, &block)","<p>Initializes a new instance and evaluates the optional block in context of the instance. Arguments <code>args</code> …\n"],["with_clean_env","Bundler","Bundler.html#method-c-with_clean_env","()","<p>@deprecated Use ‘with_unbundled_env` instead\n"],["with_config","MakeMakefile","MakeMakefile.html#method-i-with_config","(config, default=nil)","<p>Tests for the presence of a <code>--with-</code><em>config</em> or <code>--without-</code><em>config</em> option.  Returns <code>true</code> if the with option …\n"],["with_env","Bundler","Bundler.html#method-c-with_env","(env)","<p>@param env [Hash]\n"],["with_index","Enumerator","Enumerator.html#method-i-with_index","(*args)","<p>Iterates the given block for each element with an index, which starts from <code>offset</code>.  If no block is given, …\n"],["with_index","Enumerator::Lazy","Enumerator/Lazy.html#method-i-with_index","(p1 = v1)","<p>If a block is given, returns a lazy enumerator that will iterate over the given block for each element …\n"],["with_no_such_dependency_error_handling","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-with_no_such_dependency_error_handling","()","<p>Ensures any raised {NoSuchDependencyError} has its {NoSuchDependencyError#required_by} set. @yield\n"],["with_object","Enumerator","Enumerator.html#method-i-with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object, <code>obj</code>, and returns <code>obj</code>\n<p>If no block is …\n"],["with_original_env","Bundler","Bundler.html#method-c-with_original_env","()","<p>Run block with environment present before Bundler was activated\n"],["with_redacted_password","Gem::Uri","Gem/Uri.html#method-i-with_redacted_password","()",""],["with_redacted_user","Gem::Uri","Gem/Uri.html#method-i-with_redacted_user","()",""],["with_response","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-with_response","(response, error_prefix = nil)","<p>If <code>response</code> is an HTTP Success (2XX) response, yields the response if a block was given or shows the …\n"],["with_unbundled_env","Bundler","Bundler.html#method-c-with_unbundled_env","()","<p>Run block with all bundler-related variables removed\n"],["without_circular_ref","IRB::Color","IRB/Color.html#method-c-without_circular_ref","(obj, seen:, &block)",""],["wordy","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-i-wordy","()","<p>A wordy description of the error.\n"],["wordy","Gem::SourceFetchProblem","Gem/SourceFetchProblem.html#method-i-wordy","()","<p>An English description of the error.\n"],["workspaces","IRB::Context","IRB/Context.html#method-i-workspaces","()","<p>WorkSpaces in the current stack\n"],["world_readable?","File","File.html#method-c-world_readable-3F","(p1)","<p>If <em>file_name</em> is readable by others, returns an integer representing the file permission bits of <em>file_name</em> …\n"],["world_readable?","File::Stat","File/Stat.html#method-i-world_readable-3F","()","<p>If <em>stat</em> is readable by others, returns an integer representing the file permission bits of <em>stat</em>. Returns …\n"],["world_readable?","FileTest","FileTest.html#method-i-world_readable-3F","(p1)","<p>If <em>file_name</em> is readable by others, returns an integer representing the file permission bits of <em>file_name</em> …\n"],["world_readable?","Pathname","Pathname.html#method-i-world_readable-3F","()","<p>See FileTest.world_readable?.\n"],["world_writable?","File","File.html#method-c-world_writable-3F","(p1)","<p>If <em>file_name</em> is writable by others, returns an integer representing the file permission bits of <em>file_name</em> …\n"],["world_writable?","File::Stat","File/Stat.html#method-i-world_writable-3F","()","<p>If <em>stat</em> is writable by others, returns an integer representing the file permission bits of <em>stat</em>. Returns …\n"],["world_writable?","FileTest","FileTest.html#method-i-world_writable-3F","(p1)","<p>If <em>file_name</em> is writable by others, returns an integer representing the file permission bits of <em>file_name</em> …\n"],["world_writable?","Pathname","Pathname.html#method-i-world_writable-3F","()","<p>See FileTest.world_writable?.\n"],["wrap","Gem::Command","Gem/Command.html#method-i-wrap","(text, width)","<p>Wraps <code>text</code> to <code>width</code>\n"],["wrap","Gem::Package::DigestIO","Gem/Package/DigestIO.html#method-c-wrap","(io, digests)","<p>Wraps <code>io</code> and updates digest for each of the digest algorithms in the <code>digests</code> Hash.  Returns the digests …\n"],["wrap","JSON::JSONError","JSON/JSONError.html#method-c-wrap","(exception)",""],["wrap","RDoc::Text","RDoc/Text.html#method-i-wrap","(txt, line_len = 76)","<p>Wraps <code>txt</code> to <code>line_len</code>\n"],["wrap","Zlib::GzipFile","Zlib/GzipFile.html#method-c-wrap","(*args)","<p>Creates a GzipReader or GzipWriter associated with <code>io</code>, passing in any necessary extra options, and executes …\n"],["wrap_method_call","Reline::LineEditor","Reline/LineEditor.html#method-i-wrap_method_call","(method_symbol, method_obj, key, with_operator = false)",""],["writable?","File","File.html#method-c-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective user and group id of this process. See eaccess(3). …\n"],["writable?","File::Stat","File/Stat.html#method-i-writable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the effective user id of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">writable?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["writable?","FileTest","FileTest.html#method-i-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective user and group id of this process. See eaccess(3). …\n"],["writable?","Pathname","Pathname.html#method-i-writable-3F","()","<p>See FileTest.writable?.\n"],["writable_real?","File","File.html#method-c-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user and group id of this process. See access(3). …\n"],["writable_real?","File::Stat","File/Stat.html#method-i-writable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the real user id of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">writable_real?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["writable_real?","FileTest","FileTest.html#method-i-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user and group id of this process. See access(3). …\n"],["writable_real?","Pathname","Pathname.html#method-i-writable_real-3F","()","<p>See FileTest.writable_real?.\n"],["write","ARGF","ARGF.html#method-i-write","(p1)","<p>Writes <em>string</em> if inplace mode.\n"],["write","Gem::ConfigFile","Gem/ConfigFile.html#method-i-write","()","<p>Writes out this config file, replacing its source.\n"],["write","Gem::Package::DigestIO","Gem/Package/DigestIO.html#method-i-write","(data)","<p>Writes <code>data</code> to the underlying IO and updates the digests\n"],["write","Gem::Package::TarWriter::BoundedStream","Gem/Package/TarWriter/BoundedStream.html#method-i-write","(data)","<p>Writes <code>data</code> onto the IO, raising a FileOverflow exception if the number of bytes will be more than #limit …\n"],["write","Gem::Package::TarWriter::RestrictedStream","Gem/Package/TarWriter/RestrictedStream.html#method-i-write","(data)","<p>Writes <code>data</code> onto the IO\n"],["write","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-write","()","<p>Writes the lock file alongside the gem dependencies file\n"],["write","Gem::Security","Gem/Security.html#method-c-write","(pemmable, path, permissions = 0600, passphrase = nil, cipher = KEY_CIPHER)","<p>Writes <code>pemmable</code>, which must respond to <code>to_pem</code> to <code>path</code> with the given <code>permissions</code>. If passed <code>cipher</code> and …\n"],["write","IO","IO.html#method-c-write","(*args)","<p>Opens the stream, writes the given <code>data</code> to it, and closes the stream; returns the number of bytes written. …\n"],["write","IO","IO.html#method-i-write","(*args)","<p>Writes each of the given <code>objects</code> to <code>self</code>, which must be opened for writing (see Access Modes); returns …\n"],["write","IO::Buffer","IO/Buffer.html#method-i-write","(*args)","<p>Writes <code>length</code> bytes from buffer into <code>io</code>, starting at <code>offset</code> in the buffer. If an error occurs, return …\n"],["write","Logger::LogDevice","Logger/LogDevice.html#method-i-write","(message)",""],["write","Net::WriteAdapter","Net/WriteAdapter.html#method-i-write","(str)",""],["write","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-write","(*s)","<p>Writes <em>s</em> to the stream.  If the argument is not a String it will be converted using <code>.to_s</code> method.  Returns …\n"],["write","Pathname","Pathname.html#method-i-write","(p1 = v1, p2 = v2, p3 = v3)","<p>Writes <code>contents</code> to the file.\n<p>See File.write.\n"],["write","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-write","(tuple, sec=nil)","<p>Adds <code>tuple</code>\n"],["write","Rinda::TupleSpaceProxy","Rinda/TupleSpaceProxy.html#method-i-write","(tuple, sec=nil)","<p>Adds <code>tuple</code> to the proxied TupleSpace.  See TupleSpace#write.\n"],["write","StringIO","StringIO.html#method-i-write","(*args)","<p>Appends the given string to the underlying buffer string. The stream must be opened for writing.  If …\n"],["write","Win32::Registry","Win32/Registry.html#method-i-write","(name, type, data)","<p>Write data to a registry value named name. When name is nil, write to the ‘default’ value.\n<p>type is …\n"],["write","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-write","(*args)","<p>Same as IO.\n"],["write_bin","Win32::Registry","Win32/Registry.html#method-i-write_bin","(name, value)","<p>Write value to a registry value named name.\n<p>The value type is REG_SZ(write_s), REG_DWORD(write_i), or …\n"],["write_binary","Gem","Gem.html#method-c-write_binary","(path, data)","<p>Safely write a file in binary mode on all platforms.\n"],["write_build_info_file","Gem::Installer","Gem/Installer.html#method-i-write_build_info_file","()","<p>Writes the file containing the arguments for building this gem’s extensions.\n"],["write_cache_file","Gem::Installer","Gem/Installer.html#method-i-write_cache_file","()","<p>Writes the .gem file to the cache directory\n"],["write_default_spec","Gem::Installer","Gem/Installer.html#method-i-write_default_spec","()","<p>Writes the full .gemspec specification (in Ruby) to the gem home’s specifications/default directory. …\n"],["write_deffile","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-write_deffile","(dest_dir, crate_name)",""],["write_header","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-write_header","(sock, ver, path)",""],["write_headers?","CSV","CSV.html#method-i-write_headers-3F","()","<p>Returns the value that determines whether headers are to be written; used for generating; see {Option …\n"],["write_i","Win32::Registry","Win32/Registry.html#method-i-write_i","(name, value)","<p>Write value to a registry value named name.\n<p>The value type is REG_SZ(write_s), REG_DWORD(write_i), or …\n"],["write_log","Racc::Grammar","Racc/Grammar.html#method-i-write_log","(path)",""],["write_nonblock","IO","IO.html#method-i-write_nonblock","(buf, exception: true)","<p>Writes the given string to <em>ios</em> using the write(2) system call after O_NONBLOCK is set for the underlying …\n"],["write_nonblock","IO::generic_writable","IO/generic_writable.html#method-i-write_nonblock","(p1, p2 = {})",""],["write_nonblock","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-write_nonblock","(s, exception: true)","<p>Writes <em>s</em> in the non-blocking manner.\n<p>If there is buffered data, it is flushed first.  This may block. …\n"],["write_options","RDoc::Options","RDoc/Options.html#method-i-write_options","()","<p>Writes the YAML file .rdoc_options to the current directory containing the parsed options.\n"],["write_random_file","OpenSSL::Random","OpenSSL/Random.html#method-c-write_random_file","(p1)","<p>Writes a number of random generated bytes (currently 1024) to <em>filename</em> which can be used to initialize …\n"],["write_s","Win32::Registry","Win32/Registry.html#method-i-write_s","(name, value)","<p>Write value to a registry value named name.\n<p>The value type is REG_SZ(write_s), REG_DWORD(write_i), or …\n"],["write_services","Rinda::RingServer","Rinda/RingServer.html#method-i-write_services","()","<p>Creates threads that pick up UDP packets and passes them to do_write for decoding.\n"],["write_smime","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-c-write_smime","(p1, p2 = v2, p3 = v3)",""],["write_spec","Gem::Installer","Gem/Installer.html#method-i-write_spec","()","<p>Writes the .gemspec specification (in Ruby) to the gem home’s specifications directory.\n"],["write_timeout=","Net::HTTP","Net/HTTP.html#method-i-write_timeout-3D","(sec)","<p>Sets the write timeout, in seconds, for <code>self</code> to integer <code>sec</code>; the initial value is 60.\n<p>Argument <code>sec</code> must …\n"],["writer","CSV","CSV.html#method-i-writer","()",""],["writer_fields_converter","CSV","CSV.html#method-i-writer_fields_converter","()",""],["writer_options","CSV","CSV.html#method-i-writer_options","()",""],["wtime2time","Win32::Registry","Win32/Registry.html#method-c-wtime2time","(wtime)","<p>Convert 64-bit FILETIME integer into Time object.\n"],["xmlschema","Date","Date.html#method-c-xmlschema","(p1 = v1, p2 = v2, p3 = {})","<p>Returns a new Date object with values parsed from <code>string</code>, which should be a valid XML date format:\n\n<pre>d = ...</pre>\n"],["xmlschema","Date","Date.html#method-i-xmlschema","()","<p>Equivalent to #strftime with argument <code>&#39;%Y-%m-%d&#39;</code> (or its shorthand form <code>&#39;%F&#39;</code>);\n\n<pre>Date.new(2001, ...</pre>\n"],["xmlschema","DateTime","DateTime.html#method-c-xmlschema","(p1 = v1, p2 = v2, p3 = {})","<p>Creates a new DateTime object by parsing from a string according to some typical XML Schema formats. …\n"],["xmlschema","DateTime","DateTime.html#method-i-xmlschema","(*args)","<p>This method is equivalent to strftime(‘%FT%T%:z’). The optional argument <code>n</code> is the number of digits …\n"],["xmlschema","Time","Time.html#method-c-xmlschema","(time)","<p>Parses <code>time</code> as a dateTime defined by the XML Schema and converts it to a Time object.  The format is …\n"],["xmlschema","Time","Time.html#method-i-xmlschema","(fraction_digits=0)","<p>Returns a string which represents the time as a dateTime defined by XML Schema:\n\n<pre>CCYY-MM-DDThh:mm:ssTZD ...</pre>\n"],["xmp","Object","Object.html#method-i-xmp","(exps, bind = nil)","<p>A convenience method that’s only available when the you require the IRB::XMP standard library.\n<p>Creates …\n"],["xor!","IO::Buffer","IO/Buffer.html#method-i-xor-21","(p1)","<p>Modify the source buffer in place by applying the binary XOR operation to the source, using the mask, …\n"],["y","Kernel","Kernel.html#method-i-y","(*objects)","<p>An alias for Psych.dump_stream meant to be used with IRB.\n"],["yaml","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-yaml","(io = nil, options = {})","<p>Convert this node to YAML.\n<p>See also Psych::Visitors::Emitter\n"],["yaml_tag","Object","Object.html#method-c-yaml_tag","(url)",""],["yank","Reline::KillRing","Reline/KillRing.html#method-i-yank","()",""],["yank","Reline::LineEditor","Reline/LineEditor.html#method-i-yank","(key)",""],["yank_api_request","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-yank_api_request","(method, version, platform, api)",""],["yank_gem","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-yank_gem","(version, platform)",""],["yank_pop","Reline::KillRing","Reline/KillRing.html#method-i-yank_pop","()",""],["yank_pop","Reline::LineEditor","Reline/LineEditor.html#method-i-yank_pop","(key)",""],["yday","Date","Date.html#method-i-yday","()","<p>Returns the day of the year, in range (1..366):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">yday</span> <span class=\"ruby-comment\"># =&gt; 34</span>\n</pre>\n"],["yday","Time","Time.html#method-i-yday","()","<p>Returns the integer day of the year of <code>self</code>, in range (1..366).\n\n<pre>Time.new(2000, 1, 1).yday   # =&gt; 1\nTime.new(2000, ...</pre>\n"],["year","Date","Date.html#method-i-year","()","<p>Returns the year:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">year</span>    <span class=\"ruby-comment\"># =&gt; 2001</span>\n(<span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>) <span class=\"ruby-operator\">-</span> <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">year</span> <span class=\"ruby-comment\"># =&gt; 0</span>\n</pre>\n"],["year","Time","Time.html#method-i-year","()","<p>Returns the integer year for <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>)\n<span class=\"ruby-comment\"># =&gt; 2000-01-02 03:04:05 +000006 ...</span>\n</pre>\n"],["yield","Fiber","Fiber.html#method-c-yield","(*args)","<p>Yields control back to the context that resumed the fiber, passing along any arguments that were passed …\n"],["yield","Proc","Proc.html#method-i-yield","(*args)","<p>Invokes the block, setting the block’s parameters to the values in <em>params</em> using something close to …\n"],["yield","Ractor","Ractor.html#method-c-yield","(obj, move: false)","<p>Send a message to the current ractor’s outgoing port to be consumed by #take.\n\n<pre>r = Ractor.new {Ractor.yield ...</pre>\n"],["yield_self","Kernel","Kernel.html#method-i-yield_self","()","<p>Yields self to the block and returns the result of the block.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;my string&quot;</span>.<span class=\"ruby-identifier\">yield_self</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">s</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">upcase</span> }  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["yields_directive","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-yields_directive","(foo, bar)","<p>The <code>:yields:</code> directive overrides the actual yield found in the Ruby code.\n<p>Click on the calling sequence …\n"],["yyaccept","Racc::Parser","Racc/Parser.html#method-i-yyaccept","()","<p>Exit parser. Return value is <code>Symbol_Value_Stack[0]</code>.\n"],["yydebug","Ripper","Ripper.html#method-i-yydebug","()","<p>Get yydebug.\n"],["yydebug=","Ripper","Ripper.html#method-i-yydebug-3D","(p1)","<p>Set yydebug.\n"],["yyerrok","Racc::Parser","Racc/Parser.html#method-i-yyerrok","()","<p>Leave error recovering mode.\n"],["yyerror","Racc::Parser","Racc/Parser.html#method-i-yyerror","()","<p>Enter error recovering mode. This method does not call #on_error.\n"],["yylex","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-yylex","(&block)",""],["yylex0","Racc::GrammarFileScanner","Racc/GrammarFileScanner.html#method-i-yylex0","()",""],["zcat","Zlib::GzipReader","Zlib/GzipReader.html#method-c-zcat","(*args)","<p>Decompresses all gzip data in the <code>io</code>, handling multiple gzip streams until the end of the <code>io</code>.  There …\n"],["zero?","BigDecimal","BigDecimal.html#method-i-zero-3F","()","<p>Returns True if the value is zero.\n"],["zero?","File","File.html#method-c-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["zero?","File::Stat","File/Stat.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a zero-length file; <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">zero?</span>   <span class=\"ruby-comment\">#=&gt; false</span>\n</pre>\n"],["zero?","FileTest","FileTest.html#method-i-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["zero?","Float","Float.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <code>float</code> is 0.0.\n"],["zero?","Integer","Integer.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <code>int</code> has a zero value.\n"],["zero?","Numeric","Numeric.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <code>zero</code> has a zero value, <code>false</code> otherwise.\n<p>Of the Core and Standard Library classes, only …\n"],["zero?","OpenSSL::BN","OpenSSL/BN.html#method-i-zero-3F","()",""],["zero?","Pathname","Pathname.html#method-i-zero-3F","()","<p>See FileTest.zero?.\n"],["zip","Array","Array.html#method-i-zip","(*args)","<p>When no block given, returns a new Array <code>new_array</code> of size <code>self.size</code> whose elements are Arrays.\n<p>Each nested …\n"],["zip","Enumerable","Enumerable.html#method-i-zip","(*args)","<p>With no block given, returns a new array <code>new_array</code> of size self.size whose elements are arrays. Each …\n"],["zip","Enumerator::Lazy","Enumerator/Lazy.html#method-i-zip","(*args)","<p>Like Enumerable#zip, but chains operation to be lazy-evaluated. However, if a block is given to zip, …\n"],["zip?","RDoc::Parser","RDoc/Parser.html#method-c-zip-3F","(file)","<p>Checks if <code>file</code> is a zip file in disguise.  Signatures from www.garykessler.net/library/file_sigs.html …\n"],["zlib_version","Zlib","Zlib.html#method-c-zlib_version","()","<p>Returns the string which represents the version of zlib library.\n"],["zone","DateTime","DateTime.html#method-i-zone","()","<p>Returns the timezone.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-string\">&#39;04pm+0730&#39;</span>).<span class=\"ruby-identifier\">zone</span>          <span class=\"ruby-comment\">#=&gt; &quot;+07:30&quot;</span>\n</pre>\n"],["zone","Time","Time.html#method-i-zone","()","<p>Returns the string name of the time zone for <code>self</code>:\n\n<pre>Time.utc(2000, 1, 1).zone # =&gt; &quot;UTC&quot;\nTime.new(2000, ...</pre>\n"],["zone_id","IPAddr","IPAddr.html#method-i-zone_id","()","<p>Returns the IPv6 zone identifier, if present. Raises InvalidAddressError if not an IPv6 address.\n"],["zone_id=","IPAddr","IPAddr.html#method-i-zone_id-3D","(zid)","<p>Returns the IPv6 zone identifier, if present. Raises InvalidAddressError if not an IPv6 address.\n"],["zone_offset","Time","Time.html#method-c-zone_offset","(zone, year=self.now.year)","<p>Return the number of seconds the specified time zone differs from UTC.\n<p>Numeric time zones that include …\n"],["|","Array","Array.html#method-i-7C","(p1)","<p>Returns the union of <code>array</code> and Array <code>other_array</code>; duplicates are removed; order is preserved; items are …\n"],["|","FalseClass","FalseClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or <code>false</code>; <code>true</code> otherwise.\n"],["|","IO::Buffer","IO/Buffer.html#method-i-7C","(p1)","<p>Generate a new buffer the same size as the source by applying the binary OR operation to the source, …\n"],["|","IPAddr","IPAddr.html#method-i-7C","(other)","<p>Returns a new ipaddr built by bitwise OR.\n"],["|","Integer","Integer.html#method-i-7C","(p1)","<p>Bitwise OR; each bit in the result is 1 if either corresponding bit in <code>self</code> or <code>other</code> is 1, 0 otherwise: …\n"],["|","JSON::GenericObject","JSON/GenericObject.html#method-i-7C","(other)",""],["|","NilClass","NilClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or <code>false</code>; <code>true</code> otherwise.\n"],["|","Racc::Rule","Racc/Rule.html#method-i-7C","(x)",""],["|","Racc::Sym","Racc/Sym.html#method-i-7C","(x)",""],["|","Ripper::Lexer::State","Ripper/Lexer/State.html#method-i-7C","(i)",""],["|","Set","Set.html#method-i-7C","(enum)","<p>Returns a new set built by merging the set and the elements of the\ngiven enumerable object.\n\n<pre>Set[1, 2, ...</pre>\n"],["|","TrueClass","TrueClass.html#method-i-7C","(p1)","<p>Or—Returns <code>true</code>. As <em>obj</em> is an argument to a method call, it is always evaluated; there is no short-circuit …\n"],["~","IO::Buffer","IO/Buffer.html#method-i-~","()","<p>Generate a new buffer the same size as the source by applying the binary NOT operation to the source. …\n"],["~","IPAddr","IPAddr.html#method-i-~","()","<p>Returns a new ipaddr built by bitwise negation.\n"],["~","Integer","Integer.html#method-i-~","()","<p>One’s complement: returns a number where each bit is flipped.\n<p>Inverts the bits in an Integer. As integers …\n"],["~","Regexp","Regexp.html#method-i-~","()","<p>Equivalent to <code><em>rxp</em> =~ $_</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$_</span> = <span class=\"ruby-string\">&quot;input data&quot;</span>\n<span class=\"ruby-operator\">~</span> <span class=\"ruby-regexp\">/at/</span> <span class=\"ruby-comment\"># =&gt; 7</span>\n</pre>\n"],["COPYING","","COPYING.html","","<p>Ruby is copyrighted free software by Yukihiro Matsumoto &lt;matz@netlab.jp&gt;. You can redistribute …\n"],["COPYING.ja","","COPYING_ja.html","","<p>本プログラムはフリーソフトウェアです．2-clause BSDL または以下に示す条件で本プログラムを再配布できます 2-clause BSDLについてはBSDLファイルを参照して下さい．\n<p>複製は制限なく自由です． …\n"],["LEGAL","","LEGAL.html","","<p>LEGAL NOTICE INFORMATION\n<p>All the files in this distribution are covered under either the Ruby’s license …\n"],["NEWS","","NEWS_md.html","","<p>NEWS for Ruby 3.2.0\n<p>This document is a list of user-visible feature changes\nsince the <strong>3.1.0</strong> release, except ...\n"],["NEWS-1.8.7","","NEWS/NEWS-1_8_7.html","","<p>NEWS for Ruby 1.8.7\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-1.9.1","","NEWS/NEWS-1_9_1.html","","<p>NEWS for Ruby 1.9.1\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-1.9.2","","NEWS/NEWS-1_9_2.html","","<p>NEWS for Ruby 1.9.2\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-1.9.3","","NEWS/NEWS-1_9_3.html","","<p>NEWS for Ruby 1.9.3\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.0.0","","NEWS/NEWS-2_0_0.html","","<p>NEWS for Ruby 2.0.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.1.0","","NEWS/NEWS-2_1_0.html","","<p>NEWS for Ruby 2.1.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.2.0","","NEWS/NEWS-2_2_0.html","","<p>NEWS for Ruby 2.2.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.3.0","","NEWS/NEWS-2_3_0.html","","<p>NEWS for Ruby 2.3.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.4.0","","NEWS/NEWS-2_4_0.html","","<p>NEWS for Ruby 2.4.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.5.0","","NEWS/NEWS-2_5_0.html","","<p>NEWS for Ruby 2.5.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.6.0","","NEWS/NEWS-2_6_0.html","","<p>NEWS for Ruby 2.6.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.7.0","","NEWS/NEWS-2_7_0.html","","<p>NEWS for Ruby 2.7.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-3.0.0","","NEWS/NEWS-3_0_0_md.html","","<p>NEWS for Ruby 3.0.0\n<p>This document is a list of user visible feature changes\nsince the <strong>2.7.0</strong> release, except ...\n"],["NEWS-3.1.0","","NEWS/NEWS-3_1_0_md.html","","<p>NEWS for Ruby 3.1.0\n<p>This document is a list of user-visible feature changes\nsince the <strong>3.0.0</strong> release, except ...\n"],["README.ja","","README_ja_md.html","","<p><img src=\"https://github.com/ruby/ruby/workflows/MinGW/badge.svg\">\n<img src=\"https://github.com/ruby/ruby/workflows/MJIT/badge.svg\"> ...\n"],["README","","README_md.html","","<p><img src=\"https://github.com/ruby/ruby/workflows/MinGW/badge.svg\">\n<img src=\"https://github.com/ruby/ruby/workflows/MJIT/badge.svg\"> ...\n"],["bsearch","","bsearch_rdoc.html","","<p>Binary Searching\n<p>A few Ruby methods support binary searching in a collection:\n<p>Array#bsearch &mdash; Returns an …\n"],["bug_triaging","","bug_triaging_rdoc.html","","<p>Bug Triaging Guide\n<p>This guide discusses recommendations for triaging bugs in Ruby’s bug tracker.\n<p>Bugs …\n"],["case_mapping","","case_mapping_rdoc.html","","<p>Case Mapping\n<p>Some string-oriented methods use case mapping.\n<p>In String:\n"],["character_selectors","","character_selectors_rdoc.html","","<p>Character Selectors\n<p>Character Selector\n<p>A <em>character</em> <em>selector</em> is a string argument accepted by certain Ruby …\n"],["command_injection","","command_injection_rdoc.html","","<p>Command Injection\n<p>Some Ruby core methods accept string data that includes text to be executed as a system …\n"],["contributing","","contributing_md.html","","<p>Contributing to Ruby\n<p>This guide outlines ways to get started with contributing to Ruby:\n<p>Reporting issues …\n"],["building_ruby","","contributing/building_ruby_md.html","","<p>Building Ruby\n<p>Quick start guide\n<p>Install the prerequisite dependencies for building the CRuby interpreter: ...\n"],["documentation_guide","","contributing/documentation_guide_md.html","","<p>Documentation Guide\n<p>This guide discusses recommendations for documenting\nclasses, modules, and methods ...\n"],["making_changes_to_ruby","","contributing/making_changes_to_ruby_md.html","","<p>Contributing a pull request\n<p>Code style\n<p>Here are some general rules to follow when writing Ruby and C code …\n"],["making_changes_to_stdlibs","","contributing/making_changes_to_stdlibs_md.html","","<p>Making Changes To Standard Libraries\n<p>Everything in the lib directory is mirrored from a standalone repository …\n"],["reporting_issues","","contributing/reporting_issues_md.html","","<p>Reporting Issues\n<p>Reporting security issues\n<p>If you’ve found a security vulnerability, please follow …\n"],["testing_ruby","","contributing/testing_ruby_md.html","","<p>Testing Ruby\n<p>Test suites\n<p>There are several test suites in the Ruby codebase:\n"],["dig_methods","","dig_methods_rdoc.html","","<p>Dig Methods\n<p>Ruby’s <code>dig</code> methods are useful for accessing nested data structures.\n<p>Consider this data: …\n"],["dtrace_probes","","dtrace_probes_rdoc.html","","<p>DTrace Probes\n<p>A list of DTrace probes and their functionality. “Module” and “Function” …\n"],["encodings","","encodings_rdoc.html","","<p>Encodings\n<p>The Basics\n<p>A character encoding, often shortened to <em>encoding</em>, is a mapping between:\n"],["extension.ja","","extension_ja_rdoc.html","","<p>Rubyの拡張ライブラリの作り方\n<p>Rubyの拡張ライブラリの作り方を説明します．\n<p>基礎知識\n"],["extension","","extension_rdoc.html","","<p>Creating Extension Libraries for Ruby\n<p>This document explains how to make extension libraries for Ruby …\n"],["fiber","","fiber_md.html","","<p>Fiber\n<p>Fibers provide a mechanism for cooperative concurrency.\n<p>Context Switching\n"],["format_specifications","","format_specifications_rdoc.html","","<p>Format Specifications\n<p>Several Ruby core classes have instance method <code>printf</code> or <code>sprintf</code>:\n<p>ARGF#printf\n"],["globals","","globals_rdoc.html","","<p>Pre-defined global variables\n<p>$! &mdash; The Exception object set by Kernel#raise.\n<p>$@ &mdash; The same as <code>$!.backtrace</code>. …\n"],["implicit_conversion","","implicit_conversion_rdoc.html","","<p>Implicit Conversions\n<p>Some Ruby methods accept one or more objects that can be either:\n<p><em>Of a given class</em> …\n"],["keywords","","keywords_rdoc.html","","<p>Keywords\n<p>The following keywords are used by Ruby.\n<p>__ENCODING__ &mdash; The script encoding of the current file. …\n"],["maintainers","","maintainers_rdoc.html","","<p>Maintainers\n<p>This page describes the current module, library, and extension maintainers of Ruby.\n<p>Module …\n"],["marshal","","marshal_rdoc.html","","<p>Marshal Format\n<p>The Marshal format is used to serialize ruby objects.  The format can store arbitrary objects …\n"],["memory_view","","memory_view_md.html","","<p>MemoryView\n<p>MemoryView provides the features to share multidimensional homogeneous arrays of\nfixed-size ...\n"],["argument_converters","","optparse/argument_converters_rdoc.html","","<p>Argument Converters\n<p>An option can specify that its argument is to be converted from the default String …\n"],["creates_option","","optparse/creates_option_rdoc.html","","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["option_params","","optparse/option_params_rdoc.html","","<p>Parameters for New Options\n<p>Option-creating methods in OptionParser accept arguments that determine the …\n"],["tutorial","","optparse/tutorial_rdoc.html","","<p>Tutorial\n<p>Why OptionParser?\n<p>When a Ruby program executes, it captures its command-line arguments and options …\n"],["packed_data","","packed_data_rdoc.html","","<p>Packed Data\n<p>Certain Ruby core methods deal with packing and unpacking data:\n<p>Method Array#pack: Formats …\n"],["ractor","","ractor_md.html","","<p>Ractor - Ruby’s Actor-like concurrent abstraction\n<p>Ractor is designed to provide a parallel execution …\n"],["regexp","","regexp_rdoc.html","","<p>Regular expressions (<em>regexp</em>s) are patterns which describe the contents of a string. They’re used …\n"],["security","","security_rdoc.html","","<p>Ruby Security\n<p>The Ruby programming language is large and complex and there are many security pitfalls …\n"],["signals","","signals_rdoc.html","","<p>Caveats for implementing Signal.trap callbacks\n<p>As with implementing signal handlers in C or most other …\n"],["standard_library","","standard_library_rdoc.html","","<p>Ruby Standard Library\n<p>The Ruby Standard Library is a vast collection of classes and modules that you can …\n"],["strftime_formatting","","strftime_formatting_rdoc.html","","<p>Formats for Dates and Times\n<p>Several Ruby time-related classes have instance method <code>strftime</code>, which returns …\n"],["syntax","","syntax_rdoc.html","","<p>Ruby Syntax\n<p>The Ruby syntax is large and is split up into the following sections:\n<p>Literals  &mdash; Numbers, Strings …\n"],["assignment","","syntax/assignment_rdoc.html","","<p>Assignment\n<p>In Ruby, assignment uses the <code>=</code> (equals sign) character.  This example assigns the number five …\n"],["calling_methods","","syntax/calling_methods_rdoc.html","","<p>Calling Methods\n<p>Calling a method sends a message to an object so it can perform some work.\n<p>In ruby you …\n"],["comments","","syntax/comments_rdoc.html","","<p>Code Comments\n<p>Ruby has two types of comments: inline and block.\n<p>Inline comments start with the <code>#</code> character …\n"],["control_expressions","","syntax/control_expressions_rdoc.html","","<p>Control Expressions\n<p>Ruby has a variety of ways to control execution.  All the expressions described here …\n"],["exceptions","","syntax/exceptions_rdoc.html","","<p>Exception Handling\n<p>Exceptions are rescued in a <code>begin</code>/<code>end</code> block:\n\n<pre>begin\n  # code that might raise\nrescue ...</pre>\n"],["literals","","syntax/literals_rdoc.html","","<p>Literals\n<p>Literals create objects you can use in your program.  Literals include:\n<p>Boolean and Nil Literals …\n"],["methods","","syntax/methods_rdoc.html","","<p>Methods\n<p>Methods implement the functionality of your program.  Here is a simple method definition:\n\n<pre>def one_plus_one ...</pre>\n"],["miscellaneous","","syntax/miscellaneous_rdoc.html","","<p>Miscellaneous Syntax\n<p>Ending an Expression\n<p>Ruby uses a newline as the end of an expression.  When ending …\n"],["modules_and_classes","","syntax/modules_and_classes_rdoc.html","","<p>Modules\n<p>Modules serve two purposes in Ruby, namespacing and mix-in functionality.\n<p>A namespace can be used …\n"],["pattern_matching","","syntax/pattern_matching_rdoc.html","","<p>Pattern matching\n<p>Pattern matching is a feature allowing deep matching of structured values: checking the …\n"],["precedence","","syntax/precedence_rdoc.html","","<p>Precedence\n<p>From highest to lowest, this is the precedence table for ruby.  High precedence operations …\n"],["refinements","","syntax/refinements_rdoc.html","","<p>Refinements\n<p>Due to Ruby’s open classes you can redefine or add functionality to existing classes. …\n"],["timezones","","timezones_rdoc.html","","<p>Timezones\n<p>Timezone Specifiers\n<p>Certain Time methods accept arguments that specify timezones:\n"],["README.win32","","win32/README_win32.html","","<p>How to build ruby using Visual C++\n<p>Requirement\n<p>Windows 7 or later.\n"]]}}